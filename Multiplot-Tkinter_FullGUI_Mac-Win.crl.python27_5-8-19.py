# -*- coding: utf-8 -*-# Welcome to Multiplot, written by Casey Luskin, using some small pieces of code written by Michiel de Kock, and some math borrowed from PmagPy# When code borrowed from other sources, see annotations.## Multiplot Technical Requirements:# Multiplot can run on any platform that can support Python 2.# As of December 2017, the latest version is Python 2.7.14  # To install the latest version of Python 2, visit: https://www.python.org/downloads/  # To install Python 2.7.14 visit: https://www.python.org/downloads/release/python-2714/## Multiplot requires the following Python libraries/modules which may not be pre-installed with Python 2:  # numpy  # matplotlib  # xlrd## To install these libraries, open a command terminal and navigate to the folder C:\Python27\Scripts# Then run the pip script. For example, you might run the following commands from within the Scripts folder:  # pip install numpy  # pip install matplotlib   # pip install xlrd  # (Remove the hash symbol in each case, obviously)## For support, please contact Casey Luskin at caseyl@uj.ac.za or casey.luskin@gmail.com# Python libraries needed for Multiplot:from __future__ import division, print_functionimport sysimport osimport platformimport reimport mathimport numpy as npimport ioimport base64from urllib2 import urlopenfrom os.path import dirnamefrom shutil import copy as shutilcopyfrom random import randintimport matplotlibmatplotlib.use('TkAgg')import matplotlib.pyplot as pltfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAggimport matplotlib.backends.backend_tkagg as tkaggfrom matplotlib.figure import Figurefrom mpl_toolkits.mplot3d.axes3d import Axes3Dimport matplotlib.patches as patchesfrom matplotlib import gridspecimport matplotlib.image as mpimgimport matplotlib.lines as mlinesfrom matplotlib.path import Pathimport matplotlib.colors as colorsimport matplotlib.mathtext as mathtextimport matplotlib.artist as artistimport scipy.statsimport Tkinter as tk1from Tkinter import Scalefrom pylab import *from tkColorChooser import askcolorfrom tkFileDialog import askopenfile, askopenfilename, asksaveasfilenameimport tkMessageBoximport tkFontfrom xlrd import open_workbookfrom operator import attrgetterfrom collections import Counter################ Constants ################maincanvaswidth = 1903maincanvasheight = 1010mainfigurewidth = 13.25mainfigureheight = 9.75degree_sign= u'\N{DEGREE SIGN}'uptriangle_sign = u'\N{BLACK UP-POINTING TRIANGLE}'downtriangle_sign = u'\N{BLACK DOWN-POINTING TRIANGLE}'lefttriangle_sign = u'\N{BLACK LEFT-POINTING TRIANGLE}'righttriangle_sign = u'\N{BLACK RIGHT-POINTING TRIANGLE}'square_sign = u'\N{BLACK SQUARE}'diamond_sign = u'\N{BLACK LOZENGE}'circle_sign = u'\N{BLACK CIRCLE}'star_sign = u'\N{BLACK STAR}'plus_sign = u'\N{PLUS SIGN}'x_sign = u'\N{MULTIPLICATION X}'heavy_x_sign = u'\N{HEAVY MULTIPLICATION X}'double_arrow = u'\N{LEFT RIGHT ARROW}'up_arrow = u'\N{UPWARDS ARROW}'down_arrow = u'\N{DOWNWARDS ARROW}'left_arrow = u'\N{LEFTWARDS ARROW}'right_arrow = u'\N{RIGHTWARDS ARROW}'great_equal_sign = u'\N{GREATER-THAN OR EQUAL TO}'less_equal_sign = u'\N{LESS-THAN OR EQUAL TO}'alpha_symbol = u'\N{GREEK SMALL LETTER ALPHA}'subscript9 = u'\N{SUBSCRIPT NINE}'subscript5 = u'\N{SUBSCRIPT FIVE}'bullet_symbol = u'\N{BULLET}'white_bullet_symbol = u'\N{WHITE BULLET}'copyright_symbol = u'\N{COPYRIGHT SIGN}'a95_word = "%s%s%s" % (alpha_symbol,subscript9,subscript5)# Most Color Values taken from https://www.webucator.com/blog/2015/03/python-color-constants-module/specialcolorset_short = ["BLACK","WHITE","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SILVER","GRAY","MAROON","OLIVE","GREEN","PURPLE","TEAL","NAVY","ORANGE"]specialcolorset = ["ALICEBLUE","ANTIQUEWHITE","ANTIQUEWHITE1","ANTIQUEWHITE2","ANTIQUEWHITE3","ANTIQUEWHITE4","AQUA","AQUAMARINE1","AQUAMARINE2","AQUAMARINE3","AQUAMARINE4","AZURE1","AZURE2","AZURE3","AZURE4",                   "BANANA","BEIGE","BISQUE1","BISQUE2","BISQUE3","BISQUE4","BLACK","BLANCHEDALMOND","BLUE","BLUE2","BLUE3","BLUE4","BLUEVIOLET","BRICK","BROWN","BROWN1","BROWN2","BROWN3","BROWN4","BURLYWOOD","BURLYWOOD1",                   "BURLYWOOD2","BURLYWOOD3","BURLYWOOD4","BURNTSIENNA","BURNTUMBER","CADETBLUE","CADETBLUE1","CADETBLUE2","CADETBLUE3","CADETBLUE4","CADMIUMORANGE","CADMIUMYELLOW","CARROT","CHARTREUSE1","CHARTREUSE2",                   "CHARTREUSE3","CHARTREUSE4","CHOCOLATE","CHOCOLATE1","CHOCOLATE2","CHOCOLATE3","CHOCOLATE4","COBALT","COBALTGREEN","COLDGREY","CORAL","CORAL1","CORAL2","CORAL3","CORAL4","CORNFLOWERBLUE","CORNSILK1",                   "CORNSILK2","CORNSILK3","CORNSILK4","CRIMSON","CYAN2","CYAN3","CYAN4","DARKGOLDENROD","DARKGOLDENROD1","DARKGOLDENROD2","DARKGOLDENROD3","DARKGOLDENROD4","DARKGRAY","DARKGREEN","DARKKHAKI","DARKOLIVEGREEN",                   "DARKOLIVEGREEN1","DARKOLIVEGREEN2","DARKOLIVEGREEN3","DARKOLIVEGREEN4","DARKORANGE","DARKORANGE1","DARKORANGE2","DARKORANGE3","DARKORANGE4","DARKORCHID","DARKORCHID1","DARKORCHID2","DARKORCHID3","DARKORCHID4",                   "DARKSALMON","DARKSEAGREEN","DARKSEAGREEN1","DARKSEAGREEN2","DARKSEAGREEN3","DARKSEAGREEN4","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGRAY1","DARKSLATEGRAY2","DARKSLATEGRAY3","DARKSLATEGRAY4","DARKTURQUOISE",                   "DARKVIOLET","DEEPPINK1","DEEPPINK2","DEEPPINK3","DEEPPINK4","DEEPSKYBLUE1","DEEPSKYBLUE2","DEEPSKYBLUE3","DEEPSKYBLUE4","DIMGRAY","DODGERBLUE1","DODGERBLUE2","DODGERBLUE3","DODGERBLUE4","EGGSHELL","EMERALDGREEN",                   "FIREBRICK","FIREBRICK1","FIREBRICK2","FIREBRICK3","FIREBRICK4","FLESH","FLORALWHITE","FORESTGREEN","GAINSBORO","GHOSTWHITE","GOLD1","GOLD2","GOLD3","GOLD4","GOLDENROD","GOLDENROD1","GOLDENROD2","GOLDENROD3",                   "GOLDENROD4","GRAY","GRAY1","GRAY10","GRAY11","GRAY12","GRAY13","GRAY14","GRAY15","GRAY16","GRAY17","GRAY18","GRAY19","GRAY2","GRAY20","GRAY21","GRAY22","GRAY23","GRAY24","GRAY25","GRAY26","GRAY27","GRAY28",                   "GRAY29","GRAY3","GRAY30","GRAY31","GRAY32","GRAY33","GRAY34","GRAY35","GRAY36","GRAY37","GRAY38","GRAY39","GRAY4","GRAY40","GRAY42","GRAY43","GRAY44","GRAY45","GRAY46","GRAY47","GRAY48","GRAY49","GRAY5",                   "GRAY50","GRAY51","GRAY52","GRAY53","GRAY54","GRAY55","GRAY56","GRAY57","GRAY58","GRAY59","GRAY6","GRAY60","GRAY61","GRAY62","GRAY63","GRAY64","GRAY65","GRAY66","GRAY67","GRAY68","GRAY69","GRAY7","GRAY70",                   "GRAY71","GRAY72","GRAY73","GRAY74","GRAY75","GRAY76","GRAY77","GRAY78","GRAY79","GRAY8","GRAY80","GRAY81","GRAY82","GRAY83","GRAY84","GRAY85","GRAY86","GRAY87","GRAY88","GRAY89","GRAY9","GRAY90","GRAY91",                   "GRAY92","GRAY93","GRAY94","GRAY95","GRAY97","GRAY98","GRAY99","GREEN","GREEN1","GREEN2","GREEN3","GREEN4","GREENYELLOW","HONEYDEW1","HONEYDEW2","HONEYDEW3","HONEYDEW4","HOTPINK","HOTPINK1","HOTPINK2","HOTPINK3",                   "HOTPINK4","INDIANRED","INDIANRED1","INDIANRED2","INDIANRED3","INDIANRED4","INDIGO","IVORY1","IVORY2","IVORY3","IVORY4","IVORYBLACK","KHAKI","KHAKI1","KHAKI2","KHAKI3","KHAKI4","LAVENDER","LAVENDERBLUSH1",                   "LAVENDERBLUSH2","LAVENDERBLUSH3","LAVENDERBLUSH4","LAWNGREEN","LEMONCHIFFON1","LEMONCHIFFON2","LEMONCHIFFON3","LEMONCHIFFON4","LIGHTBLUE","LIGHTBLUE1","LIGHTBLUE2","LIGHTBLUE3","LIGHTBLUE4","LIGHTCORAL",                   "LIGHTCYAN1","LIGHTCYAN2","LIGHTCYAN3","LIGHTCYAN4","LIGHTGOLDENROD1","LIGHTGOLDENROD2","LIGHTGOLDENROD3","LIGHTGOLDENROD4","LIGHTGOLDENRODYELLOW","LIGHTGREY","LIGHTPINK","LIGHTPINK1","LIGHTPINK2","LIGHTPINK3",                   "LIGHTPINK4","LIGHTSALMON1","LIGHTSALMON2","LIGHTSALMON3","LIGHTSALMON4","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSKYBLUE1","LIGHTSKYBLUE2","LIGHTSKYBLUE3","LIGHTSKYBLUE4","LIGHTSLATEBLUE","LIGHTSLATEGRAY",                   "LIGHTSTEELBLUE","LIGHTSTEELBLUE1","LIGHTSTEELBLUE2","LIGHTSTEELBLUE3","LIGHTSTEELBLUE4","LIGHTYELLOW1","LIGHTYELLOW2","LIGHTYELLOW3","LIGHTYELLOW4","LIMEGREEN","LINEN","MAGENTA","MAGENTA2","MAGENTA3",                   "MAGENTA4","MANGANESEBLUE","MAROON","MAROON1","MAROON2","MAROON3","MAROON4","MEDIUMORCHID","MEDIUMORCHID1","MEDIUMORCHID2","MEDIUMORCHID3","MEDIUMORCHID4","MEDIUMPURPLE","MEDIUMPURPLE1","MEDIUMPURPLE2",                   "MEDIUMPURPLE3","MEDIUMPURPLE4","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MELON","MIDNIGHTBLUE","MINT","MINTCREAM","MISTYROSE1","MISTYROSE2","MISTYROSE3",                   "MISTYROSE4","MOCCASIN","NAVAJOWHITE1","NAVAJOWHITE2","NAVAJOWHITE3","NAVAJOWHITE4","NAVY","OLDLACE","OLIVE","OLIVEDRAB","OLIVEDRAB1","OLIVEDRAB2","OLIVEDRAB3","OLIVEDRAB4","ORANGE","ORANGE1","ORANGE2",                   "ORANGE3","ORANGE4","ORANGERED1","ORANGERED2","ORANGERED3","ORANGERED4","ORCHID","ORCHID1","ORCHID2","ORCHID3","ORCHID4","PALEGOLDENROD","PALEGREEN","PALEGREEN1","PALEGREEN2","PALEGREEN3","PALEGREEN4",                   "PALETURQUOISE1","PALETURQUOISE2","PALETURQUOISE3","PALETURQUOISE4","PALEVIOLETRED","PALEVIOLETRED1","PALEVIOLETRED2","PALEVIOLETRED3","PALEVIOLETRED4","PAPAYAWHIP","PEACHPUFF1","PEACHPUFF2","PEACHPUFF3",                   "PEACHPUFF4","PEACOCK","PINK","PINK1","PINK2","PINK3","PINK4","PLUM","PLUM1","PLUM2","PLUM3","PLUM4","POWDERBLUE","PURPLE","PURPLE1","PURPLE2","PURPLE3","PURPLE4","RASPBERRY","RAWSIENNA","RED1","RED2","RED3",                   "RED4","ROSYBROWN","ROSYBROWN1","ROSYBROWN2","ROSYBROWN3","ROSYBROWN4","ROYALBLUE","ROYALBLUE1","ROYALBLUE2","ROYALBLUE3","ROYALBLUE4","SALMON","SALMON1","SALMON2","SALMON3","SALMON4","SANDYBROWN","SAPGREEN",                   "SEAGREEN1","SEAGREEN2","SEAGREEN3","SEAGREEN4","SEASHELL1","SEASHELL2","SEASHELL3","SEASHELL4","SEPIA","SGIBEET","SGIBRIGHTGRAY","SGICHARTREUSE","SGIDARKGRAY","SGIGRAY12","SGIGRAY16","SGIGRAY32","SGIGRAY36",                   "SGIGRAY52","SGIGRAY56","SGIGRAY72","SGIGRAY76","SGIGRAY92","SGIGRAY96","SGILIGHTBLUE","SGILIGHTGRAY","SGIOLIVEDRAB","SGISALMON","SGISLATEBLUE","SGITEAL","SIENNA","SIENNA1","SIENNA2","SIENNA3","SIENNA4","SILVER",                   "SKYBLUE","SKYBLUE1","SKYBLUE2","SKYBLUE3","SKYBLUE4","SLATEBLUE","SLATEBLUE1","SLATEBLUE2","SLATEBLUE3","SLATEBLUE4","SLATEGRAY","SLATEGRAY1","SLATEGRAY2","SLATEGRAY3","SLATEGRAY4","SNOW1","SNOW2","SNOW3",                   "SNOW4","SPRINGGREEN","SPRINGGREEN1","SPRINGGREEN2","SPRINGGREEN3","STEELBLUE","STEELBLUE1","STEELBLUE2","STEELBLUE3","STEELBLUE4","TAN","TAN1","TAN2","TAN3","TAN4","TEAL","THISTLE","THISTLE1","THISTLE2",                   "THISTLE3","THISTLE4","TOMATO1","TOMATO2","TOMATO3","TOMATO4","TURQUOISE","TURQUOISE1","TURQUOISE2","TURQUOISE3","TURQUOISE4","TURQUOISEBLUE","VIOLET","VIOLETRED","VIOLETRED1","VIOLETRED2","VIOLETRED3",                   "VIOLETRED4","WARMGREY","WHEAT","WHEAT1","WHEAT2","WHEAT3","WHEAT4","WHITE","WHITESMOKE","YELLOW1","YELLOW2","YELLOW3","YELLOW4","RED","LIME","YELLOW","CYAN"]specialcolorset_reverse = ["#F0F8FF","#FAEBD7","#FFEFDB","#EEDFCC","#CDC0B0","#8B8378","#00FFFF","#7FFFD4","#76EEC6","#66CDAA","#458B74","#F0FFFF","#E0EEEE","#C1CDCD","#838B8B","#E3CF57","#F5F5DC","#FFE4C4","#EED5B7",                           "#CDB79E","#8B7D6B","#000000","#FFEBCD","#0000FF","#0000EE","#0000CD","#00008B","#8A2BE2","#9C661F","#A52A2A","#FF4040","#EE3B3B","#CD3333","#8B2323","#DEB887","#FFD39B","#EEC591","#CDAA7D",                           "#8B7355","#8A360F","#8A3324","#5F9EA0","#98F5FF","#8EE5EE","#7AC5CD","#53868B","#FF6103","#FF9912","#ED9121","#7FFF00","#76EE00","#66CD00","#458B00","#D2691E","#FF7F24","#EE7621","#CD661D",                           "#8B4513","#3D59AB","#3D9140","#808A87","#FF7F50","#FF7256","#EE6A50","#CD5B45","#8B3E2F","#6495ED","#FFF8DC","#EEE8CD","#CDC8B1","#8B8878","#DC143C","#00EEEE","#00CDCD","#008B8B","#B8860B",                           "#FFB90F","#EEAD0E","#CD950C","#8B6508","#A9A9A9","#006400","#BDB76B","#556B2F","#CAFF70","#BCEE68","#A2CD5A","#6E8B3D","#FF8C00","#FF7F00","#EE7600","#CD6600","#8B4500","#9932CC","#BF3EFF",                           "#B23AEE","#9A32CD","#68228B","#E9967A","#8FBC8F","#C1FFC1","#B4EEB4","#9BCD9B","#698B69","#483D8B","#2F4F4F","#97FFFF","#8DEEEE","#79CDCD","#528B8B","#00CED1","#9400D3","#FF1493","#EE1289",                           "#CD1076","#8B0A50","#00BFFF","#00B2EE","#009ACD","#00688B","#696969","#1E90FF","#1C86EE","#1874CD","#104E8B","#FCE6C9","#00C957","#B22222","#FF3030","#EE2C2C","#CD2626","#8B1A1A","#FF7D40",                           "#FFFAF0","#228B22","#DCDCDC","#F8F8FF","#FFD700","#EEC900","#CDAD00","#8B7500","#DAA520","#FFC125","#EEB422","#CD9B1D","#8B6914","#808080","#030303","#1A1A1A","#1C1C1C","#1F1F1F","#212121",                           "#242424","#262626","#292929","#2B2B2B","#2E2E2E","#303030","#050505","#333333","#363636","#383838","#3B3B3B","#3D3D3D","#404040","#424242","#454545","#474747","#4A4A4A","#080808","#4D4D4D",                           "#4F4F4F","#525252","#545454","#575757","#595959","#5C5C5C","#5E5E5E","#616161","#636363","#0A0A0A","#666666","#6B6B6B","#6E6E6E","#707070","#737373","#757575","#787878","#7A7A7A","#7D7D7D",                           "#0D0D0D","#7F7F7F","#828282","#858585","#878787","#8A8A8A","#8C8C8C","#8F8F8F","#919191","#949494","#969696","#0F0F0F","#999999","#9C9C9C","#9E9E9E","#A1A1A1","#A3A3A3","#A6A6A6","#A8A8A8",                           "#ABABAB","#ADADAD","#B0B0B0","#121212","#B3B3B3","#B5B5B5","#B8B8B8","#BABABA","#BDBDBD","#BFBFBF","#C2C2C2","#C4C4C4","#C7C7C7","#C9C9C9","#141414","#CCCCCC","#CFCFCF","#D1D1D1","#D4D4D4",                           "#D6D6D6","#D9D9D9","#DBDBDB","#DEDEDE","#E0E0E0","#E3E3E3","#171717","#E5E5E5","#E8E8E8","#EBEBEB","#EDEDED","#F0F0F0","#F2F2F2","#F7F7F7","#FAFAFA","#FCFCFC","#008000","#00FF00","#00EE00",                           "#00CD00","#008B00","#ADFF2F","#F0FFF0","#E0EEE0","#C1CDC1","#838B83","#FF69B4","#FF6EB4","#EE6AA7","#CD6090","#8B3A62","#CD5C5C","#FF6A6A","#EE6363","#CD5555","#8B3A3A","#4B0082","#FFFFF0",                           "#EEEEE0","#CDCDC1","#8B8B83","#292421","#F0E68C","#FFF68F","#EEE685","#CDC673","#8B864E","#E6E6FA","#FFF0F5","#EEE0E5","#CDC1C5","#8B8386","#7CFC00","#FFFACD","#EEE9BF","#CDC9A5","#8B8970",                           "#ADD8E6","#BFEFFF","#B2DFEE","#9AC0CD","#68838B","#F08080","#E0FFFF","#D1EEEE","#B4CDCD","#7A8B8B","#FFEC8B","#EEDC82","#CDBE70","#8B814C","#FAFAD2","#D3D3D3","#FFB6C1","#FFAEB9","#EEA2AD",                           "#CD8C95","#8B5F65","#FFA07A","#EE9572","#CD8162","#8B5742","#20B2AA","#87CEFA","#B0E2FF","#A4D3EE","#8DB6CD","#607B8B","#8470FF","#778899","#B0C4DE","#CAE1FF","#BCD2EE","#A2B5CD","#6E7B8B",                           "#FFFFE0","#EEEED1","#CDCDB4","#8B8B7A","#32CD32","#FAF0E6","#FF00FF","#EE00EE","#CD00CD","#8B008B","#03A89E","#800000","#FF34B3","#EE30A7","#CD2990","#8B1C62","#BA55D3","#E066FF","#D15FEE",                           "#B452CD","#7A378B","#9370DB","#AB82FF","#9F79EE","#8968CD","#5D478B","#3CB371","#7B68EE","#00FA9A","#48D1CC","#C71585","#E3A869","#191970","#BDFCC9","#F5FFFA","#FFE4E1","#EED5D2","#CDB7B5",                           "#8B7D7B","#FFE4B5","#FFDEAD","#EECFA1","#CDB38B","#8B795E","#000080","#FDF5E6","#808000","#6B8E23","#C0FF3E","#B3EE3A","#9ACD32","#698B22","#FF8000","#FFA500","#EE9A00","#CD8500","#8B5A00",                           "#FF4500","#EE4000","#CD3700","#8B2500","#DA70D6","#FF83FA","#EE7AE9","#CD69C9","#8B4789","#EEE8AA","#98FB98","#9AFF9A","#90EE90","#7CCD7C","#548B54","#BBFFFF","#AEEEEE","#96CDCD","#668B8B",                           "#DB7093","#FF82AB","#EE799F","#CD6889","#8B475D","#FFEFD5","#FFDAB9","#EECBAD","#CDAF95","#8B7765","#33A1C9","#FFC0CB","#FFB5C5","#EEA9B8","#CD919E","#8B636C","#DDA0DD","#FFBBFF","#EEAEEE",                           "#CD96CD","#8B668B","#B0E0E6","#800080","#9B30FF","#912CEE","#7D26CD","#551A8B","#872657","#C76114","#FF0000","#EE0000","#CD0000","#8B0000","#BC8F8F","#FFC1C1","#EEB4B4","#CD9B9B","#8B6969",                           "#4169E1","#4876FF","#436EEE","#3A5FCD","#27408B","#FA8072","#FF8C69","#EE8262","#CD7054","#8B4C39","#F4A460","#308014","#54FF9F","#4EEE94","#43CD80","#2E8B57","#FFF5EE","#EEE5DE","#CDC5BF",                           "#8B8682","#5E2612","#8E388E","#C5C1AA","#71C671","#555555","#1E1E1E","#282828","#515151","#5B5B5B","#848484","#8E8E8E","#B7B7B7","#C1C1C1","#EAEAEA","#F4F4F4","#7D9EC0","#AAAAAA","#8E8E38",                           "#C67171","#7171C6","#388E8E","#A0522D","#FF8247","#EE7942","#CD6839","#8B4726","#C0C0C0","#87CEEB","#87CEFF","#7EC0EE","#6CA6CD","#4A708B","#6A5ACD","#836FFF","#7A67EE","#6959CD","#473C8B",                           "#708090","#C6E2FF","#B9D3EE","#9FB6CD","#6C7B8B","#FFFAFA","#EEE9E9","#CDC9C9","#8B8989","#00FF7F","#00EE76","#00CD66","#008B45","#4682B4","#63B8FF","#5CACEE","#4F94CD","#36648B","#D2B48C",                           "#FFA54F","#EE9A49","#CD853F","#8B5A2B","#008080","#D8BFD8","#FFE1FF","#EED2EE","#CDB5CD","#8B7B8B","#FF6347","#EE5C42","#CD4F39","#8B3626","#40E0D0","#00F5FF","#00E5EE","#00C5CD","#00868B",                           "#00C78C","#EE82EE","#D02090","#FF3E96","#EE3A8C","#CD3278","#8B2252","#808069","#F5DEB3","#FFE7BA","#EED8AE","#CDBA96","#8B7E66","#FFFFFF","#F5F5F5","#FFFF00","#EEEE00","#CDCD00","#8B8B00",                           "#FF0000","#00FF00","#FFFF00","#00FFFF"]specialcolordict_short = {"BLACK":"#000000","WHITE":"#FFFFFF","RED":"#FF0000","LIME":"#00FF00","BLUE":"#0000FF","YELLOW":"#FFFF00","CYAN":"#00FFFF",                    "MAGENTA":"#FF00FF","SILVER":"#C0C0C0","GRAY":"#808080","MAROON":"#800000","OLIVE":"#808000","GREEN":"#008000","PURPLE":"#800080","TEAL":"#008080","NAVY":"#000080","ORANGE":"#FFA500"}specialcolordict = {"ALICEBLUE":"#F0F8FF","ANTIQUEWHITE":"#FAEBD7","ANTIQUEWHITE1":"#FFEFDB","ANTIQUEWHITE2":"#EEDFCC","ANTIQUEWHITE3":"#CDC0B0","ANTIQUEWHITE4":"#8B8378","AQUA":"#00FFFF","AQUAMARINE1":"#7FFFD4",                    "AQUAMARINE2":"#76EEC6","AQUAMARINE3":"#66CDAA","AQUAMARINE4":"#458B74","AZURE1":"#F0FFFF","AZURE2":"#E0EEEE","AZURE3":"#C1CDCD","AZURE4":"#838B8B","BANANA":"#E3CF57","BEIGE":"#F5F5DC",                    "BISQUE1":"#FFE4C4","BISQUE2":"#EED5B7","BISQUE3":"#CDB79E","BISQUE4":"#8B7D6B","BLACK":"#000000","BLANCHEDALMOND":"#FFEBCD","BLUE":"#0000FF","BLUE2":"#0000EE","BLUE3":"#0000CD","BLUE4":"#00008B",                    "BLUEVIOLET":"#8A2BE2","BRICK":"#9C661F","BROWN":"#A52A2A","BROWN1":"#FF4040","BROWN2":"#EE3B3B","BROWN3":"#CD3333","BROWN4":"#8B2323","BURLYWOOD":"#DEB887","BURLYWOOD1":"#FFD39B","BURLYWOOD2":"#EEC591",                    "BURLYWOOD3":"#CDAA7D","BURLYWOOD4":"#8B7355","BURNTSIENNA":"#8A360F","BURNTUMBER":"#8A3324","CADETBLUE":"#5F9EA0","CADETBLUE1":"#98F5FF","CADETBLUE2":"#8EE5EE","CADETBLUE3":"#7AC5CD",                    "CADETBLUE4":"#53868B","CADMIUMORANGE":"#FF6103","CADMIUMYELLOW":"#FF9912","CARROT":"#ED9121","CHARTREUSE1":"#7FFF00","CHARTREUSE2":"#76EE00","CHARTREUSE3":"#66CD00","CHARTREUSE4":"#458B00",                    "CHOCOLATE":"#D2691E","CHOCOLATE1":"#FF7F24","CHOCOLATE2":"#EE7621","CHOCOLATE3":"#CD661D","CHOCOLATE4":"#8B4513","COBALT":"#3D59AB","COBALTGREEN":"#3D9140","COLDGREY":"#808A87","CORAL":"#FF7F50",                    "CORAL1":"#FF7256","CORAL2":"#EE6A50","CORAL3":"#CD5B45","CORAL4":"#8B3E2F","CORNFLOWERBLUE":"#6495ED","CORNSILK1":"#FFF8DC","CORNSILK2":"#EEE8CD","CORNSILK3":"#CDC8B1","CORNSILK4":"#8B8878",                    "CRIMSON":"#DC143C","CYAN2":"#00EEEE","CYAN3":"#00CDCD","CYAN4":"#008B8B","DARKGOLDENROD":"#B8860B","DARKGOLDENROD1":"#FFB90F","DARKGOLDENROD2":"#EEAD0E","DARKGOLDENROD3":"#CD950C",                    "DARKGOLDENROD4":"#8B6508","DARKGRAY":"#A9A9A9","DARKGREEN":"#006400","DARKKHAKI":"#BDB76B","DARKOLIVEGREEN":"#556B2F","DARKOLIVEGREEN1":"#CAFF70","DARKOLIVEGREEN2":"#BCEE68","DARKOLIVEGREEN3":"#A2CD5A",                    "DARKOLIVEGREEN4":"#6E8B3D","DARKORANGE":"#FF8C00","DARKORANGE1":"#FF7F00","DARKORANGE2":"#EE7600","DARKORANGE3":"#CD6600","DARKORANGE4":"#8B4500","DARKORCHID":"#9932CC","DARKORCHID1":"#BF3EFF",                    "DARKORCHID2":"#B23AEE","DARKORCHID3":"#9A32CD","DARKORCHID4":"#68228B","DARKSALMON":"#E9967A","DARKSEAGREEN":"#8FBC8F","DARKSEAGREEN1":"#C1FFC1","DARKSEAGREEN2":"#B4EEB4","DARKSEAGREEN3":"#9BCD9B",                    "DARKSEAGREEN4":"#698B69","DARKSLATEBLUE":"#483D8B","DARKSLATEGRAY":"#2F4F4F","DARKSLATEGRAY1":"#97FFFF","DARKSLATEGRAY2":"#8DEEEE","DARKSLATEGRAY3":"#79CDCD","DARKSLATEGRAY4":"#528B8B",                    "DARKTURQUOISE":"#00CED1","DARKVIOLET":"#9400D3","DEEPPINK1":"#FF1493","DEEPPINK2":"#EE1289","DEEPPINK3":"#CD1076","DEEPPINK4":"#8B0A50","DEEPSKYBLUE1":"#00BFFF","DEEPSKYBLUE2":"#00B2EE",                    "DEEPSKYBLUE3":"#009ACD","DEEPSKYBLUE4":"#00688B","DIMGRAY":"#696969","DODGERBLUE1":"#1E90FF","DODGERBLUE2":"#1C86EE","DODGERBLUE3":"#1874CD","DODGERBLUE4":"#104E8B","EGGSHELL":"#FCE6C9",                    "EMERALDGREEN":"#00C957","FIREBRICK":"#B22222","FIREBRICK1":"#FF3030","FIREBRICK2":"#EE2C2C","FIREBRICK3":"#CD2626","FIREBRICK4":"#8B1A1A","FLESH":"#FF7D40","FLORALWHITE":"#FFFAF0",                    "FORESTGREEN":"#228B22","GAINSBORO":"#DCDCDC","GHOSTWHITE":"#F8F8FF","GOLD1":"#FFD700","GOLD2":"#EEC900","GOLD3":"#CDAD00","GOLD4":"#8B7500","GOLDENROD":"#DAA520","GOLDENROD1":"#FFC125",                    "GOLDENROD2":"#EEB422","GOLDENROD3":"#CD9B1D","GOLDENROD4":"#8B6914","GRAY":"#808080","GRAY1":"#030303","GRAY10":"#1A1A1A","GRAY11":"#1C1C1C","GRAY12":"#1F1F1F","GRAY13":"#212121",                    "GRAY14":"#242424","GRAY15":"#262626","GRAY16":"#292929","GRAY17":"#2B2B2B","GRAY18":"#2E2E2E","GRAY19":"#303030","GRAY2":"#050505","GRAY20":"#333333","GRAY21":"#363636","GRAY22":"#383838",                    "GRAY23":"#3B3B3B","GRAY24":"#3D3D3D","GRAY25":"#404040","GRAY26":"#424242","GRAY27":"#454545","GRAY28":"#474747","GRAY29":"#4A4A4A","GRAY3":"#080808","GRAY30":"#4D4D4D","GRAY31":"#4F4F4F",                    "GRAY32":"#525252","GRAY33":"#545454","GRAY34":"#575757","GRAY35":"#595959","GRAY36":"#5C5C5C","GRAY37":"#5E5E5E","GRAY38":"#616161","GRAY39":"#636363","GRAY4":"#0A0A0A","GRAY40":"#666666",                    "GRAY42":"#6B6B6B","GRAY43":"#6E6E6E","GRAY44":"#707070","GRAY45":"#737373","GRAY46":"#757575","GRAY47":"#787878","GRAY48":"#7A7A7A","GRAY49":"#7D7D7D","GRAY5":"#0D0D0D","GRAY50":"#7F7F7F",                    "GRAY51":"#828282","GRAY52":"#858585","GRAY53":"#878787","GRAY54":"#8A8A8A","GRAY55":"#8C8C8C","GRAY56":"#8F8F8F","GRAY57":"#919191","GRAY58":"#949494","GRAY59":"#969696","GRAY6":"#0F0F0F",                    "GRAY60":"#999999","GRAY61":"#9C9C9C","GRAY62":"#9E9E9E","GRAY63":"#A1A1A1","GRAY64":"#A3A3A3","GRAY65":"#A6A6A6","GRAY66":"#A8A8A8","GRAY67":"#ABABAB","GRAY68":"#ADADAD","GRAY69":"#B0B0B0",                    "GRAY7":"#121212","GRAY70":"#B3B3B3","GRAY71":"#B5B5B5","GRAY72":"#B8B8B8","GRAY73":"#BABABA","GRAY74":"#BDBDBD","GRAY75":"#BFBFBF","GRAY76":"#C2C2C2","GRAY77":"#C4C4C4","GRAY78":"#C7C7C7",                    "GRAY79":"#C9C9C9","GRAY8":"#141414","GRAY80":"#CCCCCC","GRAY81":"#CFCFCF","GRAY82":"#D1D1D1","GRAY83":"#D4D4D4","GRAY84":"#D6D6D6","GRAY85":"#D9D9D9","GRAY86":"#DBDBDB","GRAY87":"#DEDEDE",                    "GRAY88":"#E0E0E0","GRAY89":"#E3E3E3","GRAY9":"#171717","GRAY90":"#E5E5E5","GRAY91":"#E8E8E8","GRAY92":"#EBEBEB","GRAY93":"#EDEDED","GRAY94":"#F0F0F0","GRAY95":"#F2F2F2","GRAY97":"#F7F7F7",                    "GRAY98":"#FAFAFA","GRAY99":"#FCFCFC","GREEN":"#008000","GREEN1":"#00FF00","GREEN2":"#00EE00","GREEN3":"#00CD00","GREEN4":"#008B00","GREENYELLOW":"#ADFF2F","HONEYDEW1":"#F0FFF0","HONEYDEW2":"#E0EEE0",                    "HONEYDEW3":"#C1CDC1","HONEYDEW4":"#838B83","HOTPINK":"#FF69B4","HOTPINK1":"#FF6EB4","HOTPINK2":"#EE6AA7","HOTPINK3":"#CD6090","HOTPINK4":"#8B3A62","INDIANRED":"#CD5C5C","INDIANRED1":"#FF6A6A",                    "INDIANRED2":"#EE6363","INDIANRED3":"#CD5555","INDIANRED4":"#8B3A3A","INDIGO":"#4B0082","IVORY1":"#FFFFF0","IVORY2":"#EEEEE0","IVORY3":"#CDCDC1","IVORY4":"#8B8B83","IVORYBLACK":"#292421",                    "KHAKI":"#F0E68C","KHAKI1":"#FFF68F","KHAKI2":"#EEE685","KHAKI3":"#CDC673","KHAKI4":"#8B864E","LAVENDER":"#E6E6FA","LAVENDERBLUSH1":"#FFF0F5","LAVENDERBLUSH2":"#EEE0E5","LAVENDERBLUSH3":"#CDC1C5",                    "LAVENDERBLUSH4":"#8B8386","LAWNGREEN":"#7CFC00","LEMONCHIFFON1":"#FFFACD","LEMONCHIFFON2":"#EEE9BF","LEMONCHIFFON3":"#CDC9A5","LEMONCHIFFON4":"#8B8970","LIGHTBLUE":"#ADD8E6","LIGHTBLUE1":"#BFEFFF",                    "LIGHTBLUE2":"#B2DFEE","LIGHTBLUE3":"#9AC0CD","LIGHTBLUE4":"#68838B","LIGHTCORAL":"#F08080","LIGHTCYAN1":"#E0FFFF","LIGHTCYAN2":"#D1EEEE","LIGHTCYAN3":"#B4CDCD","LIGHTCYAN4":"#7A8B8B",                    "LIGHTGOLDENROD1":"#FFEC8B","LIGHTGOLDENROD2":"#EEDC82","LIGHTGOLDENROD3":"#CDBE70","LIGHTGOLDENROD4":"#8B814C","LIGHTGOLDENRODYELLOW":"#FAFAD2","LIGHTGREY":"#D3D3D3","LIGHTPINK":"#FFB6C1",                    "LIGHTPINK1":"#FFAEB9","LIGHTPINK2":"#EEA2AD","LIGHTPINK3":"#CD8C95","LIGHTPINK4":"#8B5F65","LIGHTSALMON1":"#FFA07A","LIGHTSALMON2":"#EE9572","LIGHTSALMON3":"#CD8162","LIGHTSALMON4":"#8B5742",                    "LIGHTSEAGREEN":"#20B2AA","LIGHTSKYBLUE":"#87CEFA","LIGHTSKYBLUE1":"#B0E2FF","LIGHTSKYBLUE2":"#A4D3EE","LIGHTSKYBLUE3":"#8DB6CD","LIGHTSKYBLUE4":"#607B8B","LIGHTSLATEBLUE":"#8470FF",                    "LIGHTSLATEGRAY":"#778899","LIGHTSTEELBLUE":"#B0C4DE","LIGHTSTEELBLUE1":"#CAE1FF","LIGHTSTEELBLUE2":"#BCD2EE","LIGHTSTEELBLUE3":"#A2B5CD","LIGHTSTEELBLUE4":"#6E7B8B","LIGHTYELLOW1":"#FFFFE0",                    "LIGHTYELLOW2":"#EEEED1","LIGHTYELLOW3":"#CDCDB4","LIGHTYELLOW4":"#8B8B7A","LIMEGREEN":"#32CD32","LINEN":"#FAF0E6","MAGENTA":"#FF00FF","MAGENTA2":"#EE00EE","MAGENTA3":"#CD00CD","MAGENTA4":"#8B008B",                    "MANGANESEBLUE":"#03A89E","MAROON":"#800000","MAROON1":"#FF34B3","MAROON2":"#EE30A7","MAROON3":"#CD2990","MAROON4":"#8B1C62","MEDIUMORCHID":"#BA55D3","MEDIUMORCHID1":"#E066FF","MEDIUMORCHID2":"#D15FEE",                    "MEDIUMORCHID3":"#B452CD","MEDIUMORCHID4":"#7A378B","MEDIUMPURPLE":"#9370DB","MEDIUMPURPLE1":"#AB82FF","MEDIUMPURPLE2":"#9F79EE","MEDIUMPURPLE3":"#8968CD","MEDIUMPURPLE4":"#5D478B",                    "MEDIUMSEAGREEN":"#3CB371","MEDIUMSLATEBLUE":"#7B68EE","MEDIUMSPRINGGREEN":"#00FA9A","MEDIUMTURQUOISE":"#48D1CC","MEDIUMVIOLETRED":"#C71585","MELON":"#E3A869","MIDNIGHTBLUE":"#191970",                    "MINT":"#BDFCC9","MINTCREAM":"#F5FFFA","MISTYROSE1":"#FFE4E1","MISTYROSE2":"#EED5D2","MISTYROSE3":"#CDB7B5","MISTYROSE4":"#8B7D7B","MOCCASIN":"#FFE4B5","NAVAJOWHITE1":"#FFDEAD","NAVAJOWHITE2":"#EECFA1",                    "NAVAJOWHITE3":"#CDB38B","NAVAJOWHITE4":"#8B795E","NAVY":"#000080","OLDLACE":"#FDF5E6","OLIVE":"#808000","OLIVEDRAB":"#6B8E23","OLIVEDRAB1":"#C0FF3E","OLIVEDRAB2":"#B3EE3A","OLIVEDRAB3":"#9ACD32",                    "OLIVEDRAB4":"#698B22","ORANGE":"#FF8000","ORANGE1":"#FFA500","ORANGE2":"#EE9A00","ORANGE3":"#CD8500","ORANGE4":"#8B5A00","ORANGERED1":"#FF4500","ORANGERED2":"#EE4000","ORANGERED3":"#CD3700",                    "ORANGERED4":"#8B2500","ORCHID":"#DA70D6","ORCHID1":"#FF83FA","ORCHID2":"#EE7AE9","ORCHID3":"#CD69C9","ORCHID4":"#8B4789","PALEGOLDENROD":"#EEE8AA","PALEGREEN":"#98FB98","PALEGREEN1":"#9AFF9A",                    "PALEGREEN2":"#90EE90","PALEGREEN3":"#7CCD7C","PALEGREEN4":"#548B54","PALETURQUOISE1":"#BBFFFF","PALETURQUOISE2":"#AEEEEE","PALETURQUOISE3":"#96CDCD","PALETURQUOISE4":"#668B8B",                    "PALEVIOLETRED":"#DB7093","PALEVIOLETRED1":"#FF82AB","PALEVIOLETRED2":"#EE799F","PALEVIOLETRED3":"#CD6889","PALEVIOLETRED4":"#8B475D","PAPAYAWHIP":"#FFEFD5","PEACHPUFF1":"#FFDAB9","PEACHPUFF2":"#EECBAD",                    "PEACHPUFF3":"#CDAF95","PEACHPUFF4":"#8B7765","PEACOCK":"#33A1C9","PINK":"#FFC0CB","PINK1":"#FFB5C5","PINK2":"#EEA9B8","PINK3":"#CD919E","PINK4":"#8B636C","PLUM":"#DDA0DD","PLUM1":"#FFBBFF",                    "PLUM2":"#EEAEEE","PLUM3":"#CD96CD","PLUM4":"#8B668B","POWDERBLUE":"#B0E0E6","PURPLE":"#800080","PURPLE1":"#9B30FF","PURPLE2":"#912CEE","PURPLE3":"#7D26CD","PURPLE4":"#551A8B","RASPBERRY":"#872657",                    "RAWSIENNA":"#C76114","RED1":"#FF0000","RED2":"#EE0000","RED3":"#CD0000","RED4":"#8B0000","ROSYBROWN":"#BC8F8F","ROSYBROWN1":"#FFC1C1","ROSYBROWN2":"#EEB4B4","ROSYBROWN3":"#CD9B9B","ROSYBROWN4":"#8B6969",                    "ROYALBLUE":"#4169E1","ROYALBLUE1":"#4876FF","ROYALBLUE2":"#436EEE","ROYALBLUE3":"#3A5FCD","ROYALBLUE4":"#27408B","SALMON":"#FA8072","SALMON1":"#FF8C69","SALMON2":"#EE8262","SALMON3":"#CD7054",                    "SALMON4":"#8B4C39","SANDYBROWN":"#F4A460","SAPGREEN":"#308014","SEAGREEN1":"#54FF9F","SEAGREEN2":"#4EEE94","SEAGREEN3":"#43CD80","SEAGREEN4":"#2E8B57","SEASHELL1":"#FFF5EE","SEASHELL2":"#EEE5DE",                    "SEASHELL3":"#CDC5BF","SEASHELL4":"#8B8682","SEPIA":"#5E2612","SGIBEET":"#8E388E","SGIBRIGHTGRAY":"#C5C1AA","SGICHARTREUSE":"#71C671","SGIDARKGRAY":"#555555","SGIGRAY12":"#1E1E1E","SGIGRAY16":"#282828",                    "SGIGRAY32":"#515151","SGIGRAY36":"#5B5B5B","SGIGRAY52":"#848484","SGIGRAY56":"#8E8E8E","SGIGRAY72":"#B7B7B7","SGIGRAY76":"#C1C1C1","SGIGRAY92":"#EAEAEA","SGIGRAY96":"#F4F4F4","SGILIGHTBLUE":"#7D9EC0",                    "SGILIGHTGRAY":"#AAAAAA","SGIOLIVEDRAB":"#8E8E38","SGISALMON":"#C67171","SGISLATEBLUE":"#7171C6","SGITEAL":"#388E8E","SIENNA":"#A0522D","SIENNA1":"#FF8247","SIENNA2":"#EE7942","SIENNA3":"#CD6839",                    "SIENNA4":"#8B4726","SILVER":"#C0C0C0","SKYBLUE":"#87CEEB","SKYBLUE1":"#87CEFF","SKYBLUE2":"#7EC0EE","SKYBLUE3":"#6CA6CD","SKYBLUE4":"#4A708B","SLATEBLUE":"#6A5ACD","SLATEBLUE1":"#836FFF",                    "SLATEBLUE2":"#7A67EE","SLATEBLUE3":"#6959CD","SLATEBLUE4":"#473C8B","SLATEGRAY":"#708090","SLATEGRAY1":"#C6E2FF","SLATEGRAY2":"#B9D3EE","SLATEGRAY3":"#9FB6CD","SLATEGRAY4":"#6C7B8B","SNOW1":"#FFFAFA",                    "SNOW2":"#EEE9E9","SNOW3":"#CDC9C9","SNOW4":"#8B8989","SPRINGGREEN":"#00FF7F","SPRINGGREEN1":"#00EE76","SPRINGGREEN2":"#00CD66","SPRINGGREEN3":"#008B45","STEELBLUE":"#4682B4","STEELBLUE1":"#63B8FF",                    "STEELBLUE2":"#5CACEE","STEELBLUE3":"#4F94CD","STEELBLUE4":"#36648B","TAN":"#D2B48C","TAN1":"#FFA54F","TAN2":"#EE9A49","TAN3":"#CD853F","TAN4":"#8B5A2B","TEAL":"#008080","THISTLE":"#D8BFD8",                    "THISTLE1":"#FFE1FF","THISTLE2":"#EED2EE","THISTLE3":"#CDB5CD","THISTLE4":"#8B7B8B","TOMATO1":"#FF6347","TOMATO2":"#EE5C42","TOMATO3":"#CD4F39","TOMATO4":"#8B3626","TURQUOISE":"#40E0D0",                    "TURQUOISE1":"#00F5FF","TURQUOISE2":"#00E5EE","TURQUOISE3":"#00C5CD","TURQUOISE4":"#00868B","TURQUOISEBLUE":"#00C78C","VIOLET":"#EE82EE","VIOLETRED":"#D02090","VIOLETRED1":"#FF3E96",                    "VIOLETRED2":"#EE3A8C","VIOLETRED3":"#CD3278","VIOLETRED4":"#8B2252","WARMGREY":"#808069","WHEAT":"#F5DEB3","WHEAT1":"#FFE7BA","WHEAT2":"#EED8AE","WHEAT3":"#CDBA96","WHEAT4":"#8B7E66","WHITE":"#FFFFFF",                    "WHITESMOKE":"#F5F5F5","YELLOW1":"#FFFF00","YELLOW2":"#EEEE00","YELLOW3":"#CDCD00","YELLOW4":"#8B8B00","RED":"#FF0000","LIME":"#00FF00","YELLOW":"#FFFF00","CYAN":"#00FFFF"}specialcolordict_reverse = {"#F0F8FF":"ALICEBLUE","#FAEBD7":"ANTIQUEWHITE","#FFEFDB":"ANTIQUEWHITE1","#EEDFCC":"ANTIQUEWHITE2","#CDC0B0":"ANTIQUEWHITE3","#8B8378":"ANTIQUEWHITE4","#00FFFF":"AQUA","#7FFFD4":"AQUAMARINE1",                          "#76EEC6":"AQUAMARINE2","#66CDAA":"AQUAMARINE3","#458B74":"AQUAMARINE4","#F0FFFF":"AZURE1","#E0EEEE":"AZURE2","#C1CDCD":"AZURE3","#838B8B":"AZURE4","#E3CF57":"BANANA","#F5F5DC":"BEIGE",                          "#FFE4C4":"BISQUE1","#EED5B7":"BISQUE2","#CDB79E":"BISQUE3","#8B7D6B":"BISQUE4","#000000":"BLACK","#FFEBCD":"BLANCHEDALMOND","#0000FF":"BLUE","#0000EE":"BLUE2","#0000CD":"BLUE3","#00008B":"BLUE4",                          "#8A2BE2":"BLUEVIOLET","#9C661F":"BRICK","#A52A2A":"BROWN","#FF4040":"BROWN1","#EE3B3B":"BROWN2","#CD3333":"BROWN3","#8B2323":"BROWN4","#DEB887":"BURLYWOOD","#FFD39B":"BURLYWOOD1",                          "#EEC591":"BURLYWOOD2","#CDAA7D":"BURLYWOOD3","#8B7355":"BURLYWOOD4","#8A360F":"BURNTSIENNA","#8A3324":"BURNTUMBER","#5F9EA0":"CADETBLUE","#98F5FF":"CADETBLUE1","#8EE5EE":"CADETBLUE2",                          "#7AC5CD":"CADETBLUE3","#53868B":"CADETBLUE4","#FF6103":"CADMIUMORANGE","#FF9912":"CADMIUMYELLOW","#ED9121":"CARROT","#7FFF00":"CHARTREUSE1","#76EE00":"CHARTREUSE2","#66CD00":"CHARTREUSE3",                          "#458B00":"CHARTREUSE4","#D2691E":"CHOCOLATE","#FF7F24":"CHOCOLATE1","#EE7621":"CHOCOLATE2","#CD661D":"CHOCOLATE3","#8B4513":"CHOCOLATE4","#3D59AB":"COBALT","#3D9140":"COBALTGREEN",                          "#808A87":"COLDGREY","#FF7F50":"CORAL","#FF7256":"CORAL1","#EE6A50":"CORAL2","#CD5B45":"CORAL3","#8B3E2F":"CORAL4","#6495ED":"CORNFLOWERBLUE","#FFF8DC":"CORNSILK1","#EEE8CD":"CORNSILK2",                          "#CDC8B1":"CORNSILK3","#8B8878":"CORNSILK4","#DC143C":"CRIMSON","#00EEEE":"CYAN2","#00CDCD":"CYAN3","#008B8B":"CYAN4","#B8860B":"DARKGOLDENROD","#FFB90F":"DARKGOLDENROD1",                          "#EEAD0E":"DARKGOLDENROD2","#CD950C":"DARKGOLDENROD3","#8B6508":"DARKGOLDENROD4","#A9A9A9":"DARKGRAY","#006400":"DARKGREEN","#BDB76B":"DARKKHAKI","#556B2F":"DARKOLIVEGREEN",                          "#CAFF70":"DARKOLIVEGREEN1","#BCEE68":"DARKOLIVEGREEN2","#A2CD5A":"DARKOLIVEGREEN3","#6E8B3D":"DARKOLIVEGREEN4","#FF8C00":"DARKORANGE","#FF7F00":"DARKORANGE1","#EE7600":"DARKORANGE2",                          "#CD6600":"DARKORANGE3","#8B4500":"DARKORANGE4","#9932CC":"DARKORCHID","#BF3EFF":"DARKORCHID1","#B23AEE":"DARKORCHID2","#9A32CD":"DARKORCHID3","#68228B":"DARKORCHID4","#E9967A":"DARKSALMON",                          "#8FBC8F":"DARKSEAGREEN","#C1FFC1":"DARKSEAGREEN1","#B4EEB4":"DARKSEAGREEN2","#9BCD9B":"DARKSEAGREEN3","#698B69":"DARKSEAGREEN4","#483D8B":"DARKSLATEBLUE","#2F4F4F":"DARKSLATEGRAY",                          "#97FFFF":"DARKSLATEGRAY1","#8DEEEE":"DARKSLATEGRAY2","#79CDCD":"DARKSLATEGRAY3","#528B8B":"DARKSLATEGRAY4","#00CED1":"DARKTURQUOISE","#9400D3":"DARKVIOLET","#FF1493":"DEEPPINK1",                          "#EE1289":"DEEPPINK2","#CD1076":"DEEPPINK3","#8B0A50":"DEEPPINK4","#00BFFF":"DEEPSKYBLUE1","#00B2EE":"DEEPSKYBLUE2","#009ACD":"DEEPSKYBLUE3","#00688B":"DEEPSKYBLUE4","#696969":"DIMGRAY",                          "#1E90FF":"DODGERBLUE1","#1C86EE":"DODGERBLUE2","#1874CD":"DODGERBLUE3","#104E8B":"DODGERBLUE4","#FCE6C9":"EGGSHELL","#00C957":"EMERALDGREEN","#B22222":"FIREBRICK","#FF3030":"FIREBRICK1",                          "#EE2C2C":"FIREBRICK2","#CD2626":"FIREBRICK3","#8B1A1A":"FIREBRICK4","#FF7D40":"FLESH","#FFFAF0":"FLORALWHITE","#228B22":"FORESTGREEN","#DCDCDC":"GAINSBORO","#F8F8FF":"GHOSTWHITE",                          "#FFD700":"GOLD1","#EEC900":"GOLD2","#CDAD00":"GOLD3","#8B7500":"GOLD4","#DAA520":"GOLDENROD","#FFC125":"GOLDENROD1","#EEB422":"GOLDENROD2","#CD9B1D":"GOLDENROD3","#8B6914":"GOLDENROD4",                          "#808080":"GRAY","#030303":"GRAY1","#1A1A1A":"GRAY10","#1C1C1C":"GRAY11","#1F1F1F":"GRAY12","#212121":"GRAY13","#242424":"GRAY14","#262626":"GRAY15","#292929":"GRAY16","#2B2B2B":"GRAY17",                          "#2E2E2E":"GRAY18","#303030":"GRAY19","#050505":"GRAY2","#333333":"GRAY20","#363636":"GRAY21","#383838":"GRAY22","#3B3B3B":"GRAY23","#3D3D3D":"GRAY24","#404040":"GRAY25","#424242":"GRAY26",                          "#454545":"GRAY27","#474747":"GRAY28","#4A4A4A":"GRAY29","#080808":"GRAY3","#4D4D4D":"GRAY30","#4F4F4F":"GRAY31","#525252":"GRAY32","#545454":"GRAY33","#575757":"GRAY34","#595959":"GRAY35",                          "#5C5C5C":"GRAY36","#5E5E5E":"GRAY37","#616161":"GRAY38","#636363":"GRAY39","#0A0A0A":"GRAY4","#666666":"GRAY40","#6B6B6B":"GRAY42","#6E6E6E":"GRAY43","#707070":"GRAY44","#737373":"GRAY45",                          "#757575":"GRAY46","#787878":"GRAY47","#7A7A7A":"GRAY48","#7D7D7D":"GRAY49","#0D0D0D":"GRAY5","#7F7F7F":"GRAY50","#828282":"GRAY51","#858585":"GRAY52","#878787":"GRAY53","#8A8A8A":"GRAY54",                          "#8C8C8C":"GRAY55","#8F8F8F":"GRAY56","#919191":"GRAY57","#949494":"GRAY58","#969696":"GRAY59","#0F0F0F":"GRAY6","#999999":"GRAY60","#9C9C9C":"GRAY61","#9E9E9E":"GRAY62","#A1A1A1":"GRAY63",                          "#A3A3A3":"GRAY64","#A6A6A6":"GRAY65","#A8A8A8":"GRAY66","#ABABAB":"GRAY67","#ADADAD":"GRAY68","#B0B0B0":"GRAY69","#121212":"GRAY7","#B3B3B3":"GRAY70","#B5B5B5":"GRAY71","#B8B8B8":"GRAY72",                          "#BABABA":"GRAY73","#BDBDBD":"GRAY74","#BFBFBF":"GRAY75","#C2C2C2":"GRAY76","#C4C4C4":"GRAY77","#C7C7C7":"GRAY78","#C9C9C9":"GRAY79","#141414":"GRAY8","#CCCCCC":"GRAY80","#CFCFCF":"GRAY81",                          "#D1D1D1":"GRAY82","#D4D4D4":"GRAY83","#D6D6D6":"GRAY84","#D9D9D9":"GRAY85","#DBDBDB":"GRAY86","#DEDEDE":"GRAY87","#E0E0E0":"GRAY88","#E3E3E3":"GRAY89","#171717":"GRAY9","#E5E5E5":"GRAY90",                          "#E8E8E8":"GRAY91","#EBEBEB":"GRAY92","#EDEDED":"GRAY93","#F0F0F0":"GRAY94","#F2F2F2":"GRAY95","#F7F7F7":"GRAY97","#FAFAFA":"GRAY98","#FCFCFC":"GRAY99","#008000":"GREEN","#00FF00":"GREEN1",                          "#00EE00":"GREEN2","#00CD00":"GREEN3","#008B00":"GREEN4","#ADFF2F":"GREENYELLOW","#F0FFF0":"HONEYDEW1","#E0EEE0":"HONEYDEW2","#C1CDC1":"HONEYDEW3","#838B83":"HONEYDEW4","#FF69B4":"HOTPINK",                          "#FF6EB4":"HOTPINK1","#EE6AA7":"HOTPINK2","#CD6090":"HOTPINK3","#8B3A62":"HOTPINK4","#CD5C5C":"INDIANRED","#FF6A6A":"INDIANRED1","#EE6363":"INDIANRED2","#CD5555":"INDIANRED3","#8B3A3A":"INDIANRED4",                          "#4B0082":"INDIGO","#FFFFF0":"IVORY1","#EEEEE0":"IVORY2","#CDCDC1":"IVORY3","#8B8B83":"IVORY4","#292421":"IVORYBLACK","#F0E68C":"KHAKI","#FFF68F":"KHAKI1","#EEE685":"KHAKI2","#CDC673":"KHAKI3",                          "#8B864E":"KHAKI4","#E6E6FA":"LAVENDER","#FFF0F5":"LAVENDERBLUSH1","#EEE0E5":"LAVENDERBLUSH2","#CDC1C5":"LAVENDERBLUSH3","#8B8386":"LAVENDERBLUSH4","#7CFC00":"LAWNGREEN","#FFFACD":"LEMONCHIFFON1",                          "#EEE9BF":"LEMONCHIFFON2","#CDC9A5":"LEMONCHIFFON3","#8B8970":"LEMONCHIFFON4","#ADD8E6":"LIGHTBLUE","#BFEFFF":"LIGHTBLUE1","#B2DFEE":"LIGHTBLUE2","#9AC0CD":"LIGHTBLUE3","#68838B":"LIGHTBLUE4",                          "#F08080":"LIGHTCORAL","#E0FFFF":"LIGHTCYAN1","#D1EEEE":"LIGHTCYAN2","#B4CDCD":"LIGHTCYAN3","#7A8B8B":"LIGHTCYAN4","#FFEC8B":"LIGHTGOLDENROD1","#EEDC82":"LIGHTGOLDENROD2","#CDBE70":"LIGHTGOLDENROD3",                          "#8B814C":"LIGHTGOLDENROD4","#FAFAD2":"LIGHTGOLDENRODYELLOW","#D3D3D3":"LIGHTGREY","#FFB6C1":"LIGHTPINK","#FFAEB9":"LIGHTPINK1","#EEA2AD":"LIGHTPINK2","#CD8C95":"LIGHTPINK3","#8B5F65":"LIGHTPINK4",                          "#FFA07A":"LIGHTSALMON1","#EE9572":"LIGHTSALMON2","#CD8162":"LIGHTSALMON3","#8B5742":"LIGHTSALMON4","#20B2AA":"LIGHTSEAGREEN","#87CEFA":"LIGHTSKYBLUE","#B0E2FF":"LIGHTSKYBLUE1","#A4D3EE":"LIGHTSKYBLUE2",                          "#8DB6CD":"LIGHTSKYBLUE3","#607B8B":"LIGHTSKYBLUE4","#8470FF":"LIGHTSLATEBLUE","#778899":"LIGHTSLATEGRAY","#B0C4DE":"LIGHTSTEELBLUE","#CAE1FF":"LIGHTSTEELBLUE1","#BCD2EE":"LIGHTSTEELBLUE2","#A2B5CD":                          "LIGHTSTEELBLUE3","#6E7B8B":"LIGHTSTEELBLUE4","#FFFFE0":"LIGHTYELLOW1","#EEEED1":"LIGHTYELLOW2","#CDCDB4":"LIGHTYELLOW3","#8B8B7A":"LIGHTYELLOW4","#32CD32":"LIMEGREEN","#FAF0E6":"LINEN","#FF00FF":                          "MAGENTA","#EE00EE":"MAGENTA2","#CD00CD":"MAGENTA3","#8B008B":"MAGENTA4","#03A89E":"MANGANESEBLUE","#800000":"MAROON","#FF34B3":"MAROON1","#EE30A7":"MAROON2","#CD2990":"MAROON3","#8B1C62":"MAROON4",                          "#BA55D3":"MEDIUMORCHID","#E066FF":"MEDIUMORCHID1","#D15FEE":"MEDIUMORCHID2","#B452CD":"MEDIUMORCHID3","#7A378B":"MEDIUMORCHID4","#9370DB":"MEDIUMPURPLE","#AB82FF":"MEDIUMPURPLE1","#9F79EE":"MEDIUMPURPLE2",                          "#8968CD":"MEDIUMPURPLE3","#5D478B":"MEDIUMPURPLE4","#3CB371":"MEDIUMSEAGREEN","#7B68EE":"MEDIUMSLATEBLUE","#00FA9A":"MEDIUMSPRINGGREEN","#48D1CC":"MEDIUMTURQUOISE","#C71585":"MEDIUMVIOLETRED",                          "#E3A869":"MELON","#191970":"MIDNIGHTBLUE","#BDFCC9":"MINT","#F5FFFA":"MINTCREAM","#FFE4E1":"MISTYROSE1","#EED5D2":"MISTYROSE2","#CDB7B5":"MISTYROSE3","#8B7D7B":"MISTYROSE4","#FFE4B5":"MOCCASIN",                          "#FFDEAD":"NAVAJOWHITE1","#EECFA1":"NAVAJOWHITE2","#CDB38B":"NAVAJOWHITE3","#8B795E":"NAVAJOWHITE4","#000080":"NAVY","#FDF5E6":"OLDLACE","#808000":"OLIVE","#6B8E23":"OLIVEDRAB","#C0FF3E":"OLIVEDRAB1",                          "#B3EE3A":"OLIVEDRAB2","#9ACD32":"OLIVEDRAB3","#698B22":"OLIVEDRAB4","#FF8000":"ORANGE","#FFA500":"ORANGE1","#EE9A00":"ORANGE2","#CD8500":"ORANGE3","#8B5A00":"ORANGE4","#FF4500":"ORANGERED1",                          "#EE4000":"ORANGERED2","#CD3700":"ORANGERED3","#8B2500":"ORANGERED4","#DA70D6":"ORCHID","#FF83FA":"ORCHID1","#EE7AE9":"ORCHID2","#CD69C9":"ORCHID3","#8B4789":"ORCHID4","#EEE8AA":"PALEGOLDENROD",                          "#98FB98":"PALEGREEN","#9AFF9A":"PALEGREEN1","#90EE90":"PALEGREEN2","#7CCD7C":"PALEGREEN3","#548B54":"PALEGREEN4","#BBFFFF":"PALETURQUOISE1","#AEEEEE":"PALETURQUOISE2","#96CDCD":"PALETURQUOISE3",                          "#668B8B":"PALETURQUOISE4","#DB7093":"PALEVIOLETRED","#FF82AB":"PALEVIOLETRED1","#EE799F":"PALEVIOLETRED2","#CD6889":"PALEVIOLETRED3","#8B475D":"PALEVIOLETRED4","#FFEFD5":"PAPAYAWHIP",                          "#FFDAB9":"PEACHPUFF1","#EECBAD":"PEACHPUFF2","#CDAF95":"PEACHPUFF3","#8B7765":"PEACHPUFF4","#33A1C9":"PEACOCK","#FFC0CB":"PINK","#FFB5C5":"PINK1","#EEA9B8":"PINK2","#CD919E":"PINK3","#8B636C":"PINK4",                          "#DDA0DD":"PLUM","#FFBBFF":"PLUM1","#EEAEEE":"PLUM2","#CD96CD":"PLUM3","#8B668B":"PLUM4","#B0E0E6":"POWDERBLUE","#800080":"PURPLE","#9B30FF":"PURPLE1","#912CEE":"PURPLE2","#7D26CD":"PURPLE3",                          "#551A8B":"PURPLE4","#872657":"RASPBERRY","#C76114":"RAWSIENNA","#FF0000":"RED1","#EE0000":"RED2","#CD0000":"RED3","#8B0000":"RED4","#BC8F8F":"ROSYBROWN","#FFC1C1":"ROSYBROWN1","#EEB4B4":"ROSYBROWN2",                          "#CD9B9B":"ROSYBROWN3","#8B6969":"ROSYBROWN4","#4169E1":"ROYALBLUE","#4876FF":"ROYALBLUE1","#436EEE":"ROYALBLUE2","#3A5FCD":"ROYALBLUE3","#27408B":"ROYALBLUE4","#FA8072":"SALMON","#FF8C69":"SALMON1",                          "#EE8262":"SALMON2","#CD7054":"SALMON3","#8B4C39":"SALMON4","#F4A460":"SANDYBROWN","#308014":"SAPGREEN","#54FF9F":"SEAGREEN1","#4EEE94":"SEAGREEN2","#43CD80":"SEAGREEN3","#2E8B57":"SEAGREEN4",                          "#FFF5EE":"SEASHELL1","#EEE5DE":"SEASHELL2","#CDC5BF":"SEASHELL3","#8B8682":"SEASHELL4","#5E2612":"SEPIA","#8E388E":"SGIBEET","#C5C1AA":"SGIBRIGHTGRAY","#71C671":"SGICHARTREUSE","#555555":"SGIDARKGRAY",                          "#1E1E1E":"SGIGRAY12","#282828":"SGIGRAY16","#515151":"SGIGRAY32","#5B5B5B":"SGIGRAY36","#848484":"SGIGRAY52","#8E8E8E":"SGIGRAY56","#B7B7B7":"SGIGRAY72","#C1C1C1":"SGIGRAY76","#EAEAEA":"SGIGRAY92",                          "#F4F4F4":"SGIGRAY96","#7D9EC0":"SGILIGHTBLUE","#AAAAAA":"SGILIGHTGRAY","#8E8E38":"SGIOLIVEDRAB","#C67171":"SGISALMON","#7171C6":"SGISLATEBLUE","#388E8E":"SGITEAL","#A0522D":"SIENNA",                          "#FF8247":"SIENNA1","#EE7942":"SIENNA2","#CD6839":"SIENNA3","#8B4726":"SIENNA4","#C0C0C0":"SILVER","#87CEEB":"SKYBLUE","#87CEFF":"SKYBLUE1","#7EC0EE":"SKYBLUE2","#6CA6CD":"SKYBLUE3",                          "#4A708B":"SKYBLUE4","#6A5ACD":"SLATEBLUE","#836FFF":"SLATEBLUE1","#7A67EE":"SLATEBLUE2","#6959CD":"SLATEBLUE3","#473C8B":"SLATEBLUE4","#708090":"SLATEGRAY","#C6E2FF":"SLATEGRAY1",                          "#B9D3EE":"SLATEGRAY2","#9FB6CD":"SLATEGRAY3","#6C7B8B":"SLATEGRAY4","#FFFAFA":"SNOW1","#EEE9E9":"SNOW2","#CDC9C9":"SNOW3","#8B8989":"SNOW4","#00FF7F":"SPRINGGREEN","#00EE76":"SPRINGGREEN1",                          "#00CD66":"SPRINGGREEN2","#008B45":"SPRINGGREEN3","#4682B4":"STEELBLUE","#63B8FF":"STEELBLUE1","#5CACEE":"STEELBLUE2","#4F94CD":"STEELBLUE3","#36648B":"STEELBLUE4","#D2B48C":"TAN",                          "#FFA54F":"TAN1","#EE9A49":"TAN2","#CD853F":"TAN3","#8B5A2B":"TAN4","#008080":"TEAL","#D8BFD8":"THISTLE","#FFE1FF":"THISTLE1","#EED2EE":"THISTLE2","#CDB5CD":"THISTLE3","#8B7B8B":"THISTLE4",                          "#FF6347":"TOMATO1","#EE5C42":"TOMATO2","#CD4F39":"TOMATO3","#8B3626":"TOMATO4","#40E0D0":"TURQUOISE","#00F5FF":"TURQUOISE1","#00E5EE":"TURQUOISE2","#00C5CD":"TURQUOISE3","#00868B":"TURQUOISE4",                          "#00C78C":"TURQUOISEBLUE","#EE82EE":"VIOLET","#D02090":"VIOLETRED","#FF3E96":"VIOLETRED1","#EE3A8C":"VIOLETRED2","#CD3278":"VIOLETRED3","#8B2252":"VIOLETRED4","#808069":"WARMGREY",                          "#F5DEB3":"WHEAT","#FFE7BA":"WHEAT1","#EED8AE":"WHEAT2","#CDBA96":"WHEAT3","#8B7E66":"WHEAT4","#FFFFFF":"WHITE","#F5F5F5":"WHITESMOKE","#FFFF00":"YELLOW1","#EEEE00":"YELLOW2","#CDCD00":"YELLOW3",                          "#8B8B00":"YELLOW4","#FF0000":"RED","#00FF00":"LIME","#FFFF00":"YELLOW","#00FFFF":"CYAN"}newbflinecolor = 'red'newarrowcolor = 'red'colordict = {'newbflinecolor':newbflinecolor,'newarrowcolor':newarrowcolor}symbolchoices_set = [square_sign,circle_sign,uptriangle_sign,downtriangle_sign,lefttriangle_sign,righttriangle_sign,diamond_sign,star_sign,plus_sign,x_sign,heavy_x_sign]symbolchoices_dict = {square_sign:"s",circle_sign:"o",uptriangle_sign:"^",downtriangle_sign:"v",lefttriangle_sign:"<",righttriangle_sign:">",diamond_sign:"D",star_sign:"*",plus_sign:"+",x_sign:"x",heavy_x_sign:"X"}symbolchoices_dict_reverse = {"s":square_sign,"o":circle_sign,"^":uptriangle_sign,"v":downtriangle_sign,"<":lefttriangle_sign,">":righttriangle_sign,"D":diamond_sign,"*":star_sign,"+":plus_sign,"x":x_sign,"X":heavy_x_sign}lsqsymbolnames_set = ["SQUARE","CIRCLE","UPTRIANGLE","DOWNTRIANGLE","LEFTTRIANGLE","RIGHTTRIANGLE","DIAMOND","STAR","PLUS","SMALLX","BIGX"]lsqsymbolnames_dict = {"SQUARE":"s","CIRCLE":"o","UPTRIANGLE":"^","DOWNTRIANGLE":"v","LEFTTRIANGLE":"<","RIGHTTRIANGLE":">","DIAMOND":"D","STAR":"*","PLUS":"+","SMALLX":"x","BIGX":"X"}lsqsymbolnames_dict_reverse = {"s":"SQUARE","o":"CIRCLE","^":"UPTRIANGLE","v":"DOWNTRIANGLE","<":"LEFTTRIANGLE",">":"RIGHTTRIANGLE","D":"DIAMOND","*":"STAR","+":"PLUS","x":"SMALLX","X":"BIGX"}linewidthchoices_set = [1,2,3,4,5,6,7,8,9,10]eq_linewidthchoices_set = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]linelengthchoices_set = [0,1,2,3,4,5,6,7,8,9,10,11,12]fontsizes_dict = {'Small': {4:[6,1.5,0], 3:[6,1.5,0], 2:[10,1.5,0], 1:[12,2.3,0]}, 'Normal': {4:[8,1.5,0], 3:[8,1.5,0], 2:[12,1.5,0], 1:[16,2.3,0]},                 'Large': {4:[12,1.5,0], 3:[12,1.5,0], 2:[16,1.5,0], 1:[22,2.3,0]}, 'Extra Large': {4:[14,1.5,0], 3:[14,1.5,0], 2:[18,1.5,0], 1:[24,2.3,0]}}fontsizes_set = ['Small','Normal','Large','Extra Large']jjoyunits_dict = {'A/m': '\n(A/m)','G': '\n(G)'}jjoyunits_set = ['A/m','G']label3Dfontsizes_dict = {'Small': {4:[12,6], 3:[12,6], 2:[13,8], 1:[14,10]}, 'Normal': {4:[14,8], 3:[14,8], 2:[15,10], 1:[16,12]},                        'Large': {4:[16,10], 3:[16,10], 2:[17,12], 1:[18,14]}, 'Extra Large': {4:[18,14], 3:[18,14], 2:[19,16], 1:[20,18]}}arrow3Dscaler_dict = {0:0,1:0.04,2:0.04,3:0.06,4:0.08,5:0.1,6:0.12,7:0.14,8:0.14,9:0.14,10:0.14}eqcircletick_length_dict = {'Small': {10:5, 15:5, 20:5, 30:5, 40:5, 45:8, 50:5, 60:5, 70:5, 75:5, 80:5, 90:10,                                 100:5, 105:5, 110:5, 120:5, 130:5, 135:8, 140:5, 150:5, 160:5, 165:5, 170:5, 180:10,                                 190:5, 195:5, 200:5, 210:5, 220:5, 225:8, 230:5, 240:5, 250:5, 255:5, 260:5, 270:10,                                 280:5, 285:5, 290:5, 300:5, 310:5, 315:8, 320:5, 330:5, 340:5, 345:5, 350:5, 0:10},                      'Normal': {10:8, 15:8, 20:8, 30:8, 40:8, 45:10, 50:8, 60:8, 70:8, 75:8, 80:8, 90:12,                                 100:8, 105:8, 110:8, 120:8, 130:8, 135:10, 140:8, 150:8, 160:8, 165:8, 170:8, 180:12,                                 190:8, 195:8, 200:8, 210:8, 220:8, 225:10, 230:8, 240:8, 250:8, 255:8, 260:8, 270:12,                                 280:8, 285:8, 290:8, 300:8, 310:8, 315:10, 320:8, 330:8, 340:8, 345:8, 350:8, 0:12},                      'Large': {10:10, 15:10, 20:10, 30:10, 40:10, 45:12, 50:10, 60:10, 70:10, 75:10, 80:10, 90:15,                                 100:10, 105:10, 110:10, 120:10, 130:10, 135:12, 140:10, 150:10, 160:10, 165:10, 170:10, 180:15,                                 190:10, 195:10, 200:10, 210:10, 220:10, 225:12, 230:10, 240:10, 250:10, 255:10, 260:10, 270:15,                                 280:10, 285:10, 290:10, 300:10, 310:10, 315:12, 320:10, 330:10, 340:10, 345:10, 350:10, 0:15},                      'Extra Large': {10:12, 15:12, 20:12, 30:12, 40:12, 45:15, 50:12, 60:12, 70:12, 75:12, 80:12, 90:20,                                 100:12, 105:12, 110:12, 120:12, 130:12, 135:15, 140:12, 150:12, 160:12, 165:12, 170:12, 180:20,                                 190:12, 195:12, 200:12, 210:12, 220:12, 225:15, 230:12, 240:12, 250:12, 255:12, 260:12, 270:20,                                 280:12, 285:12, 290:12, 300:12, 310:12, 315:15, 320:12, 330:12, 340:12, 345:12, 350:12, 0:20} }eqaxestick_length_dict = {'Small': {10:3, 15:3, 20:3, 30:5, 40:3, 45:5, 50:3, 60:5, 70:3, 75:3, 80:3},                      'Normal': {10:5, 15:5, 20:5, 30:10, 40:5, 45:10, 50:5, 60:10, 70:5, 75:5, 80:5},                      'Large': {10:8, 15:8, 20:8, 30:12, 40:8, 45:12, 50:8, 60:12, 70:8, 75:8, 80:8},                      'Extra Large': {10:12, 15:12, 20:12, 30:15, 40:12, 45:15, 50:12, 60:15, 70:12, 75:12, 80:12} }maxsymbolsize = 1000ticks4 = "4 (90%s increments)" % degree_signticks8 = "8 (45%s increments)" % degree_signticks12 = "12 (30%s increments)" % degree_signticks18 = "18 (20%s increments)" % degree_signticks24 = "24 (15%s increments)" % degree_signticks36 = "36 (10%s increments)" % degree_signcircleticknumchoices_set = [ticks4, ticks8, ticks12, ticks18, ticks24, ticks36]circleticknumchoices_dict = {ticks4:4,ticks8:8,ticks12:12,ticks18:18,ticks24:24,ticks36:36}circleticknumchoices_dict_reverse = {4:ticks4,8:ticks8,12:ticks12,18:ticks18,24:ticks24,36:ticks36}ticks2 = "2 (45%s increments)" % degree_signticks3 = "3 (30%s increments)" % degree_signticks6 = "6 (15%s increments)" % degree_signticks9 = "9 (10%s increments)" % degree_signaxisticknumchoices_set = [ticks2, ticks3, ticks6, ticks9]axisticknumchoices_dict = {ticks2:2,ticks3:3,ticks6:6,ticks9:9}axisticknumchoices_dict_reverse = {2:ticks2,3:ticks3,6:ticks6,9:ticks9}magmin_list = [["Goethite",120,0],["Pyrrhotite",320,0],["Greigite",270,340],["Titanomaghemite",300,400],["Titanomagnetite",300,500],["Magnetite",580,0],["Hematite",680,0]]alphabet_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'stepsort_dict = {'NRM':1, 'AF':2, 'TT':3}################ Sample Reading Functions ################def openfile(self,titletext,defaulttext,filetypesset):    if os.path.isdir(self.filepath):        fileinfo = askopenfile(initialdir=self.filepath,title=titletext,defaultextension=defaulttext,filetypes=filetypesset)    else:        fileinfo = askopenfile(title=titletext,defaultextension=defaulttext,filetypes=filetypesset)    if fileinfo != None:        newfilepathandname = fileinfo.name.replace("/","\\")        pathend = newfilepathandname.rfind("\\")        self.currentfile = newfilepathandname[pathend+1:len(newfilepathandname)]        try:            self.fileextension = self.currentfile[self.currentfile.rindex('.')+1:].lower()            if self.fileextension == "sam":                self.datatype = "Rapid"                self.sitename = self.currentfile.replace(".sam","")            elif self.fileextension == "jr6":                self.datatype = "JR6"                self.sitename = self.currentfile.replace(".jr6","")            elif self.fileextension == "lsq":                self.datatype = "LSQ"                self.sitename = self.currentfile.replace(".lsq","")            elif self.fileextension == "dat":                self.datatype = "DAT"                self.sitename = self.currentfile.replace(".dat","")        except:            self.fileextension = ""            self.datatype = ""        self.filepath = dirname(newfilepathandname)    else:        newfilepathandname = ""    if ostype == 'Darwin':        newfilepathandname = newfilepathandname.replace("\\","/")    return(newfilepathandname)def getsamplenames(self):    samlist = []    if self.datatype == "Rapid":         f = open(self.filepathandname,'r') #Opens the .sam file for reading to get sample names.        first_line = f.readline()        first_line_List = first_line.split()        if first_line_List[0] == 'CIT':   # some .sam files have a "CIT" at the first line and the first sample isn't until the 4th line; others have the first sample on the third line. This does a check for which kind.            startlist = 2        else:            startlist = 1        for linenum, line in enumerate(f):            linelist = line.split()            if linenum >= startlist:                samlist.append(linelist[0])        f.close()    elif self.datatype == "JR6":        f = open(self.filepathandname, 'r') #Opens the jr6 file for reading and get all the sample names.        for line in f:            linelist = line.split()                        if self.sitename == linelist[0]:                samnamenewspace = linelist[0],linelist[1]                samnamenew = ''.join(samnamenewspace)                samlist.append(samnamenew)            else:                samlist.append(linelist[0])    elif self.datatype == "LSQ":        f = open(self.filepathandname,'r') #Opens the .lsq file for reading to get sample names.        for line in f:            samnamenew = line[:14].rstrip()            samlist.append(samnamenew)    elif self.datatype == "DAT":        f = open(self.filepathandname,'r') #Opens the .dat file for reading to get sample names.        first_line = f.readline()        for line in f:            linelist = line.split()            samlist.append(linelist[0])    f.close()    samset = set(samlist)    samplelistunsorted = list(samset)    samplelistsorted = sorted(samplelistunsorted)    return(samplelistsorted)def getstepletter(stepnum):    if stepnum <= 25:        return(alphabet_uppercase[int((stepnum)%26)])    else:        return(getstepletter((stepnum/26)-1) + (alphabet_uppercase[int((stepnum)%26)]))class readstep:    def __init__(self,stepvars):        self.dmagstep = stepvars[0]        self.dmagstep_mod = re.sub('[0-9]', '', self.dmagstep)        self.dmagstep_numsonly = re.sub('[^0-9]','', self.dmagstep)        if self.dmagstep_mod in ["TT","Tp","T","Td","TTd","T."]:            self.dmagstep_type = "TT"        elif self.dmagstep_mod in ["AF","AFp","A","Ap","Ad","AFd","A."]:            self.dmagstep_type = "AF"        elif self.dmagstep_mod in ["NRM","NRMp","NRMd","LT"]:            self.dmagstep_type = "NRM"        else:            self.dmagstep_type = self.dmagstep_mod        self.dmagstep_clean = self.dmagstep_type + self.dmagstep_numsonly        self.dec = stepvars[1]        self.inc = stepvars[2]        self.intensity = stepvars[3]        self.stepspace = stepvars[4]        self.error = stepvars[5]        self.errorspace = stepvars[6]        self.decspace = stepvars[7]        self.incspace = stepvars[8]        self.show = stepvars[9]        self.stepletter = stepvars[10]        self.intensityspace = stepvars[11]        self.zij_printdeclabel = stepvars[12]        self.zij_printinclabel = stepvars[12]        self.eq_printlabel = stepvars[12]        self.jjo_printlabel = stepvars[12]        self.steptext = ""        self.angspace = ""        self.duplicatetext = ""        self.angdist = 0        returnclass Stepinsite:    def __init__(sitestep,dmagstep,dmagstep_mod,dmagstep_numsonly,dmagstep_type,dmagstep_clean):        sitestep.dmagstep = dmagstep        sitestep.dmagstep_mod = dmagstep_mod        if dmagstep_numsonly != '':            sitestep.dmagstep_numsonly = int(dmagstep_numsonly)        else:            sitestep.dmagstep_numsonly = 0        sitestep.dmagstep_type = dmagstep_type        sitestep.dmagstep_clean = dmagstep_clean        sitestep.sortpriority = stepsort_dict[dmagstep_type]        returnclass Createnewsample:    def __init__(sample,self,newsamplename):        sample.name = newsamplename        sample.show = True        sample.zij_printdecname = True        sample.zij_printincname = True        sample.eq_printname = True        sample.jjo_printname = True        datalist = readsample(self,sample.name)        sample.data = datalist[0]        sample.coreplatestrike = datalist[1]        sample.coreplatedip = datalist[2]        sample.beddingstrike = datalist[3]        sample.beddingdip = datalist[4]        sample.geogpresent = datalist[5]        sample.tiltpresent = datalist[6]        textlist = getsampletext(sample.data)        sample.sampletext = textlist[0]        sample.steplist = textlist[1]        sample.steptext = getsteptext(sample.data, sample.name)        sample.totalsteps = len(sample.data)        sample.arrowlist = []        sample.bflinelist = []        sample.duplist = []        returndef readerror(titletext,errortext,self):    errortext = titletext + "\n\n" + errortext + "\n\nData cannot be plotted. Please fix datafile."    tkMessageBox.showwarning(titletext,errortext)    self.startover()    returndef readsample(self,samplename):    sampledata = []    geogpresent = True    tiltpresent = True    if (self.plottype == "samples") or (self.plottype == "steps"):        printlabels = True    elif self.plottype == "multiple":        printlabels = False    if self.datatype == "Rapid": # Rapid Squid Data        f = open(os.path.join(self.filepath, samplename),'r') #Opens the sample file for reading.        stepnum = 0        for linenum, line in enumerate(f):            linelist = line.split()            if linenum == 1:                coreplatestrike = (line[8:13]).replace(" ", "")                coreplatedip = (line[14:19]).replace(" ", "")                beddingstrike = (line[20:25]).replace(" ", "")                beddingdip = (line[26:31]).replace(" ", "")                if (coreplatestrike == "0.0" and coreplatedip == "0.0"):                    geogpresent = False                if (beddingstrike == "0.0" and beddingdip == "0.0"):                    tiltpresent = False                if self.coordtype == "Core":                    coordcol = 7                elif self.coordtype == "Geographic":                    if geogpresent:                        coordcol = 1                    else:                        self.coordtype = "Core"                        coordcol = 7                elif self.coordtype == "Tilt":                    if tiltpresent:                        coordcol = 3                    elif geogpresent:                        self.coordtype = "Geographic"                        coordcol = 1                    else:                        self.coordtype = "Core"                        coordcol = 7            if linenum >= 2 and linelist != []:                if linelist[0] == "AF" or linelist[0] == "TT":                    indexadd = 1                    dmagstep = linelist[0] + linelist[1]                else:                    indexadd = 0                    dmagstep = linelist[0]                dec_str = linelist[coordcol + indexadd]                dec = float(dec_str.replace(",", " "))                dec_str = "%.1f" % dec                                inc_str = linelist[coordcol + 1 + indexadd]                inc = float(inc_str)                inc_str = "%.1f" % inc                                                intensity = linelist[5 + indexadd]                precision = linelist[6 + indexadd]                stepspace = " " * (6 - len(dmagstep))                error = precision.lstrip("0")                error = str(float(error))                errorspace = " " * (5 - len(error))                decspace = " " * (5 - len(dec_str))                incspace = " " * (5 - len(inc_str))                intensityspace = " " * (8 - len(intensity))                                stepletter = getstepletter(stepnum)                stepvars = [dmagstep,float(dec_str),float(inc_str),intensity,stepspace,float(error),errorspace,decspace,incspace,True,stepletter,intensityspace,printlabels] # True at the end sets each step to be displayed on the plots.                stepdata = readstep(stepvars)                sampledata.append(stepdata)                stepnum = stepnum + 1        f.close()    elif self.datatype == "JR6":        try:            recordnum = 0            with open(os.path.join(self.filepath, self.datafile)) as txtfile:                for totalines, line1 in enumerate(txtfile):                    line2 = txtfile.next()                    line3 = txtfile.next()                    line4 = txtfile.next()                    line5 = txtfile.next()                    line6 = txtfile.next()                    line7 = txtfile.next()                    line8 = txtfile.next()                    line9 = txtfile.next()                    line10 = txtfile.next()                    line11 = txtfile.next()                    line12 = txtfile.next()                    line13 = txtfile.next()                    line14 = txtfile.next()                    line15 = txtfile.next()                    line16 = txtfile.next()                    line17 = txtfile.next()                    line18 = txtfile.next()                    line19 = txtfile.next()                    line20 = txtfile.next()                    line21 = txtfile.next()                    words_line2 = line2.split()                    if self.sitename == words_line2[0]:  # Automatically Determine if spaces are within samples names                        specnamespace = words_line2[0],words_line2[1]                        specimen = ''.join(specnamespace)                        dmagstepindex = 3                    elif words_line2[0] in self.samplelist:                        specimen = (words_line2[0])                        dmagstepindex = 2                    geogwords = line19.split() # Determine if there is geographic coordinates for a given sample                    try:                        if geogwords[0] == 'GEOGR.S.':                            line22 = txtfile.next()   # process to line22 if geographic coordinates present.                        else:                            if specimen == samplename: # Check if proper specimen is found                                geogpresent = False                    except:                        readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Geographic Coordinates at file line number %s in record %s of sample %s." % (totalines,recordnum+1,samplename), self)                    try:                        if geogwords[0] == 'TILT':                            tiltwords = geogwords                            line22 = txtfile.next()   # process to line22 if tilt coordinates present but geographic coordinates not present.                        else:                            tiltwords = line20.split() # Determine if there is a tilt correction and use line 23 if there is a tilt correction                    except:                        readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,recordnum+1,samplename), self)                    try:                        if tiltwords and tiltwords[0] == 'TILT' and geogwords[0] != 'TILT':                            line23 = txtfile.next()   # process to line23 if tilt coordinates present after geographic coordinates                        else:                            if specimen == samplename and geogwords[0] != 'TILT': # Check if proper specimen is found                                tiltpresent = False                    except:                        readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,recordnum+1,samplename), self)                    recordnum = recordnum + 1            txtfile.close()            recordnum = 0            with open(os.path.join(self.filepath, self.datafile)) as txtfile:                for totalines, line1 in enumerate(txtfile):                    line2 = txtfile.next()                    line3 = txtfile.next()                    line4 = txtfile.next()                    line5 = txtfile.next()                    line6 = txtfile.next()                    line7 = txtfile.next()                    line8 = txtfile.next()                    line9 = txtfile.next()                    line10 = txtfile.next()                    line11 = txtfile.next()                    line12 = txtfile.next()                    line13 = txtfile.next()                    line14 = txtfile.next()                    line15 = txtfile.next()                    line16 = txtfile.next()                    line17 = txtfile.next()                    line18 = txtfile.next()                    line19 = txtfile.next()                    line20 = txtfile.next()                    line21 = txtfile.next()                    words_line2 = line2.split()                           if self.sitename == words_line2[0]:  # Automatically Determine if spaces are within samples names                        specnamespace = words_line2[0],words_line2[1]                        specimen = ''.join(specnamespace)                        dmagstepindex = 3                    elif words_line2[0] in self.samplelist:                        specimen = (words_line2[0])                        dmagstepindex = 2                                        geogwords = line19.split() # Determine if there is geographic coordinates for a given sample                    try:                        if geogwords[0] == 'GEOGR.S.':                            line22 = txtfile.next()   # process to line22 if geographic coordinates present.                    except:                        readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Geographic Coordinates at file line number %s in record %s of sample %s." % (totalines,recordnum+1,samplename), self)                    try:                        if geogwords[0] == 'TILT':                            tiltwords = geogwords                            line22 = txtfile.next()   # process to line22 if tilt coordinates present but geographic coordinates not present.                        else:                            tiltwords = line20.split() # Determine if there is a tilt correction and use line 23 if there is a tilt correction                    except:                        readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,recordnum+1,samplename), self)                    try:                        if tiltwords and tiltwords[0] == 'TILT' and geogwords[0] != 'TILT':                            line23 = txtfile.next()   # process to line23 if tilt coordinates present after geographic coordinates                    except:                        readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,recordnum+1,samplename), self)                    if specimen == samplename: # Check if proper specimen is found                        if recordnum == 0:                            words_line4 = line4.split()                            coreplatestrike = words_line4[1]                            coreplatedip = words_line4[2]                            words_line5 = line5.split()                            beddingstrike = words_line5[1]                            beddingdip = words_line5[2]                        dmagstep = words_line2[dmagstepindex]                        words_line14 = line14.split()                        modulus = words_line14[1]                        modnum = float(modulus)                        modint = int(modnum)                        lenmodint = len(str(modint))                        powerlenmodint = lenmodint - 1                        modreduced = float(modnum / (10**powerlenmodint))                        modreduced_str = "%.2f" % (modreduced)                                                power = words_line14[2]                        power10 = str(power.strip('A/m'))                        powernum = int(power10.strip('E-'))                        powernum = powernum + 2 - powerlenmodint                        powernum_str = "E-0" + str(powernum)                        intensity = modreduced_str + powernum_str                        #intensity = modreduced * 10**(-powernum) # This is the old float version of intensity                        precision = words_line14[4]                        words_line18 = line18.split()                        coredec = (words_line18[2])                        coreinc = (words_line18[3])                        if geogwords[0] == 'GEOGR.S.':                            geodec = (geogwords[1])                            geoinc = (geogwords[2])                        else:                            geodec = coredec                            geoinc = coreinc                        if tiltwords and tiltwords[0] == 'TILT':                            tiltdec = (tiltwords[2])                                                               tiltinc = (tiltwords[3])                        else:                            tiltdec = geodec                            tiltinc = geoinc                        stepspace = " " * (5 - len(dmagstep))                        intensityspace = " " * (8 - len(intensity))                        error = precision[:len(precision)-1]                        errorspace = " " * (5 - len(error))                        if self.coordtype == "Core":                            dec = coredec                            inc = coreinc                        elif self.coordtype == "Geographic":                            if geogpresent:                                dec = geodec                                inc = geoinc                            else:                                self.coordtype = "Core"                                dec = coredec                                inc = coreinc                        elif self.coordtype == "Tilt":                            if tiltpresent:                                dec = tiltdec                                inc = tiltinc                            elif geogpresent:                                self.coordtype = "Geographic"                                dec = geodec                                inc = geoinc                            else:                                self.coordtype = "Core"                                dec = coredec                                inc = coreinc                        decspace = " " * (3 - len(dec))                        incspace = " " * (3 - len(inc))                        stepletter = getstepletter(recordnum)                        stepvars = [dmagstep,float(dec),float(inc),intensity,stepspace,float(error),errorspace,decspace,incspace,True,stepletter,intensityspace,printlabels] # True at the end sets each step to be displayed on the plots.                        stepdata = readstep(stepvars)                        sampledata.append(stepdata)                        recordnum = recordnum + 1                                    txtfile.close()        except StopIteration:            pass    elif self.datatype == "DAT": # 2G Long Core .dat Data        f = open(os.path.join(self.filepath, self.currentfile),'r') #Opens the sample file for reading.        stepnum = 0        for linenum, line in enumerate(f):            linelist = line.split()            if linenum >= 1:                specimen = linelist[0]                if specimen == samplename:                    coreplatestrike = linelist[5]                    coreplatedip = linelist[6]                    beddingstrike = linelist[7]                    beddingdip = linelist[8]                    if (coreplatestrike == "0.00" and coreplatedip == "90.0"):                        geogpresent = False                    if (beddingstrike == "0.00" and beddingdip == "0.00"):                        tiltpresent = False                    if self.coordtype == "Core":                        coordcol = 9                    elif self.coordtype == "Geographic":                        if geogpresent:                            coordcol = 20                        else:                            self.coordtype = "Core"                            coordcol = 9                    elif self.coordtype == "Tilt":                        if geogpresent:                            coordcol = 20                            self.coordtype = "Geographic"                        else:                            self.coordtype = "Core"                            coordcol = 9                    dmagstep = linelist[1]                    dec_str = linelist[coordcol]                    dec = float(dec_str.replace(",", " "))                    dec_str = "%.1f" % dec                                        inc_str = linelist[coordcol + 1]                    inc = float(inc_str)                    inc_str = "%.1f" % inc                                                        intensity_str = linelist[11].upper()                    int_mod_str = intensity_str.rsplit('E', 1)[0]                    int_mod_str = int_mod_str[:5]                    int_mod_num = float(int_mod_str)                    int_mod_num_round = round(int_mod_num,2)                    int_mod_num_round_str = str(int_mod_num_round)                    int_power_str = intensity_str.rsplit('E', 1)[1]                    int_power_num = int(float(int_power_str) + 1) # Multiply by 10 to convert to Rapid intensity scale                    int_power_str = str(int_power_num)                    intensity = int_mod_num_round_str + "E" + int_power_str                                                               error = "N/A"                    stepspace = " " * (6 - len(dmagstep))                    errorspace = "  "                    decspace = " " * (5 - len(dec_str))                    incspace = " " * (5 - len(inc_str))                    intensityspace = " " * (8 - len(intensity))                    stepletter = getstepletter(stepnum)                    stepvars = [dmagstep,float(dec_str),float(inc_str),intensity,stepspace,error,errorspace,decspace,incspace,True,stepletter,intensityspace,printlabels] # True at the end sets each step to be displayed on the plots.                    stepdata = readstep(stepvars)                    sampledata.append(stepdata)                    stepnum = stepnum + 1        f.close()    return([sampledata,coreplatestrike,coreplatedip,beddingstrike,beddingdip,geogpresent,tiltpresent])def getsampletext(sampledata):    sampletext = []    currentsampsteps_clean = []    steplist = []    for textindex, stepdata in enumerate(sampledata):        stepletter = stepdata.stepletter + ' '         if len(stepletter) == 2:            stepletter = ' ' + stepletter        if textindex == 0:            textforstep = "%s%s%s: Err: %s%s%s Int: %s%s              Dec: %s%s%s Inc: %s%s%s" % (stepletter, stepdata.stepspace, stepdata.dmagstep, stepdata.errorspace, stepdata.error, degree_sign, stepdata.intensityspace,                                                                                                       stepdata.intensity, stepdata.decspace, stepdata.dec, degree_sign, stepdata.incspace, stepdata.inc,degree_sign)        else:            d1north = math.cos(math.radians(stepdata.dec)) * math.cos(math.radians(stepdata.inc))            d1east = math.sin(math.radians(stepdata.dec)) * math.cos(math.radians(stepdata.inc))            d1down = math.sin(math.radians(stepdata.inc))            d2north = math.cos(math.radians(prev_dec)) * math.cos(math.radians(prev_inc))            d2east = math.sin(math.radians(prev_dec)) * math.cos(math.radians(prev_inc))            d2down = math.sin(math.radians(prev_inc))                        vdotproduct = float((d1north * d2north) + (d1east * d2east) + (d1down * d2down))            if vdotproduct > 1.0:                vdotproduct = 1.0            angdist = math.degrees(math.acos(vdotproduct))            angdistprint = str("%.1f" % angdist) # Angular distance from previous measurement.            angspace = " " * (5 - len(angdistprint))            textforstep = "%s%s%s: Err: %s%s%s Int: %s%s Diff: %s%s%s Dec: %s%s%s Inc: %s%s%s" % (stepletter, stepdata.stepspace, stepdata.dmagstep, stepdata.errorspace, stepdata.error, degree_sign, stepdata.intensityspace,                                                                                    stepdata.intensity, angspace, angdistprint, degree_sign, stepdata.decspace, stepdata.dec, degree_sign, stepdata.incspace, stepdata.inc, degree_sign)            if stepdata.dmagstep_clean in currentsampsteps_clean:                duplicatetext = "WARNING!\nDuplicate Step of %s" % sampledata[textindex].dmagstep_mod             currentsampsteps_clean.append(stepdata.dmagstep_clean)        sampletext.append(textforstep)        steplist.append(stepdata.dmagstep)        prev_dec = stepdata.dec        prev_inc = stepdata.inc    return([sampletext,steplist])def getsteptext(sampledata, samplename):    samplesteptext = []    for step in sampledata:        namespace = (10 - len(samplename) ) * " "        decspace = (6 - len(str(step.dec)) ) * " "        incspace = (6 - len(str(step.inc)) ) * " "        intensityspace = (8 - len(step.intensity) ) * " "        errorspace = (5 - len(str(step.error)) ) * " "        newsamplesteptext = " %s:%s Step: %s Dec:%s%s Inc:%s%s Int: %s%s Err:%s%s" % (samplename, namespace, step.dmagstep_clean, decspace, step.dec, incspace, step.inc, intensityspace, step.intensity, errorspace, step.error)        samplesteptext.append(newsamplesteptext)    return(samplesteptext)class Steptextinsite:    def __init__(self,index,newsamplesteptext,samplename,dmagstep_clean,dec,inc,intensity,error):        self.index = index        self.show = True        self.zij2_printdeclabel = True        self.zij2_printinclabel = True        self.eq2_printlabel = True        self.jjo2_printlabel = True        self.text = newsamplesteptext        self.samplename = samplename        self.dmagstep_clean = dmagstep_clean        self.dec = dec        self.inc = inc        self.intensity = intensity        self.error = error        returndef getsitesteptext(self,changecoordtype):    newsitesteptext = []    self.tiltpresent = True    self.geogpresent = True    for sampindex, samplefortext in enumerate(self.sitedata):        for stepindex, step in enumerate(samplefortext.data):            if step.dmagstep_clean == self.currentstep:                if not(samplefortext.tiltpresent):                    self.tiltpresent = False                if not(samplefortext.geogpresent):                    self.geogpresent = False                newsamplesteptext = samplefortext.steptext[stepindex]                newsamplestepitem = Steptextinsite(sampindex, newsamplesteptext,samplefortext.name, step.dmagstep_clean, step.dec, step.inc, float(step.intensity), step.error)                newsitesteptext.append(newsamplestepitem)    if changecoordtype:        if self.tiltpresent:            self.coordtype = "Tilt"        elif self.geogpresent:            self.coordtype = "Geographic"        else:            self.coordtype = "Core"    return(newsitesteptext)################ Tooltip Functions ################### Modified code borrowed from: https://stackoverflow.com/questions/3221956/how-do-i-display-tooltips-in-tkinter###################################################class CreateToolTip(object):    def __init__(tooltip, widget, x_offset, y_offset, wraplength, self, text='widget info'):        tooltip.waittime = 500     #miliseconds        tooltip.wraplength = wraplength   #pixels        tooltip.widget = widget        tooltip.text = text        tooltip.widget.bind("<Enter>", tooltip.enter)        tooltip.widget.bind("<Leave>", tooltip.leave)        tooltip.widget.bind("<ButtonPress>", tooltip.leave)        tooltip.widget.bind_all("<MouseWheel>", self._on_mousewheel_y)        tooltip.widget.bind_all("<Control-MouseWheel>", self._on_mousewheel_x)        tooltip.widget.bind_all("<Control-Up>", self.bigmovewin)        tooltip.widget.bind_all("<Control-Down>", self.bigmovewin)        tooltip.widget.bind_all("<Control-Left>", self.bigmovewin)        tooltip.widget.bind_all("<Control-Right>", self.bigmovewin)        tooltip.widget.bind_all("<Prior>", self.bigmovewin)        tooltip.widget.bind_all("<Next>", self.bigmovewin)        tooltip.widget.bind_all("<Control-Home>", self.bigmovewin)        tooltip.widget.bind_all("<Control-End>", self.bigmovewin)        tooltip.widget.bind_all("<Up>", self.arrowmovewin)        tooltip.widget.bind_all("<Down>", self.arrowmovewin)        tooltip.widget.bind_all("<Left>", self.arrowmovewin)        tooltip.widget.bind_all("<Right>", self.arrowmovewin)        tooltip.id = None        tooltip.tw = None        tooltip.x_offset = x_offset        tooltip.y_offset = y_offset        return    def enter(tooltip, event=None):        tooltip.schedule()        return    def leave(tooltip, event=None):        tooltip.unschedule()        tooltip.hidetip()        return    def schedule(tooltip):        tooltip.unschedule()        tooltip.id = tooltip.widget.after(tooltip.waittime, tooltip.showtip)        return    def unschedule(tooltip):        id = tooltip.id        tooltip.id = None        if id:            tooltip.widget.after_cancel(id)        return    def showtip(tooltip, event=None):        global tooltipshowing        x = 0        y = 0        x, y, cx, cy = tooltip.widget.bbox("insert")        x += tooltip.widget.winfo_rootx() + tooltip.x_offset        y += tooltip.widget.winfo_rooty() + tooltip.y_offset        tooltip.tw = tk1.Toplevel(tooltip.widget) # creates a toplevel window                tooltip.tw.wm_overrideredirect(True) # Leaves only the label and removes the app window        tooltip.tw.wm_geometry("+%d+%d" % (x, y))        label = tk1.Label(tooltip.tw, text=tooltip.text, justify='left',background="#ffffff", relief='solid', borderwidth=1,wraplength = tooltip.wraplength)        label.pack(ipadx=1)        tooltipshowing = True        return    def hidetip(tooltip):        tw = tooltip.tw        tooltip.tw= None        if tw:            tw.destroy()            global tooltipshowing            tooltipshowing = False        return##################################################################### Main Plot Functions #####################################################################def plotanything(self):    if self.plottype == "samples":        for step in self.sample.data:            if step.show:                return(True)    elif self.plottype == "steps":        for sample in self.sitesteptext:            if sample.show:                return(True)    elif self.plottype == "multiple":        for sample in self.sitedata:            if sample.show:                for step in sample.data:                    if step.show:                        return(True)        return(False)                    def closewin(window):    window.destroy()    window.quit()    return################ Zijderveld Functions ################def zij_update_annot(ind,item):    global zij_annot    pos = item[0].get_offsets()[ind["ind"][0]]    zij_annot.xy = pos    text = (item[1])    zij_annot.set_text(text)    zij_annot.get_bbox_patch().set_color(item[2])    zij_annot.get_bbox_patch().set_facecolor('#f3f2f1')    zij_annot.get_bbox_patch().set_alpha(0.75)    returndef zij_on_plot_hover(event):    vis = zij_annot.get_visible()    for item in range(0,len(zij_annot_pointlist)):        onpoint, ind = zij_annot_pointlist[item][0].contains(event)        if onpoint:            zij_update_annot(ind,zij_annot_pointlist[item])            zij_annot.set_visible(True)            fig.canvas.draw_idle()        else:            if vis:                zij_annot.set_visible(False)                fig.canvas.draw_idle()    returndef plotzij_sample(self,zijcont,ax0,fig):    if plotanything(self):        global zij_annot_pointlist        zij_annot_pointlist = []        x_list = []        y_list = []        zijpointlist = []        decnorth = self.incplot_azimuth - 90        hitshow = False        for step in self.sample.data:            if step.show: #check if show each step                dec = step.dec                rotate_dec = dec - self.incplot_azimuth + 90                rad_dec = math.radians(rotate_dec)                inc = step.inc                rad_inc = math.radians(inc)                intensity = float(step.intensity)                east = math.sin(rad_dec) * math.cos(rad_inc)                north = math.cos(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                if self.hyperbolic and not(hitshow):                    firstpoint_x_sign = np.sign(east)                    hitshow = True                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                x_list.append(east_scaled)                y_list.append(north_scaled)                y_list.append(down_scaled)                if self.hyperbolic:                    inc_x = firstpoint_x_sign * math.cos(rad_inc) * intensity                    x_list.append(inc_x)        max_x = max(x_list)        min_x = min(x_list)        max_y = max(y_list)        min_y = min(y_list)                ax0.set_aspect('equal')        plt.subplots_adjust()                tickspace = (max(abs(max_x), abs(min_x), abs(max_y), abs(min_y))) / zijcont.numticks        if self.totalplots in [3,4]:            zijplotspacer = 4        elif self.totalplots == 2:            zijplotspacer = 6        elif self.totalplots == 1:            zijplotspacer = 5        if min_x < 0:            x_axis_min = min_x - (tickspace * zijplotspacer)            x_plotaxis_min = min_x - (tickspace * 2)        else:            x_axis_min = -tickspace * zijplotspacer            x_plotaxis_min = -tickspace * 2        if max_x > 0:            x_axis_max = max_x  + (tickspace * zijplotspacer)            x_plotaxis_max = max_x  + (tickspace * 2)        else:            x_axis_max = tickspace * zijplotspacer            x_plotaxis_max = tickspace * 2        if min_y < 0:            y_axis_min = min_y - (tickspace * zijplotspacer)            y_plotaxis_min = min_y - (tickspace * 2)        else:            y_axis_min = -tickspace * zijplotspacer            y_plotaxis_min = -tickspace * 2        if max_y > 0:            y_axis_max = max_y + (tickspace * zijplotspacer)            y_plotaxis_max = max_y + (tickspace * 2)        else:            y_axis_max = tickspace * zijplotspacer            y_plotaxis_max = tickspace * 2        ax0.axis([x_axis_min, x_axis_max, y_axis_min, y_axis_max])        if zijcont.show_axes:            ax0.plot([x_plotaxis_min, x_plotaxis_max], [0,0],zijcont.axes_color,lw=zijcont.axis_width)            ax0.plot([0,0], [y_plotaxis_min,y_plotaxis_max],zijcont.axes_color,lw=zijcont.axis_width)        ax0.axis('off')             if zijcont.show_ticks:            tick_x = tickspace            while tick_x < abs(x_plotaxis_min):                ax0.plot([-tick_x,-tick_x],[-tickspace/(11-zijcont.tick_length),tickspace/(11-zijcont.tick_length)],zijcont.tick_color,lw=zijcont.tick_width)                tick_x = tick_x + tickspace            tick_x = tickspace            while tick_x < abs(x_plotaxis_max):                ax0.plot([tick_x,tick_x],[-tickspace/(11-zijcont.tick_length),tickspace/(11-zijcont.tick_length)],zijcont.tick_color,lw=zijcont.tick_width)                tick_x = tick_x + tickspace            tick_y = tickspace            while tick_y < abs(y_plotaxis_min):                ax0.plot([-tickspace/(11-zijcont.tick_length),tickspace/(11-zijcont.tick_length)],[-tick_y,-tick_y],zijcont.tick_color,lw=zijcont.tick_width)                tick_y = tick_y + tickspace            tick_y = tickspace            while tick_y < abs(y_plotaxis_max):                ax0.plot([-tickspace/(11-zijcont.tick_length),tickspace/(11-zijcont.tick_length)],[tick_y,tick_y],zijcont.tick_color,lw=zijcont.tick_width)                tick_y = tick_y + tickspace        zij_step_fontsize = fontsizes_dict[zijcont.step_fontsize_mod][self.totalplots][0]        step_x = tickspace / fontsizes_dict[zijcont.step_fontsize_mod][self.totalplots][1]        step_y = fontsizes_dict[zijcont.step_fontsize_mod][self.totalplots][2]        hitshow = False        for plotzijindex, step in enumerate(self.sample.data):            if step.show: # check if plot this step                dec = step.dec                rotate_dec = dec - self.incplot_azimuth + 90                rad_dec = math.radians(rotate_dec)                                    inc = step.inc                rad_inc = math.radians(inc)                                intensity = float(step.intensity)                dmagstep = step.dmagstep                east = math.sin(rad_dec) * math.cos(rad_inc)                north = math.cos(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                stepletter = step.stepletter                dec_size = zijcont.dec_size                inc_size = zijcont.inc_size                dec_color = zijcont.dec_color                inc_color = zijcont.inc_color                dec_symbol = zijcont.dec_symbol                inc_symbol = zijcont.inc_symbol                if zijcont.error_scaling == "Size":                    try:                        error = float(step.error)                    except:                        error = 0                    symbolsize = 16 * error                    dec_size = symbolsize                    inc_size = symbolsize                elif zijcont.error_scaling == "Color":                    try:                        error = float(step.error)                    except:                        error = 0                    symbolcolor = getsymbolcolor(error)                    dec_color = symbolcolor                    inc_color = symbolcolor                    if dec_symbol == inc_symbol:                        if dec_symbol == "o":                            inc_symbol = "s"                        else:                            inc_symbol = "o"                 if zijcont.show_dec:                    if zijcont.show_dec_edge:                        newpoint = ax0.scatter(east_scaled, north_scaled, color=dec_color, s=dec_size, marker=dec_symbol, edgecolor=zijcont.dec_edge_color, linewidth=zijcont.dec_edge_width, zorder=2)                    else:                        newpoint = ax0.scatter(east_scaled, north_scaled, color=dec_color, s=dec_size, marker=dec_symbol, zorder=2)                    zij_annot_pointlist.append([newpoint,"Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),zijcont.dec_color])                if self.hyperbolic:                    east_hb = firstpoint_x_sign * math.cos(rad_inc) * intensity                                    if zijcont.show_inc:                    if zijcont.show_inc_edge:                        if not(self.hyperbolic):                            newpoint = ax0.scatter(east_scaled, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, edgecolor=zijcont.inc_edge_color, linewidth=zijcont.inc_edge_width, zorder=2)                        else:                            newpoint = ax0.scatter(east_hb, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, edgecolor=zijcont.inc_edge_color, linewidth=zijcont.inc_edge_width, zorder=2)                    else:                        if not(self.hyperbolic):                            newpoint = ax0.scatter(east_scaled, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, zorder=2)                        else:                            newpoint = ax0.scatter(east_hb, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, zorder=2)                    zij_annot_pointlist.append([newpoint,"Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),zijcont.inc_color])                if step.zij_printdeclabel:                    if zijcont.show_dec:                        ax0.text(east_scaled + step_x, north_scaled + step_y, dmagstep,color=zijcont.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                if step.zij_printinclabel:                    if zijcont.show_inc:                        if not(self.hyperbolic):                            ax0.text(east_scaled + step_x, down_scaled + step_y, dmagstep,color=zijcont.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                        else:                            ax0.text(east_hb + step_x, down_scaled + step_y, dmagstep,color=zijcont.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                                            if plotzijindex == 0 or hitshow == False:                    if zijcont.show_firststep:                        if zijcont.show_firststep_edge:                            if zijcont.show_dec:                                ax0.scatter(east_scaled, north_scaled, color=zijcont.firststep_color, s=zijcont.firststep_size, marker=zijcont.firststep_symbol, edgecolor=zijcont.firststep_edge_color, linewidth=zijcont.firststep_edge_width, zorder=4)                            if zijcont.show_inc:                                if not(self.hyperbolic):                                    ax0.scatter(east_scaled, down_scaled, color=zijcont.firststep_color, s=zijcont.firststep_size, marker=zijcont.firststep_symbol, edgecolor=zijcont.firststep_edge_color, linewidth=zijcont.firststep_edge_width, zorder=4)                                else:                                    ax0.scatter(east_hb, down_scaled, color=zijcont.firststep_color, s=zijcont.firststep_size, marker=zijcont.firststep_symbol, edgecolor=zijcont.firststep_edge_color, linewidth=zijcont.firststep_edge_width, zorder=4)                        else:                            if zijcont.show_dec:                                ax0.scatter(east_scaled, north_scaled, color=zijcont.firststep_color, s=zijcont.firststep_size, marker=zijcont.firststep_symbol, zorder=4)                            if zijcont.show_inc:                                if not(self.hyperbolic):                                    ax0.scatter(east_scaled, down_scaled, color=zijcont.firststep_color, s=zijcont.firststep_size, marker=zijcont.firststep_symbol, zorder=4)                                else:                                    ax0.scatter(east_hb, down_scaled, color=zijcont.firststep_color, s=zijcont.firststep_size, marker=zijcont.firststep_symbol, zorder=4)                else:                    if zijcont.show_arrowlines:                        if zijcont.arrowsorlines == "Arrows":                            ediff = east_scaled_prev - east_scaled                            ndiff = north_scaled_prev - north_scaled                            zdiff = down_scaled_prev - down_scaled                            if self.hyperbolic:                                ediff_hb = east_hb_prev - east_hb                            if zijcont.arrowline_width !=0:                                if self.totalplots in [2,3,4]:                                    zijarrowwidth = tickspace/9*zijcont.arrowline_width                                else:                                    zijarrowwidth = tickspace/20*zijcont.arrowline_width                                if zijcont.show_dec:                                    ax0.quiver(east_scaled,north_scaled,ediff,ndiff,color=zijcont.arrowline_color,units='xy',scale=1,linewidth=zijcont.arrowline_width,width=zijarrowwidth,headwidth=zijcont.arrowhead_width,headlength=zijcont.arrowhead_length,zorder=3)                                if zijcont.show_inc:                                    if not(self.hyperbolic):                                        ax0.quiver(east_scaled,down_scaled,ediff,zdiff,color=zijcont.arrowline_color,units='xy',scale=1,linewidth=zijcont.arrowline_width,width=zijarrowwidth,headwidth=zijcont.arrowhead_width,headlength=zijcont.arrowhead_length,zorder=3)                                    else:                                        ax0.quiver(east_hb,down_scaled,ediff_hb,zdiff,color=zijcont.arrowline_color,units='xy',scale=1,linewidth=zijcont.arrowline_width,width=zijarrowwidth,headwidth=zijcont.arrowhead_width,headlength=zijcont.arrowhead_length,zorder=3)                        elif zijcont.arrowsorlines == "Lines":                            if zijcont.show_dec:                                ax0.plot([east_scaled_prev,east_scaled],[north_scaled_prev,north_scaled],color=zijcont.arrowline_color,lw=zijcont.arrowline_width,zorder=0)                            if zijcont.show_inc:                                if not(self.hyperbolic):                                    ax0.plot([east_scaled_prev,east_scaled],[down_scaled_prev,down_scaled],color=zijcont.arrowline_color,lw=zijcont.arrowline_width,zorder=0)                                else:                                    ax0.plot([east_hb_prev,east_hb],[down_scaled_prev,down_scaled],color=zijcont.arrowline_color,lw=zijcont.arrowline_width,zorder=0)                hitshow = True                            east_scaled_prev = east_scaled            north_scaled_prev = north_scaled            down_scaled_prev = down_scaled            if self.hyperbolic:                east_hb_prev = east_hb            if self.sample.arrowlist != [] or self.sample.bflinelist != 0:                newpoint = [east_scaled,north_scaled,down_scaled,step.show]                zijpointlist.append(newpoint)        if self.sample.arrowlist != []:            for arrow in self.sample.arrowlist:                startstep = arrow[0][0]                endstep = arrow[0][1]                for plotzijindex, step in enumerate(self.sample.data):                    if step.dmagstep == startstep:                        if step.show:                            plotstart = True                            starteast = zijpointlist[plotzijindex][0]                            startnorth = zijpointlist[plotzijindex][1]                            startdown = zijpointlist[plotzijindex][2]                        else:                            plotstart = False                                            if step.dmagstep == endstep:                        if step.show:                            plotend = True                            endeast = zijpointlist[plotzijindex][0]                            endnorth = zijpointlist[plotzijindex][1]                            enddown = zijpointlist[plotzijindex][2]                        else:                            plotend = False                if plotstart and plotend:                    e_arrowdiff = endeast - starteast                    n_arrowdiff = endnorth - startnorth                    z_arrowdiff = enddown - startdown                    zijarrowwidth = tickspace/9                    pointarrowwidth = tickspace/9*arrow[2]                    ax0.quiver(starteast,startnorth,e_arrowdiff,n_arrowdiff,color=arrow[1],units='xy',scale=1,linewidth=arrow[2],width=pointarrowwidth,headwidth=zijcont.arrowhead_width,headlength=zijcont.arrowhead_length,zorder=3)                    ax0.quiver(starteast,startdown,e_arrowdiff,z_arrowdiff,color=arrow[1],units='xy',scale=1,linewidth=arrow[2],width=pointarrowwidth,headwidth=zijcont.arrowhead_width,headlength=zijcont.arrowhead_length,zorder=3)                if self.sample.bflinelist != []:            for bfline in self.sample.bflinelist:                E_list = []                N_list = []                D_list = []                bflinesteplist = bfline[0]                missingpoint = False                for pointstepindex in bflinesteplist:                    if not(zijpointlist[pointstepindex][3]):                        missingpoint = True                        break                    E_list.append(zijpointlist[pointstepindex][0])                    N_list.append(zijpointlist[pointstepindex][1])                    D_list.append(zijpointlist[pointstepindex][2])                if missingpoint:                    continue                                meanE = sum(E_list)/len(E_list)                meanN = sum(N_list)/len(N_list)                meanD = sum(D_list)/len(D_list)                EvN_slopenumerator = 0                EvD_slopenumerator = 0                slopedenominator = 0                for slopeindex in range(0,len(bflinesteplist)):                    EvN_slopenumerator = EvN_slopenumerator + ( (E_list[slopeindex] - meanE) * (N_list[slopeindex] - meanN) )                    EvD_slopenumerator = EvD_slopenumerator + ( (E_list[slopeindex] - meanE) * (D_list[slopeindex] - meanD) )                    slopedenominator = slopedenominator + (E_list[slopeindex] - meanE)**2                EvN_slope = EvN_slopenumerator / slopedenominator                EvD_slope = EvD_slopenumerator / slopedenominator                EvN_yintercept = meanN - (EvN_slope * meanE)                EvD_yintercept = meanD - (EvD_slope * meanE)                minE = min(E_list)                maxE = max(E_list)                                ax0.plot([maxE,minE],[(maxE*EvN_slope) + EvN_yintercept,(minE*EvN_slope) + EvN_yintercept],color=bfline[1],lw=bfline[2],zorder=5)                ax0.plot([maxE,minE],[(maxE*EvD_slope) + EvD_yintercept,(minE*EvD_slope) + EvD_yintercept],color=bfline[1],lw=bfline[2],zorder=5)        if zijcont.show_laststep:            if zijcont.show_laststep_edge:                if zijcont.show_dec:                     ax0.scatter(east_scaled, north_scaled, color=zijcont.laststep_color, s=zijcont.laststep_size, marker=zijcont.laststep_symbol, edgecolor=zijcont.laststep_edge_color, linewidth=zijcont.laststep_edge_width, zorder=4)                if zijcont.show_inc:                    if not(self.hyperbolic):                        ax0.scatter(east_scaled, down_scaled, color=zijcont.laststep_color, s=zijcont.laststep_size, marker=zijcont.laststep_symbol, edgecolor=zijcont.laststep_edge_color, linewidth=zijcont.laststep_edge_width, zorder=4)                    else:                        ax0.scatter(east_hb, down_scaled, color=zijcont.laststep_color, s=zijcont.laststep_size, marker=zijcont.laststep_symbol, edgecolor=zijcont.laststep_edge_color, linewidth=zijcont.laststep_edge_width, zorder=4)            else:                if zijcont.show_dec:                    ax0.scatter(east_scaled, north_scaled, color=zijcont.laststep_color, s=zijcont.laststep_size, marker=zijcont.laststep_symbol, zorder=4)                if zijcont.show_inc:                    if not(self.hyperbolic):                        ax0.scatter(east_scaled, down_scaled, color=zijcont.laststep_color, s=zijcont.laststep_size, marker=zijcont.laststep_symbol, zorder=4)                    else:                        ax0.scatter(east_hb, down_scaled, color=zijcont.laststep_color, s=zijcont.laststep_size, marker=zijcont.laststep_symbol, zorder=4)                    if zijcont.show_labels:            if decnorth == 0:                northlabel = "North, Up"                southlabel = "South, Down"                eastlabel = "East"                eastlegend = "East"                westlabel = "West"                northlegend = "North"                if self.hyperbolic:                    eastlabel = eastlabel + "\nHyperbolic"                    westlabel = westlabel + "\nHyperbolic"            elif decnorth == -90:                northlabel = "West, Up"                southlabel = "East, Down"                eastlabel = "North"                eastlegend =  "North"                westlabel = "South"                northlegend = "West"            else:                if decnorth < 0:                    decnorth = decnorth + 360                northlabelval = decnorth % 360                southlabelval = (decnorth + 180) % 360                eastlabelval = self.incplot_azimuth                westlabelval = (self.incplot_azimuth - 180) % 360                northlabel = "%.1f%s, Up" % (northlabelval, degree_sign)                southlabel = "%.1f%s, Down" % (southlabelval, degree_sign)                eastlabel = "%.1f%s" % (eastlabelval, degree_sign)                westlabel = "%.1f%s" % (westlabelval, degree_sign)                eastlegend = "%.1f%s" % (eastlabelval, degree_sign)                northlegend = "%.1f%s" % (northlabelval, degree_sign)                            ax0.text(0, y_plotaxis_max + tickspace/3, northlabel,color=zijcont.label_color,ha='center',va='bottom',zorder=4,fontsize=fontsizes_dict[zijcont.label_fontsize_mod][self.totalplots][0])            ax0.text(0, y_plotaxis_min - tickspace/3, southlabel,color=zijcont.label_color,ha='center',va='top',zorder=4,fontsize=fontsizes_dict[zijcont.label_fontsize_mod][self.totalplots][0])            ax0.text(x_plotaxis_max + tickspace/3, 0, eastlabel,color=zijcont.label_color,va='center',ha='left',zorder=4,fontsize=fontsizes_dict[zijcont.label_fontsize_mod][self.totalplots][0])            ax0.text(x_plotaxis_min - tickspace/3, 0, westlabel,color=zijcont.label_color,va='center',ha='right',zorder=4,fontsize=fontsizes_dict[zijcont.label_fontsize_mod][self.totalplots][0])        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        legendicons = []        legend_label = []        if zijcont.error_scaling == "Color":            legend_dec_color = "white"            legend_inc_color = "white"        else:            legend_dec_color = zijcont.dec_color            legend_inc_color = zijcont.inc_color                    if zijcont.show_dec:            blue_sq, = ax0.plot(-10000, dec_symbol, color=legend_dec_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(blue_sq)            legend_label.append("Declination (%s vs. %s)" % (eastlegend, northlegend))        if zijcont.show_inc:            red_sq, = ax0.plot(-10000, inc_symbol, color=legend_inc_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(red_sq)            if not(self.hyperbolic):                legend_label.append("Inclination (%s vs. Up)" % (eastlegend))            else:                legend_label.append("Inclination (Hyperbolic vs. Up)")        if self.totalplots in [2, 3,4]:            blank_icon, = ax0.plot(-100000,color='white',marker=".",markersize=0,zorder=0,linestyle="none")            legendicons.append(blank_icon)            tickspace_format = format(tickspace, '.2e')            legend_label.append("Tick Length: %s" % tickspace_format)        if zijcont.show_firststep:            yellow_sq, = ax0.plot(-10000, zijcont.firststep_symbol, color=zijcont.firststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_sq)            legend_label.append("First Step")        if zijcont.show_laststep:            yellow_tri, = ax0.plot(-10000, zijcont.laststep_symbol, color=zijcont.laststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_tri)            legend_label.append("Last Step")        if self.totalplots == 1:            blank_icon, = ax0.plot(-100000,color='white',marker=".",markersize=0,zorder=0,linestyle="none")            legendicons.append(blank_icon)            tickspace_format = format(tickspace, '.2e')            legend_label.append("Tick Length: %s" % tickspace_format)        if self.totalplots in [3,4]:            if zijcont.show_legend and (zijcont.show_dec or zijcont.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=8,loc=3,bbox_to_anchor=(0.01, 0.78),bbox_transform=plt.gcf().transFigure,frameon=False)                for text in zijlegend.get_texts():                    text.set_color(zijcont.legend_color)            if zijcont.show_title:                ax0.text(10, 470, "%s Zijd. %s" % (self.sample.name,up_arrow), color=zijcont.title_color,zorder=4,va='bottom',ha='left',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 2:            if zijcont.show_legend and (zijcont.show_dec or zijcont.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=3,bbox_to_anchor=(0.225, 0.15),ncol=2,bbox_transform=plt.gcf().transFigure,fancybox=True, shadow=True)                for text in zijlegend.get_texts():                    text.set_color(zijcont.legend_color)            if zijcont.show_title:                ax0.text(350, 850, "%s Zijderveld Plot" % (self.sample.name), color=zijcont.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 1:            if zijcont.show_legend and (zijcont.show_dec or zijcont.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=3,bbox_to_anchor=(0.99, -0.008),ncol=3,bbox_transform=plt.gcf().transFigure,fancybox=True, shadow=True)                for text in zijlegend.get_texts():                    text.set_color(zijcont.legend_color)            if zijcont.show_title:                ax0.text(10, 16, "%s Zijderveld Plot" % (self.sample.name), color=zijcont.title_color,zorder=4,va='bottom',ha='left',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)            plt.tight_layout()        if zijcont.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', zij_on_plot_hover)            global zij_annot            zij_annot = ax0.annotate("", xy=(0,0), xytext=(20,-20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            zij_annot.set_visible(False)            else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax0.text(350, 570, "%s Zijderveld Plot - No Steps Shown" % self.sample.name, color=zijcont.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)    returndef plotzij_step(self,zijcont2,ax0,fig):    if plotanything(self):        global zij_annot_pointlist        zij_annot_pointlist = []        x_list = []        y_list = []        zijpointlist = []        decnorth = self.incplot_azimuth - 90        hitshow = False        for sample in self.sitesteptext:            if sample.show: #check if show each step                dec = sample.dec                rotate_dec = dec - self.incplot_azimuth + 90                rad_dec = math.radians(rotate_dec)                inc = sample.inc                rad_inc = math.radians(inc)                intensity = float(sample.intensity)                east = math.sin(rad_dec) * math.cos(rad_inc)                north = math.cos(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                if self.hyperbolic and not(hitshow):                    firstpoint_x_sign = np.sign(east)                    hitshow = True                x_list.append(east_scaled)                y_list.append(north_scaled)                y_list.append(down_scaled)                if self.hyperbolic:                    inc_x = firstpoint_x_sign * math.cos(rad_inc) * intensity                    x_list.append(inc_x)        max_x = max(x_list)        min_x = min(x_list)        max_y = max(y_list)        min_y = min(y_list)                ax0.set_aspect('equal')        plt.subplots_adjust()        tickspace = (max(abs(max_x), abs(min_x), abs(max_y), abs(min_y))) / zijcont2.numticks        if self.totalplots in [3,4]:            zijplotspacer = 4        elif self.totalplots == 2:            zijplotspacer = 6        elif self.totalplots == 1:            zijplotspacer = 5        if min_x < 0:            x_axis_min = min_x - (tickspace * zijplotspacer)            x_plotaxis_min = min_x - (tickspace * 2)        else:            x_axis_min = -tickspace * zijplotspacer            x_plotaxis_min = -tickspace * 2        if max_x > 0:            x_axis_max = max_x  + (tickspace * zijplotspacer)            x_plotaxis_max = max_x  + (tickspace * 2)        else:            x_axis_max = tickspace * zijplotspacer            x_plotaxis_max = tickspace * 2        if min_y < 0:            y_axis_min = min_y - (tickspace * zijplotspacer)            y_plotaxis_min = min_y - (tickspace * 2)        else:            y_axis_min = -tickspace * zijplotspacer            y_plotaxis_min = -tickspace * 2        if max_y > 0:            y_axis_max = max_y + (tickspace * zijplotspacer)            y_plotaxis_max = max_y + (tickspace * 2)        else:            y_axis_max = -tickspace * zijplotspacer            y_plotaxis_max = -tickspace * 2        ax0.axis([x_axis_min, x_axis_max, y_axis_min, y_axis_max])        if zijcont2.show_axes:            ax0.plot([x_plotaxis_min, x_plotaxis_max], [0,0],zijcont2.axes_color,lw=zijcont2.axis_width)            ax0.plot([0,0], [y_plotaxis_min,y_plotaxis_max],zijcont2.axes_color,lw=zijcont2.axis_width)        ax0.axis('off')        if zijcont2.show_ticks:            tick_x = tickspace            while tick_x < abs(x_plotaxis_min):                ax0.plot([-tick_x,-tick_x],[-tickspace/(11-zijcont2.tick_length),tickspace/(11-zijcont2.tick_length)],zijcont2.tick_color,lw=zijcont2.tick_width)                tick_x = tick_x + tickspace            tick_x = tickspace            while tick_x < abs(x_plotaxis_max):                ax0.plot([tick_x,tick_x],[-tickspace/(11-zijcont2.tick_length),tickspace/(11-zijcont2.tick_length)],zijcont2.tick_color,lw=zijcont2.tick_width)                tick_x = tick_x + tickspace            tick_y = tickspace            while tick_y < abs(y_plotaxis_min):                ax0.plot([-tickspace/(11-zijcont2.tick_length),tickspace/(11-zijcont2.tick_length)],[-tick_y,-tick_y],zijcont2.tick_color,lw=zijcont2.tick_width)                tick_y = tick_y + tickspace            tick_y = tickspace            while tick_y < abs(y_plotaxis_max):                ax0.plot([-tickspace/(11-zijcont2.tick_length),tickspace/(11-zijcont2.tick_length)],[tick_y,tick_y],zijcont2.tick_color,lw=zijcont2.tick_width)                tick_y = tick_y + tickspace        zij_step_fontsize = fontsizes_dict[zijcont2.step_fontsize_mod][self.totalplots][0]        step_x = tickspace / fontsizes_dict[zijcont2.step_fontsize_mod][self.totalplots][1]        step_y = fontsizes_dict[zijcont2.step_fontsize_mod][self.totalplots][2]        for plotzijindex, sample in enumerate(self.sitesteptext):            if sample.show: # check if plot this step                dec = sample.dec                rotate_dec = dec - self.incplot_azimuth + 90                rad_dec = math.radians(rotate_dec)                inc = sample.inc                rad_inc = math.radians(inc)                intensity = float(sample.intensity)                dmagstep = sample.dmagstep_clean                east = math.sin(rad_dec) * math.cos(rad_inc)                north = math.cos(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                dec_size = zijcont2.dec_size                inc_size = zijcont2.inc_size                dec_color = zijcont2.dec_color                inc_color = zijcont2.inc_color                dec_symbol = zijcont2.dec_symbol                inc_symbol = zijcont2.inc_symbol                if zijcont2.error_scaling == "Size":                    try:                        error = float(sample.error)                    except:                        error = 0                    symbolsize = 16 * error                    dec_size = symbolsize                    inc_size = symbolsize                elif zijcont2.error_scaling == "Color":                    try:                        error = float(sample.error)                    except:                        error = 0                    symbolcolor = getsymbolcolor(error)                    dec_color = symbolcolor                    inc_color = symbolcolor                    if dec_symbol == inc_symbol:                        if dec_symbol == "o":                            inc_symbol = "s"                        else:                            inc_symbol = "o"                 if zijcont2.show_dec:                    if zijcont2.show_dec_edge:                        newpoint = ax0.scatter(east_scaled, north_scaled, color=dec_color, s=dec_size, marker=dec_symbol, edgecolor=zijcont2.dec_edge_color, linewidth=zijcont2.dec_edge_width, zorder=2)                    else:                        newpoint = ax0.scatter(east_scaled, north_scaled, color=dec_color, s=dec_size, marker=dec_symbol, zorder=2)                    zij_annot_pointlist.append([newpoint,"%s:\nStep: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.samplename,dmagstep,dec,degree_sign,inc,degree_sign,sample.intensity,sample.error,degree_sign),zijcont2.dec_color])                if self.hyperbolic:                    east_hb = firstpoint_x_sign * math.cos(rad_inc) * intensity                if zijcont2.show_inc:                    if zijcont2.show_inc_edge:                        if not(self.hyperbolic):                            newpoint = ax0.scatter(east_scaled, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, edgecolor=zijcont2.inc_edge_color, linewidth=zijcont2.inc_edge_width, zorder=2)                        else:                            newpoint = ax0.scatter(east_hb, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, edgecolor=zijcont2.inc_edge_color, linewidth=zijcont2.inc_edge_width, zorder=2)                    else:                        if not(self.hyperbolic):                            newpoint = ax0.scatter(east_scaled, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, zorder=2)                        else:                            newpoint = ax0.scatter(east_hb, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, zorder=2)                    zij_annot_pointlist.append([newpoint,"%s:\nStep: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.samplename,dmagstep,dec,degree_sign,inc,degree_sign,sample.intensity,sample.error,degree_sign),zijcont2.inc_color])                if sample.zij2_printdeclabel:                    if zijcont2.show_dec:                        ax0.text(east_scaled + step_x, north_scaled + step_y,sample.samplename,color=zijcont2.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                if sample.zij2_printinclabel:                    if zijcont2.show_inc:                        if not(self.hyperbolic):                            ax0.text(east_scaled + step_x, down_scaled + step_y,sample.samplename,color=zijcont2.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                        else:                            ax0.text(east_hb + step_x, down_scaled + step_y,sample.samplename,color=zijcont2.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)        if zijcont2.show_labels:            if decnorth == 0:                northlabel = "North, Up"                southlabel = "South, Down"                eastlabel = eastlegend = "East"                westlabel = "West"                                    northlegend = "North"                if self.hyperbolic:                    eastlabel = eastlabel + "\nHyperbolic"                    westlabel = westlabel + "\nHyperbolic"            elif decnorth == -90:                northlabel = "West, Up"                southlabel = "East, Down"                eastlabel = eastlegend = "North"                westlabel = "South"                northlegend = "West"            else:                if decnorth < 0:                    decnorth = decnorth + 360                northlabelval = decnorth % 360                southlabelval = (decnorth + 180) % 360                eastlabelval = self.incplot_azimuth                westlabelval = (self.incplot_azimuth - 180) % 360                northlabel = "%.1f%s, Up" % (northlabelval, degree_sign)                southlabel = "%.1f%s, Down" % (southlabelval, degree_sign)                eastlabel = "%.1f%s" % (eastlabelval, degree_sign)                westlabel = "%.1f%s" % (westlabelval, degree_sign)                eastlegend = "%.1f%s" % (eastlabelval, degree_sign)                northlegend = "%.1f%s" % (northlabelval, degree_sign)                            ax0.text(0, y_plotaxis_max + tickspace/3, northlabel,color=zijcont2.label_color,ha='center',va='bottom',zorder=4,fontsize=fontsizes_dict[zijcont2.label_fontsize_mod][self.totalplots][0])            ax0.text(0, y_plotaxis_min - tickspace/3, southlabel,color=zijcont2.label_color,ha='center',va='top',zorder=4,fontsize=fontsizes_dict[zijcont2.label_fontsize_mod][self.totalplots][0])            ax0.text(x_plotaxis_max + tickspace/3, 0, eastlabel,color=zijcont2.label_color,va='center',ha='left',zorder=4,fontsize=fontsizes_dict[zijcont2.label_fontsize_mod][self.totalplots][0])            ax0.text(x_plotaxis_min - tickspace/3, 0, westlabel,color=zijcont2.label_color,va='center',ha='right',zorder=4,fontsize=fontsizes_dict[zijcont2.label_fontsize_mod][self.totalplots][0])        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        legendicons = []        legend_label = []        if zijcont2.error_scaling == "Color":            legend_dec_color = "white"            legend_inc_color = "white"        else:            legend_dec_color = zijcont2.dec_color            legend_inc_color = zijcont2.inc_color        if zijcont2.show_dec:            blue_sq, = ax0.plot(-10000, dec_symbol, color=legend_dec_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(blue_sq)            legend_label.append("Declination (%s vs. %s)" % (eastlegend, northlegend))        if zijcont2.show_inc:            red_sq, = ax0.plot(-10000, inc_symbol, color=legend_inc_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(red_sq)            if not(self.hyperbolic):                legend_label.append("Inclination (%s vs. Up)" % (eastlegend))            else:                legend_label.append("Inclination (Hyperbolic vs. Up)")        blank_icon, = ax0.plot(-100000,color='white',marker=".",markersize=0,zorder=0,linestyle="none")        legendicons.append(blank_icon)        tickspace_format = format(tickspace, '.2e')        legend_label.append("Tick Length: %s" % tickspace_format)        if self.totalplots in [3,4]:            if zijcont2.show_legend and (zijcont2.show_dec or zijcont2.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=8,loc=3,bbox_to_anchor=(0.01, 0.84),bbox_transform=plt.gcf().transFigure,frameon=False)                for text in zijlegend.get_texts():                    text.set_color(zijcont2.legend_color)            if zijcont2.show_title:                ax0.text(10, 470, "%s %s Zijd. %s" % (self.sitename,self.currentstep,up_arrow), color=zijcont2.title_color,zorder=4,va='bottom',ha='left',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 2:            if zijcont2.show_legend and (zijcont2.show_dec or zijcont2.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=3,bbox_to_anchor=(0.225, 0.15),ncol=2,bbox_transform=plt.gcf().transFigure,fancybox=True, shadow=True)                for text in zijlegend.get_texts():                    text.set_color(zijcont2.legend_color)            if zijcont2.show_title:                ax0.text(350, 850, "%s %s Zijderveld Plot" % (self.sitename,self.currentstep), color=zijcont2.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 1:            if zijcont2.show_legend and (zijcont2.show_dec or zijcont2.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=3,bbox_to_anchor=(1.1, 0.003),ncol=2,bbox_transform=plt.gcf().transFigure,fancybox=True, shadow=True)                for text in zijlegend.get_texts():                    text.set_color(zijcont2.legend_color)            if zijcont2.show_title:                ax0.text(10, 16, "%s %s Zijderveld Plot" % (self.sitename,self.currentstep), color=zijcont2.title_color,zorder=4,va='bottom',ha='left',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)            plt.tight_layout()        if zijcont2.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', zij_on_plot_hover)            global zij_annot            zij_annot = ax0.annotate("", xy=(0,0), xytext=(20,-20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            zij_annot.set_visible(False)          else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax0.text(350, 570, "%s %s Zijderveld Plot - No Steps Shown" % (self.sitename,self.currentstep), color=zijcont2.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)    returndef plotzij_multiple(self,zijcont3,ax0,fig):    if plotanything(self):        global zij_annot_pointlist        zij_annot_pointlist = []        x_list = []        y_list = []        zijpointlist = []        decnorth = self.incplot_azimuth - 90        zij_samp_fontsize = fontsizes_dict[zijcont3.samp_fontsize_mod][self.totalplots][0]        zij_step_fontsize = fontsizes_dict[zijcont3.step_fontsize_mod][self.totalplots][0]        for sample in self.sitedata:            if sample.show:                hitshow = False                for step in sample.data:                    if step.show: #check if show each step                                                dec = step.dec                        rotate_dec = dec - self.incplot_azimuth + 90                        rad_dec = math.radians(rotate_dec)                        inc = step.inc                        rad_inc = math.radians(inc)                        intensity = float(step.intensity)                        east = math.sin(rad_dec) * math.cos(rad_inc)                        north = math.cos(rad_dec) * math.cos(rad_inc)                        down = -math.sin(rad_inc)                        if self.hyperbolic and not(hitshow):                            firstpoint_x_sign = np.sign(east)                            hitshow = True                        east_scaled = east * intensity                        north_scaled = north * intensity                        down_scaled = down * intensity                        x_list.append(east_scaled)                        y_list.append(north_scaled)                        y_list.append(down_scaled)                        if self.hyperbolic:                            inc_x = firstpoint_x_sign * math.cos(rad_inc) * intensity                            x_list.append(inc_x)        max_x = max(x_list)        min_x = min(x_list)        max_y = max(y_list)        min_y = min(y_list)                ax0.set_aspect('equal')        plt.subplots_adjust()                tickspace = (max(abs(max_x), abs(min_x), abs(max_y), abs(min_y))) / zijcont3.numticks        if self.totalplots in [3,4]:            zijplotspacer = 4        elif self.totalplots == 2:            zijplotspacer = 6        elif self.totalplots == 1:            zijplotspacer = 5        if min_x < 0:            x_axis_min = min_x - (tickspace * zijplotspacer)            x_plotaxis_min = min_x - (tickspace * 2)        else:            x_axis_min = -tickspace * zijplotspacer            x_plotaxis_min = -tickspace * 2        if max_x > 0:            x_axis_max = max_x  + (tickspace * zijplotspacer)            x_plotaxis_max = max_x  + (tickspace * 2)        else:            x_axis_max = tickspace * zijplotspacer            x_plotaxis_max = tickspace * 2        if min_y < 0:            y_axis_min = min_y - (tickspace * zijplotspacer)            y_plotaxis_min = min_y - (tickspace * 2)        else:            y_axis_min = -tickspace * zijplotspacer            y_plotaxis_min = -tickspace * 2        if max_y > 0:            y_axis_max = max_y + (tickspace * zijplotspacer)            y_plotaxis_max = max_y + (tickspace * 2)        else:            y_axis_max = tickspace * zijplotspacer            y_plotaxis_max = tickspace * 2        ax0.axis([x_axis_min, x_axis_max, y_axis_min, y_axis_max])        if zijcont3.show_axes:            ax0.plot([x_plotaxis_min, x_plotaxis_max], [0,0],zijcont3.axes_color,lw=zijcont3.axis_width)            ax0.plot([0,0], [y_plotaxis_min,y_plotaxis_max],zijcont3.axes_color,lw=zijcont3.axis_width)        ax0.axis('off')             if zijcont3.show_ticks:            tick_x = tickspace            while tick_x < abs(x_plotaxis_min):                ax0.plot([-tick_x,-tick_x],[-tickspace/(11-zijcont3.tick_length),tickspace/(11-zijcont3.tick_length)],zijcont3.tick_color,lw=zijcont3.tick_width)                tick_x = tick_x + tickspace            tick_x = tickspace            while tick_x < abs(x_plotaxis_max):                ax0.plot([tick_x,tick_x],[-tickspace/(11-zijcont3.tick_length),tickspace/(11-zijcont3.tick_length)],zijcont3.tick_color,lw=zijcont3.tick_width)                tick_x = tick_x + tickspace            tick_y = tickspace            while tick_y < abs(y_plotaxis_min):                ax0.plot([-tickspace/(11-zijcont3.tick_length),tickspace/(11-zijcont3.tick_length)],[-tick_y,-tick_y],zijcont3.tick_color,lw=zijcont3.tick_width)                tick_y = tick_y + tickspace            tick_y = tickspace            while tick_y < abs(y_plotaxis_max):                ax0.plot([-tickspace/(11-zijcont3.tick_length),tickspace/(11-zijcont3.tick_length)],[tick_y,tick_y],zijcont3.tick_color,lw=zijcont3.tick_width)                tick_y = tick_y + tickspace        step_x = tickspace / fontsizes_dict[zijcont3.step_fontsize_mod][self.totalplots][1]        step_y = fontsizes_dict[zijcont3.step_fontsize_mod][self.totalplots][2]        for sample in self.sitedata:            if sample.show:                hitshow = False                for plotzijindex, step in enumerate(sample.data):                    if step.show: # check if plot this step                        dec = step.dec                        rotate_dec = dec - self.incplot_azimuth + 90                        rad_dec = math.radians(rotate_dec)                                       inc = step.inc                        rad_inc = math.radians(inc)                        intensity = float(step.intensity)                        dmagstep = step.dmagstep                        east = math.sin(rad_dec) * math.cos(rad_inc)                        north = math.cos(rad_dec) * math.cos(rad_inc)                        down = -math.sin(rad_inc)                        east_scaled = east * intensity                        north_scaled = north * intensity                        down_scaled = down * intensity                        stepletter = step.stepletter                        dec_size = zijcont3.dec_size                        inc_size = zijcont3.inc_size                        dec_color = zijcont3.dec_color                        inc_color = zijcont3.inc_color                        dec_symbol = zijcont3.dec_symbol                        inc_symbol = zijcont3.inc_symbol                        if zijcont3.error_scaling == "Size":                            try:                                error = float(step.error)                            except:                                error = 0                            symbolsize = 16 * error                            dec_size = symbolsize                            inc_size = symbolsize                        elif zijcont3.error_scaling == "Color":                            try:                                error = float(step.error)                            except:                                error = 0                            symbolcolor = getsymbolcolor(error)                            dec_color = symbolcolor                            inc_color = symbolcolor                            if dec_symbol == inc_symbol:                                if dec_symbol == "o":                                    inc_symbol = "s"                                else:                                    inc_symbol = "o"                         if zijcont3.show_dec:                            if zijcont3.show_dec_edge:                                newpoint = ax0.scatter(east_scaled, north_scaled, color=dec_color, s=dec_size, marker=dec_symbol, edgecolor=zijcont3.dec_edge_color, linewidth=zijcont3.dec_edge_width, zorder=2)                            else:                                newpoint = ax0.scatter(east_scaled, north_scaled, color=dec_color, s=dec_size, marker=dec_symbol, zorder=2)                            zij_annot_pointlist.append([newpoint,"Sample: %s, Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.name, stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),zijcont3.dec_color])                        if self.hyperbolic:                            east_hb = firstpoint_x_sign * math.cos(rad_inc) * intensity                                                    if zijcont3.show_inc:                            if zijcont3.show_inc_edge:                                if not(self.hyperbolic):                                    newpoint = ax0.scatter(east_scaled, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, edgecolor=zijcont3.inc_edge_color, linewidth=zijcont3.inc_edge_width, zorder=2)                                else:                                    newpoint = ax0.scatter(east_hb, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, edgecolor=zijcont3.inc_edge_color, linewidth=zijcont3.inc_edge_width, zorder=2)                            else:                                if not(self.hyperbolic):                                    newpoint = ax0.scatter(east_scaled, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, zorder=2)                                else:                                    newpoint = ax0.scatter(east_hb, down_scaled, color=inc_color, s=inc_size, marker=inc_symbol, zorder=2)                            zij_annot_pointlist.append([newpoint,"Sample: %s, Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.name, stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),zijcont3.inc_color])                        if step.zij_printdeclabel:                            if zijcont3.show_dec:                                ax0.text(east_scaled + step_x, north_scaled + step_y, dmagstep,color=zijcont3.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                        if step.zij_printinclabel:                            if zijcont3.show_inc:                                if not(self.hyperbolic):                                    ax0.text(east_scaled + step_x, down_scaled + step_y, dmagstep,color=zijcont3.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                                else:                                    ax0.text(east_hb + step_x, down_scaled + step_y, dmagstep,color=zijcont3.printstep_color,va='center',zorder=2,fontsize=zij_step_fontsize)                                                            if plotzijindex == 0 or hitshow == False:                            if sample.zij_printdecname:                                ax0.text(east_scaled - step_x, north_scaled, sample.name,color=zijcont3.printsamp_color,fontsize=zij_samp_fontsize,zorder=1,va='center',ha='right')                            if sample.zij_printincname:                                                            if not(self.hyperbolic):                                    ax0.text(east_scaled - step_x, down_scaled, sample.name,color=zijcont3.printsamp_color,fontsize=zij_samp_fontsize,zorder=1,va='center',ha='right')                                else:                                    ax0.text(east_hb - step_x, down_scaled, sample.name,color=zijcont3.printsamp_color,fontsize=zij_samp_fontsize,zorder=1,va='center',ha='right')                            if zijcont3.show_firststep:                                if zijcont3.show_firststep_edge:                                    if zijcont3.show_dec:                                        ax0.scatter(east_scaled, north_scaled, color=zijcont3.firststep_color, s=zijcont3.firststep_size, marker=zijcont3.firststep_symbol, edgecolor=zijcont3.firststep_edge_color, linewidth=zijcont3.firststep_edge_width, zorder=4)                                    if zijcont3.show_inc:                                        if not(self.hyperbolic):                                            ax0.scatter(east_scaled, down_scaled, color=zijcont3.firststep_color, s=zijcont3.firststep_size, marker=zijcont3.firststep_symbol, edgecolor=zijcont3.firststep_edge_color, linewidth=zijcont3.firststep_edge_width, zorder=4)                                        else:                                            ax0.scatter(east_hb, down_scaled, color=zijcont3.firststep_color, s=zijcont3.firststep_size, marker=zijcont3.firststep_symbol, edgecolor=zijcont3.firststep_edge_color, linewidth=zijcont3.firststep_edge_width, zorder=4)                                else:                                    if zijcont3.show_dec:                                        ax0.scatter(east_scaled, north_scaled, color=zijcont3.firststep_color, s=zijcont3.firststep_size, marker=zijcont3.firststep_symbol, zorder=4)                                    if zijcont3.show_inc:                                        if not(self.hyperbolic):                                            ax0.scatter(east_scaled, down_scaled, color=zijcont3.firststep_color, s=zijcont3.firststep_size, marker=zijcont3.firststep_symbol, zorder=4)                                        else:                                            ax0.scatter(east_hb, down_scaled, color=zijcont3.firststep_color, s=zijcont3.firststep_size, marker=zijcont3.firststep_symbol, zorder=4)                        else:                            if zijcont3.show_arrowlines:                                if zijcont3.arrowsorlines == "Arrows":                                    ediff = east_scaled_prev - east_scaled                                    ndiff = north_scaled_prev - north_scaled                                    zdiff = down_scaled_prev - down_scaled                                    if self.hyperbolic:                                        ediff_hb = east_hb_prev - east_hb                                    if zijcont3.arrowline_width !=0:                                        if self.totalplots in [2,3,4]:                                            zijarrowwidth = tickspace/9*zijcont3.arrowline_width                                        else:                                            zijarrowwidth = tickspace/20*zijcont3.arrowline_width                                        if zijcont3.show_dec:                                            ax0.quiver(east_scaled,north_scaled,ediff,ndiff,color=zijcont3.arrowline_color,units='xy',scale=1,linewidth=zijcont3.arrowline_width,width=zijarrowwidth,headwidth=zijcont3.arrowhead_width,headlength=zijcont3.arrowhead_length,zorder=3)                                        if zijcont3.show_inc:                                            if not(self.hyperbolic):                                                ax0.quiver(east_scaled,down_scaled,ediff,zdiff,color=zijcont3.arrowline_color,units='xy',scale=1,linewidth=zijcont3.arrowline_width,width=zijarrowwidth,headwidth=zijcont3.arrowhead_width,headlength=zijcont3.arrowhead_length,zorder=3)                                            else:                                                ax0.quiver(east_hb,down_scaled,ediff_hb,zdiff,color=zijcont3.arrowline_color,units='xy',scale=1,linewidth=zijcont3.arrowline_width,width=zijarrowwidth,headwidth=zijcont3.arrowhead_width,headlength=zijcont3.arrowhead_length,zorder=3)                                elif zijcont3.arrowsorlines == "Lines":                                    if zijcont3.show_dec:                                        ax0.plot([east_scaled_prev,east_scaled],[north_scaled_prev,north_scaled],color=zijcont3.arrowline_color,lw=zijcont3.arrowline_width,zorder=0)                                    if zijcont3.show_inc:                                        if not(self.hyperbolic):                                            ax0.plot([east_scaled_prev,east_scaled],[down_scaled_prev,down_scaled],color=zijcont3.arrowline_color,lw=zijcont3.arrowline_width,zorder=0)                                        else:                                            ax0.plot([east_hb_prev,east_hb],[down_scaled_prev,down_scaled],color=zijcont3.arrowline_color,lw=zijcont3.arrowline_width,zorder=0)                        hitshow = True                                                east_scaled_prev = east_scaled                        north_scaled_prev = north_scaled                        down_scaled_prev = down_scaled                        if self.hyperbolic:                            east_hb_prev = east_hb                if zijcont3.show_laststep:                    if zijcont3.show_laststep_edge:                        if zijcont3.show_dec:                             ax0.scatter(east_scaled, north_scaled, color=zijcont3.laststep_color, s=zijcont3.laststep_size, marker=zijcont3.laststep_symbol, edgecolor=zijcont3.laststep_edge_color, linewidth=zijcont3.laststep_edge_width, zorder=4)                        if zijcont3.show_inc:                            if not(self.hyperbolic):                                ax0.scatter(east_scaled, down_scaled, color=zijcont3.laststep_color, s=zijcont3.laststep_size, marker=zijcont3.laststep_symbol, edgecolor=zijcont3.laststep_edge_color, linewidth=zijcont3.laststep_edge_width, zorder=4)                            else:                                ax0.scatter(east_hb, down_scaled, color=zijcont3.laststep_color, s=zijcont3.laststep_size, marker=zijcont3.laststep_symbol, edgecolor=zijcont3.laststep_edge_color, linewidth=zijcont3.laststep_edge_width, zorder=4)                    else:                        if zijcont3.show_dec:                            ax0.scatter(east_scaled, north_scaled, color=zijcont3.laststep_color, s=zijcont3.laststep_size, marker=zijcont3.laststep_symbol, zorder=4)                        if zijcont3.show_inc:                            if not(self.hyperbolic):                                ax0.scatter(east_scaled, down_scaled, color=zijcont3.laststep_color, s=zijcont3.laststep_size, marker=zijcont3.laststep_symbol, zorder=4)                            else:                                ax0.scatter(east_hb, down_scaled, color=zijcont3.laststep_color, s=zijcont3.laststep_size, marker=zijcont3.laststep_symbol, zorder=4)                    if zijcont3.show_labels:            if decnorth == 0:                northlabel = "North, Up"                southlabel = "South, Down"                eastlabel = "East"                eastlegend = "East"                westlabel = "West"                northlegend = "North"                if self.hyperbolic:                    eastlabel = eastlabel + "\nHyperbolic"                    westlabel = westlabel + "\nHyperbolic"            elif decnorth == -90:                northlabel = "West, Up"                southlabel = "East, Down"                eastlabel = "North"                eastlegend =  "North"                westlabel = "South"                northlegend = "West"            else:                if decnorth < 0:                    decnorth = decnorth + 360                northlabelval = decnorth % 360                southlabelval = (decnorth + 180) % 360                eastlabelval = self.incplot_azimuth                westlabelval = (self.incplot_azimuth - 180) % 360                northlabel = "%.1f%s, Up" % (northlabelval, degree_sign)                southlabel = "%.1f%s, Down" % (southlabelval, degree_sign)                eastlabel = "%.1f%s" % (eastlabelval, degree_sign)                westlabel = "%.1f%s" % (westlabelval, degree_sign)                eastlegend = "%.1f%s" % (eastlabelval, degree_sign)                northlegend = "%.1f%s" % (northlabelval, degree_sign)                            ax0.text(0, y_plotaxis_max + tickspace/3, northlabel,color=zijcont3.label_color,ha='center',va='bottom',zorder=4,fontsize=fontsizes_dict[zijcont3.label_fontsize_mod][self.totalplots][0])            ax0.text(0, y_plotaxis_min - tickspace/3, southlabel,color=zijcont3.label_color,ha='center',va='top',zorder=4,fontsize=fontsizes_dict[zijcont3.label_fontsize_mod][self.totalplots][0])            ax0.text(x_plotaxis_max + tickspace/3, 0, eastlabel,color=zijcont3.label_color,va='center',ha='left',zorder=4,fontsize=fontsizes_dict[zijcont3.label_fontsize_mod][self.totalplots][0])            ax0.text(x_plotaxis_min - tickspace/3, 0, westlabel,color=zijcont3.label_color,va='center',ha='right',zorder=4,fontsize=fontsizes_dict[zijcont3.label_fontsize_mod][self.totalplots][0])        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        legendicons = []        legend_label = []        if zijcont3.error_scaling == "Color":            legend_dec_color = "white"            legend_inc_color = "white"        else:            legend_dec_color = zijcont3.dec_color            legend_inc_color = zijcont3.inc_color        if zijcont3.show_dec:            blue_sq, = ax0.plot(-10000, dec_symbol, color=legend_dec_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(blue_sq)            legend_label.append("Declination (%s vs. %s)" % (eastlegend, northlegend))        if zijcont3.show_inc:            red_sq, = ax0.plot(-10000, inc_symbol, color=legend_inc_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(red_sq)            if not(self.hyperbolic):                legend_label.append("Inclination (%s vs. Up)" % (eastlegend))            else:                legend_label.append("Inclination (Hyperbolic vs. Up)")        if self.totalplots in [2, 3,4]:            blank_icon, = ax0.plot(-100000,color='white',marker=".",markersize=0,zorder=0,linestyle="none")            legendicons.append(blank_icon)            tickspace_format = format(tickspace, '.2e')            legend_label.append("Tick Length: %s" % tickspace_format)        if zijcont3.show_firststep:            yellow_sq, = ax0.plot(-10000, zijcont3.firststep_symbol, color=zijcont3.firststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_sq)            legend_label.append("First Step")        if zijcont3.show_laststep:            yellow_tri, = ax0.plot(-10000, zijcont3.laststep_symbol, color=zijcont3.laststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_tri)            legend_label.append("Last Step")        if self.totalplots == 1:            blank_icon, = ax0.plot(-100000,color='white',marker=".",markersize=0,zorder=0,linestyle="none")            legendicons.append(blank_icon)            tickspace_format = format(tickspace, '.2e')            legend_label.append("Tick Length: %s" % tickspace_format)        if self.totalplots in [3,4]:            if zijcont3.show_legend and (zijcont3.show_dec or zijcont3.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=8,loc=3,bbox_to_anchor=(0.01, 0.78),bbox_transform=plt.gcf().transFigure,frameon=False)                for text in zijlegend.get_texts():                    text.set_color(zijcont3.legend_color)            if zijcont3.show_title:                ax0.text(10, 470, "%s Zijd. %s" % (self.sitename,up_arrow), color=zijcont3.title_color,zorder=4,va='bottom',ha='left',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 2:            if zijcont3.show_legend and (zijcont3.show_dec or zijcont3.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=3,bbox_to_anchor=(0.225, 0.15),ncol=2,bbox_transform=plt.gcf().transFigure,fancybox=True, shadow=True)                for text in zijlegend.get_texts():                    text.set_color(zijcont3.legend_color)            if zijcont3.show_title:                ax0.text(350, 850, "%s Zijderveld Plot" % (self.sitename), color=zijcont3.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 1:            if zijcont3.show_legend and (zijcont3.show_dec or zijcont3.show_inc):                zijlegend = ax0.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=3,bbox_to_anchor=(0.99, -0.008),ncol=3,bbox_transform=plt.gcf().transFigure,fancybox=True, shadow=True)                for text in zijlegend.get_texts():                    text.set_color(zijcont3.legend_color)            if zijcont3.show_title:                ax0.text(10, 16, "%s Zijderveld Plot" % (self.sitename), color=zijcont3.title_color,zorder=4,va='bottom',ha='left',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)            plt.tight_layout()        if zijcont3.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', zij_on_plot_hover)            global zij_annot            zij_annot = ax0.annotate("", xy=(0,0), xytext=(20,-20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            zij_annot.set_visible(False)            else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax0.text(350, 570, "%s Zijderveld Plot - No Steps Shown" % self.sample.name, color=zijcont3.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)    return################ 3D Plot Functions ################def plot3D_update_annot(ind,item):    global plot3D_annot    pos = item[0].get_offsets()[ind["ind"][0]]    plot3D_annot.xy = pos    text = (item[1])    plot3D_annot.set_text(text)    plot3D_annot.get_bbox_patch().set_color(item[2])    plot3D_annot.get_bbox_patch().set_facecolor('#f3f2f1')    plot3D_annot.get_bbox_patch().set_alpha(0.75)    returndef plot3D_on_plot_hover(event):    vis = plot3D_annot.get_visible()    for item in range(0,len(plot3D_annot_pointlist)):        onpoint, ind = plot3D_annot_pointlist[item][0].contains(event)        if onpoint:            plot3D_update_annot(ind,plot3D_annot_pointlist[item])            plot3D_annot.set_visible(True)            fig.canvas.draw_idle()        else:            if vis:                plot3D_annot.set_visible(False)                fig.canvas.draw_idle()    returndef plot3D_sample(self,cont3D,ax1):    if plotanything(self):        global plot3D_annot_pointlist        plot3D_annot_pointlist = []        x_list = []        y_list = []        z_list = []        pointlist3D = []        ax1.axis('equal')        for step in self.sample.data:            if step.show: #check if print each step                dec = step.dec                rad_dec = math.radians(dec)                inc = step.inc                rad_inc = math.radians(inc)                intensity = float(step.intensity)                east = math.sin(rad_dec) * math.cos(rad_inc)                north = math.cos(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                x_list.append(east_scaled)                y_list.append(north_scaled)                z_list.append(down_scaled)        max_x = max(x_list)        min_x = min(x_list)        max_y = max(y_list)        min_y = min(y_list)        max_z = max(z_list)        min_z = min(z_list)        tickspace = (max(abs(max_x), abs(min_x), abs(max_y), abs(min_y), abs(max_z), abs(min_z))) / 20        if min_x < 0:            x_axis_min = min_x - (tickspace * 2)        else:            x_axis_min = -tickspace * 2        if max_x > 0:            x_axis_max = max_x + (tickspace * 2)        else:            x_axis_max = tickspace * 2        if min_y < 0:            y_axis_min = min_y - (tickspace * 2)        else:            y_axis_min = -tickspace * 2        if max_y > 0:            y_axis_max = max_y + (tickspace * 2)        else:            y_axis_max = tickspace * 2        if min_z < 0:            z_axis_min = min_z - (tickspace * 2)        else:            z_axis_min = -tickspace * 2        if max_z > 0:            z_axis_max = max_z + (tickspace * 2)        else:            z_axis_max = tickspace * 2        maxaxis = max((abs(x_axis_min)+abs(x_axis_max)),(abs(y_axis_min)+abs(y_axis_max)),(abs(z_axis_min)+abs(z_axis_max)))        ax1.axis([x_axis_min, x_axis_max, y_axis_min, y_axis_max])        ax1.axis('equal')                if cont3D.show_grid:            if cont3D.show_labels:                labelfont = label3Dfontsizes_dict[cont3D.label_fontsize_mod][self.totalplots][0]                ax1.set_xlabel('East',fontsize=labelfont,color=cont3D.label_color)                ax1.set_ylabel('North',fontsize=labelfont,color=cont3D.label_color)                ax1.set_zlabel('Down',fontsize=labelfont,color=cont3D.label_color)            if cont3D.show_ticks:                paramfont = label3Dfontsizes_dict[cont3D.label_fontsize_mod][self.totalplots][1]                if cont3D.show_ticklabels:                    ax1.tick_params(labelsize=paramfont,labelcolor=cont3D.tick_color)                else:                    ax1.tick_params(labelsize=paramfont,labelcolor=cont3D.tick_color,labelbottom='off',labeltop='off',labelleft='off',labelright='off')                            else:                ax1.set_xticks([])                ax1.set_yticks([])                ax1.set_zticks([])            if not cont3D.show_gridlines:                ax1.grid(False)        else:            ax1._axis3don = False                   hitshow = False        for plot3Dindex, step in enumerate(self.sample.data):            if step.show: #check if print each step                dmagstep = step.dmagstep                dec = step.dec                rad_dec = math.radians(dec)                inc = step.inc                rad_inc = math.radians(inc)                intensity = float(step.intensity)                north = math.cos(rad_dec) * math.cos(rad_inc)                east = math.sin(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                vlength = math.sqrt(east_scaled**2 + north_scaled**2 + down_scaled**2)                stepletter = step.stepletter                jdecrease_size = cont3D.jdecrease_size                jincrease_size = cont3D.jincrease_size                jdecrease_color = cont3D.jdecrease_color                jincrease_color = cont3D.jincrease_color                jdecrease_symbol = cont3D.jdecrease_symbol                jincrease_symbol = cont3D.jincrease_symbol                if cont3D.error_scaling == "Size":                    try:                        error = float(step.error)                    except:                        error = 0                    symbolsize = 10 * error                    jdecrease_size = symbolsize                    jincrease_size = symbolsize                elif cont3D.error_scaling == "Color":                    try:                        error = float(step.error)                    except:                        error = 0                    symbolcolor = getsymbolcolor(error)                    jdecrease_color = symbolcolor                    jincrease_color = symbolcolor                    if jdecrease_symbol == jincrease_symbol:                        if jdecrease_symbol == "o":                            jincrease_symbol = "s"                        else:                            jincrease_symbol = "o"                 if plot3Dindex == 0 or hitshow == False:                    if cont3D.show_jdecrease_edge:                        newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size,edgecolor=cont3D.jdecrease_edge_color,linewidth=cont3D.jdecrease_edge_width,zorder=3)                    else:                        newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size)                    if cont3D.show_firststep:                        if cont3D.show_firststep_edge:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D.firststep_color, marker=cont3D.firststep_symbol,s=cont3D.firststep_size,edgecolor=cont3D.firststep_edge_color,linewidth=cont3D.firststep_edge_width,zorder=3)                        else:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D.firststep_color, marker=cont3D.firststep_symbol,s=cont3D.firststep_size)                        plot3D_annot_pointlist.append([newpoint,"Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D.firststep_color])                    else:                        if cont3D.show_jdecrease_edge:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size,edgecolor=cont3D.jdecrease_edge_color,linewidth=cont3D.jdecrease_edge_width,zorder=3)                        else:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size)                        plot3D_annot_pointlist.append([newpoint,"Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D.jdecrease_color])                else:                    if vlength_prev >= vlength:                        if cont3D.show_jdecrease_edge:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size,edgecolor=cont3D.jdecrease_edge_color,linewidth=cont3D.jdecrease_edge_width,zorder=3)                        else:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size)                        plot3D_annot_pointlist.append([newpoint,"Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D.jdecrease_color])                    else:                        if cont3D.show_jincrease_edge:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jincrease_color, marker=jincrease_symbol,s=jincrease_size,edgecolor=cont3D.jincrease_edge_color,linewidth=cont3D.jincrease_edge_width,zorder=3)                        else:                            newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jincrease_color, marker=jincrease_symbol,s=jincrease_size)                        plot3D_annot_pointlist.append([newpoint,"Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D.jincrease_color])                                            xdiff = east_scaled_prev - east_scaled                    ydiff = north_scaled_prev - north_scaled                    zdiff = down_scaled_prev - down_scaled                    vdiff_length = math.sqrt(xdiff**2 + ydiff**2 + zdiff**2)                    try:                        arrowheadscaler = maxaxis / vdiff_length * arrow3Dscaler_dict[cont3D.arrowline_width]                    except:                        arrowheadscaler = 1                    if cont3D.show_arrowlines:                        if cont3D.arrowsorlines == "Arrows":                            ax1.quiver(east_scaled,north_scaled,down_scaled,xdiff,ydiff,zdiff,color=cont3D.arrowline_color,lw=cont3D.arrowline_width,arrow_length_ratio=arrowheadscaler,pivot='tail')                        elif cont3D.arrowsorlines == "Lines":                            ax1.plot([east_scaled,east_scaled_prev],[north_scaled,north_scaled_prev],[down_scaled,down_scaled_prev],color=cont3D.arrowline_color,lw=cont3D.arrowline_width,zorder=0)                north_scaled_prev = north_scaled                east_scaled_prev = east_scaled                down_scaled_prev = down_scaled                vlength_prev = vlength                hitshow = True            if self.sample.arrowlist != [] or self.sample.bflinelist != 0:                newpoint = [east_scaled,north_scaled,down_scaled,step.show]                pointlist3D.append(newpoint)        if self.sample.arrowlist != []:            for arrow in self.sample.arrowlist:                startstep = arrow[0][0]                endstep = arrow[0][1]                for plot3Dindex, step in enumerate(self.sample.data):                    if step.dmagstep == startstep:                        if step.show:                            plotstart = True                            starteast = pointlist3D[plot3Dindex][0]                            startnorth = pointlist3D[plot3Dindex][1]                            startdown = pointlist3D[plot3Dindex][2]                        else:                            plotstart = False                                                if step.dmagstep == endstep:                        if step.show:                            plotend = True                            endeast = pointlist3D[plot3Dindex][0]                            endnorth = pointlist3D[plot3Dindex][1]                            enddown = pointlist3D[plot3Dindex][2]                        else:                            plotend = False                if plotstart and plotend:                    e_arrowdiff = endeast - starteast                    n_arrowdiff =endnorth - startnorth                    z_arrowdiff = enddown - startdown                    vdiff_length = math.sqrt(e_arrowdiff**2 + n_arrowdiff**2 + z_arrowdiff**2)                    #ax1.scatter(starteast,startnorth,startdown,s=200,color='black',marker='>',edgecolor='green')                    #ax1.scatter(endeast,endnorth,enddown,s=200,color='black',marker='>',edgecolor='green')                    arrowheadscaler = maxaxis / vdiff_length * 0.04                    ax1.plot([starteast,starteast+e_arrowdiff],[startnorth,startnorth+n_arrowdiff],[startdown,startdown+z_arrowdiff],color=arrow[1],lw=2,zorder=0)                    #ax1.quiver(starteast,startnorth,startdown,e_arrowdiff,n_arrowdiff,z_arrowdiff,color=arrow[1],length=vdiff_length,arrow_length_ratio=arrowheadscaler,pivot='tail')        if self.sample.bflinelist != []:            for bfline in self.sample.bflinelist:                E_list = []                N_list = []                D_list = []                matrixpointlist = []                matrixpointlist_yz1 = []                matrixpointlist_zx1 = []                maxdist = 0                bflinesteplist = bfline[0]                missingpoint = False                for pointstepindex in bflinesteplist:                    if not(pointlist3D[pointstepindex][3]):                        missingpoint = True                        break                    E_val = pointlist3D[pointstepindex][0]                    N_val = pointlist3D[pointstepindex][1]                    D_val = pointlist3D[pointstepindex][2]                    E_list.append(E_val)                    N_list.append(N_val)                    D_list.append(D_val)                    new_xy1point = [E_val,N_val,1]                    matrixpointlist.append(new_xy1point)                    new_yz1point = [N_val,D_val,1] # try                    matrixpointlist_yz1.append(new_yz1point) # try                    new_zx1point = [D_val,E_val,1] # try                    matrixpointlist_zx1.append(new_zx1point) # try                    for maxdistindex in bflinesteplist: # deterime the 2 points that are furthest apart                        if maxdistindex != pointstepindex:                            E_val_dist = pointlist3D[maxdistindex][0]                            N_val_dist = pointlist3D[maxdistindex][1]                            D_val_dist = pointlist3D[maxdistindex][2]                            dist = math.sqrt( (E_val - E_val_dist)**2 + (N_val - N_val_dist)**2 + (D_val - D_val_dist)**2 )                            if dist > maxdist:                                maxdist = dist                                startpoint = pointlist3D[pointstepindex]                                endpoint = pointlist3D[maxdistindex]                if missingpoint:                    continue# This section uses borrowed code. Useful websites for doing this include:    # https://stackoverflow.com/questions/1400213/3d-least-squares-plane    # https://www.youtube.com/watch?v=pKZyszzmyeQ    # https://www.wikihow.com/Divide-Matrices    # http://www.sci.utah.edu/~balling/FEtools/doc_files/LeastSquaresFitting.pdf    # https://math.stackexchange.com/questions/99299/best-fitting-plane-given-a-set-of-points                ## Z val:                 b_mat = np.matrix(D_list).T                A_mat = np.matrix(matrixpointlist)                fit = (A_mat.T * A_mat).I * A_mat.T * b_mat                #errors = b_mat - A_mat * fit                #residual = np.linalg.norm(errors)                a = fit.item(0)                b = fit.item(1)                c = fit.item(2)                startZ = a * startpoint[0] + b * startpoint[1] + c                endZ = a * endpoint[0] + b * endpoint[1] + c                ## E val:                b_mat_yz1 = np.matrix(E_list).T                 A_mat_yz1 = np.matrix(matrixpointlist_yz1)                 fit_yz1 = (A_mat_yz1.T * A_mat_yz1).I * A_mat_yz1.T * b_mat_yz1                 a_yz1 = fit_yz1.item(0)                b_yz1 = fit_yz1.item(1)                c_yz1 = fit_yz1.item(2)                startE = a_yz1 * startpoint[1] + b_yz1 * startpoint[2] + c_yz1                endE = a_yz1 * endpoint[1] + b_yz1 * endpoint[2] + c_yz1                                ## N val:                b_mat_zx1 = np.matrix(N_list).T                A_mat_zx1 = np.matrix(matrixpointlist_zx1)                 fit_zx1 = (A_mat_zx1.T * A_mat_zx1).I * A_mat_zx1.T * b_mat_zx1                a_zx1 = fit_zx1.item(0)                b_zx1 = fit_zx1.item(1)                c_zx1 = fit_zx1.item(2)                startN = a_zx1 * startpoint[2] + b_zx1 * startpoint[0] + c_zx1                endN = a_zx1 * endpoint[2] + b_zx1 * endpoint[0] + c_zx1                ax1.plot([startE,endE],[startN,endN],[startZ,endZ],color=bfline[1],lw=bfline[2],zorder=0)                #ax1.plot([startpoint[0],endpoint[0]],[startpoint[1],endpoint[1]],[startZ,endZ],color=bfline[1],lw=bfline[2],zorder=0)        if cont3D.show_laststep:            if cont3D.show_laststep_edge:                ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D.laststep_color, marker=cont3D.laststep_symbol,s=cont3D.laststep_size,edgecolor=cont3D.laststep_edge_color,linewidth=cont3D.laststep_edge_width,zorder=3)            else:                ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D.laststep_color, marker=cont3D.laststep_symbol,s=cont3D.laststep_size)        else:            if cont3D.show_jdecrease_edge:                ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D.jdecrease_color, marker=cont3D.jdecrease_symbol,s=cont3D.jdecrease_size,edgecolor=cont3D.jdecrease_edge_color,linewidth=cont3D.jdecrease_edge_width,zorder=3)            else:                ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D.jdecrease_color, marker=cont3D.jdecrease_symbol,s=cont3D.jdecrease_size)        if cont3D.show_axes:            ax1.plot([x_axis_min, x_axis_max], [0,0],[0,0],cont3D.axes_color,lw=cont3D.axis_width)            ax1.plot([0,0], [y_axis_max,y_axis_min],[0,0],cont3D.axes_color,lw=cont3D.axis_width)            ax1.plot([0,0], [0,0], [z_axis_max,z_axis_min],cont3D.axes_color,lw=cont3D.axis_width)        if cont3D.error_scaling == "Color":            legend_jdecrease_color = "white"            legend_jincrease_color = "white"        else:            legend_jdecrease_color = cont3D.jdecrease_color            legend_jincrease_color = cont3D.jincrease_color        red_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=legend_jdecrease_color, markeredgecolor="grey", marker=jdecrease_symbol)        blue_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=legend_jincrease_color , markeredgecolor="grey", marker=jincrease_symbol)        legendicons = [blue_proxy,red_proxy]        legend_label = ["Intensity Increase","Intensity Decrease"]        if cont3D.show_legend:            if cont3D.show_firststep:                yellow_sq_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=cont3D.firststep_color, markeredgecolor="grey", marker=cont3D.firststep_symbol)                legendicons.append(yellow_sq_proxy)                legend_label.append("First Step")            if cont3D.show_laststep:                yellow_tri_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=cont3D.firststep_color, markeredgecolor="grey", marker=cont3D.laststep_symbol)                legendicons.append(yellow_tri_proxy)                legend_label.append("Last Step")        if cont3D.show_zijproj:            if self.incplot_azimuth == 90:                x1 = x_axis_max                x2 = x_axis_min                y1 = 0                y2 = 0            else:                incplot_az_rad = math.radians(self.incplot_azimuth)                NEcornerangle = math.degrees(math.atan2(x_axis_max,y_axis_max))                SEcornerangle = math.degrees(math.atan2(x_axis_max,y_axis_min))                SWcornerangle = math.degrees(math.atan2(x_axis_min,y_axis_min)) + 360                NWcornerangle = math.degrees(math.atan2(x_axis_min,y_axis_max)) + 360                if 0 <= self.incplot_azimuth < NEcornerangle:                    x1 = math.tan(incplot_az_rad) * y_axis_max                    y1 = y_axis_max                elif NEcornerangle <= self.incplot_azimuth < SEcornerangle:                    x1 = x_axis_max                    y1 = x_axis_max / math.tan(incplot_az_rad)                elif SEcornerangle <= self.incplot_azimuth <= 180:                    x1 = math.tan(incplot_az_rad) * y_axis_min                    y1 = y_axis_min                zij_incplot_azimuth_westval = self.incplot_azimuth + 180                if 180 <= zij_incplot_azimuth_westval < SWcornerangle:                    x2 = math.tan(incplot_az_rad) * y_axis_min                    y2 = y_axis_min                elif SWcornerangle <= zij_incplot_azimuth_westval < NWcornerangle:                    x2 = x_axis_min                    y2 = x_axis_min / math.tan(incplot_az_rad)                elif NWcornerangle <= zij_incplot_azimuth_westval < 360:                    x2 = math.tan(incplot_az_rad) * y_axis_max                    y2 = y_axis_max                               vdiff_length = math.sqrt((x1-x2)**2 + (y1-y2)**2)            arrowheadscaler = maxaxis / vdiff_length * 500            ax1.quiver(x1,y1,0,(x1*.0001-x2*.0001),(y1*.0001-y2*.0001),0,color=cont3D.zijproj_color,lw=2,arrow_length_ratio=arrowheadscaler,zorder=0,linestyle="-")            ax1.plot([x1,x2],[y1,y2],[0,0],color=cont3D.zijproj_color,linestyle="--",lw=2,zorder=5)            if cont3D.show_legend:                verts = [(110, 0), (10, 40), (10, -40), (110,0),(0, 0),]                codes = [Path.MOVETO,Path.LINETO,Path.LINETO,Path.LINETO,Path.CLOSEPOLY,]                tripath = Path(verts, codes)                if self.totalplots == 1:                    pinkmarksize = 40                else:                    pinkmarksize = 20                pink_tri_proxy = mpl.lines.Line2D([0],[0], linestyle="--", lw=2,color=cont3D.zijproj_color, markersize=pinkmarksize,marker=tripath,markeredgewidth=0.0)                legendicons = [pink_tri_proxy] + legendicons                legend_label = ["Zijderveld Projection Heading"] + legend_label        if self.totalplots in [3,4]:            legendfont = 8            titlefont = 15            titletext = "%s %s 3D Plot" % (down_arrow, self.sample.name)            halign="left"        elif self.totalplots == 2:            legendfont = 10            titlefont = 20            titletext = "%s 3D Plot" % (self.sample.name)            halign="center"        elif self.totalplots == 1:            legendfont = 16            titlefont = 20            titletext = "%s 3D Plot" % (self.sample.name)            halign="left"        if cont3D.show_legend:            legend3D = ax1.legend(legendicons,legend_label,frameon=False,loc=2,numpoints=1,fontsize=legendfont)            for text in legend3D.get_texts():                text.set_color(cont3D.legend_color)        if cont3D.show_title:            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)            ax1.text2D(0.65, 0.95, titletext, color=cont3D.title_color,fontsize=titlefont,fontweight='bold',ha=halign,transform=ax1.transAxes,bbox=bbox_props)        if cont3D.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', plot3D_on_plot_hover)            global plot3D_annot            plot3D_annot = ax1.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            plot3D_annot.set_visible(False)        plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax1.text2D(0, 0.25, "%s 3D Plot - No Steps Shown" % self.sample.name, color='black',fontsize=15,fontweight='bold',transform=ax1.transAxes,bbox=bbox_props)    returndef plot3D_step(self,cont3D2,ax1):    if plotanything(self):        global plot3D_annot_pointlist        plot3D_annot_pointlist = []        x_list = []        y_list = []        z_list = []        pointlist3D = []        ax1.axis('equal')        for sample in self.sitesteptext:            if sample.show: #check if print each step                dec = sample.dec                rad_dec = math.radians(dec)                inc = sample.inc                rad_inc = math.radians(inc)                intensity = float(sample.intensity)                east = math.sin(rad_dec) * math.cos(rad_inc)                north = math.cos(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                x_list.append(east_scaled)                y_list.append(north_scaled)                z_list.append(down_scaled)        max_x = max(x_list)        min_x = min(x_list)        max_y = max(y_list)        min_y = min(y_list)        max_z = max(z_list)        min_z = min(z_list)        tickspace = (max(abs(max_x), abs(min_x), abs(max_y), abs(min_y), abs(max_z), abs(min_z))) / 20        if min_x < 0:            x_axis_min = min_x - (tickspace * 2)        else:            x_axis_min = -tickspace * 2        if max_x > 0:            x_axis_max = max_x + (tickspace * 2)        else:            x_axis_max = tickspace * 2        if min_y < 0:            y_axis_min = min_y - (tickspace * 2)        else:            y_axis_min = -tickspace * 2        if max_y > 0:            y_axis_max = max_y + (tickspace * 2)        else:            y_axis_max = tickspace * 2        if min_z < 0:            z_axis_min = min_z - (tickspace * 2)        else:            z_axis_min = -tickspace * 2        if max_z > 0:            z_axis_max = max_z + (tickspace * 2)        else:            z_axis_max = tickspace * 2        maxaxis = max((abs(x_axis_min)+abs(x_axis_max)),(abs(y_axis_min)+abs(y_axis_max)),(abs(z_axis_min)+abs(z_axis_max)))        ax1.axis([x_axis_min, x_axis_max, y_axis_min, y_axis_max])        ax1.axis('equal')                if cont3D2.show_grid:            if cont3D2.show_labels:                labelfont = label3Dfontsizes_dict[cont3D2.label_fontsize_mod][self.totalplots][0]                ax1.set_xlabel('East',fontsize=labelfont,color=cont3D2.label_color)                ax1.set_ylabel('North',fontsize=labelfont,color=cont3D2.label_color)                ax1.set_zlabel('Down',fontsize=labelfont,color=cont3D2.label_color)            if cont3D2.show_ticks:                paramfont = label3Dfontsizes_dict[cont3D2.label_fontsize_mod][self.totalplots][1]                if cont3D2.show_ticklabels:                    ax1.tick_params(labelsize=paramfont,labelcolor=cont3D2.tick_color)                else:                    ax1.tick_params(labelsize=paramfont,labelcolor=cont3D2.tick_color,labelbottom='off',labeltop='off',labelleft='off',labelright='off')                            else:                ax1.set_xticks([])                ax1.set_yticks([])                ax1.set_zticks([])            if not cont3D2.show_gridlines:                ax1.grid(False)        else:            ax1._axis3don = False                    for plot3Dindex, sample in enumerate(self.sitesteptext):            if sample.show: #check if print each step                dmagstep = sample.dmagstep_clean                dec = sample.dec                rad_dec = math.radians(dec)                inc = sample.inc                rad_inc = math.radians(inc)                intensity = float(sample.intensity)                north = math.cos(rad_dec) * math.cos(rad_inc)                east = math.sin(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                vlength = math.sqrt(east_scaled**2 + north_scaled**2 + down_scaled**2)                jdecrease_size = cont3D2.jdecrease_size                jdecrease_color = cont3D2.jdecrease_color                jdecrease_symbol = cont3D2.jdecrease_symbol                if cont3D2.error_scaling == "Size":                    try:                        error = float(sample.error)                    except:                        error = 0                    symbolsize = 10 * error                    jdecrease_size = symbolsize                elif cont3D2.error_scaling == "Color":                    try:                        error = float(sample.error)                    except:                        error = 0                    symbolcolor = getsymbolcolor(error)                    jdecrease_color = symbolcolor                if cont3D2.show_jdecrease_edge:                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size,edgecolor=cont3D2.jdecrease_edge_color,linewidth=cont3D2.jdecrease_edge_width,zorder=3)                else:                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size)                plot3D_annot_pointlist.append([newpoint,"%s:\nStep: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.samplename,dmagstep,dec,degree_sign,inc,degree_sign,sample.intensity,sample.error,degree_sign),cont3D2.jdecrease_color])##            if cont3D2.show_jdecrease_edge:##                ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D2.jdecrease_color, marker=cont3D2.jdecrease_symbol,s=cont3D2.jdecrease_size,edgecolor=cont3D2.jdecrease_edge_color,linewidth=cont3D2.jdecrease_edge_width,zorder=3)##            else:##                ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D2.jdecrease_color, marker=cont3D2.jdecrease_symbol,s=cont3D2.jdecrease_size)        if cont3D2.show_axes:            ax1.plot([x_axis_min, x_axis_max], [0,0],[0,0],cont3D2.axes_color,lw=cont3D2.axis_width)            ax1.plot([0,0], [y_axis_max,y_axis_min],[0,0],cont3D2.axes_color,lw=cont3D2.axis_width)            ax1.plot([0,0], [0,0], [z_axis_max,z_axis_min],cont3D2.axes_color,lw=cont3D2.axis_width)        if cont3D2.error_scaling == "Color":            legend_jdecrease_color = "white"        else:            legend_jdecrease_color = cont3D2.jdecrease_color        red_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=legend_jdecrease_color, markeredgecolor="grey", marker=jdecrease_symbol)        legendicons = [red_proxy]        legend_label = ["Step point"]        if cont3D2.show_zijproj:            if self.incplot_azimuth == 90:                x1 = x_axis_max                x2 = x_axis_min                y1 = 0                y2 = 0            else:                incplot_az_rad = math.radians(self.incplot_azimuth)                NEcornerangle = math.degrees(math.atan2(x_axis_max,y_axis_max))                SEcornerangle = math.degrees(math.atan2(x_axis_max,y_axis_min))                SWcornerangle = math.degrees(math.atan2(x_axis_min,y_axis_min)) + 360                NWcornerangle = math.degrees(math.atan2(x_axis_min,y_axis_max)) + 360                if 0 <= self.incplot_azimuth < NEcornerangle:                    x1 = math.tan(incplot_az_rad) * y_axis_max                    y1 = y_axis_max                elif NEcornerangle <= self.incplot_azimuth < SEcornerangle:                    x1 = x_axis_max                    y1 = x_axis_max / math.tan(incplot_az_rad)                elif SEcornerangle <= self.incplot_azimuth <= 180:                    x1 = math.tan(incplot_az_rad) * y_axis_min                    y1 = y_axis_min                zij_incplot_azimuth_westval = self.incplot_azimuth + 180                if 180 <= zij_incplot_azimuth_westval < SWcornerangle:                    x2 = math.tan(incplot_az_rad) * y_axis_min                    y2 = y_axis_min                elif SWcornerangle <= zij_incplot_azimuth_westval < NWcornerangle:                    x2 = x_axis_min                    y2 = x_axis_min / math.tan(incplot_az_rad)                elif NWcornerangle <= zij_incplot_azimuth_westval < 360:                    x2 = math.tan(incplot_az_rad) * y_axis_max                    y2 = y_axis_max                               vdiff_length = math.sqrt((x1-x2)**2 + (y1-y2)**2)            arrowheadscaler = maxaxis / vdiff_length * 500            ax1.quiver(x1,y1,0,(x1*.0001-x2*.0001),(y1*.0001-y2*.0001),0,color=cont3D2.zijproj_color,lw=2,arrow_length_ratio=arrowheadscaler,zorder=0,linestyle="-")            ax1.plot([x1,x2],[y1,y2],[0,0],color=cont3D2.zijproj_color,linestyle="--",lw=2,zorder=5)            if cont3D2.show_legend:                verts = [(110, 0), (10, 40), (10, -40), (110,0),(0, 0),]                codes = [Path.MOVETO,Path.LINETO,Path.LINETO,Path.LINETO,Path.CLOSEPOLY,]                tripath = Path(verts, codes)                if self.totalplots == 1:                    pinkmarksize = 40                else:                    pinkmarksize = 20                pink_tri_proxy = mpl.lines.Line2D([0],[0], linestyle="--", lw=2,color=cont3D2.zijproj_color, markersize=pinkmarksize,marker=tripath,markeredgewidth=0.0)                legendicons = [pink_tri_proxy] + legendicons                legend_label = ["Zijderveld Projection Heading"] + legend_label        if self.totalplots in [3,4]:            legendfont = 8            titlefont = 15            titletext = "%s %s %s 3D" % (down_arrow, self.sitename, self.currentstep)            halign="left"        elif self.totalplots == 2:            legendfont = 10            titlefont = 20            titletext = "%s %s 3D" % (self.sitename, self.currentstep)            halign="center"        elif self.totalplots == 1:            legendfont = 16            titlefont = 20            titletext = "%s %s 3D" % (self.sitename, self.currentstep)            halign="left"        if cont3D2.show_legend:            legend3D = ax1.legend(legendicons,legend_label,frameon=False,loc=2,numpoints=1,fontsize=legendfont)            for text in legend3D.get_texts():                text.set_color(cont3D2.legend_color)        if cont3D2.show_title:            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)            ax1.text2D(0.65, 0.95, titletext, color=cont3D2.title_color,fontsize=titlefont,fontweight='bold',ha=halign,transform=ax1.transAxes,bbox=bbox_props)        if cont3D2.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', plot3D_on_plot_hover)            global plot3D_annot            plot3D_annot = ax1.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            plot3D_annot.set_visible(False)                plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax1.text2D(0, 0.25, "%s %s 3D Plot - No Steps Shown" % (self.sitename,self.currentstep), color='black',fontsize=15,fontweight='bold',transform=ax1.transAxes,bbox=bbox_props)    returndef plot3D_multiple(self,cont3D3,ax1):    if plotanything(self):        global plot3D_annot_pointlist        plot3D_annot_pointlist = []        x_list = []        y_list = []        z_list = []        pointlist3D = []        ax1.axis('equal')        for sample in self.sitedata:            if sample.show:                for step in sample.data:                    if step.show: #check if print each step                        dec = step.dec                        rad_dec = math.radians(dec)                        inc = step.inc                        rad_inc = math.radians(inc)                        intensity = float(step.intensity)                        east = math.sin(rad_dec) * math.cos(rad_inc)                        north = math.cos(rad_dec) * math.cos(rad_inc)                        down = -math.sin(rad_inc)                        east_scaled = east * intensity                        north_scaled = north * intensity                        down_scaled = down * intensity                        x_list.append(east_scaled)                        y_list.append(north_scaled)                        z_list.append(down_scaled)        max_x = max(x_list)        min_x = min(x_list)        max_y = max(y_list)        min_y = min(y_list)        max_z = max(z_list)        min_z = min(z_list)        tickspace = (max(abs(max_x), abs(min_x), abs(max_y), abs(min_y), abs(max_z), abs(min_z))) / 20        if min_x < 0:            x_axis_min = min_x - (tickspace * 2)        else:            x_axis_min = -tickspace * 2        if max_x > 0:            x_axis_max = max_x + (tickspace * 2)        else:            x_axis_max = tickspace * 2        if min_y < 0:            y_axis_min = min_y - (tickspace * 2)        else:            y_axis_min = -tickspace * 2        if max_y > 0:            y_axis_max = max_y + (tickspace * 2)        else:            y_axis_max = tickspace * 2        if min_z < 0:            z_axis_min = min_z - (tickspace * 2)        else:            z_axis_min = -tickspace * 2        if max_z > 0:            z_axis_max = max_z + (tickspace * 2)        else:            z_axis_max = tickspace * 2        maxaxis = max((abs(x_axis_min)+abs(x_axis_max)),(abs(y_axis_min)+abs(y_axis_max)),(abs(z_axis_min)+abs(z_axis_max)))        ax1.axis([x_axis_min, x_axis_max, y_axis_min, y_axis_max])        ax1.axis('equal')                if cont3D3.show_grid:            if cont3D3.show_labels:                labelfont = label3Dfontsizes_dict[cont3D3.label_fontsize_mod][self.totalplots][0]                ax1.set_xlabel('East',fontsize=labelfont,color=cont3D3.label_color)                ax1.set_ylabel('North',fontsize=labelfont,color=cont3D3.label_color)                ax1.set_zlabel('Down',fontsize=labelfont,color=cont3D3.label_color)            if cont3D3.show_ticks:                paramfont = label3Dfontsizes_dict[cont3D3.label_fontsize_mod][self.totalplots][1]                if cont3D3.show_ticklabels:                    ax1.tick_params(labelsize=paramfont,labelcolor=cont3D3.tick_color)                else:                    ax1.tick_params(labelsize=paramfont,labelcolor=cont3D3.tick_color,labelbottom='off',labeltop='off',labelleft='off',labelright='off')                            else:                ax1.set_xticks([])                ax1.set_yticks([])                ax1.set_zticks([])            if not cont3D3.show_gridlines:                ax1.grid(False)        else:            ax1._axis3don = False                    for sample in self.sitedata:            if sample.show:                hitshow = False                for plot3Dindex, step in enumerate(sample.data):                    if step.show: #check if print each step3                        dmagstep = step.dmagstep                        dec = step.dec                        rad_dec = math.radians(dec)                        inc = step.inc                        rad_inc = math.radians(inc)                        intensity = float(step.intensity)                        north = math.cos(rad_dec) * math.cos(rad_inc)                        east = math.sin(rad_dec) * math.cos(rad_inc)                        down = -math.sin(rad_inc)                        east_scaled = east * intensity                        north_scaled = north * intensity                        down_scaled = down * intensity                        vlength = math.sqrt(east_scaled**2 + north_scaled**2 + down_scaled**2)                        stepletter = step.stepletter                        jdecrease_size = cont3D3.jdecrease_size                        jincrease_size = cont3D3.jincrease_size                        jdecrease_color = cont3D3.jdecrease_color                        jincrease_color = cont3D3.jincrease_color                        jdecrease_symbol = cont3D3.jdecrease_symbol                        jincrease_symbol = cont3D3.jincrease_symbol                        if cont3D3.error_scaling == "Size":                            try:                                error = float(step.error)                            except:                                error = 0                            symbolsize = 10 * error                            jdecrease_size = symbolsize                            jincrease_size = symbolsize                        elif cont3D3.error_scaling == "Color":                            try:                                error = float(step.error)                            except:                                error = 0                            symbolcolor = getsymbolcolor(error)                            jdecrease_color = symbolcolor                            jincrease_color = symbolcolor                            if jdecrease_symbol == jincrease_symbol:                                if jdecrease_symbol == "o":                                    jincrease_symbol = "s"                                else:                                    jincrease_symbol = "o"                         if plot3Dindex == 0 or hitshow == False:                            if cont3D3.show_jdecrease_edge:                                newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size,edgecolor=cont3D3.jdecrease_edge_color,linewidth=cont3D3.jdecrease_edge_width,zorder=3)                            else:                                newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size)                            if cont3D3.show_firststep:                                if cont3D3.show_firststep_edge:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D3.firststep_color, marker=cont3D3.firststep_symbol,s=cont3D3.firststep_size,edgecolor=cont3D3.firststep_edge_color,linewidth=cont3D3.firststep_edge_width,zorder=3)                                else:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D3.firststep_color, marker=cont3D3.firststep_symbol,s=cont3D3.firststep_size)                                plot3D_annot_pointlist.append([newpoint,"Sample: %s, Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.name, stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D3.firststep_color])                            else:                                if cont3D3.show_jdecrease_edge:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size,edgecolor=cont3D3.jdecrease_edge_color,linewidth=cont3D3.jdecrease_edge_width,zorder=3)                                else:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size)                                plot3D_annot_pointlist.append([newpoint,"Sample: %s, Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.name, stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D3.jdecrease_color])                        else:                            if vlength_prev >= vlength:                                if cont3D3.show_jdecrease_edge:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size,edgecolor=cont3D3.jdecrease_edge_color,linewidth=cont3D3.jdecrease_edge_width,zorder=3)                                else:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jdecrease_color, marker=jdecrease_symbol,s=jdecrease_size)                                plot3D_annot_pointlist.append([newpoint,"Sample: %s, Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.name, stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D3.jdecrease_color])                            else:                                if cont3D3.show_jincrease_edge:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jincrease_color, marker=jincrease_symbol,s=jincrease_size,edgecolor=cont3D3.jincrease_edge_color,linewidth=cont3D3.jincrease_edge_width,zorder=3)                                else:                                    newpoint = ax1.scatter(east_scaled, north_scaled, down_scaled, c=jincrease_color, marker=jincrease_symbol,s=jincrease_size)                                plot3D_annot_pointlist.append([newpoint,"Sample: %s, Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.name, stepletter,dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),cont3D3.jincrease_color])                                                            xdiff = east_scaled_prev - east_scaled                            ydiff = north_scaled_prev - north_scaled                            zdiff = down_scaled_prev - down_scaled                            vdiff_length = math.sqrt(xdiff**2 + ydiff**2 + zdiff**2)                            try:                                arrowheadscaler = maxaxis / vdiff_length * arrow3Dscaler_dict[cont3D3.arrowline_width]                            except:                                arrowheadscaler = 1                            if cont3D3.show_arrowlines:                                if cont3D3.arrowsorlines == "Arrows":                                    ax1.quiver(east_scaled,north_scaled,down_scaled,xdiff,ydiff,zdiff,color=cont3D3.arrowline_color,lw=cont3D3.arrowline_width,arrow_length_ratio=arrowheadscaler,pivot='tail')                                elif cont3D3.arrowsorlines == "Lines":                                    ax1.plot([east_scaled,east_scaled_prev],[north_scaled,north_scaled_prev],[down_scaled,down_scaled_prev],color=cont3D3.arrowline_color,lw=cont3D3.arrowline_width,zorder=0)                        north_scaled_prev = north_scaled                        east_scaled_prev = east_scaled                        down_scaled_prev = down_scaled                        vlength_prev = vlength                        hitshow = True                if cont3D3.show_laststep:                    if cont3D3.show_laststep_edge:                        ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D3.laststep_color, marker=cont3D3.laststep_symbol,s=cont3D3.laststep_size,edgecolor=cont3D3.laststep_edge_color,linewidth=cont3D3.laststep_edge_width,zorder=3)                    else:                        ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D3.laststep_color, marker=cont3D3.laststep_symbol,s=cont3D3.laststep_size)                else:                    if cont3D3.show_jdecrease_edge:                        ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D3.jdecrease_color, marker=cont3D3.jdecrease_symbol,s=cont3D3.jdecrease_size,edgecolor=cont3D3.jdecrease_edge_color,linewidth=cont3D3.jdecrease_edge_width,zorder=3)                    else:                        ax1.scatter(east_scaled, north_scaled, down_scaled, c=cont3D3.jdecrease_color, marker=cont3D3.jdecrease_symbol,s=cont3D3.jdecrease_size)        if cont3D3.show_axes:            ax1.plot([x_axis_min, x_axis_max], [0,0],[0,0],cont3D3.axes_color,lw=cont3D3.axis_width)            ax1.plot([0,0], [y_axis_max,y_axis_min],[0,0],cont3D3.axes_color,lw=cont3D3.axis_width)            ax1.plot([0,0], [0,0], [z_axis_max,z_axis_min],cont3D3.axes_color,lw=cont3D3.axis_width)        if cont3D3.error_scaling == "Color":            legend_jdecrease_color = "white"            legend_jincrease_color = "white"        else:            legend_jdecrease_color = cont3D3.jdecrease_color            legend_jincrease_color = cont3D3.jincrease_color        red_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=legend_jdecrease_color, markeredgecolor="grey", marker=jdecrease_symbol)        blue_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=legend_jincrease_color , markeredgecolor="grey", marker=jincrease_symbol)        legendicons = [blue_proxy,red_proxy]        legend_label = ["Intensity Increase","Intensity Decrease"]        if cont3D3.show_legend:            if cont3D3.show_firststep:                yellow_sq_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=cont3D3.firststep_color, markeredgecolor="grey", marker=cont3D3.firststep_symbol)                legendicons.append(yellow_sq_proxy)                legend_label.append("First Step")            if cont3D3.show_laststep:                yellow_tri_proxy = mpl.lines.Line2D([0],[0], linestyle="none", c=cont3D3.firststep_color, markeredgecolor="grey", marker=cont3D3.laststep_symbol)                legendicons.append(yellow_tri_proxy)                legend_label.append("Last Step")        if cont3D3.show_zijproj:            if self.incplot_azimuth == 90:                x1 = x_axis_max                x2 = x_axis_min                y1 = 0                y2 = 0            else:                incplot_az_rad = math.radians(self.incplot_azimuth)                NEcornerangle = math.degrees(math.atan2(x_axis_max,y_axis_max))                SEcornerangle = math.degrees(math.atan2(x_axis_max,y_axis_min))                SWcornerangle = math.degrees(math.atan2(x_axis_min,y_axis_min)) + 360                NWcornerangle = math.degrees(math.atan2(x_axis_min,y_axis_max)) + 360                if 0 <= self.incplot_azimuth < NEcornerangle:                    x1 = math.tan(incplot_az_rad) * y_axis_max                    y1 = y_axis_max                elif NEcornerangle <= self.incplot_azimuth < SEcornerangle:                    x1 = x_axis_max                    y1 = x_axis_max / math.tan(incplot_az_rad)                elif SEcornerangle <= self.incplot_azimuth <= 180:                    x1 = math.tan(incplot_az_rad) * y_axis_min                    y1 = y_axis_min                zij_incplot_azimuth_westval = self.incplot_azimuth + 180                if 180 <= zij_incplot_azimuth_westval < SWcornerangle:                    x2 = math.tan(incplot_az_rad) * y_axis_min                    y2 = y_axis_min                elif SWcornerangle <= zij_incplot_azimuth_westval < NWcornerangle:                    x2 = x_axis_min                    y2 = x_axis_min / math.tan(incplot_az_rad)                elif NWcornerangle <= zij_incplot_azimuth_westval < 360:                    x2 = math.tan(incplot_az_rad) * y_axis_max                    y2 = y_axis_max                               vdiff_length = math.sqrt((x1-x2)**2 + (y1-y2)**2)            arrowheadscaler = maxaxis / vdiff_length * 500            ax1.quiver(x1,y1,0,(x1*.0001-x2*.0001),(y1*.0001-y2*.0001),0,color=cont3D3.zijproj_color,lw=2,arrow_length_ratio=arrowheadscaler,zorder=0,linestyle="-")            ax1.plot([x1,x2],[y1,y2],[0,0],color=cont3D3.zijproj_color,linestyle="--",lw=2,zorder=5)            if cont3D3.show_legend:                verts = [(110, 0), (10, 40), (10, -40), (110,0),(0, 0),]                codes = [Path.MOVETO,Path.LINETO,Path.LINETO,Path.LINETO,Path.CLOSEPOLY,]                tripath = Path(verts, codes)                if self.totalplots == 1:                    pinkmarksize = 40                else:                    pinkmarksize = 20                pink_tri_proxy = mpl.lines.Line2D([0],[0], linestyle="--", lw=2,color=cont3D3.zijproj_color, markersize=pinkmarksize,marker=tripath,markeredgewidth=0.0)                legendicons = [pink_tri_proxy] + legendicons                legend_label = ["Zijderveld Projection Heading"] + legend_label        if self.totalplots in [3,4]:            legendfont = 8            titlefont = 15            titletext = "%s %s 3D Plot" % (down_arrow, self.sitename)            halign="left"        elif self.totalplots == 2:            legendfont = 10            titlefont = 20            titletext = "%s 3D Plot" % (self.sitename)            halign="center"        elif self.totalplots == 1:            legendfont = 16            titlefont = 20            titletext = "%s 3D Plot" % (self.sitename)            halign="left"        if cont3D3.show_legend:            legend3D = ax1.legend(legendicons,legend_label,frameon=False,loc=2,numpoints=1,fontsize=legendfont)            for text in legend3D.get_texts():                text.set_color(cont3D3.legend_color)        if cont3D3.show_title:            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)            ax1.text2D(0.65, 0.95, titletext, color=cont3D3.title_color,fontsize=titlefont,fontweight='bold',ha=halign,transform=ax1.transAxes,bbox=bbox_props)        if cont3D3.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', plot3D_on_plot_hover)            global plot3D_annot            plot3D_annot = ax1.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            plot3D_annot.set_visible(False)                plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax1.text2D(0, 0.25, "%s 3D Plot - No Steps Shown" % self.sample.name, color='black',fontsize=15,fontweight='bold',transform=ax1.transAxes,bbox=bbox_props)    return################ Equal Area Plot Functions ################def eq_update_annot(ind,item):    global eq_annot    pos = item[0].get_offsets()[ind["ind"][0]]    eq_annot.xy = pos    text = (item[1])    eq_annot.set_text(text)    eq_annot.get_bbox_patch().set_color(item[2])    eq_annot.get_bbox_patch().set_facecolor('#f3f2f1')    eq_annot.get_bbox_patch().set_alpha(0.75)    returndef eq_on_plot_hover(event):    vis = eq_annot.get_visible()    for item in range(0,len(eq_annot_pointlist)):        onpoint, ind = eq_annot_pointlist[item][0].contains(event)        if onpoint:            eq_update_annot(ind,eq_annot_pointlist[item])            eq_annot.set_visible(True)            fig.canvas.draw_idle()        else:            if vis:                eq_annot.set_visible(False)                fig.canvas.draw_idle()    returndef make_eqplot(self,controls,ax2):    ax2.set_aspect('equal', adjustable='box')    maincircle = plt.Circle((0, 0), controls.circle_rad, lw=controls.circle_thickness, color=controls.circle_color, fill=False)    ax2.add_artist(maincircle)    ax2.axis([-controls.axes_length, controls.axes_length, -controls.axes_length, controls.axes_length])    ax2.axis('off')    if controls.show_cross:                        ax2.plot([0,0],[-6,6],controls.axestick_color,lw=controls.axestick_width)        ax2.plot([-6,6],[0,0],controls.axestick_color,lw=controls.axestick_width)    if controls.show_circleticks: # plot circle ticks        tickdegrees = 360/controls.numcircleticks         tickmarker = 0        while tickmarker < 360:             tick_length = eqcircletick_length_dict[controls.circletick_length_mod][tickmarker]            tickmarker_rad = math.radians(tickmarker)            x1 = math.sin(tickmarker_rad)*(controls.circle_rad-tick_length)            x2 = math.sin(tickmarker_rad)*controls.circle_rad            y1 = math.cos(tickmarker_rad)*(controls.circle_rad-tick_length)            y2 = math.cos(tickmarker_rad)*controls.circle_rad            ax2.plot([x1,x2],[y1,y2],controls.circletick_color,lw=controls.circletick_width)            tickmarker = tickmarker + tickdegrees    if controls.show_axesticks: # plot axes ticks        tickdegrees = 90/controls.numaxesticks         tickmarker = tickdegrees        while tickmarker < 90:            tick_length = eqaxestick_length_dict[controls.axestick_length_mod][tickmarker]            tickdist = math.sqrt(1-(math.sin(math.radians(math.fabs(tickmarker)))))*controls.circle_rad            if controls.show_posxaxis_ticks:                ax2.plot([tickdist,tickdist],[-tick_length,tick_length],controls.axestick_color,lw=controls.axestick_width)            if controls.show_posyaxis_ticks:                ax2.plot([-tick_length,tick_length],[tickdist,tickdist],controls.axestick_color,lw=controls.axestick_width)            if controls.show_negxaxis_ticks:                ax2.plot([-tickdist,-tickdist],[-tick_length,tick_length],controls.axestick_color,lw=controls.axestick_width)            if controls.show_negyaxis_ticks:                ax2.plot([-tick_length,tick_length],[-tickdist,-tickdist],controls.axestick_color,lw=controls.axestick_width)                        tickmarker = tickmarker + tickdegrees    returndef ploteq_sample(self,eqcont,ax2):    if plotanything(self):        global eq_annot_pointlist        eq_annot_pointlist = []        pointlisteq = []        make_eqplot(self,eqcont,ax2)        hitshow = False        eq_step_fontsize = fontsizes_dict[eqcont.step_fontsize_mod][self.totalplots][0]        if self.totalplots in [3,4]:            step_x = 15            step_y = 1        elif self.totalplots == 2:            step_x = 5            step_y = 10        elif self.totalplots == 1:            step_x = 4            step_y = 8        for ploteqindex, step in enumerate(self.sample.data):            if step.show: #check if print each step                dec = step.dec                rad_dec = math.radians(dec)                inc = step.inc                rad_inc = math.radians(inc)                dmagstep = step.dmagstep                forward = math.sqrt(1-(math.sin(math.radians(math.fabs(inc)))))*eqcont.circle_rad                point_x = math.sin(rad_dec) * forward                point_y = math.cos(rad_dec) * forward                if eqcont.error_scaling == "None":                    if inc >= 0:                        drawcolor = eqcont.lowerhem_color                        pointsize = eqcont.lowerhem_size                        point_symbol = eqcont.lowerhem_symbol                        if eqcont.show_lowerhem_edge:                            pointedgecolor = eqcont.lowerhem_edge_color                            pointedgewidth = eqcont.lowerhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                    else:                        drawcolor = eqcont.upperhem_color                        pointsize = eqcont.upperhem_size                        point_symbol = eqcont.upperhem_symbol                        if eqcont.show_upperhem_edge:                            pointedgecolor = eqcont.upperhem_edge_color                            pointedgewidth = eqcont.upperhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                elif eqcont.error_scaling == "Size":                    try:                        error = float(step.error)                    except:                        error = 0                    pointsize = 30 * error                    if inc >= 0:                        drawcolor = eqcont.lowerhem_color                        point_symbol = eqcont.lowerhem_symbol                        if eqcont.show_lowerhem_edge:                            pointedgecolor = eqcont.lowerhem_edge_color                            pointedgewidth = eqcont.lowerhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                    else:                        drawcolor = eqcont.upperhem_color                        point_symbol = eqcont.upperhem_symbol                        if eqcont.show_upperhem_edge:                            pointedgecolor = eqcont.upperhem_edge_color                            pointedgewidth = eqcont.upperhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                elif eqcont.error_scaling == "Color":                    try:                        error = float(step.error)                    except:                        error = 0                    drawcolor = getsymbolcolor(error)                    if inc >= 0:                        pointsize = eqcont.lowerhem_size                        point_symbol = eqcont.lowerhem_symbol                        if eqcont.show_lowerhem_edge:                            pointedgecolor = eqcont.lowerhem_edge_color                            pointedgewidth = eqcont.lowerhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                    else:                        pointsize = eqcont.upperhem_size                        if eqcont.lowerhem_symbol == eqcont.upperhem_symbol:                            if eqcont.lowerhem_symbol == "o":                                point_symbol = "s"                            else:                                point_symbol = "o"                         if eqcont.show_upperhem_edge:                            pointedgecolor = eqcont.upperhem_edge_color                            pointedgewidth = eqcont.upperhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                stepletter = step.stepletter                newpoint = ax2.scatter(point_x, point_y, color=drawcolor, s=pointsize, marker=point_symbol, edgecolor=pointedgecolor, linewidth=pointedgewidth)                eq_annot_pointlist.append([newpoint,"Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (stepletter, dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),drawcolor])                if step.eq_printlabel:                    ax2.text(point_x+step_x, point_y+step_y, dmagstep,color=eqcont.printstep_color,fontsize=eq_step_fontsize,zorder=5)                if ploteqindex == 0 or hitshow == False:                    if eqcont.show_firststep:                        if eqcont.show_firststep_edge:                            ax2.scatter(point_x, point_y, color=eqcont.firststep_color, s=eqcont.firststep_size, marker=eqcont.firststep_symbol, edgecolor=eqcont.firststep_edge_color, linewidth=eqcont.firststep_edge_width, zorder=4)                        else:                            ax2.scatter(point_x, point_y, color=eqcont.firststep_color, s=eqcont.firststep_size, marker=eqcont.firststep_symbol,zorder=4)                else:                    prevforward = math.sqrt(1-(math.sin(math.radians(math.fabs(prev_inc)))))*eqcont.circle_rad                    prev_dec_rad = math.radians(prev_dec)                    prev_inc_rad = math.radians(prev_inc)                    prev_x = math.sin(prev_dec_rad) * prevforward                    prev_y = math.cos(prev_dec_rad) * prevforward                    if eqcont.show_arcarrowline:                        if eqcont.arcsarrowsorlines == "Arcs":                            if inc >= prev_inc:                                 p2_lat = math.radians(inc)                                p2_lon = math.radians(dec)                                p1_lat = math.radians(prev_inc)                                p1_lon = math.radians(prev_dec)                            else:                                p2_lat = math.radians(prev_inc)                                p2_lon = math.radians(prev_dec)                                p1_lat = math.radians(inc)                                p1_lon = math.radians(dec)                            lon_diff_12 = math.radians((math.degrees(p2_lon) - math.degrees(p1_lon)) % 360) # is this right?                            if ((math.cos(p1_lat) * math.tan(p2_lat)) - (math.sin(p1_lat) * math.cos(lon_diff_12))) == 0.0:                                heading_12 = math.atan( (math.sin(lon_diff_12)) / 0.00000000000001  ) # heading from point 1 to point 2                            else:                                heading_12 = math.atan( (math.sin(lon_diff_12)) / ((math.cos(p1_lat) * math.tan(p2_lat)) - (math.sin(p1_lat) * math.cos(lon_diff_12)))  ) # heading from point 1 to point 2                            heading_01 = math.asin(math.sin(heading_12) * math.cos(p1_lat)) # heading for this great circle at the Node where the great circle intersects the equator.                            if (p1_lat == 0) and (heading_12 == math.radians(90)):                                angdist_01 = 0                            else:                                angdist_01 = math.atan2(math.tan(p1_lat),math.cos(heading_12)) # angular distance between Node (p0) and point 1                            lon_diff_01 = math.atan(math.sin(heading_01) * math.sin(angdist_01) / math.cos(angdist_01) ) # longitudinal difference bewteen Node (p0) and p1. (Node is where great circle intersects equator).                            p0_lon = p1_lon - lon_diff_01 # longitude of the Node (p0). (Node is where great circle intersects equator).                            p0_lat = 0 # this is always the case becuase the Node (p0) is always along the equator                            lon_diff_02 = lon_diff_01 + lon_diff_12                            angdist_02 = math.acos( (math.sin(p0_lat)*math.sin(p2_lat)) + (math.cos(p0_lat)*math.cos(p2_lat)*math.cos(lon_diff_02)) )                            if inc < 0 and prev_inc < 0:                                angdist_02 = -angdist_02                                if angdist_01 > angdist_02:                                    angdist_01, angdist_02 = angdist_02, angdist_01                            elif (np.sign(p1_lat) != np.sign(p2_lat)) and (math.fabs(angdist_02 - angdist_01) > math.pi):                                angdist_02 = math.fabs(angdist_02) - (2 * math.pi)                                angdist_01, angdist_02 = angdist_02, angdist_01                            start_angdist_point = int(round(angdist_01 * eqcont.arc_densityfactor, 0))                            end_angdist_point = int(round(angdist_02 * eqcont.arc_densityfactor, 0))                            for angdist_0p in range(start_angdist_point,end_angdist_point):                                p_lat = math.asin( math.cos(heading_01)*math.sin(angdist_0p/eqcont.arc_densityfactor) )                                p_lon = math.atan2(math.sin(heading_01)*math.sin(angdist_0p/eqcont.arc_densityfactor),math.cos(angdist_0p/eqcont.arc_densityfactor)) + p0_lon                                forward = math.sqrt(1-(math.sin(math.fabs(p_lat))))*eqcont.circle_rad                                arc_x = math.sin(p_lon) * forward                                arc_y = math.cos(p_lon) * forward                                ax2.scatter(arc_x, arc_y, color=eqcont.arcarrowline_color, s=eqcont.arcarrowline_width, marker=".",zorder=0)                        elif eqcont.arcsarrowsorlines == "Arrows":                            xdiff = prev_x - point_x                            ydiff = prev_y - point_y                            ax2.quiver(point_x,point_y,xdiff,ydiff,color=eqcont.arcarrowline_color,units='xy',scale=1,width=eqcont.arcarrowline_width,headwidth=eqcont.arrowhead_width,headlength=eqcont.arrowhead_length,zorder=3)                        elif eqcont.arcsarrowsorlines == "Lines":                            ax2.plot([point_x,prev_x],[point_y,prev_y],color=eqcont.arcarrowline_color,lw=eqcont.arcarrowline_width,zorder=0)                prev_x = point_x                prev_y = point_y                prev_dec = dec                prev_inc = inc                hitshow = True            if self.sample.bflinelist != []:                dec = step.dec                rad_dec = math.radians(dec)                inc = step.inc                rad_inc = math.radians(inc)                intensity = float(step.intensity)                east = math.sin(rad_dec) * math.cos(rad_inc)                north = math.cos(rad_dec) * math.cos(rad_inc)                down = -math.sin(rad_inc)                east_scaled = east * intensity                north_scaled = north * intensity                down_scaled = down * intensity                newpoint = [east_scaled,north_scaled,down_scaled]                pointlisteq.append(newpoint)        if eqcont.show_laststep:            if eqcont.show_laststep_edge:                ax2.scatter(point_x, point_y, color=eqcont.laststep_color, s=eqcont.laststep_size, marker=eqcont.laststep_symbol, edgecolor=eqcont.laststep_edge_color,linewidth=eqcont.laststep_edge_width, )            else:                ax2.scatter(point_x, point_y, color=eqcont.laststep_color, s=eqcont.laststep_size, marker=eqcont.laststep_symbol)        if self.sample.bflinelist != []:            for bfline in self.sample.bflinelist:                E_list = []                N_list = []                D_list = []                matrixpointlist = []                matrixpointlist_yz1 = []                matrixpointlist_zx1 = []                maxdist = 0                bflinesteplist = bfline[0]                for pointstepindex in bflinesteplist:                    E_val = pointlisteq[pointstepindex][0]                    N_val = pointlisteq[pointstepindex][1]                    D_val = pointlisteq[pointstepindex][2]                    E_list.append(E_val)                    N_list.append(N_val)                    D_list.append(D_val)                    new_xy1point = [E_val,N_val,1]                    matrixpointlist.append(new_xy1point)                    new_yz1point = [N_val,D_val,1] # try                    matrixpointlist_yz1.append(new_yz1point) # try                    new_zx1point = [D_val,E_val,1] # try                    matrixpointlist_zx1.append(new_zx1point) # try                    for maxdistindex in bflinesteplist:                        if maxdistindex != pointstepindex:                            E_val_dist = pointlisteq[maxdistindex][0]                            N_val_dist = pointlisteq[maxdistindex][1]                            D_val_dist = pointlisteq[maxdistindex][2]                            dist = math.sqrt( (E_val - E_val_dist)**2 + (N_val - N_val_dist)**2 + (D_val - D_val_dist)**2 )                            if dist > maxdist:                                maxdist = dist                                startpoint = pointlisteq[pointstepindex]                                endpoint = pointlisteq[maxdistindex]                ## Z val:                 b_mat = np.matrix(D_list).T                A_mat = np.matrix(matrixpointlist)                fit = (A_mat.T * A_mat).I * A_mat.T * b_mat##                    errors = b_mat - A_mat * fit##                    residual = np.linalg.norm(errors)                a = fit.item(0)                b = fit.item(1)                c = fit.item(2)                                startZ = a * startpoint[0] + b * startpoint[1] + c                endZ = a * endpoint[0] + b * endpoint[1] + c                ## E val:                b_mat_yz1 = np.matrix(E_list).T                 A_mat_yz1 = np.matrix(matrixpointlist_yz1)                 fit_yz1 = (A_mat_yz1.T * A_mat_yz1).I * A_mat_yz1.T * b_mat_yz1                 a_yz1 = fit_yz1.item(0)                b_yz1 = fit_yz1.item(1)                c_yz1 = fit_yz1.item(2)                startE = a_yz1 * startpoint[1] + b_yz1 * startpoint[2] + c_yz1                endE = a_yz1 * endpoint[1] + b_yz1 * endpoint[2] + c_yz1                                ## N val:                b_mat_zx1 = np.matrix(N_list).T                A_mat_zx1 = np.matrix(matrixpointlist_zx1)                 fit_zx1 = (A_mat_zx1.T * A_mat_zx1).I * A_mat_zx1.T * b_mat_zx1                a_zx1 = fit_zx1.item(0)                b_zx1 = fit_zx1.item(1)                c_zx1 = fit_zx1.item(2)                startN = a_zx1 * startpoint[2] + b_zx1 * startpoint[0] + c_zx1                endN = a_zx1 * endpoint[2] + b_zx1 * endpoint[0] + c_zx1                bfx_dir = startE - endE                bfy_dir = startN - endN                bfz_dir = startZ - endZ                bf_dec = math.atan2(bfx_dir,bfy_dir)                bf_dist = math.sqrt(bfx_dir**2 + bfy_dir**2 + bfz_dir**2)                bf_inc = -math.asin(bfz_dir/bf_dist)                                forward = math.sqrt(1-(math.sin(math.fabs(bf_inc))))*eqcont.circle_rad                bf_point_x = math.sin(bf_dec) * forward                bf_point_y = math.cos(bf_dec) * forward                if bf_inc >= 0:                    drawcolor = eqcont.lowerhem_color                else:                    drawcolor = eqcont.upperhem_color                ax2.scatter(bf_point_x, bf_point_y, color=drawcolor, s=pointsize, marker="*", lw=1, edgecolor=bfline[1])                        if self.totalplots in [3,4]:            legendfont = 8        elif self.totalplots == 2:            legendfont = 10        elif self.totalplots == 1:            legendfont = 14        legend_lowerhem_symbol = eqcont.lowerhem_symbol        legend_upperhem_symbol = eqcont.upperhem_symbol        if eqcont.error_scaling == "Color":            legend_lowerhem_color = "white"            legend_upperhem_color = "white"            if eqcont.lowerhem_symbol == eqcont.upperhem_symbol:                if eqcont.lowerhem_symbol == "o":                    legend_upperhem_symbol = "s"                else:                    legend_upperhem_symbol = "o"         else:            legend_lowerhem_color = eqcont.lowerhem_color            legend_upperhem_color = eqcont.upperhem_color        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        blue_sq, = ax2.plot(-1000000, legend_lowerhem_symbol, color=legend_lowerhem_color, markersize=10,markeredgecolor="grey", linestyle="none")        red_sq, = ax2.plot(-1000000, legend_upperhem_symbol, color=legend_upperhem_color, markersize=10,markeredgecolor="grey", linestyle="none")        legendicons = [blue_sq, red_sq]        legend_label = ["Lower Hemisphere", "Upper Hemisphere"]        if eqcont.show_firststep:            yellow_sq, = ax2.plot(-1000000, eqcont.firststep_symbol, color=eqcont.firststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_sq)            legend_label.append("First Step")        if eqcont.show_laststep:            yellow_tri, = ax2.plot(-1000000, eqcont.laststep_symbol, color=eqcont.laststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_tri)            legend_label.append("Last Step")        if eqcont.show_gadfield:            sitelat=int(round(eqcont.sitelat,0))            sitelat_rad = math.radians(eqcont.sitelat)            firststop = 2 * math.tan(sitelat_rad)            siteinc = math.atan(2 * math.tan(sitelat_rad))  # GAD equation: tan (I) = 2tan (lat)            forward = math.sqrt(1-(math.sin(math.fabs(siteinc))))*eqcont.circle_rad            point_x = 0            point_y = forward                        if sitelat <= 0:                if not(eqcont.field_symbol in ["+","x"]):                    gadfield_drawcolor = "white"                    gadfield_edgecolor = eqcont.field_color                else:                    gadfield_drawcolor = eqcont.field_color                    gadfield_edgecolor = eqcont.field_edge_color            else:                gadfield_drawcolor = eqcont.field_color                gadfield_edgecolor = eqcont.field_edge_color            if eqcont.show_gadfield_edge:                newpoint = ax2.scatter(point_x, point_y, color=gadfield_drawcolor, s=eqcont.field_size, marker=eqcont.field_symbol, edgecolor=gadfield_edgecolor)            else:                newpoint = ax2.scatter(point_x, point_y, color=gadfield_drawcolor, s=eqcont.field_size, marker=eqcont.field_symbol)            siteinc_deg = round(math.degrees(siteinc),1)            gadfield_label_str = "GAD Field\nSite Lat: %s%s\nSite Inc: %s%s" % (sitelat, degree_sign, siteinc_deg, degree_sign)            eq_annot_pointlist.append([newpoint,gadfield_label_str,gadfield_drawcolor])            if eqcont.show_gadfield_label:                ax2.text(point_x+step_x, point_y+step_y, gadfield_label_str,color=eqcont.printstep_color,fontsize=eq_step_fontsize,zorder=5)            if eqcont.show_legend:                black_x, = ax2.plot(-1000000, eqcont.field_symbol, color=gadfield_drawcolor, markersize=8,markeredgecolor="grey", linestyle="none")                legendicons.append(black_x)                legend_label.append(gadfield_label_str)        if self.totalplots in [3,4]:            if eqcont.show_legend:                if not(eqcont.show_gadfield):                    legend_x = 0.015                    legend_y = 0.10                else:                    legend_x = 0.756                    legend_y = 0.010                eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,loc=3,fancybox=True,shadow=True,bbox_to_anchor=(legend_x,legend_y),bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont.legend_color)            if eqcont.show_title:                ax2.text(-.2, -0.05, "%s EQ Plot %s" % (self.sample.name, up_arrow), color=eqcont.title_color,zorder=4,va='bottom',ha='left',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont.show_labels:                labelfontsize = fontsizes_dict[eqcont.label_fontsize_mod][1][0]                if eqcont.numsordirs == "Dirs":                    if eqcont.show_north:                        ax2.text(0.499, (0.00124 * eqcont.circle_rad) + 0.52, "N", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_east:                        ax2.text((0.00124 * eqcont.circle_rad) + 0.54, 0.472, "E", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_south:                        ax2.text(0.505, (-0.00124 * eqcont.circle_rad) + 0.42, "S", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_west:                        ax2.text((-0.00124 * eqcont.circle_rad) + 0.45, 0.475, "W", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                elif eqcont.numsordirs == "Nums":                    if eqcont.show_0:                        ax2.text(0.51, (0.00124 * eqcont.circle_rad) + 0.52, "0%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_90:                        ax2.text((0.00124 * eqcont.circle_rad) + 0.56, 0.472, "90%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_180:                        ax2.text(0.506, (-0.00124 * eqcont.circle_rad) + 0.42, "180%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_270:                        ax2.text((-0.00124 * eqcont.circle_rad) + 0.43, 0.475, "270%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)        elif self.totalplots == 2:            if eqcont.show_legend:                if self.show_zij:                    eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,ncol=4,loc=3,bbox_to_anchor=(1,0.15),fancybox=True,shadow=True,bbox_transform=plt.gcf().transFigure)                else:                    eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,ncol=4,loc=3,bbox_to_anchor=(0,0.15),fancybox=True,shadow=True,bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont.legend_color)            if eqcont.show_title:                ax2.text(0.5, 1.18, "%s Equal Area Plot" % self.sample.name, color=eqcont.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont.show_labels:                if eqcont.numsordirs == "Dirs":                    if eqcont.show_north:                        ax2.text(0.499, (0.00124 * eqcont.circle_rad) + 0.52, "N", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_east:                        ax2.text((0.00124 * eqcont.circle_rad) + 0.54, 0.472, "E", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_south:                        ax2.text(0.503, (-0.00124 * eqcont.circle_rad) + 0.42, "S", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_west:                        ax2.text((-0.00124 * eqcont.circle_rad) + 0.45, 0.475, "W", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                elif eqcont.numsordirs == "Nums":                    if eqcont.show_0:                        ax2.text(0.515, (0.00124 * eqcont.circle_rad) + 0.52, "0%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_90:                        ax2.text((0.00124 * eqcont.circle_rad) + 0.56, 0.472, "90%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_180:                        ax2.text(0.51, (-0.00124 * eqcont.circle_rad) + 0.42, "180%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_270:                        ax2.text((-0.00124 * eqcont.circle_rad) + 0.43, 0.475, "270%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)        elif self.totalplots == 1:            if eqcont.show_legend:                if not(eqcont.show_gadfield):                    legend_x = 0.02                    legend_y = 1.63                else:                    legend_x = 1.6                    legend_y = 1.58                eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,loc=3,fancybox=True,shadow=True,bbox_to_anchor=(legend_x,legend_y),bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont.legend_color)            if eqcont.show_title:                ax2.text(-.16, 0.97, "%s Equal Area Plot" % self.sample.name, color=eqcont.title_color,zorder=4,va='bottom',ha='left',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont.show_labels:                if eqcont.numsordirs == "Dirs":                    if eqcont.show_north:                        ax2.text(0.499, (0.00124 * eqcont.circle_rad) + 0.51, "N", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_east:                        ax2.text((0.00124 * eqcont.circle_rad) + 0.54, 0.479, "E", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_south:                        ax2.text(0.501, (-0.00124 * eqcont.circle_rad) + 0.43, "S", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_west:                        ax2.text((-0.00124 * eqcont.circle_rad) + 0.45, 0.479, "W", color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                elif eqcont.numsordirs == "Nums":                    if eqcont.show_0:                        ax2.text(0.51, (0.00124 * eqcont.circle_rad) + 0.51, "0%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_90:                        ax2.text((0.0012 * eqcont.circle_rad) + 0.565, 0.479, "90%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_180:                        ax2.text(0.515, (-0.0012 * eqcont.circle_rad) + 0.43, "180%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont.show_270:                        ax2.text((-0.00124 * eqcont.circle_rad) + 0.435, 0.479, "270%s" % degree_sign, color=eqcont.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)        if eqcont.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', eq_on_plot_hover)            global eq_annot            eq_annot = ax2.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            eq_annot.set_visible(False)        plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax2.text(0.5, +.2, "%s Equal Area Plot - No Steps Shown" % self.sample.name, color='black',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)    returndef ploteq_step(self,eqcont2,ax2):    if plotanything(self):        global eq_annot_pointlist        eq_annot_pointlist = []        pointlisteq = []        make_eqplot(self,eqcont2,ax2)        eq_step_fontsize = fontsizes_dict[eqcont2.step_fontsize_mod][self.totalplots][0]        if self.totalplots in [3,4]:            step_x = 15            step_y = 1        elif self.totalplots == 2:            step_x = 5            step_y = 10        elif self.totalplots == 1:            step_x = 4            step_y = 8        for ploteqindex, sample in enumerate(self.sitesteptext):            if sample.show: #check if print each step                dec = sample.dec                rad_dec = math.radians(dec)                inc = sample.inc                rad_inc = math.radians(inc)                dmagstep = sample.dmagstep_clean                forward = math.sqrt(1-(math.sin(math.radians(math.fabs(inc)))))*eqcont2.circle_rad                point_x = math.sin(rad_dec) * forward                point_y = math.cos(rad_dec) * forward                if eqcont2.error_scaling == "None":                    if inc >= 0:                        drawcolor = eqcont2.lowerhem_color                        pointsize = eqcont2.lowerhem_size                        point_symbol = eqcont2.lowerhem_symbol                        if eqcont.show_lowerhem_edge:                            pointedgecolor = eqcont2.lowerhem_edge_color                            pointedgewidth = eqcont2.lowerhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                    else:                        drawcolor = eqcont2.upperhem_color                        pointsize = eqcont2.upperhem_size                        point_symbol = eqcont2.upperhem_symbol                        if eqcont2.show_upperhem_edge:                            pointedgecolor = eqcont2.upperhem_edge_color                            pointedgewidth = eqcont2.upperhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                elif eqcont2.error_scaling == "Size":                    try:                        error = float(sample.error)                    except:                        error = 0                    pointsize = 30 * error                    if inc >= 0:                        drawcolor = eqcont2.lowerhem_color                        point_symbol = eqcont2.lowerhem_symbol                        if eqcont2.show_lowerhem_edge:                            pointedgecolor = eqcont2.lowerhem_edge_color                            pointedgewidth = eqcont2.lowerhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                    else:                        drawcolor = eqcont2.upperhem_color                        point_symbol = eqcont2.upperhem_symbol                        if eqcont2.show_upperhem_edge:                            pointedgecolor = eqcont2.upperhem_edge_color                            pointedgewidth = eqcont2.upperhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                elif eqcont2.error_scaling == "Color":                    try:                        error = float(sample.error)                    except:                        error = 0                    drawcolor = getsymbolcolor(error)                    if inc >= 0:                        pointsize = eqcont2.lowerhem_size                        point_symbol = eqcont2.lowerhem_symbol                        if eqcont2.show_lowerhem_edge:                            pointedgecolor = eqcont2.lowerhem_edge_color                            pointedgewidth = eqcont2.lowerhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                    else:                        pointsize = eqcont2.upperhem_size                        if eqcont2.lowerhem_symbol == eqcont2.upperhem_symbol:                            if eqcont2.lowerhem_symbol == "o":                                point_symbol = "s"                            else:                                point_symbol = "o"                         if eqcont2.show_upperhem_edge:                            pointedgecolor = eqcont2.upperhem_edge_color                            pointedgewidth = eqcont2.upperhem_edge_width                        else:                            pointedgecolor = None                            pointedgewidth = 0                                newpoint = ax2.scatter(point_x, point_y, color=drawcolor, s=pointsize, marker=point_symbol, edgecolor=pointedgecolor, linewidth=pointedgewidth)                eq_annot_pointlist.append([newpoint,"%s:\nStep: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.samplename,dmagstep,dec,degree_sign,inc,degree_sign,sample.intensity,sample.error,degree_sign),drawcolor])                if sample.eq2_printlabel:                    ax2.text(point_x+step_x, point_y+step_y, sample.samplename,color=eqcont2.printstep_color,fontsize=eq_step_fontsize,zorder=5)                        if self.totalplots in [3,4]:            legendfont = 8        elif self.totalplots == 2:            legendfont = 10        elif self.totalplots == 1:            legendfont = 14        legend_lowerhem_symbol = eqcont2.lowerhem_symbol        legend_upperhem_symbol = eqcont2.upperhem_symbol        if eqcont2.error_scaling == "Color":            legend_lowerhem_color = "white"            legend_upperhem_color = "white"            if eqcont2.lowerhem_symbol == eqcont2.upperhem_symbol:                if eqcont2.lowerhem_symbol == "o":                    legend_upperhem_symbol = "s"                else:                    legend_upperhem_symbol = "o"         else:            legend_lowerhem_color = eqcont2.lowerhem_color            legend_upperhem_color = eqcont2.upperhem_color        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        blue_sq, = ax2.plot(-1000000, legend_lowerhem_symbol, color=legend_lowerhem_color, markersize=10,markeredgecolor="grey", linestyle="none")        red_sq, = ax2.plot(-1000000, legend_upperhem_symbol, color=legend_upperhem_color, markersize=10,markeredgecolor="grey", linestyle="none")        legendicons = [blue_sq, red_sq]        legend_label = ["Lower Hemisphere", "Upper Hemisphere"]        if eqcont2.show_gadfield:            sitelat=int(round(eqcont2.sitelat,0))            sitelat_rad = math.radians(eqcont2.sitelat)            firststop = 2 * math.tan(sitelat_rad)            siteinc = math.atan(2 * math.tan(sitelat_rad))  # GAD equation: tan (I) = 2tan (lat)            forward = math.sqrt(1-(math.sin(math.fabs(siteinc))))*eqcont2.circle_rad            point_x = 0            point_y = forward                        if sitelat <= 0:                if not(eqcont2.field_symbol in ["+","x"]):                    gadfield_drawcolor = "white"                    gadfield_edgecolor = eqcont2.field_color                else:                    gadfield_drawcolor = eqcont2.field_color                    gadfield_edgecolor = eqcont2.field_edge_color            else:                gadfield_drawcolor = eqcont2.field_color                gadfield_edgecolor = eqcont2.field_edge_color            if eqcont2.show_gadfield_edge:                newpoint = ax2.scatter(point_x, point_y, color=gadfield_drawcolor, s=eqcont2.field_size, marker=eqcont2.field_symbol, edgecolor=gadfield_edgecolor)            else:                newpoint = ax2.scatter(point_x, point_y, color=gadfield_drawcolor, s=eqcont2.field_size, marker=eqcont2.field_symbol)            siteinc_deg = round(math.degrees(siteinc),1)            gadfield_label_str = "GAD Field\nSite Lat: %s%s\nSite Inc: %s%s" % (sitelat, degree_sign, siteinc_deg, degree_sign)            eq_annot_pointlist.append([newpoint,gadfield_label_str,gadfield_drawcolor])            if eqcont2.show_gadfield_label:                ax2.text(point_x+step_x, point_y+step_y, gadfield_label_str,color=eqcont2.printstep_color,fontsize=eq_step_fontsize,zorder=5)            if eqcont2.show_legend:                black_x, = ax2.plot(-1000000, eqcont2.field_symbol, color=gadfield_drawcolor, markersize=8,markeredgecolor=gadfield_edgecolor, linestyle="none")                legendicons.append(black_x)                legend_label.append(gadfield_label_str)        if self.totalplots in [3,4]:            if eqcont2.show_legend:                eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,loc=3,fancybox=True,shadow=True,bbox_to_anchor=(0.015,0.10),bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont2.legend_color)            if eqcont2.show_title:                ax2.text(-.2, -0.05, "%s %s EQ Plot %s" % (self.sitename, self.currentstep, up_arrow), color=eqcont2.title_color,zorder=4,va='bottom',ha='left',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont2.show_labels:                labelfontsize = fontsizes_dict[eqcont2.label_fontsize_mod][1][0]                if eqcont2.numsordirs == "Dirs":                    if eqcont2.show_north:                        ax2.text(0.499, (0.00124 * eqcont2.circle_rad) + 0.52, "N", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_east:                        ax2.text((0.00124 * eqcont2.circle_rad) + 0.54, 0.472, "E", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_south:                        ax2.text(0.505, (-0.00124 * eqcont2.circle_rad) + 0.42, "S", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_west:                        ax2.text((-0.00124 * eqcont2.circle_rad) + 0.45, 0.475, "W", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                elif eqcont2.numsordirs == "Nums":                    if eqcont2.show_0:                        ax2.text(0.51, (0.00124 * eqcont2.circle_rad) + 0.52, "0%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_90:                        ax2.text((0.00124 * eqcont2.circle_rad) + 0.56, 0.472, "90%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_180:                        ax2.text(0.506, (-0.00124 * eqcont2.circle_rad) + 0.42, "180%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_270:                        ax2.text((-0.00124 * eqcont2.circle_rad) + 0.43, 0.475, "270%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)        elif self.totalplots == 2:            if eqcont2.show_legend:                if self.show_zij:                    eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,ncol=4,loc=3,bbox_to_anchor=(1.25,0.15),fancybox=True,shadow=True,bbox_transform=plt.gcf().transFigure)                else:                    eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,ncol=4,loc=3,bbox_to_anchor=(.25,0.15),fancybox=True,shadow=True,bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont2.legend_color)            if eqcont2.show_title:                ax2.text(0.5, 1.18, "%s %s Equal Area Plot" % (self.sitename, self.currentstep), color=eqcont2.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont2.show_labels:                if eqcont2.numsordirs == "Dirs":                    if eqcont2.show_north:                        ax2.text(0.499, (0.00124 * eqcont2.circle_rad) + 0.52, "N", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_east:                        ax2.text((0.00124 * eqcont2.circle_rad) + 0.54, 0.472, "E", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_south:                        ax2.text(0.503, (-0.00124 * eqcont2.circle_rad) + 0.42, "S", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_west:                        ax2.text((-0.00124 * eqcont2.circle_rad) + 0.45, 0.475, "W", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                elif eqcont2.numsordirs == "Nums":                    if eqcont2.show_0:                        ax2.text(0.515, (0.00124 * eqcont2.circle_rad) + 0.52, "0%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_90:                        ax2.text((0.00124 * eqcont2.circle_rad) + 0.56, 0.472, "90%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_180:                        ax2.text(0.51, (-0.00124 * eqcont2.circle_rad) + 0.42, "180%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_270:                        ax2.text((-0.00124 * eqcont2.circle_rad) + 0.43, 0.475, "270%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)        elif self.totalplots == 1:            if eqcont2.show_legend:                if not(eqcont2.show_gadfield):                    legend_x = 0.02                    legend_y = 1.75                else:                    legend_x = 1.6                    legend_y = 1.68                eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,loc=3,fancybox=True,shadow=True,bbox_to_anchor=(legend_x,legend_y),bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont2.legend_color)            if eqcont2.show_title:                ax2.text(-.16, 0.97, "%s %s Equal Area Plot" % (self.sitename, self.currentstep), color=eqcont2.title_color,zorder=4,va='bottom',ha='left',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont2.show_labels:                if eqcont2.numsordirs == "Dirs":                    if eqcont2.show_north:                        ax2.text(0.499, (0.00124 * eqcont2.circle_rad) + 0.51, "N", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_east:                        ax2.text((0.00124 * eqcont2.circle_rad) + 0.54, 0.479, "E", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_south:                        ax2.text(0.501, (-0.00124 * eqcont2.circle_rad) + 0.43, "S", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_west:                        ax2.text((-0.00124 * eqcont2.circle_rad) + 0.45, 0.479, "W", color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                elif eqcont2.numsordirs == "Nums":                    if eqcont2.show_0:                        ax2.text(0.51, (0.00124 * eqcont2.circle_rad) + 0.51, "0%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_90:                        ax2.text((0.0012 * eqcont2.circle_rad) + 0.565, 0.479, "90%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_180:                        ax2.text(0.515, (-0.0012 * eqcont2.circle_rad) + 0.43, "180%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont2.show_270:                        ax2.text((-0.00124 * eqcont2.circle_rad) + 0.435, 0.479, "270%s" % degree_sign, color=eqcont2.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)        if eqcont2.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', eq_on_plot_hover)            global eq_annot            eq_annot = ax2.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            eq_annot.set_visible(False)        plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax2.text(0.5, +.2, "%s %s Equal Area Plot - No Steps Shown" % (self.sitename,self.currentstep), color='black',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)    returndef ploteq_multiple(self,eqcont3,ax2):    if plotanything(self):        global eq_annot_pointlist        eq_annot_pointlist = []        pointlisteq = []        make_eqplot(self,eqcont3,ax2)        eq_samp_fontsize = fontsizes_dict[eqcont3.samp_fontsize_mod][self.totalplots][0]        eq_step_fontsize = fontsizes_dict[eqcont3.step_fontsize_mod][self.totalplots][0]        if self.totalplots in [3,4]:            step_x = 15            step_y = 1        elif self.totalplots == 2:            step_x = 5            step_y = 10        elif self.totalplots == 1:            step_x = 4            step_y = 8        for sample in self.sitedata:            if sample.show:                hitshow = False                for ploteqindex, step in enumerate(sample.data):                    if step.show: #check if print each step                        dec = step.dec                        rad_dec = math.radians(dec)                        inc = step.inc                        rad_inc = math.radians(inc)                                                dmagstep = step.dmagstep                        forward = math.sqrt(1-(math.sin(math.radians(math.fabs(inc)))))*eqcont3.circle_rad                        point_x = math.sin(rad_dec) * forward                        point_y = math.cos(rad_dec) * forward                                                if eqcont3.error_scaling == "None":                            if inc >= 0:                                drawcolor = eqcont3.lowerhem_color                                pointsize = eqcont3.lowerhem_size                                point_symbol = eqcont3.lowerhem_symbol                                if eqcont.show_lowerhem_edge:                                    pointedgecolor = eqcont3.lowerhem_edge_color                                    pointedgewidth = eqcont3.lowerhem_edge_width                                else:                                    pointedgecolor = None                                    pointedgewidth = 0                            else:                                drawcolor = eqcont3.upperhem_color                                pointsize = eqcont3.upperhem_size                                point_symbol = eqcont3.upperhem_symbol                                if eqcont3.show_upperhem_edge:                                    pointedgecolor = eqcont3.upperhem_edge_color                                    pointedgewidth = eqcont3.upperhem_edge_width                                else:                                    pointedgecolor = None                                    pointedgewidth = 0                        elif eqcont3.error_scaling == "Size":                            try:                                error = float(step.error)                            except:                                error = 0                            pointsize = 30 * error                            if inc >= 0:                                drawcolor = eqcont3.lowerhem_color                                point_symbol = eqcont3.lowerhem_symbol                                if eqcont3.show_lowerhem_edge:                                    pointedgecolor = eqcont3.lowerhem_edge_color                                    pointedgewidth = eqcont3.lowerhem_edge_width                                else:                                    pointedgecolor = None                                    pointedgewidth = 0                            else:                                drawcolor = eqcont3.upperhem_color                                point_symbol = eqcont3.upperhem_symbol                                if eqcont3.show_upperhem_edge:                                    pointedgecolor = eqcont3.upperhem_edge_color                                    pointedgewidth = eqcont3.upperhem_edge_width                                else:                                    pointedgecolor = None                                    pointedgewidth = 0                        elif eqcont3.error_scaling == "Color":                            try:                                error = float(step.error)                            except:                                error = 0                            drawcolor = getsymbolcolor(error)                            if inc >= 0:                                pointsize = eqcont3.lowerhem_size                                point_symbol = eqcont3.lowerhem_symbol                                if eqcont3.show_lowerhem_edge:                                    pointedgecolor = eqcont3.lowerhem_edge_color                                    pointedgewidth = eqcont3.lowerhem_edge_width                                else:                                    pointedgecolor = None                                    pointedgewidth = 0                            else:                                pointsize = eqcont3.upperhem_size                                if eqcont3.lowerhem_symbol == eqcont3.upperhem_symbol:                                    if eqcont3.lowerhem_symbol == "o":                                        point_symbol = "s"                                    else:                                        point_symbol = "o"                                 if eqcont3.show_upperhem_edge:                                    pointedgecolor = eqcont3.upperhem_edge_color                                    pointedgewidth = eqcont3.upperhem_edge_width                                else:                                    pointedgecolor = None                                    pointedgewidth = 0                        stepletter = step.stepletter                        newpoint = ax2.scatter(point_x, point_y, color=drawcolor, s=pointsize, marker=point_symbol, edgecolor=pointedgecolor, linewidth=pointedgewidth)                        eq_annot_pointlist.append([newpoint,"Sample: %s, Step %s: %s\nDec: %s%s, Inc: %s%s\nIntensity: %s\nError: %s%s" % (sample.name, stepletter, dmagstep,dec,degree_sign,inc,degree_sign,step.intensity,step.error,degree_sign),drawcolor])                        if step.eq_printlabel:                            ax2.text(point_x+step_x, point_y+step_y, dmagstep,color=eqcont3.printstep_color,fontsize=eq_step_fontsize,zorder=5)                        if ploteqindex == 0 or hitshow == False:                            if sample.eq_printname:                                ax2.text(point_x-step_x, point_y, sample.name, color=eqcont3.printsamp_color,fontsize=eq_samp_fontsize,zorder=1,va='center',ha='right')                            if eqcont3.show_firststep:                                if eqcont3.show_firststep_edge:                                    ax2.scatter(point_x, point_y, color=eqcont3.firststep_color, s=eqcont3.firststep_size, marker=eqcont3.firststep_symbol, edgecolor=eqcont3.firststep_edge_color, linewidth=eqcont3.firststep_edge_width, zorder=4)                                else:                                    ax2.scatter(point_x, point_y, color=eqcont3.firststep_color, s=eqcont3.firststep_size, marker=eqcont3.firststep_symbol,zorder=4)                        else:                            prevforward = math.sqrt(1-(math.sin(math.radians(math.fabs(prev_inc)))))*eqcont3.circle_rad                            prev_dec_rad = math.radians(prev_dec)                            prev_inc_rad = math.radians(prev_inc)                                                        prev_x = math.sin(prev_dec_rad) * prevforward                            prev_y = math.cos(prev_dec_rad) * prevforward                            if eqcont3.show_arcarrowline:                                if eqcont3.arcsarrowsorlines == "Arcs":                                    if inc >= prev_inc:                                         p2_lat = math.radians(inc)                                        p2_lon = math.radians(dec)                                        p1_lat = math.radians(prev_inc)                                        p1_lon = math.radians(prev_dec)                                    else:                                        p2_lat = math.radians(prev_inc)                                        p2_lon = math.radians(prev_dec)                                        p1_lat = math.radians(inc)                                        p1_lon = math.radians(dec)                                    lon_diff_12 = math.radians((math.degrees(p2_lon) - math.degrees(p1_lon)) % 360) # is this right?                                    if ((math.cos(p1_lat) * math.tan(p2_lat)) - (math.sin(p1_lat) * math.cos(lon_diff_12))) == 0.0:                                        heading_12 = math.atan( (math.sin(lon_diff_12)) / 0.00000000000001  ) # heading from point 1 to point 2                                    else:                                        heading_12 = math.atan( (math.sin(lon_diff_12)) / ((math.cos(p1_lat) * math.tan(p2_lat)) - (math.sin(p1_lat) * math.cos(lon_diff_12)))  ) # heading from point 1 to point 2                                    heading_01 = math.asin(math.sin(heading_12) * math.cos(p1_lat)) # heading for this great circle at the Node where the great circle intersects the equator.                                    if (p1_lat == 0) and (heading_12 == math.radians(90)):                                        angdist_01 = 0                                    else:                                        angdist_01 = math.atan2(math.tan(p1_lat),math.cos(heading_12)) # angular distance between Node (p0) and point 1                                    lon_diff_01 = math.atan(math.sin(heading_01) * math.sin(angdist_01) / math.cos(angdist_01) ) # longitudinal difference bewteen Node (p0) and p1. (Node is where great circle intersects equator).                                    p0_lon = p1_lon - lon_diff_01 # longitude of the Node (p0). (Node is where great circle intersects equator).                                    p0_lat = 0 # this is always the case becuase the Node (p0) is always along the equator                                    lon_diff_02 = lon_diff_01 + lon_diff_12                                    angdist_02 = math.acos( (math.sin(p0_lat)*math.sin(p2_lat)) + (math.cos(p0_lat)*math.cos(p2_lat)*math.cos(lon_diff_02)) )                                    if inc < 0 and prev_inc < 0:                                        angdist_02 = -angdist_02                                        if angdist_01 > angdist_02:                                            angdist_01, angdist_02 = angdist_02, angdist_01                                    elif (np.sign(p1_lat) != np.sign(p2_lat)) and (math.fabs(angdist_02 - angdist_01) > math.pi):                                        angdist_02 = math.fabs(angdist_02) - (2 * math.pi)                                        angdist_01, angdist_02 = angdist_02, angdist_01                                    start_angdist_point = int(round(angdist_01 * eqcont3.arc_densityfactor, 0))                                    end_angdist_point = int(round(angdist_02 * eqcont3.arc_densityfactor, 0))                                    for angdist_0p in range(start_angdist_point,end_angdist_point):                                        p_lat = math.asin( math.cos(heading_01)*math.sin(angdist_0p/eqcont3.arc_densityfactor) )                                        p_lon = math.atan2(math.sin(heading_01)*math.sin(angdist_0p/eqcont3.arc_densityfactor),math.cos(angdist_0p/eqcont3.arc_densityfactor)) + p0_lon                                        forward = math.sqrt(1-(math.sin(math.fabs(p_lat))))*eqcont3.circle_rad                                        arc_x = math.sin(p_lon) * forward                                        arc_y = math.cos(p_lon) * forward                                        ax2.scatter(arc_x, arc_y, color=eqcont3.arcarrowline_color, s=eqcont3.arcarrowline_width, marker=".",zorder=0)                                elif eqcont3.arcsarrowsorlines == "Arrows":                                    xdiff = prev_x - point_x                                    ydiff = prev_y - point_y                                    ax2.quiver(point_x,point_y,xdiff,ydiff,color=eqcont3.arcarrowline_color,units='xy',scale=1,width=eqcont3.arcarrowline_width,headwidth=eqcont3.arrowhead_width,headlength=eqcont3.arrowhead_length,zorder=3)                                elif eqcont3.arcsarrowsorlines == "Lines":                                    ax2.plot([point_x,prev_x],[point_y,prev_y],color=eqcont3.arcarrowline_color,lw=eqcont3.arcarrowline_width,zorder=0)                        prev_x = point_x                        prev_y = point_y                        prev_dec = dec                        prev_inc = inc                        hitshow = True                if eqcont3.show_laststep:                    if eqcont3.show_laststep_edge:                        ax2.scatter(point_x, point_y, color=eqcont3.laststep_color, s=eqcont3.laststep_size, marker=eqcont3.laststep_symbol, edgecolor=eqcont3.laststep_edge_color,linewidth=eqcont3.laststep_edge_width, )                    else:                        ax2.scatter(point_x, point_y, color=eqcont3.laststep_color, s=eqcont3.laststep_size, marker=eqcont3.laststep_symbol)                        if self.totalplots in [3,4]:            legendfont = 8        elif self.totalplots == 2:            legendfont = 10        elif self.totalplots == 1:            legendfont = 14        legend_lowerhem_symbol = eqcont3.lowerhem_symbol        legend_upperhem_symbol = eqcont3.upperhem_symbol        if eqcont3.error_scaling == "Color":            legend_lowerhem_color = "white"            legend_upperhem_color = "white"            if eqcont3.lowerhem_symbol == eqcont3.upperhem_symbol:                if eqcont3.lowerhem_symbol == "o":                    legend_upperhem_symbol = "s"                else:                    legend_upperhem_symbol = "o"         else:            legend_lowerhem_color = eqcont3.lowerhem_color            legend_upperhem_color = eqcont3.upperhem_color                    bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        blue_sq, = ax2.plot(-1000000, legend_lowerhem_symbol, color=legend_lowerhem_color, markersize=10,markeredgecolor="grey", linestyle="none")        red_sq, = ax2.plot(-1000000, legend_upperhem_symbol, color=legend_upperhem_color, markersize=10,markeredgecolor="grey", linestyle="none")        legendicons = [blue_sq, red_sq]        legend_label = ["Lower Hemisphere", "Upper Hemisphere"]        if eqcont3.show_firststep:            yellow_sq, = ax2.plot(-1000000, eqcont3.firststep_symbol, color=eqcont3.firststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_sq)            legend_label.append("First Step")        if eqcont3.show_laststep:            yellow_tri, = ax2.plot(-1000000, eqcont3.laststep_symbol, color=eqcont3.laststep_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons.append(yellow_tri)            legend_label.append("Last Step")        if eqcont3.show_gadfield:            sitelat=int(round(eqcont3.sitelat,0))            sitelat_rad = math.radians(eqcont3.sitelat)            firststop = 2 * math.tan(sitelat_rad)            siteinc = math.atan(2 * math.tan(sitelat_rad))  # GAD equation: tan (I) = 2tan (lat)            forward = math.sqrt(1-(math.sin(math.fabs(siteinc))))*eqcont3.circle_rad            point_x = 0            point_y = forward                        if sitelat <= 0:                if not(eqcont3.field_symbol in ["+","x"]):                    gadfield_drawcolor = "white"                    gadfield_edgecolor = eqcont3.field_color                else:                    gadfield_drawcolor = eqcont3.field_color                    gadfield_edgecolor = eqcont3.field_edge_color            else:                gadfield_drawcolor = eqcont3.field_color                gadfield_edgecolor = eqcont3.field_edge_color            if eqcont3.show_gadfield_edge:                newpoint = ax2.scatter(point_x, point_y, color=gadfield_drawcolor, s=eqcont3.field_size, marker=eqcont3.field_symbol, edgecolor=gadfield_edgecolor)            else:                newpoint = ax2.scatter(point_x, point_y, color=gadfield_drawcolor, s=eqcont3.field_size, marker=eqcont3.field_symbol)            siteinc_deg = round(math.degrees(siteinc),1)            gadfield_label_str = "GAD Field\nSite Lat: %s%s\nSite Inc: %s%s" % (sitelat, degree_sign, siteinc_deg, degree_sign)            eq_annot_pointlist.append([newpoint,gadfield_label_str,gadfield_drawcolor])            if eqcont3.show_gadfield_label:                ax2.text(point_x+step_x, point_y+step_y, gadfield_label_str,color=eqcont3.printstep_color,fontsize=eq_step_fontsize,zorder=5)            if eqcont3.show_legend:                black_x, = ax2.plot(-1000000, eqcont3.field_symbol, color=gadfield_drawcolor, markersize=8,markeredgecolor="grey", linestyle="none")                legendicons.append(black_x)                legend_label.append(gadfield_label_str)        if self.totalplots in [3,4]:            if eqcont3.show_legend:                if not(eqcont3.show_gadfield):                    legend_x = 0.015                    legend_y = 0.10                else:                    legend_x = 0.756                    legend_y = 0.010                eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,loc=3,fancybox=True,shadow=True,bbox_to_anchor=(legend_x,legend_y),bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont3.legend_color)            if eqcont3.show_title:                ax2.text(-.2, -0.05, "%s EQ Plot %s" % (self.sitename, up_arrow), color=eqcont3.title_color,zorder=4,va='bottom',ha='left',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont3.show_labels:                labelfontsize = fontsizes_dict[eqcont3.label_fontsize_mod][1][0]                if eqcont3.numsordirs == "Dirs":                    if eqcont3.show_north:                        ax2.text(0.499, (0.00124 * eqcont3.circle_rad) + 0.52, "N", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_east:                        ax2.text((0.00124 * eqcont3.circle_rad) + 0.54, 0.472, "E", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_south:                        ax2.text(0.505, (-0.00124 * eqcont3.circle_rad) + 0.42, "S", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_west:                        ax2.text((-0.00124 * eqcont3.circle_rad) + 0.45, 0.475, "W", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                elif eqcont3.numsordirs == "Nums":                    if eqcont3.show_0:                        ax2.text(0.51, (0.00124 * eqcont3.circle_rad) + 0.52, "0%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_90:                        ax2.text((0.00124 * eqcont3.circle_rad) + 0.56, 0.472, "90%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_180:                        ax2.text(0.506, (-0.00124 * eqcont3.circle_rad) + 0.42, "180%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_270:                        ax2.text((-0.00124 * eqcont3.circle_rad) + 0.43, 0.475, "270%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=labelfontsize,fontweight='bold',transform=ax2.transAxes)        elif self.totalplots == 2:            if eqcont3.show_legend:                if self.show_zij:                    eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,ncol=4,loc=3,bbox_to_anchor=(1,0.15),fancybox=True,shadow=True,bbox_transform=plt.gcf().transFigure)                else:                    eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,ncol=4,loc=3,bbox_to_anchor=(0,0.15),fancybox=True,shadow=True,bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont3.legend_color)            if eqcont3.show_title:                ax2.text(0.5, 1.18, "%s Equal Area Plot" % self.sitename, color=eqcont3.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont3.show_labels:                if eqcont3.numsordirs == "Dirs":                    if eqcont3.show_north:                        ax2.text(0.499, (0.00124 * eqcont3.circle_rad) + 0.52, "N", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_east:                        ax2.text((0.00124 * eqcont3.circle_rad) + 0.54, 0.472, "E", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_south:                        ax2.text(0.503, (-0.00124 * eqcont3.circle_rad) + 0.42, "S", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_west:                        ax2.text((-0.00124 * eqcont3.circle_rad) + 0.45, 0.475, "W", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                elif eqcont3.numsordirs == "Nums":                    if eqcont3.show_0:                        ax2.text(0.515, (0.00124 * eqcont3.circle_rad) + 0.52, "0%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_90:                        ax2.text((0.00124 * eqcont3.circle_rad) + 0.56, 0.472, "90%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_180:                        ax2.text(0.51, (-0.00124 * eqcont3.circle_rad) + 0.42, "180%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_270:                        ax2.text((-0.00124 * eqcont3.circle_rad) + 0.43, 0.475, "270%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',transform=ax2.transAxes)        elif self.totalplots == 1:            if eqcont3.show_legend:                if not(eqcont3.show_gadfield):                    legend_x = 0.02                    legend_y = 1.63                else:                    legend_x = 1.6                    legend_y = 1.58                eqarealegend = ax2.legend(legendicons,legend_label,numpoints=1,fontsize=legendfont,loc=3,fancybox=True,shadow=True,bbox_to_anchor=(legend_x,legend_y),bbox_transform=plt.gcf().transFigure)                for text in eqarealegend.get_texts():                    text.set_color(eqcont3.legend_color)            if eqcont3.show_title:                ax2.text(-.16, 0.97, "%s Equal Area Plot" % self.sitename, color=eqcont3.title_color,zorder=4,va='bottom',ha='left',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)            if eqcont3.show_labels:                if eqcont3.numsordirs == "Dirs":                    if eqcont3.show_north:                        ax2.text(0.499, (0.00124 * eqcont3.circle_rad) + 0.51, "N", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_east:                        ax2.text((0.00124 * eqcont3.circle_rad) + 0.54, 0.479, "E", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_south:                        ax2.text(0.501, (-0.00124 * eqcont3.circle_rad) + 0.43, "S", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_west:                        ax2.text((-0.00124 * eqcont3.circle_rad) + 0.45, 0.479, "W", color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                elif eqcont3.numsordirs == "Nums":                    if eqcont3.show_0:                        ax2.text(0.51, (0.00124 * eqcont3.circle_rad) + 0.51, "0%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_90:                        ax2.text((0.0012 * eqcont3.circle_rad) + 0.565, 0.479, "90%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_180:                        ax2.text(0.515, (-0.0012 * eqcont3.circle_rad) + 0.43, "180%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)                    if eqcont3.show_270:                        ax2.text((-0.00124 * eqcont3.circle_rad) + 0.435, 0.479, "270%s" % degree_sign, color=eqcont3.label_color,zorder=4,va='bottom',ha='center',fontsize=28,fontweight='bold',transform=ax2.transAxes)        if eqcont3.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', eq_on_plot_hover)            global eq_annot            eq_annot = ax2.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            eq_annot.set_visible(False)        plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax2.text(0.5, +.2, "%s Equal Area Plot - No Steps Shown" % self.sample.name, color='black',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax2.transAxes)    return################ JJo Plot Functions ################def jjo_update_annot(ind,item):    global jjo_annot    pos = item[0].get_offsets()[ind["ind"][0]]    jjo_annot.xy = pos    text = (item[1])    jjo_annot.set_text(text)    jjo_annot.get_bbox_patch().set_color(item[2])    jjo_annot.get_bbox_patch().set_facecolor('#f3f2f1')    jjo_annot.get_bbox_patch().set_alpha(0.75)    returndef jjo_on_plot_hover(event):    vis = jjo_annot.get_visible()    for item in range(0,len(jjo_annot_pointlist)):        onpoint, ind = jjo_annot_pointlist[item][0].contains(event)        if onpoint:            jjo_update_annot(ind,jjo_annot_pointlist[item])            jjo_annot.set_visible(True)            fig.canvas.draw_idle()        else:            if vis:                jjo_annot.set_visible(False)                fig.canvas.draw_idle()    returndef plotjjo_sample(self,jjocont,ax3):    ax3.set_aspect('equal',adjustable='box')    if plotanything(self):        global jjo_annot_pointlist        jjo_annot_pointlist = []        intensity_list = []        dmagsteplist = []        dmagsteptypelist = []        dmagstep_graphsize_list = []        thermal_add_list = [0]        thermal_add = 0        Jo = 0        hitshow = False        for plotjjoindex, step in enumerate(self.sample.data):            if step.show: #check if print each step                intensity = float(step.intensity)                intensity_list.append(intensity)                if not(hitshow):                    Jo = intensity                    hitshow = True                if step.dmagstep_type == "NRM":                    dmagstep_num = 0                else:                    dmagstep_numsonly = step.dmagstep_numsonly                    dmagstep_num = int(dmagstep_numsonly)                    if step.dmagstep_type == "AF":                        thermal_add_list.append(dmagstep_num)                newstep = (stepsort_dict[step.dmagstep_type],step.dmagstep_type,dmagstep_num)                dmagsteplist.append(newstep)                dmagsteptypelist.append(step.dmagstep_type)        intensity_list = list(set(intensity_list))        maxintensity = max(intensity_list)        thermal_add = max(thermal_add_list)        dmagsteplist = list(set(dmagsteplist))        dmagsteplist = sorted(dmagsteplist, key = lambda item: item[0])        dmagsteplist = sorted(dmagsteplist, key = lambda item: item[2])        dmagsteptypelist = list(set(dmagsteptypelist))        listlength = len(dmagsteplist)         for sitestep in dmagsteplist:            if sitestep[1] != "TT":                graphsize = sitestep[2]                newstep = [sitestep[0],sitestep[1],sitestep[2],graphsize]                dmagstep_graphsize_list.append(newstep)            else:                graphsize = sitestep[2] + thermal_add                newstep = [sitestep[0],sitestep[1],sitestep[2],graphsize]                dmagstep_graphsize_list.append(newstep)                        if len(dmagstep_graphsize_list) == 1 and dmagstep_graphsize_list[0][1] == "NRM":            maxdmag = 100        else:            maxdmag = max([sublist[-1] for sublist in dmagstep_graphsize_list]) # get max graphsize                extendx = False        if jjocont.mainmagmin == "All":            if (maxdmag - thermal_add) < 680:                maxdmag = 680 + thermal_add                extendx = True        elif jjocont.mainmagmin == "Select":            for mindex, mineral in enumerate(jjocont.showminlist):                if mineral:                    if magmin_list[mindex][1] > (maxdmag - thermal_add):                       maxdmag = magmin_list[mindex][1] + thermal_add                       extendx = True                   ax3.axis([-.05 * maxdmag, maxdmag * 1.05, 0, maxdmag * 1.05],length=100)        for axis in ['top','bottom','left','right']:            ax3.spines[axis].set_linewidth(jjocont.axes_width)            ax3.spines[axis].set_color(jjocont.axes_color)        if self.totalplots in [3,4]:            steplevelmod = 0.08            xstepboundfount = fontsizes_dict[jjocont.xaxis_stepboundaries_fontsize_mod][self.totalplots][0]        elif self.totalplots == 2:            steplevelmod = 0.08            xstepboundfount = fontsizes_dict[jjocont.xaxis_stepboundaries_fontsize_mod][self.totalplots][0]        elif self.totalplots == 1:            steplevelmod = 0.04            #xstepboundfount = 12            xstepboundfount = fontsizes_dict[jjocont.xaxis_stepboundaries_fontsize_mod][self.totalplots][0]        linenum = 0        sampledatalen = len(self.sample.data)        for step in self.sample.data:            if step.show: #check if print each step                dmagstep = step.dmagstep                dec = step.dec                inc = step.inc                steptype_curr = step.dmagstep_type                stepletter = step.stepletter                error = step.error                if steptype_curr == "NRM":                    dmagstep_curr = 0                elif steptype_curr == "AF":                    dmagstep_curr = int(step.dmagstep_numsonly)                elif steptype_curr == "TT":                    dmagstep_curr = int(float(step.dmagstep_numsonly)) + thermal_add                J_curr = float(step.intensity)                JJo_raw = J_curr / maxintensity                JJo_curr = JJo_raw * maxdmag                                jdecrease_size = jjocont.jdecrease_size                jincrease_size = jjocont.jincrease_size                jdecrease_color = jjocont.jdecrease_color                jincrease_color = jjocont.jincrease_color                jdecrease_symbol = jjocont.jdecrease_symbol                jincrease_symbol = jjocont.jincrease_symbol                if jjocont.error_scaling == "Size":                    try:                        error = float(step.error)                    except:                        error = 0                     symbolsize = 16 * error                    jdecrease_size = symbolsize                    jincrease_size = symbolsize                elif jjocont.error_scaling == "Color":                    try:                        error = float(step.error)                    except:                        error = 0                    symbolcolor = getsymbolcolor(error)                    jdecrease_color = symbolcolor                    jincrease_color = symbolcolor                    if jjocont.jdecrease_symbol == jjocont.jincrease_symbol:                        if jjocont.jdecrease_symbol == "o":                            jincrease_symbol = "s"                        else:                            jincrease_symbol = "o"                 if linenum >= 1:                    if JJo_curr > prev_JJo:                        if jjocont.show_jincrease_edge:                            newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jincrease_color, s=jincrease_size, marker=jincrease_symbol, edgecolor=jjocont.jincrease_edge_color,linewidth=jjocont.jincrease_edge_width, zorder=1)                        else:                            newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jincrease_color, s=jincrease_size, marker=jincrease_symbol,zorder=1)                        jjo_annot_pointlist.append([newpoint,"Step: %s\nJ: %s\nJ/Jo: %s\nDec: %s%s, Inc: %s%s\nError: %s%s" % (dmagstep,J_curr,JJo_raw,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont.jincrease_color])                    else:                        if jjocont.show_jdecrease_edge:                            newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, edgecolor=jjocont.jdecrease_edge_color,linewidth=jjocont.jdecrease_edge_width, zorder=1)                        else:                            newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, zorder=1)                        jjo_annot_pointlist.append([newpoint,"Step: %s\nJ: %s\nJ/Jo: %s\nDec: %s%s, Inc: %s%s\nError: %s%s" % (dmagstep,J_curr,JJo_raw,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont.jdecrease_color])                    if jjocont.show_arrowlines:                        if jjocont.arrowsorlines == "Lines":                            ax3.plot([prev_dmag,dmagstep_curr],[prev_JJo,JJo_curr],color=jjocont.arrowline_color,lw=jjocont.arrowline_width,zorder=0)                        elif jjocont.arrowsorlines == "Arrows":                            xdiff = dmagstep_curr - prev_dmag                            ydiff = JJo_curr - prev_JJo                            ax3.quiver(prev_dmag,prev_JJo,xdiff,ydiff,color=jjocont.arrowline_color,units='xy',scale=1,width=jjocont.arrowline_width,headwidth=jjocont.arrowhead_width,headlength=jjocont.arrowhead_length,zorder=3)                                            if (dmagstep_curr != prev_dmag):                        if JJo_curr <= prev_JJo:                            rectheight_absolute = (abs( JJo_curr - prev_JJo )) / ( (dmagstep_curr - prev_dmag) * .017)                            rectheight_ratio = ( (1 - (JJo_curr/prev_JJo)) * 5000)  / ( (dmagstep_curr - prev_dmag) )                            if rectheight_absolute > rectheight_ratio:                                rect_absolute_z =-2                                rect_ratio_z = -1                            elif rectheight_absolute < rectheight_ratio:                                rect_absolute_z =-1                                rect_ratio_z = -2                            elif rectheight_absolute == rectheight_ratio:                                rect_absolute_z =-1                                rect_ratio_z = -1                            if jjocont.show_jdecrease_absrect:                                if jjocont.show_jdecrease_absrect_edge:                                    rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont.jdecrease_absrect_color,zorder=rect_absolute_z,edgecolor=jjocont.jdecrease_absrect_edge_color)                                else:                                    rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont.jdecrease_absrect_color,zorder=rect_absolute_z)                                ax3.add_patch(rect_absolute)                            if jjocont.show_jdecrease_relrect:                                if jjocont.show_jdecrease_relrect_edge:                                    rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont.jdecrease_relrect_color,zorder=rect_ratio_z,edgecolor=jjocont.jdecrease_relrect_edge_color)                                else:                                    rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont.jdecrease_relrect_color,zorder=rect_ratio_z)                                ax3.add_patch(rect_ratio)                        else:                            rectheight_absolute = (abs(prev_JJo - JJo_curr)) / ( (dmagstep_curr - prev_dmag) * .017)                            rectheight_ratio = ( (1 - (prev_JJo/JJo_curr)) * 5000)  / ( (dmagstep_curr - prev_dmag) )                            if rectheight_absolute > rectheight_ratio:                                rect_absolute_z =-2                                rect_ratio_z = -1                            elif rectheight_absolute < rectheight_ratio:                                rect_absolute_z =-1                                rect_ratio_z = -2                            elif rectheight_absolute == rectheight_ratio:                                rect_absolute_z =-1                                rect_ratio_z = -1                                                        if jjocont.show_jincrease_absrect:                                if jjocont.show_jincrease_absrect_edge:                                    rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont.jincrease_absrect_color,zorder=rect_absolute_z,edgecolor=jjocont.jincrease_absrect_edge_color)                                else:                                    rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont.jincrease_absrect_color,zorder=rect_absolute_z)                                ax3.add_patch(rect_absolute)                            if jjocont.show_jincrease_relrect:                                if jjocont.show_jincrease_relrect_edge:                                    rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont.jincrease_relrect_color,zorder=rect_ratio_z,edgecolor=jjocont.jincrease_relrect_edge_color)                                else:                                    rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont.jincrease_relrect_color,zorder=rect_ratio_z)                                ax3.add_patch(rect_ratio)                                        else:                                                                        if jjocont.show_jdecrease_edge:                        newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, edgecolor=jjocont.jdecrease_edge_color,linewidth=jjocont.jdecrease_edge_width, zorder=1)                    else:                        newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, zorder=1)                    if jjocont.show_firststep:                        if jjocont.show_firststep_edge:                            newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont.firststep_color, s=jjocont.firststep_size, marker=jjocont.firststep_symbol, edgecolor=jjocont.firststep_edge_color, linewidth=jjocont.firststep_edge_width,zorder=1)                        else:                            newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont.firststep_color, s=jjocont.firststep_size, marker=jjocont.firststep_symbol, zorder=1)                    jjo_annot_pointlist.append([newpoint,"Step: %s\nJ: %s\nJ/Jo: %s\nDec: %s%s, Inc: %s%s\nError: %s%s" % (dmagstep,J_curr,JJo_raw,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont.firststep_color])                if step.jjo_printlabel:                    if linenum == 0:                        ax3.text(dmagstep_curr, JJo_curr + (maxdmag*.04), dmagstep, color=jjocont.printstep_color,fontsize=fontsizes_dict[jjocont.step_fontsize_mod][self.totalplots][0],zorder=1,va='top',ha='center')                    else:                        if linenum < listlength-1:                            ax3.text(dmagstep_curr-(maxdmag*0.02), JJo_curr, dmagstep, color=jjocont.printstep_color,fontsize=fontsizes_dict[jjocont.step_fontsize_mod][self.totalplots][0],zorder=1,va='top',ha='right')                        else:                            ax3.text(dmagstep_curr+(maxdmag*0.009), JJo_curr, dmagstep, color=jjocont.printstep_color,fontsize=fontsizes_dict[jjocont.step_fontsize_mod][self.totalplots][0],zorder=1,va='top',ha='left')                prev_dmag = dmagstep_curr                prev_JJo = JJo_curr                linenum = linenum + 1        if (linenum > 1) and jjocont.show_laststep:            if jjocont.show_laststep_edge:                newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont.laststep_color, s=jjocont.laststep_size, marker=jjocont.laststep_symbol, edgecolor=jjocont.laststep_edge_color, linewidth=jjocont.laststep_edge_width, zorder=1)            else:                newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont.laststep_color, s=jjocont.laststep_size, marker=jjocont.laststep_symbol, zorder=1)            jjo_annot_pointlist[-1] = [newpoint,"Step: %s\nJ: %s\nJ/Jo: %s\nDec: %s%s, Inc: %s%s\n: %s%s" % (dmagstep,J_curr,JJo_raw,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont.laststep_color]        maxAF = 0        maxTT = 0        if 'NRM' in dmagsteptypelist: # Plot NRM/AF/TT labels below x Axis            ax3.text(-.05 * maxdmag, -(maxdmag*steplevelmod), 'NRM', color=jjocont.xaxis_stepboundaries_color,fontsize=xstepboundfount,fontweight="bold",zorder=1,ha='center')            if jjocont.show_vertstepboundline:                ax3.plot([0,0],[0,maxdmag * 1.05],color=jjocont.vertstepboundline_color,linestyle=jjocont.vertstepboundline_style,lw=jjocont.vertstepboundline_width,zorder=0)        if 'AF' in dmagsteptypelist:            for item in reversed(dmagstep_graphsize_list):                if item[1] == "AF":                    endAF = item[3]                    break            maxAF = endAF            if self.totalplots != 1 or not (jjocont.show_xaxis_steplabels) or endAF <= 100:                midstep = endAF / 2            else:                if round(endAF/2,-2) >= (endAF/2):                    midstep = round(endAF/2,-2) - 50                else:                    midstep = round(endAF/2,-2) + 50            ax3.text(midstep, -(maxdmag*steplevelmod), 'AF', color=jjocont.xaxis_stepboundaries_color,fontsize=xstepboundfount,fontweight="bold",zorder=1,ha='center')            if jjocont.show_vertstepboundline:                ax3.plot([endAF,endAF],[0,maxdmag * 1.05],color=jjocont.vertstepboundline_color,linestyle=jjocont.vertstepboundline_style,lw=jjocont.vertstepboundline_width,zorder=0)        if 'TT' in dmagsteptypelist:            if not('AF' in dmagsteptypelist):                beginTT = 0            else:                beginTT = thermal_add            for item in reversed(dmagstep_graphsize_list):                if item[1] == "TT":                    endTT = item[3]                    maxTT = item[2]                    break            if self.totalplots != 1 or not (jjocont.show_xaxis_steplabels):                midstep = (beginTT+endTT)/2            else:                if round((beginTT+endTT)/2,-2) >= ((beginTT+endTT)/2):                    midstep = round((beginTT+endTT)/2,-2) - 50                else:                    midstep = round((beginTT+endTT)/2,-2) + 50            ax3.text(midstep, -(maxdmag*steplevelmod), 'TT', color=jjocont.xaxis_stepboundaries_color,fontsize=xstepboundfount,fontweight="bold",zorder=1,ha='center')                        if jjocont.show_vertstepboundline:                ax3.plot([endTT,endTT],[0,maxdmag * 1.05],color=jjocont.vertstepboundline_color,linestyle=jjocont.vertstepboundline_style,lw=jjocont.vertstepboundline_width,zorder=0)        xlocation = [0]        xlabel = ["0"]        if maxAF > 0:            tickindex = 100            while tickindex <= maxAF:                xlocation.append(tickindex)                xlabel.append(str(tickindex))                tickindex = tickindex + 100        if maxAF % 100 != 0:            xlocation.append(maxAF)            xlabel.append(str(maxAF))        if extendx:            maxTT = maxdmag - thermal_add        if maxTT > 0:            tickindex = 100            while tickindex <= maxTT:                xlocation.append(tickindex + maxAF)                xlabel.append(str(tickindex))                tickindex = tickindex + 100        if maxTT % 100 != 0:            xlocation.append(maxTT + maxAF)            xlabel.append(str(maxTT))                   if jjocont.show_legend:            if jjocont.error_scaling == "Color":                legend_jdecrease_color = "white"                legend_jincrease_color = "white"            else:                legend_jdecrease_color = jjocont.jdecrease_color                legend_jincrease_color = jjocont.jincrease_color                            red_sq, = ax3.plot(-1000000, jdecrease_symbol, color=legend_jdecrease_color, markersize=8,markeredgecolor="grey", linestyle="none")            blue_sq, = ax3.plot(-1000000, jincrease_symbol, color=legend_jincrease_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons = [red_sq, blue_sq]            legend_label = ["nIntensity\nDecrease", "\nIntensity\nIncrease"]            if jjocont.show_firststep:                yellow_sq, = ax3.plot(-1000000,jjocont.firststep_symbol, color=jjocont.firststep_color, markersize=8,markeredgecolor="grey", linestyle="none")                legendicons.append(yellow_sq)                legend_label.append("\nFirst\nStep")            if jjocont.show_laststep:                yellow_tri, = ax3.plot(-1000000,jjocont.laststep_symbol, color=jjocont.laststep_color, markersize=8,markeredgecolor="grey", linestyle="none")                legendicons.append(yellow_tri)                legend_label.append("\nLast\nStep")            verts = [(-100, 40.),(100, 40),(100, -40),(-100, -40.), (0., 0.),]            codes = [Path.MOVETO,Path.LINETO,Path.LINETO,Path.LINETO,Path.CLOSEPOLY,]            rectpath = Path(verts, codes)            if jjocont.show_jdecrease_absrect:                abs_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont.jdecrease_absrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(abs_int)                legend_label.append("\nIntensity\nLoss\n(Absolute)")            if jjocont.show_jdecrease_relrect:                rel_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont.jdecrease_relrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(rel_int)                legend_label.append("\nIntensity\nLoss\n(Relative)")            if jjocont.show_jincrease_absrect:                abs_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont.jincrease_absrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(abs_int)                legend_label.append("\nIntensity\nGain\n(Absolute)")            if jjocont.show_jincrease_relrect:                rel_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont.jincrease_relrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(rel_int)                legend_label.append("\Intensity\nGain\n(Relative)")        if jjocont.show_joline:            Joplotval = Jo/maxintensity*maxdmag            orange_line, = ax3.plot([maxdmag*-0.05,maxdmag*1.05],[Joplotval,Joplotval],color=jjocont.joline_color,linestyle=jjocont.joline_style,markeredgecolor="grey",lw=jjocont.joline_width,zorder=0)            if jjocont.show_legend:                legendicons.append(orange_line)                legend_label.append("Jo")        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        if jjocont.show_xaxis_ticks:            ax3.set_xticks(xlocation)            if not jjocont.show_xaxis_steplabels:                xlabel=[]##                if self.totalplots in [2,3,4]:##                    xlabel_fontsize = fontsizes_dict[jjocont.xaxis_steplabel_fontsize_mod][self.totalplots][0]##                else:##                    xlabel_fontsize = 12            xlabel_fontsize = fontsizes_dict[jjocont.xaxis_steplabel_fontsize_mod][self.totalplots][0]            ax3.set_xticklabels(xlabel,fontsize=xlabel_fontsize)        else:            ax3.set_xticks([])        if jjocont.show_yaxis_ticks:            ytick_set = []            if jjocont.show_yaxis_percentlabel or jjocont.show_yaxis_abslabel:                ylabel = ["0"]                for ytickindex in range(0,5):                    new_ytick = (ytickindex/4) * maxdmag                    ytick_set.append(new_ytick)                    if ytickindex > 0:                        if jjocont.show_yunits:                            units = jjocont.yunits                        else:                            units = ""                        if jjocont.show_yaxis_percentlabel and jjocont.show_yaxis_abslabel:                            new_ylabel = str(ytickindex * 25) + "%\n" + str(maxintensity * ytickindex / 4) + units                        elif jjocont.show_yaxis_percentlabel and not jjocont.show_yaxis_abslabel:                            new_ylabel = str(ytickindex * 25) + "%"                        elif not jjocont.show_yaxis_percentlabel and jjocont.show_yaxis_abslabel:                            new_ylabel = str(maxintensity * ytickindex / 4) + units                        ylabel.append(new_ylabel)            else:                for ytickindex in range(0,yticktotal):                    new_ytick = (ytickindex/4) * maxdmag                    ytick_set.append(new_ytick)                ylabel = []            ax3.set_yticks(ytick_set)            ylabel_fontsize = fontsizes_dict[jjocont.yaxis_label_fontsize_mod][self.totalplots][0]            ax3.set_yticklabels(ylabel,fontsize=ylabel_fontsize)        else:            ax3.set_yticks([])        ax3.tick_params(axis='x', length=jjocont.xaxis_tick_length, width=jjocont.xaxis_tick_width, colors=jjocont.xaxis_steplabels_tick_color)        ax3.tick_params(axis='y', length=jjocont.yaxis_tick_length, width=jjocont.yaxis_tick_width, colors=jjocont.yaxis_labels_tick_color)        if jjocont.show_magmin:            for mindex, mineral in enumerate(magmin_list):                if (jjocont.mainmagmin == "All") or (jjocont.mainmagmin == "Temp" and mineral[1]<=maxTT) or (jjocont.mainmagmin == "Select" and jjocont.showminlist[mindex]):                    starttemp = mineral[1] + thermal_add                    if mineral[2] != 0:                        endtemp = mineral[2] + thermal_add                        minrect = patches.Rectangle((starttemp, 0), endtemp - starttemp, maxdmag, facecolor=jjocont.magmin_color,zorder=-5,alpha=0.25)                        ax3.add_patch(minrect)                        ax3.text((starttemp + endtemp) / 2, maxdmag, mineral[0], color=jjocont.magmin_text_color, zorder=-4,va='top',ha='center', rotation=90, fontsize=fontsizes_dict[jjocont.magmin_fontsize_mod][self.totalplots][0])                    else:                        ax3.plot([starttemp,starttemp],[0,maxdmag],color=jjocont.magmin_color,lw=1,zorder=-4)                        ax3.text(starttemp, maxdmag, mineral[0], color=jjocont.magmin_text_color, zorder=-4,va='top',ha='center', rotation=90, fontsize=fontsizes_dict[jjocont.magmin_fontsize_mod][self.totalplots][0])        if self.totalplots in [3,4]:            if jjocont.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=8,loc=1,ncol=1,bbox_to_anchor=(1.23, .95),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont.legend_color)            if jjocont.show_title:                ax3.text(0.5, 1, "%s J/Jo Plot %s" % (self.sitename,down_arrow), color=jjocont.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)        elif self.totalplots == 2:            if jjocont.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=1,ncol=4,bbox_to_anchor=(.95, -0.11),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont.legend_color)            if jjocont.show_title:                ax3.text(990, 850, "%s J/Jo Plot" % self.sitename, color=jjocont.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 1:            if jjocont.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=12,loc=1,ncol=1,bbox_to_anchor=(1.17, .9),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont.legend_color)            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=1)            if jjocont.show_title:                ax3.text(.5, 0.98, "%s J/Jo Plot" % self.sitename, color=jjocont.title_color,zorder=10,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)        if jjocont.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', jjo_on_plot_hover)            global jjo_annot            jjo_annot = ax3.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            jjo_annot.set_visible(False)                plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax3.text(0.5, .93, "Site %s J/Jo Plot - No Samples or Steps Shown" % self.sitename, color='black',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)    returndef plotjjo_step(self,jjocont2,ax3):    ax3.set_aspect('equal',adjustable='box')    if plotanything(self):        global jjo_annot_pointlist        jjo_annot_pointlist = []        intensity_list = []        maxintensity = 0        for sample in self.sitesteptext:            if sample.show: #check if print each step                intensity = sample.intensity                intensity_list.append(intensity)                if intensity > maxintensity:                    maxintensity = intensity                    ax3.axis([-.05, 1.05, 0, 1.05],length=100)        for axis in ['top','bottom','left','right']:            ax3.spines[axis].set_linewidth(jjocont2.axes_width)            ax3.spines[axis].set_color(jjocont2.axes_color)        listlength = len(intensity_list)        for jjoindex, sample in enumerate(self.sitesteptext):            J_curr = sample.intensity / maxintensity            xval = jjoindex / listlength            jdecrease_size = jjocont2.jdecrease_size            jdecrease_color = jjocont2.jdecrease_color            jdecrease_symbol = jjocont2.jdecrease_symbol            if jjocont2.error_scaling == "Size":                try:                    error = float(sample.error)                except:                    error = 0                 symbolsize = 16 * error                jdecrease_size = symbolsize            elif jjocont2.error_scaling == "Color":                try:                    error = float(sample.error)                except:                    error = 0                symbolcolor = getsymbolcolor(error)                jdecrease_color = symbolcolor                                        if jjocont2.show_jdecrease_edge:                newpoint = ax3.scatter(xval, J_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, edgecolor=jjocont2.jdecrease_edge_color,linewidth=jjocont2.jdecrease_edge_width, zorder=1)            else:                newpoint = ax3.scatter(xval, J_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, zorder=1)            jjo_annot_pointlist.append([newpoint,"%s:\nStep: %s\nIntensity: %s\nDec: %s%s, Inc: %s%s\nError: %s%s" % (sample.samplename, sample.dmagstep_clean, sample.intensity,sample.dec,degree_sign,sample.inc,degree_sign,sample.error,degree_sign),jjocont2.jdecrease_color])                                if sample.jjo2_printlabel:                ax3.text(xval+.02, J_curr, sample.samplename,color=jjocont2.printstep_color,fontsize=fontsizes_dict[jjocont2.step_fontsize_mod][self.totalplots][0],zorder=1,va='center',ha='left')        if jjocont2.show_legend:            if jjocont2.error_scaling == "Color":                legend_jdecrease_color = "white"            else:                legend_jdecrease_color = jjocont2.jdecrease_color                            red_sq, = ax3.plot(-1000000,jjocont2.jdecrease_symbol, color=legend_jdecrease_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons = [red_sq]            legend_label = ["\nPoint\nIntensity"]        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        if jjocont2.show_yaxis_ticks:            ax3.set_yticks([0, 0.25, 0.5, 0.75, 1.0])            if jjocont2.show_yunits:                units = jjocont2.yunits            else:                units = ""            if jjocont2.show_yaxis_percentlabel and jjocont2.show_yaxis_abslabel:                ylabel = ["0", "25%" + '\n' + str(maxintensity * 0.25) + units, "50%" + '\n' + str(maxintensity * 0.5) + units, "75%" + '\n' + str(maxintensity * 0.75) + units, "100%" + '\n' + str(maxintensity) + units]            elif jjocont2.show_yaxis_percentlabel and not jjocont2.show_yaxis_abslabel:                ylabel = ["0", "25%", "50%", "75%", "100%"]            elif not jjocont2.show_yaxis_percentlabel and jjocont2.show_yaxis_abslabel:                ylabel = ["0", str(maxintensity * 0.25) + units, str(maxintensity * 0.5) + units, str(maxintensity * 0.75) + units, str(maxintensity) + units]            else:                ylabel = []            ylabel_fontsize = fontsizes_dict[jjocont2.yaxis_label_fontsize_mod][self.totalplots][0]            ax3.set_yticklabels(ylabel,fontsize=ylabel_fontsize)        else:            ax3.set_yticks([])        ax3.tick_params(axis='y', length=jjocont2.yaxis_tick_length, width=jjocont2.yaxis_tick_width, colors=jjocont2.yaxis_labels_tick_color)        ax3.set_xticks([])                if self.totalplots in [3,4]:            if jjocont2.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=8,loc=1,ncol=1,bbox_to_anchor=(1.21, .9),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont2.legend_color)            if jjocont2.show_title:                ax3.text(0.5, 1, "%s %s J/Jo Plot %s" % (self.sitename,self.currentstep,down_arrow), color=jjocont2.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)        elif self.totalplots == 2:            if jjocont2.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=1,ncol=4,bbox_to_anchor=(.95, -0.11),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont2.legend_color)            if jjocont2.show_title:                ax3.text(990, 850, "%s %s J/Jo Plot" % (self.sitename,self.currentstep), color=jjocont2.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 1:            if jjocont2.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=12,loc=1,ncol=1,bbox_to_anchor=(1.16, .9),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont2.legend_color)            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=1)            if jjocont2.show_title:                ax3.text(.5, 0.98, "%s %s J/Jo Plot" % (self.sitename,self.currentstep), color=jjocont2.title_color,zorder=10,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)        if jjocont2.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', jjo_on_plot_hover)            global jjo_annot            jjo_annot = ax3.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            jjo_annot.set_visible(False)                plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax3.text(0.5, .93, "%s %s J/Jo Plot - No Steps Shown" % (self.sitename,self.currentstep), color='black',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)    returndef plotjjo_multiple(self,jjocont3,ax3):    ax3.set_aspect('equal',adjustable='box')    if plotanything(self):        global jjo_annot_pointlist        jjo_annot_pointlist = []        intensity_list = []        dmagsteplist = []        dmagsteptypelist = []        dmagstep_graphsize_list = []        thermal_add_list = [0]        jjo_samp_fontsize = fontsizes_dict[jjocont3.samp_fontsize_mod][self.totalplots][0]        jjo_step_fontsize = fontsizes_dict[jjocont3.step_fontsize_mod][self.totalplots][0]        for sample in self.sitedata:            if sample.show: #check if print each sample                for step in sample.data:                    if step.show: #check if print each step                        intensity = float(step.intensity)                        intensity_list.append(intensity)                                                if step.dmagstep_type == "NRM":                            dmagstep_num = 0                        else:                            dmagstep_numsonly = step.dmagstep_numsonly                            dmagstep_num = int(dmagstep_numsonly)                            if step.dmagstep_type == "AF":                                thermal_add_list.append(dmagstep_num)                        newstep = (stepsort_dict[step.dmagstep_type],step.dmagstep_type,dmagstep_num)                        dmagsteplist.append(newstep)                        dmagsteptypelist.append(step.dmagstep_type)        intensity_list = list(set(intensity_list))        maxintensity = max(intensity_list)        thermal_add = max(thermal_add_list)        dmagsteplist = list(set(dmagsteplist))        dmagsteplist = sorted(dmagsteplist, key = lambda item: item[0])        dmagsteplist = sorted(dmagsteplist, key = lambda item: item[2])        dmagsteptypelist = list(set(dmagsteptypelist))        listlength = len(dmagsteplist)         for sitestep in dmagsteplist:            if sitestep[1] != "TT":                graphsize = sitestep[2]                newstep = [sitestep[0],sitestep[1],sitestep[2],graphsize]                dmagstep_graphsize_list.append(newstep)            else:                graphsize = sitestep[2] + thermal_add                newstep = [sitestep[0],sitestep[1],sitestep[2],graphsize]                dmagstep_graphsize_list.append(newstep)                        if len(dmagstep_graphsize_list) == 1 and dmagstep_graphsize_list[0][1] == "NRM":            maxdmag = 100        else:            maxdmag = max([sublist[-1] for sublist in dmagstep_graphsize_list]) # get max graphsize                extendx = False        if jjocont3.mainmagmin == "All":            if (maxdmag - thermal_add) < 680:                maxdmag = 680 + thermal_add                extendx = True        elif jjocont3.mainmagmin == "Select":            for mindex, mineral in enumerate(jjocont3.showminlist):                if mineral:                    if magmin_list[mindex][1] > (maxdmag - thermal_add):                       maxdmag = magmin_list[mindex][1] + thermal_add                       extendx = True                   ax3.axis([-.05 * maxdmag, maxdmag * 1.05, 0, maxdmag * 1.05],length=100)        for axis in ['top','bottom','left','right']:            ax3.spines[axis].set_linewidth(jjocont3.axes_width)            ax3.spines[axis].set_color(jjocont3.axes_color)        if self.totalplots in [3,4]:            steplevelmod = 0.08            xstepboundfount = fontsizes_dict[jjocont3.xaxis_stepboundaries_fontsize_mod][self.totalplots][0]        elif self.totalplots == 2:            steplevelmod = 0.08            xstepboundfount = fontsizes_dict[jjocont3.xaxis_stepboundaries_fontsize_mod][self.totalplots][0]        elif self.totalplots == 1:            steplevelmod = 0.04            #xstepboundfount = 12            xstepboundfount = fontsizes_dict[jjocont3.xaxis_stepboundaries_fontsize_mod][self.totalplots][0]        for sample in self.sitedata:            if sample.show: #check if print each sample                linenum = 0                sampledatalen = len(sample.data)                for step in sample.data:                    if step.show: #check if print each step                        dmagstep = step.dmagstep                        dec = step.dec                        inc = step.inc                        steptype_curr = step.dmagstep_type                        stepletter = step.stepletter                        error = step.error                        if steptype_curr == "NRM":                            dmagstep_curr = 0                        elif steptype_curr == "AF":                            dmagstep_curr = int(step.dmagstep_numsonly)                        elif steptype_curr == "TT":                            dmagstep_curr = int(float(step.dmagstep_numsonly)) + thermal_add                        J_curr = float(step.intensity)                        JJo_raw = J_curr / maxintensity                        JJo_curr = JJo_raw * maxdmag                        jdecrease_size = jjocont3.jdecrease_size                        jincrease_size = jjocont3.jincrease_size                        jdecrease_color = jjocont3.jdecrease_color                        jincrease_color = jjocont3.jincrease_color                        jdecrease_symbol = jjocont3.jdecrease_symbol                        jincrease_symbol = jjocont3.jincrease_symbol                        if jjocont3.error_scaling == "Size":                            try:                                error = float(step.error)                            except:                                error = 0                             symbolsize = 16 * error                            jdecrease_size = symbolsize                            jincrease_size = symbolsize                        elif jjocont3.error_scaling == "Color":                            try:                                error = float(step.error)                            except:                                error = 0                            symbolcolor = getsymbolcolor(error)                            jdecrease_color = symbolcolor                            jincrease_color = symbolcolor                            if jjocont3.jdecrease_symbol == jjocont3.jincrease_symbol:                                if jjocont3.jdecrease_symbol == "o":                                    jincrease_symbol = "s"                                else:                                    jincrease_symbol = "o"                         if linenum >= 1:                            if JJo_curr > prev_JJo:                                if jjocont3.show_jincrease_edge:                                    newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jincrease_color, s=jincrease_size, marker=jincrease_symbol, edgecolor=jjocont3.jincrease_edge_color,linewidth=jjocont3.jincrease_edge_width, zorder=1)                                else:                                    newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jincrease_color, s=jincrease_size, marker=jincrease_symbol,zorder=1)                                jjo_annot_pointlist.append([newpoint,"Sample: %s, Step: %s\nJ: %s\nDec: %s%s, Inc: %s%s\nError: %s%s" % (sample.name,dmagstep,J_curr,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont3.jincrease_color])                            else:                                if jjocont3.show_jdecrease_edge:                                    newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, edgecolor=jjocont3.jdecrease_edge_color,linewidth=jjocont3.jdecrease_edge_width, zorder=1)                                else:                                    newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, zorder=1)                                jjo_annot_pointlist.append([newpoint,"Sample: %s, Step: %s\nJ: %s\nDec: %s%s, Inc: %s%s\nError: %s%s" % (sample.name, dmagstep,J_curr,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont3.jdecrease_color])                            if jjocont3.show_arrowlines:                                if jjocont3.arrowsorlines == "Lines":                                    ax3.plot([prev_dmag,dmagstep_curr],[prev_JJo,JJo_curr],color=jjocont3.arrowline_color,lw=jjocont3.arrowline_width,zorder=0)                                elif jjocont3.arrowsorlines == "Arrows":                                    xdiff = dmagstep_curr - prev_dmag                                    ydiff = JJo_curr - prev_JJo                                    ax3.quiver(prev_dmag,prev_JJo,xdiff,ydiff,color=jjocont3.arrowline_color,units='xy',scale=1,width=jjocont3.arrowline_width,headwidth=jjocont3.arrowhead_width,headlength=jjocont3.arrowhead_length,zorder=3)                                                            if (dmagstep_curr != prev_dmag):                                if JJo_curr <= prev_JJo:                                    rectheight_absolute = (abs( JJo_curr - prev_JJo )) / ( (dmagstep_curr - prev_dmag) * .017)                                    rectheight_ratio = ( (1 - (JJo_curr/prev_JJo)) * 5000)  / ( (dmagstep_curr - prev_dmag) )                                    if rectheight_absolute > rectheight_ratio:                                        rect_absolute_z =-2                                        rect_ratio_z = -1                                    elif rectheight_absolute < rectheight_ratio:                                        rect_absolute_z =-1                                        rect_ratio_z = -2                                    elif rectheight_absolute == rectheight_ratio:                                        rect_absolute_z =-1                                        rect_ratio_z = -1                                    if jjocont3.show_jdecrease_absrect:                                        if jjocont3.show_jdecrease_absrect_edge:                                            rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont3.jdecrease_absrect_color,zorder=rect_absolute_z,edgecolor=jjocont3.jdecrease_absrect_edge_color)                                        else:                                            rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont3.jdecrease_absrect_color,zorder=rect_absolute_z)                                        ax3.add_patch(rect_absolute)                                    if jjocont3.show_jdecrease_relrect:                                        if jjocont3.show_jdecrease_relrect_edge:                                            rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont3.jdecrease_relrect_color,zorder=rect_ratio_z,edgecolor=jjocont3.jdecrease_relrect_edge_color)                                        else:                                            rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont3.jdecrease_relrect_color,zorder=rect_ratio_z)                                        ax3.add_patch(rect_ratio)                                else:                                    rectheight_absolute = (abs(prev_JJo - JJo_curr)) / ( (dmagstep_curr - prev_dmag) * .017)                                    rectheight_ratio = ( (1 - (prev_JJo/JJo_curr)) * 5000)  / ( (dmagstep_curr - prev_dmag) )                                    if rectheight_absolute > rectheight_ratio:                                        rect_absolute_z =-2                                        rect_ratio_z = -1                                    elif rectheight_absolute < rectheight_ratio:                                        rect_absolute_z =-1                                        rect_ratio_z = -2                                    elif rectheight_absolute == rectheight_ratio:                                        rect_absolute_z =-1                                        rect_ratio_z = -1                                                                        if jjocont3.show_jincrease_absrect:                                        if jjocont3.show_jincrease_absrect_edge:                                            rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont3.jincrease_absrect_color,zorder=rect_absolute_z,edgecolor=jjocont3.jincrease_absrect_edge_color)                                        else:                                            rect_absolute = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_absolute, facecolor=jjocont3.jincrease_absrect_color,zorder=rect_absolute_z)                                        ax3.add_patch(rect_absolute)                                    if jjocont3.show_jincrease_relrect:                                        if jjocont3.show_jincrease_relrect_edge:                                            rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont3.jincrease_relrect_color,zorder=rect_ratio_z,edgecolor=jjocont3.jincrease_relrect_edge_color)                                        else:                                            rect_ratio = patches.Rectangle((prev_dmag, 0), dmagstep_curr - prev_dmag, rectheight_ratio, facecolor=jjocont3.jincrease_relrect_color,zorder=rect_ratio_z)                                        ax3.add_patch(rect_ratio)                                                        else:                            if sample.jjo_printname:                                ax3.text(dmagstep_curr - (maxdmag*.01), JJo_curr, sample.name, color=jjocont3.printsamp_color,fontsize=jjo_samp_fontsize,zorder=1,va='center',ha='right')                                                                                        if jjocont3.show_jdecrease_edge:                                newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, edgecolor=jjocont3.jdecrease_edge_color,linewidth=jjocont3.jdecrease_edge_width, zorder=1)                            else:                                newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jdecrease_color, s=jdecrease_size, marker=jdecrease_symbol, zorder=1)                            if jjocont3.show_firststep:                                if jjocont3.show_firststep_edge:                                    newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont3.firststep_color, s=jjocont3.firststep_size, marker=jjocont3.firststep_symbol, edgecolor=jjocont3.firststep_edge_color, linewidth=jjocont3.firststep_edge_width,zorder=1)                                else:                                    newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont3.firststep_color, s=jjocont3.firststep_size, marker=jjocont3.firststep_symbol, zorder=1)                            jjo_annot_pointlist.append([newpoint,"Sample: %s, Step: %s\nJ: %s\nDec: %s%s, Inc: %s%s\nError: %s%s" % (sample.name,dmagstep,J_curr,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont3.firststep_color])                        if step.jjo_printlabel:                            if linenum == 0:                                ax3.text(dmagstep_curr, JJo_curr + (maxdmag*.04), dmagstep, color=jjocont3.printstep_color,fontsize=jjo_step_fontsize,zorder=1,va='top',ha='center')                            else:                                if linenum < listlength-1:                                    ax3.text(dmagstep_curr-(maxdmag*0.02), JJo_curr, dmagstep, color=jjocont3.printstep_color,fontsize=jjo_step_fontsize,zorder=1,va='top',ha='right')                                else:                                    ax3.text(dmagstep_curr+(maxdmag*0.009), JJo_curr, dmagstep, color=jjocont3.printstep_color,fontsize=jjo_step_fontsize,zorder=1,va='top',ha='left')                        prev_dmag = dmagstep_curr                        prev_JJo = JJo_curr                        linenum = linenum + 1                if (linenum > 1) and jjocont3.show_laststep:                    if jjocont3.show_laststep_edge:                        newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont3.laststep_color, s=jjocont3.laststep_size, marker=jjocont3.laststep_symbol, edgecolor=jjocont3.laststep_edge_color, linewidth=jjocont3.laststep_edge_width, zorder=1)                    else:                        newpoint = ax3.scatter(dmagstep_curr, JJo_curr, color=jjocont3.laststep_color, s=jjocont3.laststep_size, marker=jjocont3.laststep_symbol, zorder=1)                    jjo_annot_pointlist[-1] = [newpoint,"Sample: %s, Step: %s\nJ: %s\nDec: %s%s, Inc: %s%s\n: %s%s" % (sample.name,dmagstep,J_curr,dec,degree_sign,inc,degree_sign,error,degree_sign),jjocont3.laststep_color]        maxAF = 0        maxTT = 0        if 'NRM' in dmagsteptypelist: # Plot NRM/AF/TT labels below x Axis            ax3.text(-.05 * maxdmag, -(maxdmag*steplevelmod), 'NRM', color=jjocont3.xaxis_stepboundaries_color,fontsize=xstepboundfount,fontweight="bold",zorder=1,ha='center')            if jjocont3.show_vertstepboundline:                ax3.plot([0,0],[0,maxdmag * 1.05],color=jjocont3.vertstepboundline_color,linestyle=jjocont3.vertstepboundline_style,lw=jjocont3.vertstepboundline_width,zorder=0)        if 'AF' in dmagsteptypelist:            for item in reversed(dmagstep_graphsize_list):                if item[1] == "AF":                    endAF = item[3]                    break            maxAF = endAF            if self.totalplots != 1 or not (jjocont3.show_xaxis_steplabels) or endAF <= 100:                midstep = endAF / 2            else:                if round(endAF/2,-2) >= (endAF/2):                    midstep = round(endAF/2,-2) - 50                else:                    midstep = round(endAF/2,-2) + 50            ax3.text(midstep, -(maxdmag*steplevelmod), 'AF', color=jjocont3.xaxis_stepboundaries_color,fontsize=xstepboundfount,fontweight="bold",zorder=1,ha='center')            if jjocont3.show_vertstepboundline:                ax3.plot([endAF,endAF],[0,maxdmag * 1.05],color=jjocont3.vertstepboundline_color,linestyle=jjocont3.vertstepboundline_style,lw=jjocont3.vertstepboundline_width,zorder=0)        if 'TT' in dmagsteptypelist:            if not('AF' in dmagsteptypelist):                beginTT = 0            else:                beginTT = thermal_add            for item in reversed(dmagstep_graphsize_list):                if item[1] == "TT":                    endTT = item[3]                    maxTT = item[2]                    break            if self.totalplots != 1 or not (jjocont3.show_xaxis_steplabels):                midstep = (beginTT+endTT)/2            else:                if round((beginTT+endTT)/2,-2) >= ((beginTT+endTT)/2):                    midstep = round((beginTT+endTT)/2,-2) - 50                else:                    midstep = round((beginTT+endTT)/2,-2) + 50            ax3.text(midstep, -(maxdmag*steplevelmod), 'TT', color=jjocont3.xaxis_stepboundaries_color,fontsize=xstepboundfount,fontweight="bold",zorder=1,ha='center')                        if jjocont3.show_vertstepboundline:                ax3.plot([endTT,endTT],[0,maxdmag * 1.05],color=jjocont3.vertstepboundline_color,linestyle=jjocont3.vertstepboundline_style,lw=jjocont3.vertstepboundline_width,zorder=0)        xlocation = [0]        xlabel = ["0"]        if maxAF > 0:            tickindex = 100            while tickindex <= maxAF:                xlocation.append(tickindex)                xlabel.append(str(tickindex))                tickindex = tickindex + 100        if maxAF % 100 != 0:            xlocation.append(maxAF)            xlabel.append(str(maxAF))        if extendx:            maxTT = maxdmag - thermal_add        if maxTT > 0:            tickindex = 100            while tickindex <= maxTT:                xlocation.append(tickindex + maxAF)                xlabel.append(str(tickindex))                tickindex = tickindex + 100        if maxTT % 100 != 0:            xlocation.append(maxTT + maxAF)            xlabel.append(str(maxTT))        if jjocont3.show_legend:            if jjocont3.error_scaling == "Color":                legend_jdecrease_color = "white"                legend_jincrease_color = "white"            else:                legend_jdecrease_color = jjocont3.jdecrease_color                legend_jincrease_color = jjocont3.jincrease_color            red_sq, = ax3.plot(-1000000, jdecrease_symbol, color=legend_jdecrease_color, markersize=8,markeredgecolor="grey", linestyle="none")            blue_sq, = ax3.plot(-1000000, jincrease_symbol, color=legend_jincrease_color, markersize=8,markeredgecolor="grey", linestyle="none")            legendicons = [red_sq, blue_sq]            legend_label = ["\nIntensity\nDecrease", "\nIntensity\nIncrease"]            if jjocont3.show_firststep:                yellow_sq, = ax3.plot(-1000000,jjocont3.firststep_symbol, color=jjocont3.firststep_color, markersize=8,markeredgecolor="grey", linestyle="none")                legendicons.append(yellow_sq)                legend_label.append("\nFirst\nStep")            if jjocont3.show_laststep:                yellow_tri, = ax3.plot(-1000000,jjocont3.laststep_symbol, color=jjocont3.laststep_color, markersize=8,markeredgecolor="grey", linestyle="none")                legendicons.append(yellow_tri)                legend_label.append("\nLast\nStep")            verts = [(-100, 40.),(100, 40),(100, -40),(-100, -40.), (0., 0.),]            codes = [Path.MOVETO,Path.LINETO,Path.LINETO,Path.LINETO,Path.CLOSEPOLY,]            rectpath = Path(verts, codes)            if jjocont3.show_jdecrease_absrect:                abs_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont3.jdecrease_absrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(abs_int)                legend_label.append("\nIntensity\nLoss\n(Absolute)")            if jjocont3.show_jdecrease_relrect:                rel_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont3.jdecrease_relrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(rel_int)                legend_label.append("\nIntensity\nLoss\n(Relative)")            if jjocont3.show_jincrease_absrect:                abs_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont3.jincrease_absrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(abs_int)                legend_label.append("\nIntensity\nGain\n(Absolute)")            if jjocont3.show_jincrease_relrect:                rel_int, = ax3.plot(-1000000,marker=rectpath,color=jjocont3.jincrease_relrect_color,markersize=20,markeredgecolor="grey", linestyle="none")                legendicons.append(rel_int)                legend_label.append("\nIntensity\nGain\n(Relative)")        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        if jjocont3.show_xaxis_ticks:            ax3.set_xticks(xlocation)            if not jjocont3.show_xaxis_steplabels:                xlabel=[]##                if self.totalplots in [2,3,4]:##                    xlabel_fontsize = fontsizes_dict[jjocont3.xaxis_steplabel_fontsize_mod][self.totalplots][0]##                else:##                    xlabel_fontsize = 12            xlabel_fontsize = fontsizes_dict[jjocont3.xaxis_steplabel_fontsize_mod][self.totalplots][0]            ax3.set_xticklabels(xlabel,fontsize=xlabel_fontsize)        else:            ax3.set_xticks([])        if jjocont3.show_yaxis_ticks:            ytick_set = []            if jjocont3.show_yaxis_percentlabel or jjocont3.show_yaxis_abslabel:                ylabel = ["0"]                for ytickindex in range(0,5):                    new_ytick = (ytickindex/4) * maxdmag                    ytick_set.append(new_ytick)                    if ytickindex > 0:                        if jjocont3.show_yunits:                            units = jjocont3.yunits                        else:                            units = ""                        if jjocont3.show_yaxis_percentlabel and jjocont3.show_yaxis_abslabel:                            new_ylabel = str(ytickindex * 25) + "%\n" + str(maxintensity * ytickindex / 4) + units                        elif jjocont3.show_yaxis_percentlabel and not jjocont3.show_yaxis_abslabel:                            new_ylabel = str(ytickindex * 25) + "%"                        elif not jjocont3.show_yaxis_percentlabel and jjocont3.show_yaxis_abslabel:                            new_ylabel = str(maxintensity * ytickindex / 4) + units                        ylabel.append(new_ylabel)            else:                for ytickindex in range(0,yticktotal):                    new_ytick = (ytickindex/4) * maxdmag                    ytick_set.append(new_ytick)                ylabel = []            ax3.set_yticks(ytick_set)            ylabel_fontsize = fontsizes_dict[jjocont3.yaxis_label_fontsize_mod][self.totalplots][0]            ax3.set_yticklabels(ylabel,fontsize=ylabel_fontsize)        else:            ax3.set_yticks([])        ax3.tick_params(axis='x', length=jjocont3.xaxis_tick_length, width=jjocont3.xaxis_tick_width, colors=jjocont3.xaxis_steplabels_tick_color)        ax3.tick_params(axis='y', length=jjocont3.yaxis_tick_length, width=jjocont3.yaxis_tick_width, colors=jjocont3.yaxis_labels_tick_color)        if jjocont3.show_magmin:            for mindex, mineral in enumerate(magmin_list):                if (jjocont3.mainmagmin == "All") or (jjocont3.mainmagmin == "Temp" and mineral[1]<=maxTT) or (jjocont3.mainmagmin == "Select" and jjocont3.showminlist[mindex]):                    starttemp = mineral[1] + thermal_add                    if mineral[2] != 0:                        endtemp = mineral[2] + thermal_add                        minrect = patches.Rectangle((starttemp, 0), endtemp - starttemp, maxdmag, facecolor=jjocont3.magmin_color,zorder=-5,alpha=0.25)                        ax3.add_patch(minrect)                        ax3.text((starttemp + endtemp) / 2, maxdmag, mineral[0], color=jjocont3.magmin_text_color, zorder=-4,va='top',ha='center', rotation=90, fontsize=fontsizes_dict[jjocont3.magmin_fontsize_mod][self.totalplots][0])                    else:                        ax3.plot([starttemp,starttemp],[0,maxdmag],color=jjocont3.magmin_color,lw=1,zorder=-4)                        ax3.text(starttemp, maxdmag, mineral[0], color=jjocont3.magmin_text_color, zorder=-4,va='top',ha='center', rotation=90, fontsize=fontsizes_dict[jjocont3.magmin_fontsize_mod][self.totalplots][0])        if self.totalplots in [3,4]:            if jjocont3.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=8,loc=1,ncol=1,bbox_to_anchor=(1.23, .95),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont3.legend_color)            if jjocont3.show_title:                ax3.text(0.5, 1, "%s J/Jo Plot %s" % (self.sitename,down_arrow), color=jjocont3.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)        elif self.totalplots == 2:            if jjocont3.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=10,loc=1,ncol=4,bbox_to_anchor=(.95, -0.11),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont3.legend_color)            if jjocont3.show_title:                ax3.text(990, 850, "%s J/Jo Plot" % self.sitename, color=jjocont3.title_color,zorder=4,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=None)        elif self.totalplots == 1:            if jjocont3.show_legend:                jjolegend = ax3.legend(legendicons,legend_label,numpoints=1,fontsize=12,loc=1,ncol=1,bbox_to_anchor=(1.17, .9),fancybox=True, shadow=True)                for text in jjolegend.get_texts():                    text.set_color(jjocont3.legend_color)            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=1)            if jjocont3.show_title:                ax3.text(.5, 0.98, "%s J/Jo Plot" % self.sitename, color=jjocont3.title_color,zorder=10,va='bottom',ha='center',fontsize=20,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)        if jjocont3.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', jjo_on_plot_hover)            global jjo_annot            jjo_annot = ax3.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            jjo_annot.set_visible(False)                plt.tight_layout()    else:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax3.text(0.5, .93, "Site %s J/Jo Plot - No Samples or Steps Shown" % self.sitename, color='black',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=ax3.transAxes)    return######################################################################## Plot Control Functions ########################################################################def getcolor(window,variablename,titlename,labelname,framename,isitglobal):    window.update()    window.deiconify()    window.lift()    exec("initialcolorval = %s" % variablename)            color = askcolor(initialcolor=initialcolorval,title="Select Color of: %s" % titlename,parent=window)    if color[1] != None:        if isitglobal:            colordict[variablename] = color[1]            globals().update(colordict)        else:            exec("%s = \"%s\"" % (variablename,str(color[1])))        labelname.destroy()        labelname = tk1.Label(framename,text="New\nColor:\n%s" % color[1],fg=getoppositecolor(color[1]), bg=color[1],width=10)        labelname.grid(row=0, column=2,sticky='NSEW')    window.update()    window.deiconify()    window.lift()    return(color)def getoppositecolor(color):    color = color.upper()    if color in specialcolorset:        hexval = specialcolordict[color]    elif color != None:        hexval = color    else:        return(None)    redhexval = hexval[1]+hexval[2]    greenhexval = hexval[3]+hexval[4]    bluehexval = hexval[5]+hexval[6]    reddecval = int(redhexval, 16)    greendecval = int(greenhexval, 16)    bluedecval = int(bluehexval, 16)    red_decinvert = -reddecval + 255    green_decinvert = -greendecval + 255    blue_decinvert = -bluedecval + 255    if 90 < red_decinvert < 150:        red_hexinvert = "FF"    elif red_decinvert <= 15:        red_hexinvert = hex(red_decinvert).replace("x", "")    else:        red_hexinvert = hex(red_decinvert).replace("0x", "")    if 90 < green_decinvert < 150:        green_hexinvert = "FF"    elif green_decinvert <= 15:        green_hexinvert = hex(green_decinvert).replace("x", "")    else:        green_hexinvert = hex(green_decinvert).replace("0x", "")    if 90 < blue_decinvert < 150:        blue_hexinvert = "FF"    if blue_decinvert <= 15:        blue_hexinvert = hex(blue_decinvert).replace("x", "")    else:        blue_hexinvert = hex(blue_decinvert).replace("0x", "")            color_invert_hex = "#" + red_hexinvert + green_hexinvert + blue_hexinvert    return(color_invert_hex)def getsymbolcolor(error):    if 0 <= error < 1:        symbolcolor = "#320047"    elif 1 <= error < 2:        symbolcolor = "#6600ff"    elif 2 <= error < 3:        symbolcolor = "#5100ff"    elif 3 <= error < 4:        symbolcolor = "#3c00ff"    elif 4 <= error < 5:        symbolcolor = "#2b00ff"    elif 5 <= error < 6:        symbolcolor = "#003cff"    elif 6 <= error < 7:        symbolcolor = "#005eff"    elif 7 <= error < 8:        symbolcolor = "#007bff"    elif 8 <= error < 9:        symbolcolor = "#00a2ff"    elif 9 <= error < 10:        symbolcolor = "#00eaff"    elif 10 <= error < 11:        symbolcolor = "#00ffc3"    elif 11 <= error < 12:        symbolcolor = "#00ffa2"    elif 12 <= error < 13:        symbolcolor = "#00ff7b"    elif 13 <= error < 14:        symbolcolor = "#00ff55"    elif 14 <= error < 15:        symbolcolor = "#00ff2f"    elif 15 <= error < 16:        symbolcolor = "#00ff04"    elif 16 <= error < 17:        symbolcolor = "#62ff00"    elif 17 <= error < 18:        symbolcolor = "#aeff00"    elif 18 <= error < 19:        symbolcolor = "#eaff00"    elif 19 <= error < 20:        symbolcolor = "#ffff00"    elif 20 <= error < 21:        symbolcolor = "#ffc800"    elif 21 <= error < 22:        symbolcolor = "#ffa200"    elif 22 <= error < 23:        symbolcolor = "#ff6600"    elif 23 <= error < 24:        symbolcolor = "#ff2f00"    elif 24 <= error < 25:        symbolcolor = "#ff1500"    elif 25 <= error:        symbolcolor = "#ff0400"    return(symbolcolor)def disablewidgets(button,disableval,disablelist,enablelist,dependentlist):    if button.get() == disableval:        for widgetname in disablelist: # Disables Widgets in the Disablelist            widgetname.configure(state='disabled')        for widgetname in enablelist: # Enables Widgets in the Enablelist            widgetname.configure(state='normal')    else:        for widgetname in disablelist:            widgetname.configure(state='normal')    for dependentwidget in dependentlist:        widget_var = dependentwidget[0]        widgetkeepoffvallist = dependentwidget[1]        widgetlist = dependentwidget[2]        if widget_var.get() in widgetkeepoffvallist:            for keepoffwidget in widgetlist:                keepoffwidget.configure(state='disabled')    returndef isitacolor(color):    if color in specialcolorset_short:        return(True)    elif len(color) == 7:        if color[0] == "#":            hexpart = color[1:7].upper()            goodchars = set('ABCDEF0123456789')            for char in hexpart:                if not(char in goodchars):                    return(False)            return(True)    return(False)################ Zijderveld Plot Controls and Accessories ################def getaveragedec(self):    sinsum = 0    cossum = 0    if self.plottype == "samples":        for decstep in self.sample.data:                dec = math.radians(decstep.dec)            sinsum = sinsum + math.sin(dec)            cossum = cossum + math.cos(dec)    elif self.plottype == "steps":        for sample in self.sitedata:            for step in sample.data:                if step.dmagstep_clean == self.currentstep:                    dec = math.radians(step.dec)                    sinsum = sinsum + math.sin(dec)                    cossum = cossum + math.cos(dec)    avgdec = math.degrees(math.atan2(sinsum,cossum))    if avgdec < 0:        avgdec = avgdec + 180    return(avgdec)class zij_setdefaults:    def __init__(self):        self.show_popupannotations = True        self.show_arrowlines = True        self.show_dec = True        self.show_inc = True        self.show_axes = True        self.show_ticks = True        self.show_labels = True        self.show_title = True        self.show_legend = True        self.show_dec_edge = True        self.show_inc_edge = True        self.show_laststep = True        self.show_laststep_edge = True        self.show_firststep = True        self.show_firststep_edge = True        self.printstep_color= "PURPLE"        self.arrowline_color = "GREEN"        self.printsamp_color = "GREEN"        self.dec_edge_color = "BLACK"        self.inc_edge_color = "BLACK"        self.firststep_edge_color = "BLACK"        self.laststep_edge_color = "BLACK"        self.axes_color = "BLACK"        self.tick_color = "BLACK"        self.label_color = "BLACK"        self.title_color = "BLACK"        self.legend_color = "BLACK"        self.firststep_color = "YELLOW"        self.laststep_color = "YELLOW"        self.dec_color = "blue"        self.inc_color = "red"        self.samp_fontsize_mod = "Normal"        self.step_fontsize_mod = "Normal"        self.label_fontsize_mod = "Normal"        self.arrowsorlines = "Arrows"                self.dec_symbol = "s"        self.firststep_symbol = "s"        self.inc_symbol = "s"        self.laststep_symbol = "^"        self.arrowline_width = 1        self.dec_edge_width = 1        self.inc_edge_width = 1        self.firststep_edge_width = 1        self.laststep_edge_width = 1        self.axis_width = 1        self.tick_width = 1        self.arrowhead_length = 5        self.arrowhead_width = 6        self.tick_length = 7        self.firststep_size = 27        self.numticks = 35        self.laststep_size = 40        self.dec_size = 80        self.inc_size = 80        self.error_scaling = "None"        returndef zij_resetdefaults(self,window):    global zijcont    zijcont = zij_setdefaults()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef zij2_resetdefaults(self,window):    global zijcont2    zijcont2 = zij_setdefaults()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef zij3_resetdefaults(self,window):    global zijcont3    zijcont3 = zij_setdefaults()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submitzijcontrols(self,zijcont,window):    zijprintdecstep_index_list = zijcont.printdecsteplist_box.curselection()    zijprintincstep_index_list = zijcont.printincsteplist_box.curselection()    for showindex, step in enumerate(self.sample.data):        step.zij_printdeclabel = not(showindex in zijprintdecstep_index_list)        step.zij_printinclabel = not(showindex in zijprintincstep_index_list)    zijcont.show_arrowlines = zijcont.show_arrowline_var.get()    zijcont.arrowsorlines = zijcont.arrowline_var.get()    zijcont.arrowline_width = zijcont.arrowline_width_var.get()    zijcont.arrowline_color = zijcont.arrowline_color_temp    zijcont.show_firststep = zijcont.show_firststep_var.get()    zijcont.firststep_symbol = symbolchoices_dict[zijcont.firststep_symbol_var.get()]    zijcont.firststep_size = zijcont.firststep_symbol_size_slider.get()    zijcont.firststep_color = zijcont.firststep_color_temp    zijcont.show_firststep_edge = zijcont.show_firststep_edge_var.get()    zijcont.firststep_edge_color = zijcont.firststep_edge_color_temp    zijcont.firststep_edge_width = zijcont.firststep_edge_width_var.get()    zijcont.show_laststep = zijcont.show_laststep_var.get()    zijcont.laststep_symbol = symbolchoices_dict[zijcont.laststep_symbol_var.get()]    zijcont.laststep_size = zijcont.laststep_symbol_size_slider.get()    zijcont.laststep_color = zijcont.laststep_color_temp    zijcont.laststep_edge_color = zijcont.laststep_edge_color_temp    zijcont.show_laststep_edge = zijcont.show_laststep_edge_var.get()    zijcont.laststep_edge_color = zijcont.laststep_edge_color_temp    zijcont.laststep_edge_width = zijcont.laststep_edge_width_var.get()    zijcont.step_fontsize_mod = zijcont.step_fontsize_mod_var.get()    zijcont.printstep_color = zijcont.printstep_color_temp    zijcont.show_popupannotations = zijcont.show_popupannotations_var.get()    zijcont.show_dec = zijcont.show_dec_var.get()    zijcont.dec_symbol = symbolchoices_dict[zijcont.dec_symbol_var.get()]    zijcont.dec_size = zijcont.dec_symbol_size_slider.get()    zijcont.dec_color = zijcont.dec_color_temp    zijcont.show_dec_edge = zijcont.show_dec_edge_var.get()    zijcont.dec_edge_color = zijcont.dec_edge_color_temp    zijcont.dec_edge_width = zijcont.dec_edge_width_var.get()    zijcont.show_inc = zijcont.show_inc_var.get()    zijcont.inc_symbol = symbolchoices_dict[zijcont.inc_symbol_var.get()]    zijcont.inc_size = zijcont.inc_symbol_size_slider.get()    zijcont.inc_color = zijcont.inc_color_temp    zijcont.show_inc_edge = zijcont.show_inc_edge_var.get()    zijcont.inc_edge_color = zijcont.inc_edge_color_temp    zijcont.inc_edge_width = zijcont.inc_edge_width_var.get()    zijcont.show_axes = zijcont.show_axes_var.get()    zijcont.axis_width = zijcont.axis_width_var.get()    zijcont.axes_color = zijcont.axes_color_temp    zijcont.show_ticks = zijcont.show_ticks_var.get()    zijcont.numticks = zijcont.ticknumslider.get()    zijcont.tick_width = zijcont.tick_width_var.get()    zijcont.tick_length = zijcont.tick_length_var.get()    zijcont.tick_color = zijcont.tick_color_temp    zijcont.show_labels = zijcont.show_labels_var.get()    zijcont.label_fontsize_mod = zijcont.label_fontsize_var.get()    zijcont.label_color = zijcont.label_color_temp        zijcont.show_title = zijcont.show_title_var.get()    zijcont.title_color = zijcont.title_color_temp    zijcont.show_legend = zijcont.show_legend_var.get()    zijcont.legend_color = zijcont.legend_color_temp    zijcont.error_scaling = zijcont.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submitzij2controls(self,zijcont2,window):    zij2_printdecstep_index_list = zijcont2.printdecsteplist_box.curselection()    zij2_printincstep_index_list = zijcont2.printincsteplist_box.curselection()    for showindex, sample in enumerate(self.sitesteptext):        sample.zij2_printdeclabel = not(showindex in zij2_printdecstep_index_list)        sample.zij2_printinclabel = not(showindex in zij2_printincstep_index_list)    zijcont2.step_fontsize_mod = zijcont2.step_fontsize_mod_var.get()    zijcont2.printstep_color = zijcont2.printstep_color_temp    zijcont2.show_popupannotations = zijcont2.show_popupannotations_var.get()    zijcont2.show_dec = zijcont2.show_dec_var.get()    zijcont2.dec_symbol = symbolchoices_dict[zijcont2.dec_symbol_var.get()]    zijcont2.dec_size = zijcont2.dec_symbol_size_slider.get()    zijcont2.dec_color = zijcont2.dec_color_temp    zijcont2.show_dec_edge = zijcont2.show_dec_edge_var.get()    zijcont2.dec_edge_color = zijcont2.dec_edge_color_temp    zijcont2.dec_edge_width = zijcont2.dec_edge_width_var.get()    zijcont2.show_inc = zijcont2.show_inc_var.get()    zijcont2.inc_symbol = symbolchoices_dict[zijcont2.inc_symbol_var.get()]    zijcont2.inc_size = zijcont2.inc_symbol_size_slider.get()    zijcont2.inc_color = zijcont2.inc_color_temp    zijcont2.show_inc_edge = zijcont2.show_inc_edge_var.get()    zijcont2.inc_edge_color = zijcont2.inc_edge_color_temp    zijcont2.inc_edge_width = zijcont2.inc_edge_width_var.get()    zijcont2.show_axes = zijcont2.show_axes_var.get()    zijcont2.axis_width = zijcont2.axis_width_var.get()    zijcont2.axes_color = zijcont2.axes_color_temp    zijcont2.show_ticks = zijcont2.show_ticks_var.get()    zijcont2.numticks = zijcont2.ticknumslider.get()    zijcont2.tick_width = zijcont2.tick_width_var.get()    zijcont2.tick_length = zijcont2.tick_length_var.get()    zijcont2.tick_color = zijcont2.tick_color_temp    zijcont2.show_labels = zijcont2.show_labels_var.get()    zijcont2.label_fontsize_mod = zijcont2.label_fontsize_var.get()    zijcont2.label_color = zijcont2.label_color_temp        zijcont2.show_title = zijcont2.show_title_var.get()    zijcont2.title_color = zijcont2.title_color_temp    zijcont2.show_legend = zijcont2.show_legend_var.get()    zijcont2.legend_color = zijcont2.legend_color_temp    zijcont2.error_scaling = zijcont2.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submitzij3controls(self,zijcont3,window):    zijprintdecsamp_index_list = zijcont3.printdecsamplabel_box.curselection()    zijprintincsamp_index_list = zijcont3.printincsamplabel_box.curselection()    for showindex, sample in enumerate(self.sitedata):        sample.zij_printdecname = not(showindex in zijprintdecsamp_index_list)        sample.zij_printincname = not(showindex in zijprintincsamp_index_list)    decstepselection = zijcont3.printdecsteplist_box.curselection()    incstepselection = zijcont3.printincsteplist_box.curselection()    for sample in zijcont3.sitedata:        if sample.name == zijcont3.prevsamp:            for showstepindex, step in enumerate(sample.data):                step.zij_printdeclabel = not(showstepindex in decstepselection)                step.zij_printinclabel = not(showstepindex in incstepselection)    for sampindex, sample in enumerate(zijcont3.sitedata):        for stepindex, step in enumerate(sample.data):            self.sitedata[sampindex].data[stepindex].zij_printdeclabel = step.zij_printdeclabel            self.sitedata[sampindex].data[stepindex].zij_printinclabel = step.zij_printinclabel    zijcont3.printsamp_color = zijcont3.printsamp_color_temp    zijcont3.samp_fontsize_mod = zijcont3.samp_fontsize_mod_var.get()    zijcont3.show_arrowlines = zijcont3.show_arrowline_var.get()    zijcont3.arrowsorlines = zijcont3.arrowline_var.get()    zijcont3.arrowline_width = zijcont3.arrowline_width_var.get()    zijcont3.arrowline_color = zijcont3.arrowline_color_temp    zijcont3.show_firststep = zijcont3.show_firststep_var.get()    zijcont3.firststep_symbol = symbolchoices_dict[zijcont3.firststep_symbol_var.get()]    zijcont3.firststep_size = zijcont3.firststep_symbol_size_slider.get()    zijcont3.firststep_color = zijcont3.firststep_color_temp    zijcont3.show_firststep_edge = zijcont3.show_firststep_edge_var.get()    zijcont3.firststep_edge_color = zijcont3.firststep_edge_color_temp    zijcont3.firststep_edge_width = zijcont3.firststep_edge_width_var.get()    zijcont3.show_laststep = zijcont3.show_laststep_var.get()    zijcont3.laststep_symbol = symbolchoices_dict[zijcont3.laststep_symbol_var.get()]    zijcont3.laststep_size = zijcont3.laststep_symbol_size_slider.get()    zijcont3.laststep_color = zijcont3.laststep_color_temp    zijcont3.laststep_edge_color = zijcont3.laststep_edge_color_temp    zijcont3.show_laststep_edge = zijcont3.show_laststep_edge_var.get()    zijcont3.laststep_edge_color = zijcont3.laststep_edge_color_temp    zijcont3.laststep_edge_width = zijcont3.laststep_edge_width_var.get()##    zijcont3.step_fontsize_mod = zijcont3.step_fontsize_mod_var.get()##    zijcont3.printstep_color = zijcont3.printstep_color_temp    zijcont3.show_popupannotations = zijcont3.show_popupannotations_var.get()    zijcont3.show_dec = zijcont3.show_dec_var.get()    zijcont3.dec_symbol = symbolchoices_dict[zijcont3.dec_symbol_var.get()]    zijcont3.dec_size = zijcont3.dec_symbol_size_slider.get()    zijcont3.dec_color = zijcont3.dec_color_temp    zijcont3.show_dec_edge = zijcont3.show_dec_edge_var.get()    zijcont3.dec_edge_color = zijcont3.dec_edge_color_temp    zijcont3.dec_edge_width = zijcont3.dec_edge_width_var.get()    zijcont3.show_inc = zijcont3.show_inc_var.get()    zijcont3.inc_symbol = symbolchoices_dict[zijcont3.inc_symbol_var.get()]    zijcont3.inc_size = zijcont3.inc_symbol_size_slider.get()    zijcont3.inc_color = zijcont3.inc_color_temp    zijcont3.show_inc_edge = zijcont3.show_inc_edge_var.get()    zijcont3.inc_edge_color = zijcont3.inc_edge_color_temp    zijcont3.inc_edge_width = zijcont3.inc_edge_width_var.get()    zijcont3.show_axes = zijcont3.show_axes_var.get()    zijcont3.axis_width = zijcont3.axis_width_var.get()    zijcont3.axes_color = zijcont3.axes_color_temp    zijcont3.show_ticks = zijcont3.show_ticks_var.get()    zijcont3.numticks = zijcont3.ticknumslider.get()    zijcont3.tick_width = zijcont3.tick_width_var.get()    zijcont3.tick_length = zijcont3.tick_length_var.get()    zijcont3.tick_color = zijcont3.tick_color_temp    zijcont3.show_labels = zijcont3.show_labels_var.get()    zijcont3.label_fontsize_mod = zijcont3.label_fontsize_var.get()    zijcont3.label_color = zijcont3.label_color_temp        zijcont3.show_title = zijcont3.show_title_var.get()    zijcont3.title_color = zijcont3.title_color_temp    zijcont3.show_legend = zijcont3.show_legend_var.get()    zijcont3.legend_color = zijcont3.legend_color_temp    zijcont3.error_scaling = zijcont3.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef enterzij_printdecsteplistbox(self):    self.inzij_printdecsteplistbox = True    returndef leavezij_printdecsteplistbox(self):    self.inzij_printdecsteplistbox = False    self.focustopwin()    returndef enterzij_printincsteplistbox(self):    self.inzij_printincsteplistbox = True    returndef leavezij_printincsteplistbox(self):    self.inzij_printincsteplistbox = False    self.focustopwin()    returndef enterzij2_printdecsteplistbox(self):    self.inzij2_printdecsteplistbox = True    returndef leavezij2_printdecsteplistbox(self):    self.inzij2_printdecsteplistbox = False    self.focustopwin()    returndef enterzij2_printincsteplistbox(self):    self.inzij2_printincsteplistbox = True    returndef leavezij2_printincsteplistbox(self):    self.inzij2_printincsteplistbox = False    self.focustopwin()    returndef enterzij3_printdecsamplabelbox(self):    self.inzij3_printdecsamplabelbox = True    returndef leavezij3_printdecsamplabelbox(self):    self.inzij3_printdecsamplabelbox = False    self.focustopwin()    returndef enterzij3_printincsamplabelbox(self):    self.inzij3_printincsamplabelbox = True    returndef leavezij3_printincsamplabelbox(self):    self.inzij3_printincsamplabelbox = False    self.focustopwin()    returndef enterzij3_printsamplistbox(self):    self.inzij3_printsamplistbox = True    returndef leavezij3_printsamplistbox(self):    self.inzij3_printsamplistbox = False    self.focustopwin()    returndef enterzij3_printdecsteplistbox(self):    self.inzij3_printdecsteplistbox = True    returndef leavezij3_printdecsteplistbox(self):    self.inzij3_printdecsteplistbox = False    self.focustopwin()    returndef enterzij3_printincsteplistbox(self):    self.inzij3_printincsteplistbox = True    returndef leavezij3_printincsteplistbox(self):    self.inzij3_printincsteplistbox = False    self.focustopwin()    returndef updatezij3steps(self):    global zijcont3    decstepselection = zijcont3.printdecsteplist_box.curselection()    incstepselection = zijcont3.printincsteplist_box.curselection()    for sample in zijcont3.sitedata:        if sample.name == zijcont3.prevsamp:            for showstepindex, step in enumerate(sample.data):                step.zij_printdeclabel = not(showstepindex in decstepselection)                step.zij_printinclabel = not(showstepindex in incstepselection)    newsampleselection = self.samplelist[zijcont3.printsamplist_box.curselection()[0]]    zijcont3.printdecsteplist_box.delete(0,tk1.END)    zijcont3.printincsteplist_box.delete(0,tk1.END)    for sample in zijcont3.sitedata:        if sample.name == newsampleselection:            for showstepindex, step in enumerate(sample.data):                zijcont3.printdecsteplist_box.insert(tk1.END,step.dmagstep)                zijcont3.printdecsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")                zijcont3.printincsteplist_box.insert(tk1.END,step.dmagstep)                zijcont3.printincsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")                if not(step.zij_printdeclabel):                    zijcont3.printdecsteplist_box.select_set(showstepindex)                if not(step.zij_printinclabel):                    zijcont3.printincsteplist_box.select_set(showstepindex)    zijcont3.prevsamp = newsampleselection    returndef zijcontrols_sample(self):    global zij_master, zijcont##    if zij_master != None and zij_master.winfo_exists():##    else: # Create zij_master control window    try:        'normal' == zij_master.state()        zij_master.lift()        zij_master.attributes('-topmost',True)        zij_master.after_idle(zij_master.attributes,'-topmost',False)    except:        zij_master = tk1.Toplevel(root)        zij_master.focus_set()        zij_master.title("Zijderveld Plot Controls (Sample Data)")        zij_master.geometry("+10+10")                zijcont.arrowline_color_temp = zijcont.arrowline_color # set color temps        zijcont.printstep_color_temp = zijcont.printstep_color        zijcont.dec_color_temp = zijcont.dec_color        zijcont.inc_color_temp = zijcont.inc_color        zijcont.dec_edge_color_temp = zijcont.dec_edge_color        zijcont.inc_edge_color_temp = zijcont.inc_edge_color        zijcont.firststep_color_temp = zijcont.firststep_color        zijcont.laststep_color_temp = zijcont.laststep_color        zijcont.firststep_edge_color_temp = zijcont.firststep_edge_color        zijcont.laststep_edge_color_temp = zijcont.laststep_edge_color        zijcont.axes_color_temp = zijcont.axes_color        zijcont.tick_color_temp = zijcont.tick_color        zijcont.label_color_temp = zijcont.label_color        zijcont.title_color_temp = zijcont.title_color        zijcont.legend_color_temp = zijcont.legend_color        zij_vertical_scrollbar = tk1.Scrollbar(zij_master,orient=tk1.VERTICAL)        zij_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        zij_horizontal_scrollbar = tk1.Scrollbar(zij_master,orient=tk1.HORIZONTAL)        zij_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.zij_canvas = tk1.Canvas(zij_master, bd=0, highlightthickness=0,yscrollcommand=zij_vertical_scrollbar.set,xscrollcommand=zij_horizontal_scrollbar.set,width=1400,height=730,scrollregion=(0,0,1400,730))        self.zij_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        zij_vertical_scrollbar.config(command=self.zij_canvas.yview)        zij_horizontal_scrollbar.config(command=self.zij_canvas.xview)        self.zij_canvas.xview_moveto(0)        self.zij_canvas.yview_moveto(0)        zij_interior = tk1.Frame(self.zij_canvas,width=500,height=500)        zij_interior_id = self.zij_canvas.create_window(0, 0, window=zij_interior,anchor=tk1.NW)                zij_col0_frm = tk1.Frame(zij_interior,bd=2) # Column 0        zij_col0_frm.grid(row=0,column=0,sticky='NSEW')                zij_printsteps_frm = tk1.Frame(zij_col0_frm,bd=2,relief=tk1.SUNKEN)        zij_printsteps_frm.pack(fill=tk1.X)                step_settings_label = tk1.Label(zij_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        step_settings_label.grid(row=0, column=0, sticky='NSEW')        zij_selectprintsteps_frm = tk1.Frame(zij_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        zij_selectdecprintsteps_frm = tk1.Frame(zij_selectprintsteps_frm,bd=2,relief=tk1.GROOVE)        zij_selectdecprintsteps_frm.pack(side=tk1.LEFT)        zij_selectdecsteps_main_label = tk1.Label(zij_selectdecprintsteps_frm, text="Declination Labels", font="Helvetica 10 bold")        zij_selectdecsteps_main_label.grid(row=0, column=0, sticky='NSEW')        zij_selectdecsteps_label = tk1.Label(zij_selectdecprintsteps_frm, text="Select which Step\nDeclination Labels to NOT Print:")        zij_selectdecsteps_label.grid(row=1, column=0, sticky='NSEW')        zijcont.printdecsteplist_box = tk1.Listbox(zij_selectdecprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sample.data):            zijcont.printdecsteplist_box.insert(tk1.END,step.dmagstep)            zijcont.printdecsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.zij_printdeclabel):                zijcont.printdecsteplist_box.select_set(stepoffindex)        zijcont.printdecsteplist_box.grid(row=2,column=0,sticky='NSEW')        zijcont.printdecsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("zijcont.printdecsteplist_box"))        zijcont.printdecsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("zijcont.printdecsteplist_box"))        zijcont.printdec_scrollbar = tk1.Scrollbar(zijcont.printdecsteplist_box,orient=tk1.VERTICAL)        zijcont.printdec_scrollbar.config(command=zijcont.printdecsteplist_box.yview)        zijcont.printdecsteplist_box.config(yscrollcommand=zijcont.printdec_scrollbar.set)        zijcont.printdec_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont.printdecsteplist_box.bind("<Enter>", lambda x: enterzij_printdecsteplistbox(self))        zijcont.printdecsteplist_box.bind("<Leave>", lambda x: leavezij_printdecsteplistbox(self))        zij_show_alldecsteps_butt = tk1.Button(zij_selectdecprintsteps_frm, text="Print ALL Step Declination Labels\n(Deselect All)", command= lambda: zijcont.printdecsteplist_box.selection_clear(0, tk1.END))        zij_show_alldecsteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        zij_show_nodecsteps_butt = tk1.Button(zij_selectdecprintsteps_frm, text="Print NO Step Declination Labels\n(Select All)", command= lambda: zijcont.printdecsteplist_box.selection_set(0, tk1.END))        zij_show_nodecsteps_butt.grid(row=4,column=0, sticky='NSEW',padx=10,pady=5)        zij_selectincprintsteps_frm = tk1.Frame(zij_selectprintsteps_frm,bd=2,relief=tk1.GROOVE)        zij_selectincprintsteps_frm.pack(side=tk1.LEFT)        zij_selectincsteps_main_label = tk1.Label(zij_selectincprintsteps_frm, text="Inclination Labels", font="Helvetica 10 bold")        zij_selectincsteps_main_label.grid(row=0, column=0, sticky='NSEW')        zij_selectincsteps_label = tk1.Label(zij_selectincprintsteps_frm, text="Select which Step\nInclination Labels to NOT Print:")        zij_selectincsteps_label.grid(row=1, column=0, sticky='NSEW')        zijcont.printincsteplist_box = tk1.Listbox(zij_selectincprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sample.data):            zijcont.printincsteplist_box.insert(tk1.END,step.dmagstep)            zijcont.printincsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.zij_printinclabel):                zijcont.printincsteplist_box.select_set(stepoffindex)        zijcont.printincsteplist_box.grid(row=2,column=0,sticky='NSEW')        zijcont.printincsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("zijcont.printincsteplist_box"))        zijcont.printincsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("zijcont.printincsteplist_box"))        zijcont.printinc_scrollbar = tk1.Scrollbar(zijcont.printincsteplist_box,orient=tk1.VERTICAL)        zijcont.printinc_scrollbar.config(command=zijcont.printincsteplist_box.yview)        zijcont.printincsteplist_box.config(yscrollcommand=zijcont.printinc_scrollbar.set)        zijcont.printinc_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont.printincsteplist_box.bind("<Enter>", lambda x: enterzij_printincsteplistbox(self))        zijcont.printincsteplist_box.bind("<Leave>", lambda x: leavezij_printincsteplistbox(self))        zij_show_allincsteps_butt = tk1.Button(zij_selectincprintsteps_frm, text="Print ALL Step Inclination Labels\n(Deselect All)", command= lambda: zijcont.printincsteplist_box.selection_clear(0, tk1.END))        zij_show_allincsteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        zij_show_noincsteps_butt = tk1.Button(zij_selectincprintsteps_frm, text="Print NO Step Inclination Labels\n(Select All)", command= lambda: zijcont.printincsteplist_box.selection_set(0, tk1.END))        zij_show_noincsteps_butt.grid(row=4,column=0, sticky='NSEW',padx=10,pady=5)        zij_printstep_color_frm = tk1.Frame(zij_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        zij_printstep_color_frm.grid_columnconfigure(0, weight=1)        zij_printstep_color_frm.grid_columnconfigure(3, weight=1)                        zij_printstep_color_butt = tk1.Button(zij_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(zij_master,"zijcont.printstep_color_temp","Zijderveld Step Labels",                                                                                                                                zij_printstep_color_label,zij_printstep_color_frm,False))        zij_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_printstep_color_label = tk1.Label(zij_printstep_color_frm,text="Current\nColor:\n%s" % zijcont.printstep_color_temp,fg=getoppositecolor(zijcont.printstep_color_temp), bg=zijcont.printstep_color_temp,width=10)        zij_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        zij_step_fontsize_frm = tk1.Frame(zij_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        zij_step_fontsize_frm.grid_columnconfigure(0, weight=1)        zij_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    zij_step_fontsize_label = tk1.Label(zij_step_fontsize_frm, text="Step Font Size:",bd=1)        zij_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        zijcont.step_fontsize_mod_var = tk1.StringVar(zij_interior)        zijcont.step_fontsize_mod_var.set(zijcont.step_fontsize_mod)         zij_step_fontsize_optionmenu = tk1.OptionMenu(zij_step_fontsize_frm, zijcont.step_fontsize_mod_var, *fontsizes_set)        zij_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        zij_step_fontsize_optionmenu.configure(font=('Consolas',10))        zij_showannot_frm = tk1.Frame(zij_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij_showannot_frm.grid(row=6, column=0,sticky='NSEW')        zijcont.show_popupannotations_var = tk1.BooleanVar(value=zijcont.show_popupannotations)        zij_show_popupannotations_chbutt = tk1.Checkbutton(zij_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=zijcont.show_popupannotations_var)        zij_show_popupannotations_chbutt.pack(fill=tk1.X)                zij_col1_frm = tk1.Frame(zij_interior,bd=2) # Column 1        zij_col1_frm.grid(row=0,column=1,sticky='NSEW')        zij_arrowline_frm = tk1.Frame(zij_col1_frm,bd=2,relief=tk1.SUNKEN)        zij_arrowline_frm.pack(fill=tk1.X)                zij_arrowline_title_label = tk1.Label(zij_arrowline_frm, text="Arrows & Lines Settings:",font="Helvetica 12 bold")        zij_arrowline_title_label.pack(fill=tk1.X)        zij_plotarrow_frm = tk1.Frame(zij_arrowline_frm,bd=2,relief=tk1.GROOVE)        zij_plotarrow_frm.pack(fill=tk1.X)        zijcont.show_arrowline_var = tk1.BooleanVar(value=zijcont.show_arrowlines)        zij_show_arrowline_chbutt = tk1.Checkbutton(zij_plotarrow_frm, text="Show Arrows and Lines?", variable=zijcont.show_arrowline_var,command= lambda:                                              disablewidgets(zijcont.show_arrowline_var,False,[zij_arrowline_label,zij_arrowline_radio_arrow,zij_arrowline_radio_line,zij_arrowline_color_butt,zij_arrowline_color_label,                                                                                             zij_arrowline_width_label,zij_arrowline_width_optionmenu],[],[]))        zij_show_arrowline_chbutt.pack(fill=tk1.X)        zij_arrowline_radio_text_frm = tk1.Frame(zij_plotarrow_frm,bd=2,relief=tk1.GROOVE)        zij_arrowline_radio_text_frm.pack(fill=tk1.X)        zij_arrowline_label = tk1.Label(zij_arrowline_radio_text_frm, text="Plot Arrows or Lines?")        zij_arrowline_label.pack(fill=tk1.X)        zijcont.arrowline_var = tk1.StringVar()        zijcont.arrowline_var.set(zijcont.arrowsorlines)        zij_arrowline_radio_frm = tk1.Frame(zij_arrowline_radio_text_frm,bd=2)        zij_arrowline_radio_frm.pack(fill=tk1.X)        zij_arrowline_radio_arrow = tk1.Radiobutton(zij_arrowline_radio_frm, text="Plot Arrows",variable=zijcont.arrowline_var,value="Arrows")        zij_arrowline_radio_arrow.pack(side=tk1.LEFT,padx=10)        zij_arrowline_radio_line = tk1.Radiobutton(zij_arrowline_radio_frm, text="Plot Lines",variable=zijcont.arrowline_var,value="Lines")        zij_arrowline_radio_line.pack(side=tk1.LEFT,padx=10)        zij_arrowline_color_frm = tk1.Frame(zij_arrowline_frm,bd=2,relief=tk1.GROOVE)        zij_arrowline_color_frm.pack(fill=tk1.X)        zij_arrowline_color_frm.grid_columnconfigure(0, weight=1)        zij_arrowline_color_frm.grid_columnconfigure(3, weight=1)        zij_arrowline_color_butt = tk1.Button(zij_arrowline_color_frm,text="Select Arrow/Line Color", command= lambda: getcolor(zij_master,"zijcont.arrowline_color_temp","Zijderveld Arrow/Line",                                                                                                                                zij_arrowline_color_label,zij_arrowline_color_frm,False))        zij_arrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij_arrowline_color_label = tk1.Label(zij_arrowline_color_frm,text="Current\nColor:\n%s" % zijcont.arrowline_color_temp,fg=getoppositecolor(zijcont.arrowline_color_temp), bg=zijcont.arrowline_color_temp,width=10)        zij_arrowline_color_label.grid(row=0,column=2)        zij_arrowline_width_frm = tk1.Frame(zij_arrowline_frm,bd=2,relief=tk1.GROOVE)        zij_arrowline_width_frm.pack(fill=tk1.X)        zij_arrowline_width_frm.grid_columnconfigure(0, weight=1)        zij_arrowline_width_frm.grid_columnconfigure(3, weight=1)        zij_arrowline_width_label = tk1.Label(zij_arrowline_width_frm, text="Arrow/Line Width:")        zij_arrowline_width_label.grid(row=0,column=1,sticky='NESW')                zijcont.arrowline_width_var = tk1.IntVar(zij_interior)        zijcont.arrowline_width_var.set(zijcont.arrowline_width)         zij_arrowline_width_optionmenu = tk1.OptionMenu(zij_arrowline_width_frm, zijcont.arrowline_width_var, *linewidthchoices_set)        zij_arrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_arrowline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont.show_arrowline_var,False,[zij_arrowline_label,zij_arrowline_radio_arrow,zij_arrowline_radio_line,zij_arrowline_color_butt,zij_arrowline_color_label,                                                         zij_arrowline_width_label,zij_arrowline_width_optionmenu],[],[])        zij_legend_settings_frm = tk1.Frame(zij_col1_frm,bd=2,relief=tk1.SUNKEN)        zij_legend_settings_frm.pack(fill=tk1.X)        zij_legend_settings_label = tk1.Label(zij_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        zij_legend_settings_label.pack(fill=tk1.X)                zij_show_title_frm = tk1.Frame(zij_legend_settings_frm,bd=2,relief=tk1.GROOVE)        zij_show_title_frm.pack(fill=tk1.X)        zijcont.show_title_var = tk1.BooleanVar(value=zijcont.show_title)        zij_show_title_chbutt = tk1.Checkbutton(zij_show_title_frm, text="Show Title?", variable=zijcont.show_title_var,command= lambda:                                              disablewidgets(zijcont.show_title_var,False,[zij_title_color_butt,zij_title_color_label],[],[]))        zij_show_title_chbutt.pack(fill=tk1.X)        zij_title_color_frm = tk1.Frame(zij_show_title_frm,bd=2,relief=tk1.GROOVE)        zij_title_color_frm.pack(fill=tk1.X)        zij_title_color_frm.grid_columnconfigure(0, weight=1)        zij_title_color_frm.grid_columnconfigure(3, weight=1)        zij_title_color_butt = tk1.Button(zij_title_color_frm,text="Select Title Color", command= lambda: getcolor(zij_master,"zijcont.title_color_temp","Zijderveld Title",zij_title_color_label,zij_title_color_frm,False))        zij_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij_title_color_label = tk1.Label(zij_title_color_frm,text="Current\nColor:\n%s" % zijcont.title_color_temp,fg=getoppositecolor(zijcont.title_color_temp), bg=zijcont.title_color_temp,width=10)        zij_title_color_label.grid(row=0,column=2)        disablewidgets(zijcont.show_title_var,False,[zij_title_color_butt,zij_title_color_label],[],[])        zij_show_legend_frm = tk1.Frame(zij_legend_settings_frm,bd=2,relief=tk1.GROOVE)        zij_show_legend_frm.pack(fill=tk1.X)        zijcont.show_legend_var = tk1.BooleanVar(value=zijcont.show_legend)        zij_show_legend_chbutt = tk1.Checkbutton(zij_show_legend_frm, text="Show Legend?", variable=zijcont.show_legend_var,command= lambda:                                              disablewidgets(zijcont.show_legend_var,False,[zij_legend_color_butt,zij_legend_color_label],[],[]))        zij_show_legend_chbutt.pack(fill=tk1.X)        zij_legend_color_frm = tk1.Frame(zij_show_legend_frm,bd=2,relief=tk1.GROOVE)        zij_legend_color_frm.pack(fill=tk1.X)        zij_legend_color_frm.grid_columnconfigure(0, weight=1)        zij_legend_color_frm.grid_columnconfigure(3, weight=1)        zij_legend_color_butt = tk1.Button(zij_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(zij_master,"zijcont.legend_color_temp","Zijderveld Legend",zij_legend_color_label,zij_legend_color_frm,False))        zij_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij_legend_color_label = tk1.Label(zij_legend_color_frm,text="Current\nColor:\n%s" % zijcont.legend_color_temp,fg=getoppositecolor(zijcont.legend_color_temp), bg=zijcont.legend_color_temp,width=10)        zij_legend_color_label.grid(row=0,column=2)        disablewidgets(zijcont.show_legend_var,False,[zij_legend_color_butt,zij_legend_color_label],[],[])        zij_error_settings_frm = tk1.Frame(zij_col1_frm,bd=2,relief=tk1.SUNKEN)        zij_error_settings_frm.pack(fill=tk1.X)        zij_error_settings_label = tk1.Label(zij_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        zij_error_settings_label.pack(fill=tk1.X)                zij_error_radio_frm = tk1.Frame(zij_error_settings_frm,bd=2,relief=tk1.GROOVE)        zij_error_radio_frm.pack(fill=tk1.X)        zij_error_settings_label = tk1.Label(zij_error_radio_frm, text="Select Error-Scaling for Symbols:")        zij_error_settings_label.pack(fill=tk1.X)        zijcont.error_scaling_var = tk1.StringVar()        zijcont.error_scaling_var.set(zijcont.error_scaling)        zij_errorscaling_radio_none = tk1.Radiobutton(zij_error_radio_frm, text="No Error Scaling",variable=zijcont.error_scaling_var,value="None",command = lambda:                                                      disablewidgets(zijcont.error_scaling_var,"None",[],[zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label,                                                                                                          zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider,zij_dec_size_label,zij_inc_size_label],                                                                     [[zijcont.show_dec_var,[False],[zij_dec_color_butt,zij_dec_color_label,zijcont.dec_symbol_size_slider,zij_dec_size_label]],                                                                        [zijcont.show_inc_var,[False],[zij_inc_color_butt,zij_inc_color_label,zijcont.inc_symbol_size_slider,zij_inc_size_label]]]))        zij_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        zij_errorscaling_radio_size = tk1.Radiobutton(zij_error_radio_frm, text="Scale Symbol Size by Error",variable=zijcont.error_scaling_var,value="Size",command = lambda:                                                      disablewidgets(zijcont.error_scaling_var,"Size",[zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider,zij_dec_size_label,zij_inc_size_label],                                                                     [zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label],                                                                     [[zijcont.show_dec_var,[False],[zij_dec_color_butt,zij_dec_color_label]],                                                                      [zijcont.show_inc_var,[False],[zij_inc_color_butt,zij_inc_color_label]]]))        zij_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        zij_errorscaling_radio_color = tk1.Radiobutton(zij_error_radio_frm, text="Scale Symbol Color By Error",variable=zijcont.error_scaling_var,value="Color",command = lambda:                                                       disablewidgets(zijcont.error_scaling_var,"Color",[zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label],                                                                      [zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider,zij_dec_size_label,zij_inc_size_label],                                                                      [[zijcont.show_dec_var,[False],[zijcont.dec_symbol_size_slider,zij_dec_size_label]],                                                                       [zijcont.show_inc_var,[False],[zijcont.inc_symbol_size_slider,zij_inc_size_label]]]))        zij_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        zij_col2_frm = tk1.Frame(zij_interior,bd=2) # Column 2        zij_col2_frm.grid(row=0,column=2,sticky='NSEW')        zij_dec_frm = tk1.Frame(zij_col2_frm,bd=2,relief=tk1.SUNKEN)        zij_dec_frm.pack(fill=tk1.X)        zij_dec_symbol_settings_label = tk1.Label(zij_dec_frm, text="Declination Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij_dec_symbol_settings_label.pack(fill=tk1.X)        zij_show_dec_frm = tk1.Frame(zij_dec_frm,bd=2,relief=tk1.GROOVE)        zij_show_dec_frm.pack(fill=tk1.X)        zijcont.show_dec_var = tk1.BooleanVar(value=zijcont.show_dec)        zij_show_dec_chbutt = tk1.Checkbutton(zij_show_dec_frm, text="Show Declination Points?", variable=zijcont.show_dec_var,command= lambda:                                              disablewidgets(zijcont.show_dec_var,False,[zij_dec_symbol_label,zij_dec_symbolchoices_optionmenu,zij_dec_size_label,zijcont.dec_symbol_size_slider,zij_dec_color_butt,zij_dec_color_label,                            zij_show_dec_edge_chbutt,zij_dec_edge_color_butt,zij_dec_edge_color_label,zij_dec_edge_width_label, zij_dec_edge_width_optionmenu],[],                        [[zijcont.show_dec_edge_var,[False],[zij_dec_edge_color_butt,zij_dec_edge_color_label,zij_dec_edge_width_label,zij_dec_edge_width_optionmenu]],                                                [zijcont.error_scaling_var,["Size"],[zijcont.dec_symbol_size_slider,zij_dec_size_label]],                                                [zijcont.error_scaling_var,["Color"],[zij_dec_color_butt,zij_dec_color_label]]]))        zij_show_dec_chbutt.pack(fill=tk1.X)        zij_dec_symbol_frm = tk1.Frame(zij_dec_frm,bd=2,relief=tk1.GROOVE)        zij_dec_symbol_frm.pack(fill=tk1.X)        zij_dec_symbol_frm.grid_columnconfigure(0, weight=1)        zij_dec_symbol_frm.grid_columnconfigure(3, weight=1)                zij_dec_symbol_label = tk1.Label(zij_dec_symbol_frm, text="Declination Symbol:",bd=1)        zij_dec_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont.dec_symbol_var = tk1.StringVar(zij_interior)        zijcont.dec_symbol_var.set(symbolchoices_dict_reverse[zijcont.dec_symbol])         zij_dec_symbolchoices_optionmenu = tk1.OptionMenu(zij_dec_symbol_frm, zijcont.dec_symbol_var, *symbolchoices_set)        zij_dec_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_dec_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij_dec_size_frm = tk1.Frame(zij_dec_frm,bd=2,relief=tk1.GROOVE)        zij_dec_size_frm.pack(fill=tk1.X)        zij_dec_size_label = tk1.Label(zij_dec_size_frm, text="Declination Symbol Size:")        zij_dec_size_label.pack(fill=tk1.X)        zijcont.dec_symbol_size_slider = Scale(zij_dec_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont.dec_symbol_size_slider.set(zijcont.dec_size)        zijcont.dec_symbol_size_slider.pack(fill=tk1.X)        zij_dec_color_frm = tk1.Frame(zij_dec_frm,bd=2,relief=tk1.GROOVE)        zij_dec_color_frm.pack(fill=tk1.X)        zij_dec_color_frm.grid_columnconfigure(0, weight=1)        zij_dec_color_frm.grid_columnconfigure(3, weight=1)        zij_dec_color_butt = tk1.Button(zij_dec_color_frm,text="Select Declination\nSymbol Color", command= lambda: getcolor(zij_master,"zijcont.dec_color_temp","Zijderveld Declination Symbol",zij_dec_color_label,zij_dec_color_frm,False))        zij_dec_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_dec_color_label = tk1.Label(zij_dec_color_frm,text="Current\nColor:\n%s" % zijcont.dec_color_temp,fg=getoppositecolor(zijcont.dec_color_temp), bg=zijcont.dec_color_temp,width=10)        zij_dec_color_label.grid(row=0, column=2,sticky='NSEW')                zij_show_dec_edge_frm = tk1.Frame(zij_dec_frm,bd=2,relief=tk1.GROOVE)        zij_show_dec_edge_frm.pack(fill=tk1.X)        zijcont.show_dec_edge_var = tk1.BooleanVar(value=zijcont.show_dec_edge)        zij_show_dec_edge_chbutt = tk1.Checkbutton(zij_show_dec_edge_frm, text="Show Declination Symbol Border?", variable=zijcont.show_dec_edge_var,command= lambda:                                              disablewidgets(zijcont.show_dec_edge_var,False,[zij_dec_edge_color_butt,zij_dec_edge_color_label,zij_dec_edge_width_label,zij_dec_edge_width_optionmenu],[],[]))        zij_show_dec_edge_chbutt.pack(fill=tk1.X)        zij_dec_edge_color_frm = tk1.Frame(zij_dec_frm,bd=2,relief=tk1.GROOVE)        zij_dec_edge_color_frm.pack(fill=tk1.X)        zij_dec_edge_color_frm.grid_columnconfigure(0, weight=1)        zij_dec_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij_dec_edge_color_butt = tk1.Button(zij_dec_edge_color_frm,text="Select Declination\nSymbol Border Color", command= lambda: getcolor(zij_master,"zijcont.dec_edge_color_temp","Zijderveld Declination Symbol Edge",                                                                                                                                              zij_dec_edge_color_label,zij_dec_edge_color_frm,False))        zij_dec_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_dec_edge_color_label = tk1.Label(zij_dec_edge_color_frm,text="Current\nColor:\n%s" % zijcont.dec_edge_color_temp,fg=getoppositecolor(zijcont.dec_edge_color_temp), bg=zijcont.dec_edge_color_temp,width=10)        zij_dec_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij_dec_edge_width_frm = tk1.Frame(zij_dec_frm,bd=2,relief=tk1.GROOVE)        zij_dec_edge_width_frm.pack(fill=tk1.X)        zij_dec_edge_width_frm.grid_columnconfigure(0, weight=1)        zij_dec_edge_width_frm.grid_columnconfigure(3, weight=1)        zij_dec_edge_width_label = tk1.Label(zij_dec_edge_width_frm, text="Declination Symbol Border Width:")        zij_dec_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont.dec_edge_width_var = tk1.IntVar(zij_interior)        zijcont.dec_edge_width_var.set(zijcont.dec_edge_width)         zij_dec_edge_width_optionmenu = tk1.OptionMenu(zij_dec_edge_width_frm, zijcont.dec_edge_width_var, *linewidthchoices_set)        zij_dec_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_dec_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont.show_dec_edge_var,False,[zij_dec_edge_color_butt,zij_dec_edge_color_label,zij_dec_edge_width_label,zij_dec_edge_width_optionmenu],[],[])        disablewidgets(zijcont.show_dec_var,False,[zij_dec_symbol_label,zij_dec_symbolchoices_optionmenu,zij_dec_size_label,zijcont.dec_symbol_size_slider,zij_dec_color_butt,zij_dec_color_label,                                                                                       zij_show_dec_edge_chbutt,zij_dec_edge_color_butt,zij_dec_edge_color_label,zij_dec_edge_width_label, zij_dec_edge_width_optionmenu],[],                                                                        [[zijcont.show_dec_edge_var,[False],[zij_dec_edge_color_butt,zij_dec_edge_color_label,zij_dec_edge_width_label,zij_dec_edge_width_optionmenu]]])                zij_inc_frm = tk1.Frame(zij_col2_frm,bd=2,relief=tk1.SUNKEN)        zij_inc_frm.pack(fill=tk1.X)        zij_inc_symbol_settings_label = tk1.Label(zij_inc_frm, text="Inclination Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij_inc_symbol_settings_label.pack(fill=tk1.X)        zij_show_inc_frm = tk1.Frame(zij_inc_frm,bd=2,relief=tk1.GROOVE)        zij_show_inc_frm.pack(fill=tk1.X)        zijcont.show_inc_var = tk1.BooleanVar(value=zijcont.show_inc)        zij_show_inc_chbutt = tk1.Checkbutton(zij_show_inc_frm, text="Show Inclination Points?", variable=zijcont.show_inc_var,command= lambda:                                              disablewidgets(zijcont.show_inc_var,False,[zij_inc_symbol_label,zij_inc_symbolchoices_optionmenu,zij_inc_size_label,zijcont.inc_symbol_size_slider,zij_inc_color_butt,zij_inc_color_label,                                                                    zij_show_inc_edge_chbutt,zij_inc_edge_color_butt,zij_inc_edge_color_label,zij_inc_edge_width_label, zij_inc_edge_width_optionmenu],[],                                                            [[zijcont.show_inc_edge_var,[False],[zij_inc_edge_color_butt,zij_inc_edge_color_label,zij_inc_edge_width_label,zij_inc_edge_width_optionmenu]],                                                             [zijcont.error_scaling_var,["Size"],[zijcont.inc_symbol_size_slider,zij_inc_size_label]],                                                                [zijcont.error_scaling_var,["Color"],[zij_inc_color_butt,zij_inc_color_label]]]))        zij_show_inc_chbutt.pack(fill=tk1.X)        zij_inc_symbol_frm = tk1.Frame(zij_inc_frm,bd=2,relief=tk1.GROOVE)        zij_inc_symbol_frm.pack(fill=tk1.X)        zij_inc_symbol_frm.grid_columnconfigure(0, weight=1)        zij_inc_symbol_frm.grid_columnconfigure(3, weight=1)                  zij_inc_symbol_label = tk1.Label(zij_inc_symbol_frm, text="Inclination Symbol:",bd=1)        zij_inc_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont.inc_symbol_var = tk1.StringVar(zij_interior)        zijcont.inc_symbol_var.set(symbolchoices_dict_reverse[zijcont.inc_symbol])         zij_inc_symbolchoices_optionmenu = tk1.OptionMenu(zij_inc_symbol_frm, zijcont.inc_symbol_var, *symbolchoices_set)        zij_inc_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_inc_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij_incsize_frm = tk1.Frame(zij_inc_frm,bd=2,relief=tk1.GROOVE)        zij_incsize_frm.pack(fill=tk1.X)        zij_inc_size_label = tk1.Label(zij_incsize_frm, text="Inclination Symbol Size:")        zij_inc_size_label.pack(fill=tk1.X)        zijcont.inc_symbol_size_slider = Scale(zij_incsize_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont.inc_symbol_size_slider.set(zijcont.inc_size)        zijcont.inc_symbol_size_slider.pack(fill=tk1.X)        zij_inc_color_frm = tk1.Frame(zij_inc_frm,bd=2,relief=tk1.GROOVE)        zij_inc_color_frm.pack(fill=tk1.X)        zij_inc_color_frm.grid_columnconfigure(0, weight=1)        zij_inc_color_frm.grid_columnconfigure(3, weight=1)        zij_inc_color_butt = tk1.Button(zij_inc_color_frm,text="Select Inclination\nSymbol Color", command= lambda: getcolor(zij_master,"zijcont.inc_color_temp","Zijderveld Inclination Symbol",                                                                                                                             zij_inc_color_label,zij_inc_color_frm,False))        zij_inc_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_inc_color_label = tk1.Label(zij_inc_color_frm,text="Current\nColor:\n%s" % zijcont.inc_color_temp,fg=getoppositecolor(zijcont.inc_color_temp), bg=zijcont.inc_color_temp,width=10)        zij_inc_color_label.grid(row=0, column=2,sticky='NSEW')        zij_show_inc_edge_frm = tk1.Frame(zij_inc_frm,bd=2,relief=tk1.GROOVE)        zij_show_inc_edge_frm.pack(fill=tk1.X)        zijcont.show_inc_edge_var = tk1.BooleanVar(value=zijcont.show_inc_edge)        zij_show_inc_edge_chbutt = tk1.Checkbutton(zij_show_inc_edge_frm, text="Show Inclination Symbol Border?", variable=zijcont.show_inc_edge_var,command= lambda:                                              disablewidgets(zijcont.show_inc_edge_var,False,[zij_inc_edge_color_butt,zij_inc_edge_color_label,zij_inc_edge_width_label, zij_inc_edge_width_optionmenu],[],[]))        zij_show_inc_edge_chbutt.pack(fill=tk1.X)        zij_inc_edge_color_frm = tk1.Frame(zij_inc_frm,bd=2,relief=tk1.GROOVE)        zij_inc_edge_color_frm.pack(fill=tk1.X)        zij_inc_edge_color_frm.grid_columnconfigure(0, weight=1)        zij_inc_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij_inc_edge_color_butt = tk1.Button(zij_inc_edge_color_frm,text="Select Inclination\nSymbol Border Color", command= lambda: getcolor(zij_master,"zijcont.inc_edge_color_temp","Zijderveld Inclination Symbol Edge",                                                                                                                                              zij_inc_edge_color_label,zij_inc_edge_color_frm,False))        zij_inc_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_inc_edge_color_label = tk1.Label(zij_inc_edge_color_frm,text="Current\nColor:\n%s" % zijcont.inc_edge_color_temp,fg=getoppositecolor(zijcont.inc_edge_color_temp), bg=zijcont.inc_edge_color_temp,width=10)        zij_inc_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij_inc_edge_width_frm = tk1.Frame(zij_inc_frm,bd=2,relief=tk1.GROOVE)        zij_inc_edge_width_frm.pack(fill=tk1.X)        zij_inc_edge_width_frm.grid_columnconfigure(0, weight=1)        zij_inc_edge_width_frm.grid_columnconfigure(3, weight=1)        zij_inc_edge_width_label = tk1.Label(zij_inc_edge_width_frm, text="Inclination Symbol Border Width:")        zij_inc_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont.inc_edge_width_var = tk1.IntVar(zij_interior)        zijcont.inc_edge_width_var.set(zijcont.inc_edge_width)         zij_inc_edge_width_optionmenu = tk1.OptionMenu(zij_inc_edge_width_frm, zijcont.inc_edge_width_var, *linewidthchoices_set)        zij_inc_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_inc_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont.show_inc_edge_var,False,[zij_inc_edge_color_butt,zij_inc_edge_color_label,zij_inc_edge_width_label, zij_inc_edge_width_optionmenu],[],[])        disablewidgets(zijcont.show_inc_var,False,[zij_inc_symbol_label,zij_inc_symbolchoices_optionmenu,zij_inc_size_label,zijcont.inc_symbol_size_slider,zij_inc_color_butt,zij_inc_color_label,                                                  zij_show_inc_edge_chbutt,zij_inc_edge_color_butt,zij_inc_edge_color_label,zij_inc_edge_width_label, zij_inc_edge_width_optionmenu],[],                       [[zijcont.show_inc_edge_var,[False],[zij_inc_edge_color_butt,zij_inc_edge_color_label,zij_inc_edge_width_label, zij_inc_edge_width_optionmenu]]])        disablewidgets(zijcont.error_scaling_var,"Size",[zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider],                   [zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label],[])        disablewidgets(zijcont.error_scaling_var,"Color",[zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label],                   [zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider],[])        disablewidgets(zijcont.error_scaling_var,"None",[],[zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label,                zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider,zij_dec_size_label,zij_inc_size_label],                [[zijcont.show_dec_var,[False],[zij_dec_color_butt,zij_dec_color_label,zijcont.dec_symbol_size_slider,zij_dec_size_label]],                [zijcont.show_inc_var,[False],[zij_inc_color_butt,zij_inc_color_label,zijcont.inc_symbol_size_slider,zij_inc_size_label]]])        disablewidgets(zijcont.error_scaling_var,"Size",[zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider,zij_dec_size_label,zij_inc_size_label],                [zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label],                [[zijcont.show_dec_var,[False],[zij_dec_color_butt,zij_dec_color_label]],[zijcont.show_inc_var,[False],[zij_inc_color_butt,zij_inc_color_label]]])        disablewidgets(zijcont.error_scaling_var,"Color",[zij_dec_color_butt,zij_dec_color_label,zij_inc_color_butt,zij_inc_color_label],                [zijcont.dec_symbol_size_slider,zijcont.inc_symbol_size_slider,zij_dec_size_label,zij_inc_size_label],                [[zijcont.show_dec_var,[False],[zijcont.dec_symbol_size_slider,zij_dec_size_label]],[zijcont.show_inc_var,[False],[zijcont.inc_symbol_size_slider,zij_inc_size_label]]])        zij_col3_frm = tk1.Frame(zij_interior,bd=2) # Column 3        zij_col3_frm.grid(row=0,column=3,sticky='NSEW')        zij_firststep_frm = tk1.Frame(zij_col3_frm,bd=2,relief=tk1.SUNKEN)        zij_firststep_frm.pack(fill=tk1.X)        zij_firststep_symbol_settings_label = tk1.Label(zij_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij_firststep_symbol_settings_label.pack(fill=tk1.X)        zij_show_firststep_frm = tk1.Frame(zij_firststep_frm,bd=2,relief=tk1.GROOVE)        zij_show_firststep_frm.pack(fill=tk1.X)        zijcont.show_firststep_var = tk1.BooleanVar(value=zijcont.show_firststep)        zij_show_firststep_chbutt = tk1.Checkbutton(zij_show_firststep_frm, text="Show First Step Special Symbol?", variable=zijcont.show_firststep_var,command= lambda:                                              disablewidgets(zijcont.show_firststep_var,False,[zij_firststep_symbol_label,zij_firststep_symbolchoices_optionmenu,zij_firststep_size_label,zijcont.firststep_symbol_size_slider,                                                                                             zij_firststep_color_butt,zij_firststep_color_label,zij_show_firststep_edge_chbutt,zij_firststep_edge_color_butt,zij_firststep_edge_color_label,                                                                                             zij_firststep_edge_width_label,zij_firststep_edge_width_optionmenu],[],                                    [[zijcont.show_firststep_edge_var,[False],[zij_firststep_edge_color_butt,zij_firststep_edge_color_label,zij_firststep_edge_width_label,zij_firststep_edge_width_optionmenu]]]))        zij_show_firststep_chbutt.pack(fill=tk1.X)        zij_firststep_symbol_frm = tk1.Frame(zij_firststep_frm,bd=2,relief=tk1.GROOVE)        zij_firststep_symbol_frm.pack(fill=tk1.X)        zij_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        zij_firststep_symbol_frm.grid_columnconfigure(3, weight=1)                  zij_firststep_symbol_label = tk1.Label(zij_firststep_symbol_frm, text="First Step Symbol:",bd=1)        zij_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont.firststep_symbol_var = tk1.StringVar(zij_interior)        zijcont.firststep_symbol_var.set(symbolchoices_dict_reverse[zijcont.firststep_symbol])         zij_firststep_symbolchoices_optionmenu = tk1.OptionMenu(zij_firststep_symbol_frm, zijcont.firststep_symbol_var, *symbolchoices_set)        zij_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij_firststep_size_frm = tk1.Frame(zij_firststep_frm,bd=2,relief=tk1.GROOVE)        zij_firststep_size_frm.pack(fill=tk1.X)        zij_firststep_size_label = tk1.Label(zij_firststep_size_frm, text="First Step Symbol Size:")        zij_firststep_size_label.pack(fill=tk1.X)        zijcont.firststep_symbol_size_slider = Scale(zij_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont.firststep_symbol_size_slider.set(zijcont.firststep_size)        zijcont.firststep_symbol_size_slider.pack(fill=tk1.X)        zij_firststep_color_frm = tk1.Frame(zij_firststep_frm,bd=2,relief=tk1.GROOVE)        zij_firststep_color_frm.pack(fill=tk1.X)        zij_firststep_color_frm.grid_columnconfigure(0, weight=1)        zij_firststep_color_frm.grid_columnconfigure(3, weight=1)                        zij_firststep_color_butt = tk1.Button(zij_firststep_color_frm,text="Select First Step\nSymbol Color", command= lambda: getcolor(zij_master,"zijcont.firststep_color_temp","Zijderveld First Step Symbol",                                                                                                                                        zij_firststep_color_label,zij_firststep_color_frm,False))        zij_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_firststep_color_label = tk1.Label(zij_firststep_color_frm,text="Current\nColor:\n%s" % zijcont.firststep_color_temp,fg=getoppositecolor(zijcont.firststep_color_temp), bg=zijcont.firststep_color_temp,width=10)        zij_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        zij_show_firststep_edge_frm = tk1.Frame(zij_firststep_frm,bd=2,relief=tk1.GROOVE)        zij_show_firststep_edge_frm.pack(fill=tk1.X)        zijcont.show_firststep_edge_var = tk1.BooleanVar(value=zijcont.show_firststep_edge)        zij_show_firststep_edge_chbutt = tk1.Checkbutton(zij_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=zijcont.show_firststep_edge_var,command= lambda:                                              disablewidgets(zijcont.show_firststep_edge_var,False,[zij_firststep_edge_color_butt,zij_firststep_edge_color_label,zij_firststep_edge_width_label,zij_firststep_edge_width_optionmenu],[],[]))        zij_show_firststep_edge_chbutt.pack(fill=tk1.X)                zij_firststep_edge_color_frm = tk1.Frame(zij_firststep_frm,bd=2,relief=tk1.GROOVE)        zij_firststep_edge_color_frm.pack(fill=tk1.X)        zij_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        zij_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij_firststep_edge_color_butt = tk1.Button(zij_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color", command= lambda: getcolor(zij_master,"zijcont.firststep_edge_color_temp","Zijderveld First Step Symbol Edge",                                                                                                                                                         zij_firststep_edge_color_label,zij_firststep_edge_color_frm,False))        zij_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_firststep_edge_color_label = tk1.Label(zij_firststep_edge_color_frm,text="Current\nColor:\n%s" % zijcont.firststep_edge_color_temp,fg=getoppositecolor(zijcont.firststep_edge_color_temp), bg=zijcont.firststep_edge_color_temp,width=10)        zij_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij_firststep_edge_width_frm = tk1.Frame(zij_firststep_frm,bd=2,relief=tk1.GROOVE)        zij_firststep_edge_width_frm.pack(fill=tk1.X)        zij_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        zij_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        zij_firststep_edge_width_label = tk1.Label(zij_firststep_edge_width_frm, text="First Step Symbol Border Width:")        zij_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont.firststep_edge_width_var = tk1.IntVar(zij_interior)        zijcont.firststep_edge_width_var.set(zijcont.firststep_edge_width)         zij_firststep_edge_width_optionmenu = tk1.OptionMenu(zij_firststep_edge_width_frm, zijcont.firststep_edge_width_var, *linewidthchoices_set)        zij_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont.show_firststep_edge_var,False,[zij_firststep_edge_color_butt,zij_firststep_edge_color_label,zij_firststep_edge_width_label,zij_firststep_edge_width_optionmenu],[],[])        disablewidgets(zijcont.show_firststep_var,False,[zij_firststep_symbol_label,zij_firststep_symbolchoices_optionmenu,zij_firststep_size_label,zijcont.firststep_symbol_size_slider,zij_firststep_color_butt,zij_firststep_color_label,                                                       zij_show_firststep_edge_chbutt,zij_firststep_edge_color_butt,zij_firststep_edge_color_label,zij_firststep_edge_width_label,zij_firststep_edge_width_optionmenu],[],                       [[zijcont.show_firststep_edge_var,[False],[zij_firststep_edge_color_butt,zij_firststep_edge_color_label,zij_firststep_edge_width_label,zij_firststep_edge_width_optionmenu]]])        zij_laststep_frm = tk1.Frame(zij_col3_frm,bd=2,relief=tk1.SUNKEN)        zij_laststep_frm.pack(fill=tk1.X)        zij_laststep_symbol_settings_label = tk1.Label(zij_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij_laststep_symbol_settings_label.pack(fill=tk1.X)        zij_show_laststep_frm = tk1.Frame(zij_laststep_frm,bd=2,relief=tk1.GROOVE)        zij_show_laststep_frm.pack(fill=tk1.X)        zijcont.show_laststep_var = tk1.BooleanVar(value=zijcont.show_laststep)        zij_show_laststep_chbutt = tk1.Checkbutton(zij_show_laststep_frm, text="Show Last Step Special Symbol?", variable=zijcont.show_laststep_var,command= lambda:                                              disablewidgets(zijcont.show_laststep_var,False,[zij_laststep_symbol_label,zij_laststep_symbolchoices_optionmenu,zij_laststep_size_label,zijcont.laststep_symbol_size_slider,                                                                                             zij_laststep_color_butt,zij_laststep_color_label,zij_show_laststep_edge_chbutt,zij_laststep_edge_color_butt,zij_laststep_edge_color_label,                                                                                              zij_laststep_edge_width_label,zij_laststep_edge_width_optionmenu],[],                                                             [[zijcont.show_laststep_edge_var,[False],[zij_laststep_edge_color_butt,zij_laststep_edge_color_label,zij_laststep_edge_width_label,zij_laststep_edge_width_optionmenu]]]))        zij_show_laststep_chbutt.pack(fill=tk1.X)        zij_laststep_symbol_frm = tk1.Frame(zij_laststep_frm,bd=2,relief=tk1.GROOVE)        zij_laststep_symbol_frm.pack(fill=tk1.X)        zij_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        zij_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  zij_laststep_symbol_label = tk1.Label(zij_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        zij_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont.laststep_symbol_var = tk1.StringVar(zij_interior)        zijcont.laststep_symbol_var.set(symbolchoices_dict_reverse[zijcont.laststep_symbol])         zij_laststep_symbolchoices_optionmenu = tk1.OptionMenu(zij_laststep_symbol_frm, zijcont.laststep_symbol_var, *symbolchoices_set)        zij_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij_laststep_size_frm = tk1.Frame(zij_laststep_frm,bd=2,relief=tk1.GROOVE)        zij_laststep_size_frm.pack(fill=tk1.X)        zij_laststep_size_label = tk1.Label(zij_laststep_size_frm, text="Last Step Symbol Size:")        zij_laststep_size_label.pack(fill=tk1.X)        zijcont.laststep_symbol_size_slider = Scale(zij_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont.laststep_symbol_size_slider.set(zijcont.laststep_size)        zijcont.laststep_symbol_size_slider.pack(fill=tk1.X)        zij_laststep_color_frm = tk1.Frame(zij_laststep_frm,bd=2,relief=tk1.GROOVE)        zij_laststep_color_frm.pack(fill=tk1.X)        zij_laststep_color_frm.grid_columnconfigure(0, weight=1)        zij_laststep_color_frm.grid_columnconfigure(3, weight=1)                        zij_laststep_color_butt = tk1.Button(zij_laststep_color_frm,text="Select Last Step\nSymbol Color", command= lambda: getcolor(zij_master,"zijcont.laststep_color_temp","Zijderveld Last Step Symbol",                                                                                                                                     zij_laststep_color_label,zij_laststep_color_frm,False))        zij_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_laststep_color_label = tk1.Label(zij_laststep_color_frm,text="Current\nColor:\n%s" % zijcont.laststep_color_temp,fg=getoppositecolor(zijcont.laststep_color_temp), bg=zijcont.laststep_color_temp,width=10)        zij_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        zij_show_laststep_edge_frm = tk1.Frame(zij_laststep_frm,bd=2,relief=tk1.GROOVE)        zij_show_laststep_edge_frm.pack(fill=tk1.X)        zijcont.show_laststep_edge_var = tk1.BooleanVar(value=zijcont.show_laststep_edge)        zij_show_laststep_edge_chbutt = tk1.Checkbutton(zij_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=zijcont.show_laststep_edge_var,command= lambda:                                              disablewidgets(zijcont.show_laststep_edge_var,False,[zij_laststep_edge_color_butt,zij_laststep_edge_color_label,zij_laststep_edge_width_label,zij_laststep_edge_width_optionmenu],[],[]))        zij_show_laststep_edge_chbutt.pack(fill=tk1.X)        zij_laststep_edge_color_frm = tk1.Frame(zij_laststep_frm,bd=2,relief=tk1.GROOVE)        zij_laststep_edge_color_frm.pack(fill=tk1.X)        zij_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        zij_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij_laststep_edge_color_butt = tk1.Button(zij_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color", command= lambda: getcolor(zij_master,"zijcont.laststep_edge_color_temp","Zijderveld Last Step Symbol Edge",                                                                                                                                                      zij_laststep_edge_color_label,zij_laststep_edge_color_frm,False))        zij_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_laststep_edge_color_label = tk1.Label(zij_laststep_edge_color_frm,text="Current\nColor:\n%s" % zijcont.laststep_edge_color_temp,fg=getoppositecolor(zijcont.laststep_edge_color_temp), bg=zijcont.laststep_edge_color_temp,width=10)        zij_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij_laststep_edge_width_frm = tk1.Frame(zij_laststep_frm,bd=2,relief=tk1.GROOVE)        zij_laststep_edge_width_frm.pack(fill=tk1.X)        zij_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        zij_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        zij_laststep_edge_width_label = tk1.Label(zij_laststep_edge_width_frm, text="Last Step Symbol Border Width:")        zij_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont.laststep_edge_width_var = tk1.IntVar(zij_interior)        zijcont.laststep_edge_width_var.set(zijcont.laststep_edge_width)         zij_laststep_edge_width_optionmenu = tk1.OptionMenu(zij_laststep_edge_width_frm, zijcont.laststep_edge_width_var, *linewidthchoices_set)        zij_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont.show_laststep_edge_var,False,[zij_laststep_edge_color_butt,zij_laststep_edge_color_label,zij_laststep_edge_width_label,zij_laststep_edge_width_optionmenu],[],[])        disablewidgets(zijcont.show_laststep_var,False,[zij_laststep_symbol_label,zij_laststep_symbolchoices_optionmenu,zij_laststep_size_label,zijcont.laststep_symbol_size_slider,                            zij_laststep_color_butt,zij_laststep_color_label,zij_show_laststep_edge_chbutt,zij_laststep_edge_color_butt,zij_laststep_edge_color_label,                                zij_laststep_edge_width_label,zij_laststep_edge_width_optionmenu],[],            [[zijcont.show_laststep_edge_var,[False],[zij_laststep_edge_color_butt,zij_laststep_edge_color_label,zij_laststep_edge_width_label,zij_laststep_edge_width_optionmenu]]])                zij_col4_frm = tk1.Frame(zij_interior,bd=2) # Column 4        zij_col4_frm.grid(row=0,column=4,sticky='NSEW')        zij_axesspecs_frm = tk1.Frame(zij_col4_frm,bd=2,relief=tk1.SUNKEN)        zij_axesspecs_frm.pack(fill=tk1.X)        zij_axesspecs_label = tk1.Label(zij_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        zij_axesspecs_label.pack(fill=tk1.X)        zij_show_axes_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_show_axes_frm.pack(fill=tk1.X)        zijcont.show_axes_var = tk1.BooleanVar(value=zijcont.show_axes)        zij_show_axes_chbutt = tk1.Checkbutton(zij_show_axes_frm, text="Show Axes?", variable=zijcont.show_axes_var,command= lambda: disablewidgets(zijcont.show_axes_var,False,                                                                                                                                               [zij_axis_width_label,zij_axis_width_optionmenu,zij_axes_color_butt,zij_axes_color_label],[],[]))        zij_show_axes_chbutt.pack(fill=tk1.X)        zij_axis_width_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_axis_width_frm.pack(fill=tk1.X)        zij_axis_width_frm.grid_columnconfigure(0, weight=1)        zij_axis_width_frm.grid_columnconfigure(3, weight=1)        zij_axis_width_label = tk1.Label(zij_axis_width_frm, text="Axes Width:")        zij_axis_width_label.grid(row=0, column=1, sticky='NSEW')        zijcont.axis_width_var = tk1.IntVar(zij_interior)        zijcont.axis_width_var.set(zijcont.axis_width)         zij_axis_width_optionmenu = tk1.OptionMenu(zij_axis_width_frm, zijcont.axis_width_var, *linewidthchoices_set)        zij_axis_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_axis_width_optionmenu.configure(font=('Consolas',10))        zij_axes_color_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_axes_color_frm.pack(fill=tk1.X)        zij_axes_color_frm.grid_columnconfigure(0, weight=1)        zij_axes_color_frm.grid_columnconfigure(3, weight=1)                        zij_axes_color_butt = tk1.Button(zij_axes_color_frm,text="Select Axes Color", command= lambda: getcolor(zij_master,"zijcont.axes_color_temp","Zijderveld Axes",zij_axes_color_label,zij_axes_color_frm,False))        zij_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_axes_color_label = tk1.Label(zij_axes_color_frm,text="Current\nColor:\n%s" % zijcont.axes_color_temp,fg=getoppositecolor(zijcont.axes_color_temp), bg=zijcont.axes_color_temp,width=10)        zij_axes_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(zijcont.show_axes_var,False,[zij_axis_width_label,zij_axis_width_optionmenu,zij_axes_color_butt,zij_axes_color_label],[],[])        zij_show_labels_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_show_labels_frm.pack(fill=tk1.X)        zijcont.show_labels_var = tk1.BooleanVar(value=zijcont.show_labels)        zij_show_label_chbutt = tk1.Checkbutton(zij_show_labels_frm, text="Show Axes Labels?", variable=zijcont.show_labels_var,                                         command= lambda: disablewidgets(zijcont.show_labels_var,False,                                                                         [zij_label_fontsize_label,zij_label_fontsize_optionmenu,zij_label_color_butt,zij_label_color_label],[],[]))        zij_show_label_chbutt.pack(fill=tk1.X)        zij_label_fontsize_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_label_fontsize_frm.pack(fill=tk1.X)        zij_label_fontsize_frm.grid_columnconfigure(0, weight=1)        zij_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    zij_label_fontsize_label = tk1.Label(zij_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        zij_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        zijcont.label_fontsize_var = tk1.StringVar(zij_interior)        zijcont.label_fontsize_var.set(zijcont.label_fontsize_mod)         zij_label_fontsize_optionmenu = tk1.OptionMenu(zij_label_fontsize_frm, zijcont.label_fontsize_var, *fontsizes_set)        zij_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        zij_label_fontsize_optionmenu.configure(font=('Consolas',10))        zij_label_color_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_label_color_frm.pack(fill=tk1.X)        zij_label_color_frm.grid_columnconfigure(0, weight=1)        zij_label_color_frm.grid_columnconfigure(3, weight=1)                        zij_label_color_butt = tk1.Button(zij_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(zij_master,"zijcont.label_color_temp","Zijderveld label",zij_label_color_label,zij_label_color_frm,False))        zij_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_label_color_label = tk1.Label(zij_label_color_frm,text="Current\nColor:\n%s" % zijcont.label_color_temp,fg=getoppositecolor(zijcont.label_color_temp), bg=zijcont.label_color_temp,width=10)        zij_label_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(zijcont.show_labels_var,False,[zij_label_fontsize_label,zij_label_fontsize_optionmenu,zij_label_color_butt,zij_label_color_label],[],[])        zij_show_ticks_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_show_ticks_frm.pack(fill=tk1.X)        zijcont.show_ticks_var = tk1.BooleanVar(value=zijcont.show_ticks)        zij_show_ticks_chbutt = tk1.Checkbutton(zij_show_ticks_frm, text="Show Ticks?", variable=zijcont.show_ticks_var,                                          command= lambda: disablewidgets(zijcont.show_ticks_var,False,                                                                          [zij_tick_width_label,zij_tick_width_optionmenu,zij_tick_length_label,zij_tick_length_optionmenu,zij_tick_color_butt,                                                                           zij_tick_color_label,zij_ticknum_label,zijcont.ticknumslider],[],[]))        zij_show_ticks_chbutt.pack(fill=tk1.X)        zij_tick_width_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_tick_width_frm.pack(fill=tk1.X)        zij_tick_width_frm.grid_columnconfigure(0, weight=1)        zij_tick_width_frm.grid_columnconfigure(3, weight=1)        zij_tick_width_label = tk1.Label(zij_tick_width_frm, text="Tick Width:")        zij_tick_width_label.grid(row=0, column=1, sticky='NSEW')        zijcont.tick_width_var = tk1.IntVar(zij_interior)        zijcont.tick_width_var.set(zijcont.tick_width)         zij_tick_width_optionmenu = tk1.OptionMenu(zij_tick_width_frm, zijcont.tick_width_var, *linewidthchoices_set)        zij_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_tick_width_optionmenu.configure(font=('Consolas',10))        zij_tick_length_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_tick_length_frm.pack(fill=tk1.X)        zij_tick_length_frm.grid_columnconfigure(0, weight=1)        zij_tick_length_frm.grid_columnconfigure(3, weight=1)        zij_tick_length_label = tk1.Label(zij_tick_length_frm, text="Tick length:")        zij_tick_length_label.grid(row=0, column=1, sticky='NSEW')        zijcont.tick_length_var = tk1.IntVar(zij_interior)        zijcont.tick_length_var.set(zijcont.tick_length)         zij_tick_length_optionmenu = tk1.OptionMenu(zij_tick_length_frm, zijcont.tick_length_var, *linewidthchoices_set)        zij_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij_tick_length_optionmenu.configure(font=('Consolas',10))        zij_tick_color_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_tick_color_frm.pack(fill=tk1.X)        zij_tick_color_frm.grid_columnconfigure(0, weight=1)        zij_tick_color_frm.grid_columnconfigure(3, weight=1)                        zij_tick_color_butt = tk1.Button(zij_tick_color_frm,text="Select Tick Color", command= lambda: getcolor(zij_master,"zijcont.tick_color_temp","Zijderveld tick",zij_tick_color_label,zij_tick_color_frm,False))        zij_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij_tick_color_label = tk1.Label(zij_tick_color_frm,text="Current\nColor:\n%s" % zijcont.tick_color_temp,fg=getoppositecolor(zijcont.tick_color_temp), bg=zijcont.tick_color_temp,width=10)        zij_tick_color_label.grid(row=0, column=2,sticky='NSEW')                zij_ticknum_frm = tk1.Frame(zij_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij_ticknum_frm.pack(fill=tk1.X)        zij_ticknum_label = tk1.Label(zij_ticknum_frm, text="Maximum Number of Ticks per axis\n(smaller values shrink plot size):")        zij_ticknum_label.pack(fill=tk1.X)        zijcont.ticknumslider = Scale(zij_ticknum_frm, from_=10, to=100,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        zijcont.ticknumslider.set(zijcont.numticks)        zijcont.ticknumslider.pack(fill=tk1.X)        disablewidgets(zijcont.show_ticks_var,False,[zij_tick_width_label,zij_tick_width_optionmenu,zij_tick_length_label,zij_tick_length_optionmenu,zij_tick_color_butt,zij_tick_color_label,zij_ticknum_label,zijcont.ticknumslider],[],[])                zij_submit_butt_frm = tk1.Frame(zij_interior,bd=2,relief=tk1.RIDGE)        zij_submit_butt_frm.grid(row=2,column=0, columnspan=5, sticky='NSEW')        zij_submit_butt = tk1.Button(zij_submit_butt_frm, text="Submit and Save Changes and Update Zijderveld Sample Plot", command= lambda: submitzijcontrols(self,zijcont,zij_master))        zij_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij_submit_butt.configure(font=('Consolas bold',12))        zij_reset_butt = tk1.Button(zij_submit_butt_frm, text="Reset Zijderveld Sample Plot to Defaults", command= lambda: zij_resetdefaults(self,zij_master))        zij_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij_reset_butt.configure(font=('Consolas',10))        zij_cancel_butt = tk1.Button(zij_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(zij_master))        zij_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij_cancel_butt.configure(font=('Consolas',10))        tk1.mainloop()    returndef zijcontrols_step(self):    global zij2_master, zijcont2    try:        'normal' == zij2_master.state()        zij2_master.lift()        zij2_master.attributes('-topmost',True)        zij2_master.after_idle(zij2_master.attributes,'-topmost',False)    except:        zij2_master = tk1.Toplevel(root)        zij2_master.focus_set()        zij2_master.title("Zijderveld Plot Controls (Step Data)")        zij2_master.geometry("+10+10")                zijcont2.arrowline_color_temp = zijcont2.arrowline_color # set color temps        zijcont2.printstep_color_temp = zijcont2.printstep_color        zijcont2.dec_color_temp = zijcont2.dec_color        zijcont2.inc_color_temp = zijcont2.inc_color        zijcont2.dec_edge_color_temp = zijcont2.dec_edge_color        zijcont2.inc_edge_color_temp = zijcont2.inc_edge_color        zijcont2.firststep_color_temp = zijcont2.firststep_color        zijcont2.laststep_color_temp = zijcont2.laststep_color        zijcont2.firststep_edge_color_temp = zijcont2.firststep_edge_color        zijcont2.laststep_edge_color_temp = zijcont2.laststep_edge_color        zijcont2.axes_color_temp = zijcont2.axes_color        zijcont2.tick_color_temp = zijcont2.tick_color        zijcont2.label_color_temp = zijcont2.label_color        zijcont2.title_color_temp = zijcont2.title_color        zijcont2.legend_color_temp = zijcont2.legend_color        zij2_vertical_scrollbar = tk1.Scrollbar(zij2_master,orient=tk1.VERTICAL)        zij2_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        zij2_horizontal_scrollbar = tk1.Scrollbar(zij2_master,orient=tk1.HORIZONTAL)        zij2_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.zij2_canvas = tk1.Canvas(zij2_master, bd=0, highlightthickness=0,yscrollcommand=zij2_vertical_scrollbar.set,xscrollcommand=zij2_horizontal_scrollbar.set,width=1200,height=725,scrollregion=(0,0,1200,725))        self.zij2_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        zij2_vertical_scrollbar.config(command=self.zij2_canvas.yview)        zij2_horizontal_scrollbar.config(command=self.zij2_canvas.xview)        self.zij2_canvas.xview_moveto(0)        self.zij2_canvas.yview_moveto(0)        zij2_interior = tk1.Frame(self.zij2_canvas,width=500,height=500)        zij2_interior_id = self.zij2_canvas.create_window(0, 0, window=zij2_interior,anchor=tk1.NW)                zij2_col0_frm = tk1.Frame(zij2_interior,bd=2) # Column 0        zij2_col0_frm.grid(row=0,column=0,sticky='NSEW')                zij2_printsteps_frm = tk1.Frame(zij2_col0_frm,bd=2,relief=tk1.SUNKEN)        zij2_printsteps_frm.pack(fill=tk1.X)                zij2_step_settings_label = tk1.Label(zij2_printsteps_frm, text="Sample Label Settings:",font="Helvetica 12 bold")        zij2_step_settings_label.grid(row=0, column=0, sticky='NSEW')        zij2_selectprintsteps_frm = tk1.Frame(zij2_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij2_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        zij2_selectdecprintsteps_frm = tk1.Frame(zij2_selectprintsteps_frm,bd=2,relief=tk1.GROOVE)        zij2_selectdecprintsteps_frm.pack(side=tk1.LEFT)        zij2_selectdecsteps_main_label = tk1.Label(zij2_selectdecprintsteps_frm, text="Declination Labels", font="Helvetica 10 bold")        zij2_selectdecsteps_main_label.grid(row=0, column=0, sticky='NSEW')        zij2_selectdecsteps_label = tk1.Label(zij2_selectdecprintsteps_frm, text="Select which Sample\nLabels to NOT Print:")        zij2_selectdecsteps_label.grid(row=1, column=0, sticky='NSEW')        zijcont2.printdecsteplist_box = tk1.Listbox(zij2_selectdecprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, sample in enumerate(self.sitesteptext):            zijcont2.printdecsteplist_box.insert(tk1.END,sample.samplename)            zijcont2.printdecsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.zij2_printdeclabel):                zijcont2.printdecsteplist_box.select_set(stepoffindex)                      zijcont2.printdecsteplist_box.grid(row=2,column=0,sticky='NSEW')        zijcont2.printdecsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("zijcont2.printdecsteplist_box"))        zijcont2.printdecsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("zijcont2.printdecsteplist_box"))        zijcont2.printdec_scrollbar = tk1.Scrollbar(zijcont2.printdecsteplist_box,orient=tk1.VERTICAL)        zijcont2.printdec_scrollbar.config(command=zijcont2.printdecsteplist_box.yview)        zijcont2.printdecsteplist_box.config(yscrollcommand=zijcont2.printdec_scrollbar.set)        zijcont2.printdec_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont2.printdecsteplist_box.bind("<Enter>", lambda x: enterzij2_printdecsteplistbox(self))        zijcont2.printdecsteplist_box.bind("<Leave>", lambda x: leavezij2_printdecsteplistbox(self))        zij2_show_allsteps_butt = tk1.Button(zij2_selectdecprintsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: zijcont2.printdecsteplist_box.selection_clear(0, tk1.END))        zij2_show_allsteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        zij2_show_nosteps_butt = tk1.Button(zij2_selectdecprintsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: zijcont2.printdecsteplist_box.selection_set(0, tk1.END))        zij2_show_nosteps_butt.grid(row=4,column=0, sticky='NSEW',padx=10,pady=5)        zij2_selectincprintsteps_frm = tk1.Frame(zij2_selectprintsteps_frm,bd=2,relief=tk1.GROOVE)        zij2_selectincprintsteps_frm.pack(side=tk1.LEFT)        zij2_selectincsteps_main_label = tk1.Label(zij2_selectincprintsteps_frm, text="Inclination Labels", font="Helvetica 10 bold")        zij2_selectincsteps_main_label.grid(row=0, column=0, sticky='NSEW')        zij2_selectincsteps_label = tk1.Label(zij2_selectincprintsteps_frm, text="Select which Sample\nLabels to NOT Print:")        zij2_selectincsteps_label.grid(row=1, column=0, sticky='NSEW')        zijcont2.printincsteplist_box = tk1.Listbox(zij2_selectincprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, sample in enumerate(self.sitesteptext):            zijcont2.printincsteplist_box.insert(tk1.END,sample.samplename)            zijcont2.printincsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.zij2_printinclabel):                zijcont2.printincsteplist_box.select_set(stepoffindex)                      zijcont2.printincsteplist_box.grid(row=2,column=0,sticky='NSEW')        zijcont2.printincsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("zijcont2.printincsteplist_box"))        zijcont2.printincsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("zijcont2.printincsteplist_box"))        zijcont2.printinc_scrollbar = tk1.Scrollbar(zijcont2.printincsteplist_box,orient=tk1.VERTICAL)        zijcont2.printinc_scrollbar.config(command=zijcont2.printincsteplist_box.yview)        zijcont2.printincsteplist_box.config(yscrollcommand=zijcont2.printinc_scrollbar.set)        zijcont2.printinc_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont2.printincsteplist_box.bind("<Enter>", lambda x: enterzij2_printincsteplistbox(self))        zijcont2.printincsteplist_box.bind("<Leave>", lambda x: leavezij2_printincsteplistbox(self))        zij2_show_allsteps_butt = tk1.Button(zij2_selectincprintsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: zijcont2.printincsteplist_box.selection_clear(0, tk1.END))        zij2_show_allsteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        zij2_show_nosteps_butt = tk1.Button(zij2_selectincprintsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: zijcont2.printincsteplist_box.selection_set(0, tk1.END))        zij2_show_nosteps_butt.grid(row=4,column=0, sticky='NSEW',padx=10,pady=5)        zij2_printstep_color_frm = tk1.Frame(zij2_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij2_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        zij2_printstep_color_frm.grid_columnconfigure(0, weight=1)        zij2_printstep_color_frm.grid_columnconfigure(3, weight=1)                        zij2_printstep_color_butt = tk1.Button(zij2_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(zij2_master,"zijcont2.printstep_color_temp","Zijderveld Step Labels",                                                                                                                                zij2_printstep_color_label,zij2_printstep_color_frm,False))        zij2_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_printstep_color_label = tk1.Label(zij2_printstep_color_frm,text="Current\nColor:\n%s" % zijcont2.printstep_color_temp,fg=getoppositecolor(zijcont2.printstep_color_temp), bg=zijcont2.printstep_color_temp,width=10)        zij2_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        zij2_step_fontsize_frm = tk1.Frame(zij2_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij2_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        zij2_step_fontsize_frm.grid_columnconfigure(0, weight=1)        zij2_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    zij2_step_fontsize_label = tk1.Label(zij2_step_fontsize_frm, text="Step Font Size:",bd=1)        zij2_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        zijcont2.step_fontsize_mod_var = tk1.StringVar(zij2_interior)        zijcont2.step_fontsize_mod_var.set(zijcont2.step_fontsize_mod)         zij2_step_fontsize_optionmenu = tk1.OptionMenu(zij2_step_fontsize_frm, zijcont2.step_fontsize_mod_var, *fontsizes_set)        zij2_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        zij2_step_fontsize_optionmenu.configure(font=('Consolas',10))        zij2_showannot_frm = tk1.Frame(zij2_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij2_showannot_frm.grid(row=6, column=0,sticky='NSEW')        zijcont2.show_popupannotations_var = tk1.BooleanVar(value=zijcont2.show_popupannotations)        zij2_show_popupannotations_chbutt = tk1.Checkbutton(zij2_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=zijcont2.show_popupannotations_var)        zij2_show_popupannotations_chbutt.pack(fill=tk1.X)                zij2_col1_frm = tk1.Frame(zij2_interior,bd=2) # Column 1        zij2_col1_frm.grid(row=0,column=1,sticky='NSEW')        zij2_legend_settings_frm = tk1.Frame(zij2_col1_frm,bd=2,relief=tk1.SUNKEN)        zij2_legend_settings_frm.pack(fill=tk1.X)        zij2_legend_settings_label = tk1.Label(zij2_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        zij2_legend_settings_label.pack(fill=tk1.X)                zij2_show_title_frm = tk1.Frame(zij2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        zij2_show_title_frm.pack(fill=tk1.X)        zijcont2.show_title_var = tk1.BooleanVar(value=zijcont2.show_title)        zij2_show_title_chbutt = tk1.Checkbutton(zij2_show_title_frm, text="Show Title?", variable=zijcont2.show_title_var,command= lambda:                                              disablewidgets(zijcont2.show_title_var,False,[zij2_title_color_butt,zij2_title_color_label],[],[]))        zij2_show_title_chbutt.pack(fill=tk1.X)        zij2_title_color_frm = tk1.Frame(zij2_show_title_frm,bd=2,relief=tk1.GROOVE)        zij2_title_color_frm.pack(fill=tk1.X)        zij2_title_color_frm.grid_columnconfigure(0, weight=1)        zij2_title_color_frm.grid_columnconfigure(3, weight=1)        zij2_title_color_butt = tk1.Button(zij2_title_color_frm,text="Select Title Color", command= lambda: getcolor(zij2_master,"zijcont2.title_color_temp","Zijderveld Title",zij2_title_color_label,zij2_title_color_frm,False))        zij2_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij2_title_color_label = tk1.Label(zij2_title_color_frm,text="Current\nColor:\n%s" % zijcont2.title_color_temp,fg=getoppositecolor(zijcont2.title_color_temp), bg=zijcont2.title_color_temp,width=10)        zij2_title_color_label.grid(row=0,column=2)        disablewidgets(zijcont2.show_title_var,False,[zij2_title_color_butt,zij2_title_color_label],[],[])        zij2_show_legend_frm = tk1.Frame(zij2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        zij2_show_legend_frm.pack(fill=tk1.X)        zijcont2.show_legend_var = tk1.BooleanVar(value=zijcont2.show_legend)        zij2_show_legend_chbutt = tk1.Checkbutton(zij2_show_legend_frm, text="Show Legend?", variable=zijcont2.show_legend_var,command= lambda:                                              disablewidgets(zijcont2.show_legend_var,False,[zij2_legend_color_butt,zij2_legend_color_label],[],[]))        zij2_show_legend_chbutt.pack(fill=tk1.X)        zij2_legend_color_frm = tk1.Frame(zij2_show_legend_frm,bd=2,relief=tk1.GROOVE)        zij2_legend_color_frm.pack(fill=tk1.X)        zij2_legend_color_frm.grid_columnconfigure(0, weight=1)        zij2_legend_color_frm.grid_columnconfigure(3, weight=1)        zij2_legend_color_butt = tk1.Button(zij2_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(zij2_master,"zijcont2.legend_color_temp","Zijderveld Legend",zij2_legend_color_label,zij2_legend_color_frm,False))        zij2_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij2_legend_color_label = tk1.Label(zij2_legend_color_frm,text="Current\nColor:\n%s" % zijcont2.legend_color_temp,fg=getoppositecolor(zijcont2.legend_color_temp), bg=zijcont2.legend_color_temp,width=10)        zij2_legend_color_label.grid(row=0,column=2)        disablewidgets(zijcont2.show_legend_var,False,[zij2_legend_color_butt,zij2_legend_color_label],[],[])        zij2_error_settings_frm = tk1.Frame(zij2_col1_frm,bd=2,relief=tk1.SUNKEN)        zij2_error_settings_frm.pack(fill=tk1.X)        zij2_error_settings_label = tk1.Label(zij2_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        zij2_error_settings_label.pack(fill=tk1.X)                zij2_error_radio_frm = tk1.Frame(zij2_error_settings_frm,bd=2,relief=tk1.GROOVE)        zij2_error_radio_frm.pack(fill=tk1.X)        zij2_error_settings_label = tk1.Label(zij2_error_radio_frm, text="Select Error-Scaling for Symbols:")        zij2_error_settings_label.pack(fill=tk1.X)        zijcont2.error_scaling_var = tk1.StringVar()        zijcont2.error_scaling_var.set(zijcont2.error_scaling)        zij2_errorscaling_radio_none = tk1.Radiobutton(zij2_error_radio_frm, text="No Error Scaling",variable=zijcont2.error_scaling_var,value="None",command = lambda:                                                      disablewidgets(zijcont2.error_scaling_var,"None",[],[zij2_dec_color_butt,zij2_dec_color_label,zij2_inc_color_butt,zij2_inc_color_label,                                                                                                          zijcont2.dec_symbol_size_slider,zijcont2.inc_symbol_size_slider,zij2_dec_size_label,zij2_inc_size_label],                                                                     [[zijcont2.show_dec_var,[False],[zij2_dec_color_butt,zij2_dec_color_label,zijcont2.dec_symbol_size_slider,zij2_dec_size_label]],                                                                        [zijcont2.show_inc_var,[False],[zij2_inc_color_butt,zij2_inc_color_label,zijcont2.inc_symbol_size_slider,zij2_inc_size_label]]]))        zij2_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        zij2_errorscaling_radio_size = tk1.Radiobutton(zij2_error_radio_frm, text="Scale Symbol Size by Error",variable=zijcont2.error_scaling_var,value="Size",command = lambda:                                                      disablewidgets(zijcont2.error_scaling_var,"Size",[zijcont2.dec_symbol_size_slider,zijcont2.inc_symbol_size_slider,zij2_dec_size_label,zij2_inc_size_label],                                                                     [zij2_dec_color_butt,zij2_dec_color_label,zij2_inc_color_butt,zij2_inc_color_label],                                                                     [[zijcont2.show_dec_var,[False],[zij2_dec_color_butt,zij2_dec_color_label]],                                                                      [zijcont2.show_inc_var,[False],[zij2_inc_color_butt,zij2_inc_color_label]]]))        zij2_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        zij2_errorscaling_radio_color = tk1.Radiobutton(zij2_error_radio_frm, text="Scale Symbol Color By Error",variable=zijcont2.error_scaling_var,value="Color",command = lambda:                                                       disablewidgets(zijcont2.error_scaling_var,"Color",[zij2_dec_color_butt,zij2_dec_color_label,zij2_inc_color_butt,zij2_inc_color_label]                                                                      ,[zijcont2.dec_symbol_size_slider,zijcont2.inc_symbol_size_slider,zij2_dec_size_label,zij2_inc_size_label],                                                                      [[zijcont2.show_dec_var,[False],[zijcont2.dec_symbol_size_slider,zij2_dec_size_label]],                                                                       [zijcont2.show_inc_var,[False],[zijcont2.inc_symbol_size_slider,zij2_inc_size_label]]]))        zij2_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        zij2_col2_frm = tk1.Frame(zij2_interior,bd=2) # Column 2        zij2_col2_frm.grid(row=0,column=2,sticky='NSEW')        zij2_dec_frm = tk1.Frame(zij2_col2_frm,bd=2,relief=tk1.SUNKEN)        zij2_dec_frm.pack(fill=tk1.X)        zij2_dec_symbol_settings_label = tk1.Label(zij2_dec_frm, text="Declination Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij2_dec_symbol_settings_label.pack(fill=tk1.X)        zij2_show_dec_frm = tk1.Frame(zij2_dec_frm,bd=2,relief=tk1.GROOVE)        zij2_show_dec_frm.pack(fill=tk1.X)        zijcont2.show_dec_var = tk1.BooleanVar(value=zijcont2.show_dec)        zij2_show_dec_chbutt = tk1.Checkbutton(zij2_show_dec_frm, text="Show Declination Points?", variable=zijcont2.show_dec_var,command= lambda:                                              disablewidgets(zijcont2.show_dec_var,False,[zij2_dec_symbol_label,zij2_dec_symbolchoices_optionmenu,zij2_dec_size_label,zijcont2.dec_symbol_size_slider,zij2_dec_color_butt,zij2_dec_color_label,                                                                    zij2_show_dec_edge_chbutt,zij2_dec_edge_color_butt,zij2_dec_edge_color_label,zij2_dec_edge_width_label, zij2_dec_edge_width_optionmenu],[],                                                                    [[zijcont2.show_dec_edge_var,[False],[zij2_dec_edge_color_butt,zij2_dec_edge_color_label,zij2_dec_edge_width_label,zij2_dec_edge_width_optionmenu]],                                                                                             [zijcont2.error_scaling_var,["Size"],[zijcont2.dec_symbol_size_slider,zij2_dec_size_label]],                                                                                            [zijcont2.error_scaling_var,["Color"],[zij2_dec_color_butt,zij2_dec_color_label]]]))        zij2_show_dec_chbutt.pack(fill=tk1.X)        zij2_dec_symbol_frm = tk1.Frame(zij2_dec_frm,bd=2,relief=tk1.GROOVE)        zij2_dec_symbol_frm.pack(fill=tk1.X)        zij2_dec_symbol_frm.grid_columnconfigure(0, weight=1)        zij2_dec_symbol_frm.grid_columnconfigure(3, weight=1)                zij2_dec_symbol_label = tk1.Label(zij2_dec_symbol_frm, text="Declination Symbol:",bd=1)        zij2_dec_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont2.dec_symbol_var = tk1.StringVar(zij2_interior)        zijcont2.dec_symbol_var.set(symbolchoices_dict_reverse[zijcont2.dec_symbol])         zij2_dec_symbolchoices_optionmenu = tk1.OptionMenu(zij2_dec_symbol_frm, zijcont2.dec_symbol_var, *symbolchoices_set)        zij2_dec_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij2_dec_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij2_dec_size_frm = tk1.Frame(zij2_dec_frm,bd=2,relief=tk1.GROOVE)        zij2_dec_size_frm.pack(fill=tk1.X)        zij2_dec_size_label = tk1.Label(zij2_dec_size_frm, text="Declination Symbol Size:")        zij2_dec_size_label.pack(fill=tk1.X)        zijcont2.dec_symbol_size_slider = Scale(zij2_dec_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont2.dec_symbol_size_slider.set(zijcont2.dec_size)        zijcont2.dec_symbol_size_slider.pack(fill=tk1.X)        zij2_dec_color_frm = tk1.Frame(zij2_dec_frm,bd=2,relief=tk1.GROOVE)        zij2_dec_color_frm.pack(fill=tk1.X)        zij2_dec_color_frm.grid_columnconfigure(0, weight=1)        zij2_dec_color_frm.grid_columnconfigure(3, weight=1)        zij2_dec_color_butt = tk1.Button(zij2_dec_color_frm,text="Select Declination\nSymbol Color", command= lambda: getcolor(zij2_master,"zijcont2.dec_color_temp","Zijderveld Declination Symbol",zij2_dec_color_label,zij2_dec_color_frm,False))        zij2_dec_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_dec_color_label = tk1.Label(zij2_dec_color_frm,text="Current\nColor:\n%s" % zijcont2.dec_color_temp,fg=getoppositecolor(zijcont2.dec_color_temp), bg=zijcont2.dec_color_temp,width=10)        zij2_dec_color_label.grid(row=0, column=2,sticky='NSEW')                zij2_show_dec_edge_frm = tk1.Frame(zij2_dec_frm,bd=2,relief=tk1.GROOVE)        zij2_show_dec_edge_frm.pack(fill=tk1.X)        zijcont2.show_dec_edge_var = tk1.BooleanVar(value=zijcont2.show_dec_edge)        zij2_show_dec_edge_chbutt = tk1.Checkbutton(zij2_show_dec_edge_frm, text="Show Declination Symbol Border?", variable=zijcont2.show_dec_edge_var,command= lambda:                                              disablewidgets(zijcont2.show_dec_edge_var,False,[zij2_dec_edge_color_butt,zij2_dec_edge_color_label,zij2_dec_edge_width_label,zij2_dec_edge_width_optionmenu],[],[]))        zij2_show_dec_edge_chbutt.pack(fill=tk1.X)        zij2_dec_edge_color_frm = tk1.Frame(zij2_dec_frm,bd=2,relief=tk1.GROOVE)        zij2_dec_edge_color_frm.pack(fill=tk1.X)        zij2_dec_edge_color_frm.grid_columnconfigure(0, weight=1)        zij2_dec_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij2_dec_edge_color_butt = tk1.Button(zij2_dec_edge_color_frm,text="Select Declination\nSymbol Border Color", command= lambda: getcolor(zij2_master,"zijcont2.dec_edge_color_temp","Zijderveld Declination Symbol Edge",                                                                                                                                              zij2_dec_edge_color_label,zij2_dec_edge_color_frm,False))        zij2_dec_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_dec_edge_color_label = tk1.Label(zij2_dec_edge_color_frm,text="Current\nColor:\n%s" % zijcont2.dec_edge_color_temp,fg=getoppositecolor(zijcont2.dec_edge_color_temp), bg=zijcont2.dec_edge_color_temp,width=10)        zij2_dec_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij2_dec_edge_width_frm = tk1.Frame(zij2_dec_frm,bd=2,relief=tk1.GROOVE)        zij2_dec_edge_width_frm.pack(fill=tk1.X)        zij2_dec_edge_width_frm.grid_columnconfigure(0, weight=1)        zij2_dec_edge_width_frm.grid_columnconfigure(3, weight=1)        zij2_dec_edge_width_label = tk1.Label(zij2_dec_edge_width_frm, text="Declination Symbol Border Width:")        zij2_dec_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont2.dec_edge_width_var = tk1.IntVar(zij2_interior)        zijcont2.dec_edge_width_var.set(zijcont2.dec_edge_width)         zij2_dec_edge_width_optionmenu = tk1.OptionMenu(zij2_dec_edge_width_frm, zijcont2.dec_edge_width_var, *linewidthchoices_set)        zij2_dec_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij2_dec_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont2.show_dec_edge_var,False,[zij2_dec_edge_color_butt,zij2_dec_edge_color_label,zij2_dec_edge_width_label,zij2_dec_edge_width_optionmenu],[],[])        disablewidgets(zijcont2.show_dec_var,False,[zij2_dec_symbol_label,zij2_dec_symbolchoices_optionmenu,zij2_dec_size_label,zijcont2.dec_symbol_size_slider,zij2_dec_color_butt,zij2_dec_color_label,                                                                                       zij2_show_dec_edge_chbutt,zij2_dec_edge_color_butt,zij2_dec_edge_color_label,zij2_dec_edge_width_label, zij2_dec_edge_width_optionmenu],[],                                                                                       [[zijcont2.show_dec_edge_var,[False],[zij2_dec_edge_color_butt,zij2_dec_edge_color_label,zij2_dec_edge_width_label,zij2_dec_edge_width_optionmenu]]])                zij2_inc_frm = tk1.Frame(zij2_col2_frm,bd=2,relief=tk1.SUNKEN)        zij2_inc_frm.pack(fill=tk1.X)        zij2_inc_symbol_settings_label = tk1.Label(zij2_inc_frm, text="Inclination Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij2_inc_symbol_settings_label.pack(fill=tk1.X)        zij2_show_inc_frm = tk1.Frame(zij2_inc_frm,bd=2,relief=tk1.GROOVE)        zij2_show_inc_frm.pack(fill=tk1.X)        zijcont2.show_inc_var = tk1.BooleanVar(value=zijcont2.show_inc)        zij2_show_inc_chbutt = tk1.Checkbutton(zij2_show_inc_frm, text="Show Inclination Points?", variable=zijcont2.show_inc_var,command= lambda:                                              disablewidgets(zijcont2.show_inc_var,False,[zij2_inc_symbol_label,zij2_inc_symbolchoices_optionmenu,zij2_inc_size_label,zijcont2.inc_symbol_size_slider,zij2_inc_color_butt,zij2_inc_color_label,                                                                                       zij2_show_inc_edge_chbutt,zij2_inc_edge_color_butt,zij2_inc_edge_color_label,zij2_inc_edge_width_label, zij2_inc_edge_width_optionmenu],[],                                                             [[zijcont2.show_inc_edge_var,[False],[zij2_inc_edge_color_butt,zij2_inc_edge_color_label,zij2_inc_edge_width_label, zij2_inc_edge_width_optionmenu]],                                                              [zijcont2.error_scaling_var,["Size"],[zijcont2.inc_symbol_size_slider,zij2_inc_size_label]],                                                                [zijcont2.error_scaling_var,["Color"],[zij2_inc_color_butt,zij2_inc_color_label]]]))        zij2_show_inc_chbutt.pack(fill=tk1.X)        zij2_inc_symbol_frm = tk1.Frame(zij2_inc_frm,bd=2,relief=tk1.GROOVE)        zij2_inc_symbol_frm.pack(fill=tk1.X)        zij2_inc_symbol_frm.grid_columnconfigure(0, weight=1)        zij2_inc_symbol_frm.grid_columnconfigure(3, weight=1)                  zij2_inc_symbol_label = tk1.Label(zij2_inc_symbol_frm, text="Inclination Symbol:",bd=1)        zij2_inc_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont2.inc_symbol_var = tk1.StringVar(zij2_interior)        zijcont2.inc_symbol_var.set(symbolchoices_dict_reverse[zijcont2.inc_symbol])         zij2_inc_symbolchoices_optionmenu = tk1.OptionMenu(zij2_inc_symbol_frm, zijcont2.inc_symbol_var, *symbolchoices_set)        zij2_inc_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij2_inc_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij2_incsize_frm = tk1.Frame(zij2_inc_frm,bd=2,relief=tk1.GROOVE)        zij2_incsize_frm.pack(fill=tk1.X)        zij2_inc_size_label = tk1.Label(zij2_incsize_frm, text="Inclination Symbol Size:")        zij2_inc_size_label.pack(fill=tk1.X)        zijcont2.inc_symbol_size_slider = Scale(zij2_incsize_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont2.inc_symbol_size_slider.set(zijcont2.inc_size)        zijcont2.inc_symbol_size_slider.pack(fill=tk1.X)        zij2_inc_color_frm = tk1.Frame(zij2_inc_frm,bd=2,relief=tk1.GROOVE)        zij2_inc_color_frm.pack(fill=tk1.X)        zij2_inc_color_frm.grid_columnconfigure(0, weight=1)        zij2_inc_color_frm.grid_columnconfigure(3, weight=1)        zij2_inc_color_butt = tk1.Button(zij2_inc_color_frm,text="Select Inclination\nSymbol Color", command= lambda: getcolor(zij2_master,"zijcont2.inc_color_temp","Zijderveld Inclination Symbol",                                                                                                                             zij2_inc_color_label,zij2_inc_color_frm,False))        zij2_inc_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_inc_color_label = tk1.Label(zij2_inc_color_frm,text="Current\nColor:\n%s" % zijcont2.inc_color_temp,fg=getoppositecolor(zijcont2.inc_color_temp), bg=zijcont2.inc_color_temp,width=10)        zij2_inc_color_label.grid(row=0, column=2,sticky='NSEW')        zij2_show_inc_edge_frm = tk1.Frame(zij2_inc_frm,bd=2,relief=tk1.GROOVE)        zij2_show_inc_edge_frm.pack(fill=tk1.X)        zijcont2.show_inc_edge_var = tk1.BooleanVar(value=zijcont2.show_inc_edge)        zij2_show_inc_edge_chbutt = tk1.Checkbutton(zij2_show_inc_edge_frm, text="Show Inclination Symbol Border?", variable=zijcont2.show_inc_edge_var,command= lambda:                                              disablewidgets(zijcont2.show_inc_edge_var,False,[zij2_inc_edge_color_butt,zij2_inc_edge_color_label,zij2_inc_edge_width_label, zij2_inc_edge_width_optionmenu],[],[]))        zij2_show_inc_edge_chbutt.pack(fill=tk1.X)        zij2_inc_edge_color_frm = tk1.Frame(zij2_inc_frm,bd=2,relief=tk1.GROOVE)        zij2_inc_edge_color_frm.pack(fill=tk1.X)        zij2_inc_edge_color_frm.grid_columnconfigure(0, weight=1)        zij2_inc_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij2_inc_edge_color_butt = tk1.Button(zij2_inc_edge_color_frm,text="Select Inclination\nSymbol Border Color", command= lambda: getcolor(zij2_master,"zijcont2.inc_edge_color_temp","Zijderveld Inclination Symbol Edge",                                                                                                                                              zij2_inc_edge_color_label,zij2_inc_edge_color_frm,False))        zij2_inc_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_inc_edge_color_label = tk1.Label(zij2_inc_edge_color_frm,text="Current\nColor:\n%s" % zijcont2.inc_edge_color_temp,fg=getoppositecolor(zijcont2.inc_edge_color_temp), bg=zijcont2.inc_edge_color_temp,width=10)        zij2_inc_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij2_inc_edge_width_frm = tk1.Frame(zij2_inc_frm,bd=2,relief=tk1.GROOVE)        zij2_inc_edge_width_frm.pack(fill=tk1.X)        zij2_inc_edge_width_frm.grid_columnconfigure(0, weight=1)        zij2_inc_edge_width_frm.grid_columnconfigure(3, weight=1)        zij2_inc_edge_width_label = tk1.Label(zij2_inc_edge_width_frm, text="Inclination Symbol Border Width:")        zij2_inc_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont2.inc_edge_width_var = tk1.IntVar(zij2_interior)        zijcont2.inc_edge_width_var.set(zijcont2.inc_edge_width)         zij2_inc_edge_width_optionmenu = tk1.OptionMenu(zij2_inc_edge_width_frm, zijcont2.inc_edge_width_var, *linewidthchoices_set)        zij2_inc_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij2_inc_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont2.show_inc_edge_var,False,[zij2_inc_edge_color_butt,zij2_inc_edge_color_label,zij2_inc_edge_width_label, zij2_inc_edge_width_optionmenu],[],[])        disablewidgets(zijcont2.show_inc_var,False,[zij2_inc_symbol_label,zij2_inc_symbolchoices_optionmenu,zij2_inc_size_label,zijcont2.inc_symbol_size_slider,zij2_inc_color_butt,zij2_inc_color_label,                zij2_show_inc_edge_chbutt,zij2_inc_edge_color_butt,zij2_inc_edge_color_label,zij2_inc_edge_width_label, zij2_inc_edge_width_optionmenu],[],                [[zijcont2.show_inc_edge_var,[False],[zij2_inc_edge_color_butt,zij2_inc_edge_color_label,zij2_inc_edge_width_label, zij2_inc_edge_width_optionmenu]]])        disablewidgets(zijcont2.error_scaling_var,"None",[],[zij2_dec_color_butt,zij2_dec_color_label,zij2_inc_color_butt,zij2_inc_color_label,                zijcont2.dec_symbol_size_slider,zijcont2.inc_symbol_size_slider,zij2_dec_size_label,zij2_inc_size_label],                [[zijcont2.show_dec_var,[False],[zij2_dec_color_butt,zij2_dec_color_label,zijcont2.dec_symbol_size_slider,zij2_dec_size_label]],                [zijcont2.show_inc_var,[False],[zij2_inc_color_butt,zij2_inc_color_label,zijcont2.inc_symbol_size_slider,zij2_inc_size_label]]])        disablewidgets(zijcont2.error_scaling_var,"Size",[zijcont2.dec_symbol_size_slider,zijcont2.inc_symbol_size_slider,zij2_dec_size_label,zij2_inc_size_label],                [zij2_dec_color_butt,zij2_dec_color_label,zij2_inc_color_butt,zij2_inc_color_label],                [[zijcont2.show_dec_var,[False],[zij2_dec_color_butt,zij2_dec_color_label]],[zijcont2.show_inc_var,[False],[zij2_inc_color_butt,zij2_inc_color_label]]])        disablewidgets(zijcont2.error_scaling_var,"Color",[zij2_dec_color_butt,zij2_dec_color_label,zij2_inc_color_butt,zij2_inc_color_label],                [zijcont2.dec_symbol_size_slider,zijcont2.inc_symbol_size_slider,zij2_dec_size_label,zij2_inc_size_label],                [[zijcont2.show_dec_var,[False],[zijcont2.dec_symbol_size_slider,zij2_dec_size_label]],[zijcont2.show_inc_var,[False],[zijcont2.inc_symbol_size_slider,zij2_inc_size_label]]])        zij2_col3_frm = tk1.Frame(zij2_interior,bd=2) # Column 3        zij2_col3_frm.grid(row=0,column=3,sticky='NSEW')        zij2_axesspecs_frm = tk1.Frame(zij2_col3_frm,bd=2,relief=tk1.SUNKEN)        zij2_axesspecs_frm.pack(fill=tk1.X)        zij2_axesspecs_label = tk1.Label(zij2_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        zij2_axesspecs_label.pack(fill=tk1.X)        zij2_show_axes_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_show_axes_frm.pack(fill=tk1.X)        zijcont2.show_axes_var = tk1.BooleanVar(value=zijcont2.show_axes)        zij2_show_axes_chbutt = tk1.Checkbutton(zij2_show_axes_frm, text="Show Axes?", variable=zijcont2.show_axes_var,command= lambda: disablewidgets(zijcont2.show_axes_var,False,                                                                                                                                               [zij2_axis_width_label,zij2_axis_width_optionmenu,zij2_axes_color_butt,zij2_axes_color_label],[],[]))        zij2_show_axes_chbutt.pack(fill=tk1.X)        zij2_axis_width_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_axis_width_frm.pack(fill=tk1.X)        zij2_axis_width_frm.grid_columnconfigure(0, weight=1)        zij2_axis_width_frm.grid_columnconfigure(3, weight=1)        zij2_axis_width_label = tk1.Label(zij2_axis_width_frm, text="Axes Width:")        zij2_axis_width_label.grid(row=0, column=1, sticky='NSEW')        zijcont2.axis_width_var = tk1.IntVar(zij2_interior)        zijcont2.axis_width_var.set(zijcont2.axis_width)         zij2_axis_width_optionmenu = tk1.OptionMenu(zij2_axis_width_frm, zijcont2.axis_width_var, *linewidthchoices_set)        zij2_axis_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij2_axis_width_optionmenu.configure(font=('Consolas',10))        zij2_axes_color_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_axes_color_frm.pack(fill=tk1.X)        zij2_axes_color_frm.grid_columnconfigure(0, weight=1)        zij2_axes_color_frm.grid_columnconfigure(3, weight=1)                        zij2_axes_color_butt = tk1.Button(zij2_axes_color_frm,text="Select Axes Color", command= lambda: getcolor(zij2_master,"zijcont2.axes_color_temp","Zijderveld Axes",zij2_axes_color_label,zij2_axes_color_frm,False))        zij2_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_axes_color_label = tk1.Label(zij2_axes_color_frm,text="Current\nColor:\n%s" % zijcont2.axes_color_temp,fg=getoppositecolor(zijcont2.axes_color_temp), bg=zijcont2.axes_color_temp,width=10)        zij2_axes_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(zijcont2.show_axes_var,False,[zij2_axis_width_label,zij2_axis_width_optionmenu,zij2_axes_color_butt,zij2_axes_color_label],[],[])        zij2_show_labels_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_show_labels_frm.pack(fill=tk1.X)        zijcont2.show_labels_var = tk1.BooleanVar(value=zijcont2.show_labels)        zij2_show_label_chbutt = tk1.Checkbutton(zij2_show_labels_frm, text="Show Axes Labels?", variable=zijcont2.show_labels_var,                                         command= lambda: disablewidgets(zijcont2.show_labels_var,False,                                                                         [zij2_label_fontsize_label,zij2_label_fontsize_optionmenu,zij2_label_color_butt,zij2_label_color_label],[],[]))        zij2_show_label_chbutt.pack(fill=tk1.X)        zij2_label_fontsize_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_label_fontsize_frm.pack(fill=tk1.X)        zij2_label_fontsize_frm.grid_columnconfigure(0, weight=1)        zij2_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    zij2_label_fontsize_label = tk1.Label(zij2_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        zij2_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        zijcont2.label_fontsize_var = tk1.StringVar(zij2_interior)        zijcont2.label_fontsize_var.set(zijcont2.label_fontsize_mod)         zij2_label_fontsize_optionmenu = tk1.OptionMenu(zij2_label_fontsize_frm, zijcont2.label_fontsize_var, *fontsizes_set)        zij2_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        zij2_label_fontsize_optionmenu.configure(font=('Consolas',10))        zij2_label_color_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_label_color_frm.pack(fill=tk1.X)        zij2_label_color_frm.grid_columnconfigure(0, weight=1)        zij2_label_color_frm.grid_columnconfigure(3, weight=1)                        zij2_label_color_butt = tk1.Button(zij2_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(zij2_master,"zijcont2.label_color_temp","Zijderveld label",zij2_label_color_label,zij2_label_color_frm,False))        zij2_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_label_color_label = tk1.Label(zij2_label_color_frm,text="Current\nColor:\n%s" % zijcont2.label_color_temp,fg=getoppositecolor(zijcont2.label_color_temp), bg=zijcont2.label_color_temp,width=10)        zij2_label_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(zijcont2.show_labels_var,False,[zij2_label_fontsize_label,zij2_label_fontsize_optionmenu,zij2_label_color_butt,zij2_label_color_label],[],[])        zij2_show_ticks_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_show_ticks_frm.pack(fill=tk1.X)        zijcont2.show_ticks_var = tk1.BooleanVar(value=zijcont2.show_ticks)        zij2_show_ticks_chbutt = tk1.Checkbutton(zij2_show_ticks_frm, text="Show Ticks?", variable=zijcont2.show_ticks_var,                                          command= lambda: disablewidgets(zijcont2.show_ticks_var,False,                                                                          [zij2_tick_width_label,zij2_tick_width_optionmenu,zij2_tick_length_label,zij2_tick_length_optionmenu,zij2_tick_color_butt,                                                                           zij2_tick_color_label,zij2_ticknum_label,zijcont2.ticknumslider],[],[]))        zij2_show_ticks_chbutt.pack(fill=tk1.X)        zij2_tick_width_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_tick_width_frm.pack(fill=tk1.X)        zij2_tick_width_frm.grid_columnconfigure(0, weight=1)        zij2_tick_width_frm.grid_columnconfigure(3, weight=1)        zij2_tick_width_label = tk1.Label(zij2_tick_width_frm, text="Tick Width:")        zij2_tick_width_label.grid(row=0, column=1, sticky='NSEW')        zijcont2.tick_width_var = tk1.IntVar(zij2_interior)        zijcont2.tick_width_var.set(zijcont2.tick_width)         zij2_tick_width_optionmenu = tk1.OptionMenu(zij2_tick_width_frm, zijcont2.tick_width_var, *linewidthchoices_set)        zij2_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij2_tick_width_optionmenu.configure(font=('Consolas',10))        zij2_tick_length_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_tick_length_frm.pack(fill=tk1.X)        zij2_tick_length_frm.grid_columnconfigure(0, weight=1)        zij2_tick_length_frm.grid_columnconfigure(3, weight=1)        zij2_tick_length_label = tk1.Label(zij2_tick_length_frm, text="Tick length:")        zij2_tick_length_label.grid(row=0, column=1, sticky='NSEW')        zijcont2.tick_length_var = tk1.IntVar(zij2_interior)        zijcont2.tick_length_var.set(zijcont2.tick_length)         zij2_tick_length_optionmenu = tk1.OptionMenu(zij2_tick_length_frm, zijcont2.tick_length_var, *linewidthchoices_set)        zij2_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij2_tick_length_optionmenu.configure(font=('Consolas',10))        zij2_tick_color_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_tick_color_frm.pack(fill=tk1.X)        zij2_tick_color_frm.grid_columnconfigure(0, weight=1)        zij2_tick_color_frm.grid_columnconfigure(3, weight=1)                        zij2_tick_color_butt = tk1.Button(zij2_tick_color_frm,text="Select Tick Color", command= lambda: getcolor(zij2_master,"zijcont2.tick_color_temp","Zijderveld tick",zij2_tick_color_label,zij2_tick_color_frm,False))        zij2_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij2_tick_color_label = tk1.Label(zij2_tick_color_frm,text="Current\nColor:\n%s" % zijcont2.tick_color_temp,fg=getoppositecolor(zijcont2.tick_color_temp), bg=zijcont2.tick_color_temp,width=10)        zij2_tick_color_label.grid(row=0, column=2,sticky='NSEW')                zij2_ticknum_frm = tk1.Frame(zij2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij2_ticknum_frm.pack(fill=tk1.X)        zij2_ticknum_label = tk1.Label(zij2_ticknum_frm, text="Maximum Number of Ticks per axis\n(smaller values shrink plot size):")        zij2_ticknum_label.pack(fill=tk1.X)        zijcont2.ticknumslider = Scale(zij2_ticknum_frm, from_=10, to=100,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        zijcont2.ticknumslider.set(zijcont2.numticks)        zijcont2.ticknumslider.pack(fill=tk1.X)        disablewidgets(zijcont2.show_ticks_var,False,[zij2_tick_width_label,zij2_tick_width_optionmenu,zij2_tick_length_label,zij2_tick_length_optionmenu,zij2_tick_color_butt,zij2_tick_color_label,zij2_ticknum_label,zijcont2.ticknumslider],[],[])                zij2_submit_butt_frm = tk1.Frame(zij2_interior,bd=2,relief=tk1.RIDGE)        zij2_submit_butt_frm.grid(row=2,column=0, columnspan=5, sticky='NSEW')        zij2_submit_butt = tk1.Button(zij2_submit_butt_frm, text="Submit and Save Changes and Update Zijderveld Step Plot", command= lambda: submitzij2controls(self,zijcont2,zij2_master))        zij2_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij2_submit_butt.configure(font=('Consolas bold',12))        zij2_reset_butt = tk1.Button(zij2_submit_butt_frm, text="Reset Zijderveld Step Plot to Defaults", command= lambda: zij2_resetdefaults(self,zij2_master))        zij2_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij2_reset_butt.configure(font=('Consolas',10))        zij2_cancel_butt = tk1.Button(zij2_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(zij2_master))        zij2_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij2_cancel_butt.configure(font=('Consolas',10))        tk1.mainloop()    returndef zijcontrols_multiple(self):    global zij3_master, zijcont3##    if zij3_master != None and zij3_master.winfo_exists():##    else: # Create zij3_master control window    try:        'normal' == zij3_master.state()        zij3_master.lift()        zij3_master.attributes('-topmost',True)        zij3_master.after_idle(zij3_master.attributes,'-topmost',False)    except:        zij3_master = tk1.Toplevel(root)        zij3_master.focus_set()        zij3_master.title("Zijderveld Plot Controls (Multiple)")        zij3_master.geometry("+10+10")        zijcont3.printsamp_color_temp = zijcont3.printsamp_color        zijcont3.arrowline_color_temp = zijcont3.arrowline_color # set color temps        zijcont3.printstep_color_temp = zijcont3.printstep_color        zijcont3.dec_color_temp = zijcont3.dec_color        zijcont3.inc_color_temp = zijcont3.inc_color        zijcont3.dec_edge_color_temp = zijcont3.dec_edge_color        zijcont3.inc_edge_color_temp = zijcont3.inc_edge_color        zijcont3.firststep_color_temp = zijcont3.firststep_color        zijcont3.laststep_color_temp = zijcont3.laststep_color        zijcont3.firststep_edge_color_temp = zijcont3.firststep_edge_color        zijcont3.laststep_edge_color_temp = zijcont3.laststep_edge_color        zijcont3.axes_color_temp = zijcont3.axes_color        zijcont3.tick_color_temp = zijcont3.tick_color        zijcont3.label_color_temp = zijcont3.label_color        zijcont3.title_color_temp = zijcont3.title_color        zijcont3.legend_color_temp = zijcont3.legend_color        zij3_vertical_scrollbar = tk1.Scrollbar(zij3_master,orient=tk1.VERTICAL)        zij3_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        zij3_horizontal_scrollbar = tk1.Scrollbar(zij3_master,orient=tk1.HORIZONTAL)        zij3_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.zij3_canvas = tk1.Canvas(zij3_master, bd=0, highlightthickness=0,yscrollcommand=zij3_vertical_scrollbar.set,xscrollcommand=zij3_horizontal_scrollbar.set,width=1780,height=730,scrollregion=(0,0,1780,730))        self.zij3_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        zij3_vertical_scrollbar.config(command=self.zij3_canvas.yview)        zij3_horizontal_scrollbar.config(command=self.zij3_canvas.xview)        self.zij3_canvas.xview_moveto(0)        self.zij3_canvas.yview_moveto(0)        zij3_interior = tk1.Frame(self.zij3_canvas,width=500,height=500)        zij3_interior_id = self.zij3_canvas.create_window(0, 0, window=zij3_interior,anchor=tk1.NW)                zij3_col0_frm = tk1.Frame(zij3_interior,bd=2) # Column 0        zij3_col0_frm.grid(row=0,column=0,sticky='NSEW')                zij3_printsamps_frm = tk1.Frame(zij3_col0_frm,bd=2,relief=tk1.SUNKEN)        zij3_printsamps_frm.pack(fill=tk1.X)                zij3_sample_settings_label = tk1.Label(zij3_printsamps_frm, text="Sample Label Settings:",font="Helvetica 12 bold")        zij3_sample_settings_label.grid(row=0, column=0, sticky='NSEW')        zij3_selectprintsamps_frm = tk1.Frame(zij3_printsamps_frm,bd=2,relief=tk1.GROOVE)        zij3_selectprintsamps_frm.grid(row=1,column=0,sticky='NSEW')        zij3_selectdecprintsamps_frm = tk1.Frame(zij3_selectprintsamps_frm,bd=2,relief=tk1.GROOVE)        zij3_selectdecprintsamps_frm.pack(side=tk1.LEFT)        zij3_selectdecsamps_main_label = tk1.Label(zij3_selectdecprintsamps_frm, text="Declination Labels", font="Helvetica 10 bold")        zij3_selectdecsamps_main_label.grid(row=0, column=0, sticky='NSEW')        zij3_selectdecsamps_label = tk1.Label(zij3_selectdecprintsamps_frm, text="Select which Sample\nDeclination Labels to NOT Print:")        zij3_selectdecsamps_label.grid(row=1, column=0, sticky='NSEW')        zijcont3.printdecsamplabel_box = tk1.Listbox(zij3_selectdecprintsamps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for sampoffindex, sample in enumerate(self.sitedata):            zijcont3.printdecsamplabel_box.insert(tk1.END,sample.name)            zijcont3.printdecsamplabel_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.zij_printdecname):                zijcont3.printdecsamplabel_box.select_set(sampoffindex)        zijcont3.printdecsamplabel_box.grid(row=2,column=0,sticky='NSEW')        zijcont3.printdecsamplabel_box.bind("<Control-Key-a>", lambda x: selectall_printsamplistbox("zijcont3.printdecsamplabel_box"))        zijcont3.printdecsamplabel_box.bind("<Control-Key-A>", lambda x: selectall_printsamplistbox("zijcont3.printdecsamplabel_box"))        zijcont3.printdecsamplabel_scrollbar = tk1.Scrollbar(zijcont3.printdecsamplabel_box,orient=tk1.VERTICAL)        zijcont3.printdecsamplabel_scrollbar.config(command=zijcont3.printdecsamplabel_box.yview)        zijcont3.printdecsamplabel_box.config(yscrollcommand=zijcont3.printdecsamplabel_scrollbar.set)        zijcont3.printdecsamplabel_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont3.printdecsamplabel_box.bind("<Enter>", lambda x: enterzij3_printdecsamplabelbox(self))        zijcont3.printdecsamplabel_box.bind("<Leave>", lambda x: leavezij3_printdecsamplabelbox(self))        zij3_show_alldecsamps_butt = tk1.Button(zij3_selectdecprintsamps_frm, text="Print ALL Sample\nDeclination Labels\n(Deselect All)", command= lambda: zijcont3.printdecsamplabel_box.selection_clear(0, tk1.END))        zij3_show_alldecsamps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        zij3_show_nodecsamps_butt = tk1.Button(zij3_selectdecprintsamps_frm, text="Print NO Sample\nDeclination Labels\n(Select All)", command= lambda: zijcont3.printdecsamplabel_box.selection_set(0, tk1.END))        zij3_show_nodecsamps_butt.grid(row=4,column=0, sticky='NSEW',padx=10,pady=5)        zij3_selectincprintsamps_frm = tk1.Frame(zij3_selectprintsamps_frm,bd=2,relief=tk1.GROOVE)        zij3_selectincprintsamps_frm.pack(side=tk1.LEFT)        zij3_selectincsamps_main_label = tk1.Label(zij3_selectincprintsamps_frm, text="Inclination Labels", font="Helvetica 10 bold")        zij3_selectincsamps_main_label.grid(row=0, column=0, sticky='NSEW')        zij3_selectincsamps_label = tk1.Label(zij3_selectincprintsamps_frm, text="Select which Sample\nInclination Labels to NOT Print:")        zij3_selectincsamps_label.grid(row=1, column=0, sticky='NSEW')        zijcont3.printincsamplabel_box = tk1.Listbox(zij3_selectincprintsamps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for sampoffindex, sample in enumerate(self.sitedata):            zijcont3.printincsamplabel_box.insert(tk1.END,sample.name)            zijcont3.printincsamplabel_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.zij_printincname):                zijcont3.printincsamplabel_box.select_set(sampoffindex)        zijcont3.printincsamplabel_box.grid(row=2,column=0,sticky='NSEW')        zijcont3.printincsamplabel_box.bind("<Control-Key-a>", lambda x: selectall_printsamplistbox("zijcont3.printincsamplabel_box"))        zijcont3.printincsamplabel_box.bind("<Control-Key-A>", lambda x: selectall_printsamplistbox("zijcont3.printincsamplabel_box"))        zijcont3.printincsamplabel_scrollbar = tk1.Scrollbar(zijcont3.printincsamplabel_box,orient=tk1.VERTICAL)        zijcont3.printincsamplabel_scrollbar.config(command=zijcont3.printincsamplabel_box.yview)        zijcont3.printincsamplabel_box.config(yscrollcommand=zijcont3.printincsamplabel_scrollbar.set)        zijcont3.printincsamplabel_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont3.printincsamplabel_box.bind("<Enter>", lambda x: enterzij3_printincsamplabelbox(self))        zijcont3.printincsamplabel_box.bind("<Leave>", lambda x: leavezij3_printincsamplabelbox(self))        zij3_show_allincsamps_butt = tk1.Button(zij3_selectincprintsamps_frm, text="Print ALL Sample\nInclination Labels\n(Deselect All)", command= lambda: zijcont3.printincsamplabel_box.selection_clear(0, tk1.END))        zij3_show_allincsamps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        zij3_show_noincsamps_butt = tk1.Button(zij3_selectincprintsamps_frm, text="Print NO Sample\nInclination Labels\n(Select All)", command= lambda: zijcont3.printincsamplabel_box.selection_set(0, tk1.END))        zij3_show_noincsamps_butt.grid(row=4,column=0, sticky='NSEW',padx=10,pady=5)        zij3_printsamps_color_frm = tk1.Frame(zij3_printsamps_frm,bd=2,relief=tk1.GROOVE)        zij3_printsamps_color_frm.grid(row=4,column=0,sticky='NSEW')        zij3_printsamps_color_frm.grid_columnconfigure(0, weight=1)        zij3_printsamps_color_frm.grid_columnconfigure(3, weight=1)                        zij3_printsamps_color_butt = tk1.Button(zij3_printsamps_color_frm,text="Select Sample Label Color", command= lambda: getcolor(zij3_master,"zijcont3.printsamp_color_temp","J/Jo Sample Labels",                                                                                                                                zij3_printsamps_color_label,zij3_printsamps_color_frm,False))        zij3_printsamps_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_printsamps_color_label = tk1.Label(zij3_printsamps_color_frm,text="Current\nColor:\n%s" % zijcont3.printsamp_color_temp,fg=getoppositecolor(zijcont3.printsamp_color_temp), bg=zijcont3.printsamp_color_temp,width=10)        zij3_printsamps_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_samps_fontsize_frm = tk1.Frame(zij3_printsamps_frm,bd=2,relief=tk1.GROOVE)        zij3_samps_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        zij3_samps_fontsize_frm.grid_columnconfigure(0, weight=1)        zij3_samps_fontsize_frm.grid_columnconfigure(3, weight=1)                    zij3_samps_fontsize_label = tk1.Label(zij3_samps_fontsize_frm, text="Sample Font Size:",bd=1)        zij3_samps_fontsize_label.grid(row=1, column=1,sticky='NSEW')        zijcont3.samp_fontsize_mod_var = tk1.StringVar(zij3_interior)        zijcont3.samp_fontsize_mod_var.set(zijcont3.samp_fontsize_mod)         zij3_samps_fontsize_optionmenu = tk1.OptionMenu(zij3_samps_fontsize_frm, zijcont3.samp_fontsize_mod_var, *fontsizes_set)        zij3_samps_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        zij3_samps_fontsize_optionmenu.configure(font=('Consolas',10))                zij3_showannot_frm = tk1.Frame(zij3_printsamps_frm,bd=2,relief=tk1.GROOVE)        zij3_showannot_frm.grid(row=6, column=0,sticky='NSEW')        zijcont3.show_popupannotations_var = tk1.BooleanVar(value=zijcont3.show_popupannotations)        zij3_show_popupannotations_chbutt = tk1.Checkbutton(zij3_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=zijcont3.show_popupannotations_var)        zij3_show_popupannotations_chbutt.pack(fill=tk1.X)                zij3_col1_frm = tk1.Frame(zij3_interior,bd=2) # Column 1        zij3_col1_frm.grid(row=0,column=1,sticky='NSEW')        zij3_printsteps_frm = tk1.Frame(zij3_col1_frm,bd=2,relief=tk1.SUNKEN)        zij3_printsteps_frm.pack(fill=tk1.X)                zij3_step_settings_label = tk1.Label(zij3_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        zij3_step_settings_label.grid(row=0, column=0, sticky='NSEW')        zij3_selectprintsteps_frm = tk1.Frame(zij3_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij3_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        zij3_selectsampleforprint_label = tk1.Label(zij3_selectprintsteps_frm, text="Select Sample to\nSelect Step Labels:")        zij3_selectsampleforprint_label.grid(row=0, column=0, sticky='NSEW')        zijcont3.sitedata = self.sitedata        zijcont3.printsamplist_box = tk1.Listbox(zij3_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.SINGLE,exportselection=0)        for sampoffindex, sample in enumerate(self.sitedata):            zijcont3.printsamplist_box.insert(tk1.END,sample.name)            zijcont3.printsamplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="WHITE")        zijcont3.printsamplist_box.select_set(0)        zijcont3.prevsamp = self.samplelist[zijcont3.printsamplist_box.curselection()[0]]        zijcont3.printsamplist_box.grid(row=1,column=0,sticky='NSEW')        zijcont3.printsamplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("zijcont3.printsamplist_box"))        zijcont3.printsamplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("zijcont3.printsamplist_box"))        zijcont3.printsamplist_scrollbar = tk1.Scrollbar(zijcont3.printsamplist_box,orient=tk1.VERTICAL)        zijcont3.printsamplist_scrollbar.config(command=zijcont3.printsamplist_box.yview)        zijcont3.printsamplist_box.config(yscrollcommand=zijcont3.printsamplist_scrollbar.set)        zijcont3.printsamplist_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont3.printsamplist_box.bind("<<ListboxSelect>>", lambda x: updatezij3steps(self)) # single-click sample to select        zijcont3.printsamplist_box.bind("<Enter>", lambda x: enterzij3_printsamplistbox(self))        zijcont3.printsamplist_box.bind("<Leave>", lambda x: leavezij3_printsamplistbox(self))        zij3_selectdecsteps_label = tk1.Label(zij3_selectprintsteps_frm, text="Select which Step Dec\nLabels to NOT Print:")        zij3_selectdecsteps_label.grid(row=0, column=1, sticky='NSEW')        zijcont3.printdecsteplist_box = tk1.Listbox(zij3_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sitedata[0].data):            zijcont3.printdecsteplist_box.insert(tk1.END,step.dmagstep)            zijcont3.printdecsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.zij_printdeclabel):                zijcont3.printdecsteplist_box.select_set(stepoffindex)        zijcont3.printdecsteplist_box.grid(row=1,column=1,sticky='NSEW')        zijcont3.printdecsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printdecsteplistbox("zijcont3.printdecsteplist_box"))        zijcont3.printdecsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printdecsteplistbox("zijcont3.printdecsteplist_box"))        zijcont3.print_decstepscrollbar = tk1.Scrollbar(zijcont3.printdecsteplist_box,orient=tk1.VERTICAL)        zijcont3.print_decstepscrollbar.config(command=zijcont3.printdecsteplist_box.yview)        zijcont3.printdecsteplist_box.config(yscrollcommand=zijcont3.print_decstepscrollbar.set)        zijcont3.print_decstepscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont3.printdecsteplist_box.bind("<Enter>", lambda x: enterzij3_printdecsteplistbox(self))        zijcont3.printdecsteplist_box.bind("<Leave>", lambda x: leavezij3_printdecsteplistbox(self))        zij3_show_alldecsteps_butt = tk1.Button(zij3_selectprintsteps_frm, text="Print ALL Dec Step Labels\n(Deselect All)", command= lambda: zijcont3.printdecsteplist_box.selection_clear(0, tk1.END))        zij3_show_alldecsteps_butt.grid(row=2,column=1, sticky='NSEW',padx=10,pady=5)        zij3_show_nodecsteps_butt = tk1.Button(zij3_selectprintsteps_frm, text="Print NO Dec Step Labels\n(Select All)", command= lambda: zijcont3.printdecsteplist_box.selection_set(0, tk1.END))        zij3_show_nodecsteps_butt.grid(row=3,column=1, sticky='NSEW',padx=10,pady=5)        zij3_selectincsteps_label = tk1.Label(zij3_selectprintsteps_frm, text="Select which Step Inc\nLabels to NOT Print:")        zij3_selectincsteps_label.grid(row=0, column=2, sticky='NSEW')        zijcont3.printincsteplist_box = tk1.Listbox(zij3_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sitedata[0].data):            zijcont3.printincsteplist_box.insert(tk1.END,step.dmagstep)            zijcont3.printincsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.zij_printinclabel):                zijcont3.printincsteplist_box.select_set(stepoffindex)        zijcont3.printincsteplist_box.grid(row=1,column=2,sticky='NSEW')        zijcont3.printincsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printincsteplistbox("zijcont3.printincsteplist_box"))        zijcont3.printdecsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printincsteplistbox("zijcont3.printincsteplist_box"))        zijcont3.print_incstepscrollbar = tk1.Scrollbar(zijcont3.printincsteplist_box,orient=tk1.VERTICAL)        zijcont3.print_incstepscrollbar.config(command=zijcont3.printincsteplist_box.yview)        zijcont3.printincsteplist_box.config(yscrollcommand=zijcont3.print_incstepscrollbar.set)        zijcont3.print_incstepscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        zijcont3.printincsteplist_box.bind("<Enter>", lambda x: enterzij3_printincsteplistbox(self))        zijcont3.printincsteplist_box.bind("<Leave>", lambda x: leavezij3_printincsteplistbox(self))        zij3_show_allincsteps_butt = tk1.Button(zij3_selectprintsteps_frm, text="Print ALL Inc Step Labels\n(Deselect All)", command= lambda: zijcont3.printincsteplist_box.selection_clear(0, tk1.END))        zij3_show_allincsteps_butt.grid(row=2,column=2, sticky='NSEW',padx=10,pady=5)        zij3_show_noincsteps_butt = tk1.Button(zij3_selectprintsteps_frm, text="Print NO Inc Step Labels\n(Select All)", command= lambda: zijcont3.printincsteplist_box.selection_set(0, tk1.END))        zij3_show_noincsteps_butt.grid(row=3,column=2, sticky='NSEW',padx=10,pady=5)        zij3_printstep_color_frm = tk1.Frame(zij3_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij3_printstep_color_frm.grid(row=2,column=0,sticky='NSEW')        zij3_printstep_color_frm.grid_columnconfigure(0, weight=1)        zij3_printstep_color_frm.grid_columnconfigure(3, weight=1)                        zij3_printstep_color_butt = tk1.Button(zij3_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(zij3_master,"zijcont3.printstep_color_temp","Zijderveld Step Labels",                                                                                                                                zij3_printstep_color_label,zij3_printstep_color_frm,False))        zij3_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_printstep_color_label = tk1.Label(zij3_printstep_color_frm,text="Current\nColor:\n%s" % zijcont3.printstep_color_temp,fg=getoppositecolor(zijcont3.printstep_color_temp), bg=zijcont3.printstep_color_temp,width=10)        zij3_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_step_fontsize_frm = tk1.Frame(zij3_printsteps_frm,bd=2,relief=tk1.GROOVE)        zij3_step_fontsize_frm.grid(row=3,column=0,sticky='NSEW')        zij3_step_fontsize_frm.grid_columnconfigure(0, weight=1)        zij3_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    zij3_step_fontsize_label = tk1.Label(zij3_step_fontsize_frm, text="Step Font Size:",bd=1)        zij3_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        zijcont3.step_fontsize_mod_var = tk1.StringVar(zij3_interior)        zijcont3.step_fontsize_mod_var.set(zijcont3.step_fontsize_mod)         zij3_step_fontsize_optionmenu = tk1.OptionMenu(zij3_step_fontsize_frm, zijcont3.step_fontsize_mod_var, *fontsizes_set)        zij3_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        zij3_step_fontsize_optionmenu.configure(font=('Consolas',10))        zij3_col2_frm = tk1.Frame(zij3_interior,bd=2) # Column 2        zij3_col2_frm.grid(row=0,column=2,sticky='NSEW')        zij3_arrowline_frm = tk1.Frame(zij3_col2_frm,bd=2,relief=tk1.SUNKEN)        zij3_arrowline_frm.pack(fill=tk1.X)                zij3_arrowline_title_label = tk1.Label(zij3_arrowline_frm, text="Arrows & Lines Settings:",font="Helvetica 12 bold")        zij3_arrowline_title_label.pack(fill=tk1.X)        zij3_plotarrow_frm = tk1.Frame(zij3_arrowline_frm,bd=2,relief=tk1.GROOVE)        zij3_plotarrow_frm.pack(fill=tk1.X)        zijcont3.show_arrowline_var = tk1.BooleanVar(value=zijcont3.show_arrowlines)        zij3_show_arrowline_chbutt = tk1.Checkbutton(zij3_plotarrow_frm, text="Show Arrows and Lines?", variable=zijcont3.show_arrowline_var,command= lambda:                                              disablewidgets(zijcont3.show_arrowline_var,False,[zij3_arrowline_label,zij3_arrowline_radio_arrow,zij3_arrowline_radio_line,zij3_arrowline_color_butt,zij3_arrowline_color_label,                                                                                             zij3_arrowline_width_label,zij3_arrowline_width_optionmenu],[],[]))        zij3_show_arrowline_chbutt.pack(fill=tk1.X)        zij3_arrowline_radio_text_frm = tk1.Frame(zij3_plotarrow_frm,bd=2,relief=tk1.GROOVE)        zij3_arrowline_radio_text_frm.pack(fill=tk1.X)        zij3_arrowline_label = tk1.Label(zij3_arrowline_radio_text_frm, text="Plot Arrows or Lines?")        zij3_arrowline_label.pack(fill=tk1.X)        zijcont3.arrowline_var = tk1.StringVar()        zijcont3.arrowline_var.set(zijcont3.arrowsorlines)        zij3_arrowline_radio_frm = tk1.Frame(zij3_arrowline_radio_text_frm,bd=2)        zij3_arrowline_radio_frm.pack(fill=tk1.X)        zij3_arrowline_radio_arrow = tk1.Radiobutton(zij3_arrowline_radio_frm, text="Plot Arrows",variable=zijcont3.arrowline_var,value="Arrows")        zij3_arrowline_radio_arrow.pack(side=tk1.LEFT,padx=10)        zij3_arrowline_radio_line = tk1.Radiobutton(zij3_arrowline_radio_frm, text="Plot Lines",variable=zijcont3.arrowline_var,value="Lines")        zij3_arrowline_radio_line.pack(side=tk1.LEFT,padx=10)        zij3_arrowline_color_frm = tk1.Frame(zij3_arrowline_frm,bd=2,relief=tk1.GROOVE)        zij3_arrowline_color_frm.pack(fill=tk1.X)        zij3_arrowline_color_frm.grid_columnconfigure(0, weight=1)        zij3_arrowline_color_frm.grid_columnconfigure(3, weight=1)        zij3_arrowline_color_butt = tk1.Button(zij3_arrowline_color_frm,text="Select Arrow/Line Color", command= lambda: getcolor(zij3_master,"zijcont3.arrowline_color_temp","Zijderveld Arrow/Line",                                                                                                                                zij3_arrowline_color_label,zij3_arrowline_color_frm,False))        zij3_arrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij3_arrowline_color_label = tk1.Label(zij3_arrowline_color_frm,text="Current\nColor:\n%s" % zijcont3.arrowline_color_temp,fg=getoppositecolor(zijcont3.arrowline_color_temp), bg=zijcont3.arrowline_color_temp,width=10)        zij3_arrowline_color_label.grid(row=0,column=2)        zij3_arrowline_width_frm = tk1.Frame(zij3_arrowline_frm,bd=2,relief=tk1.GROOVE)        zij3_arrowline_width_frm.pack(fill=tk1.X)        zij3_arrowline_width_frm.grid_columnconfigure(0, weight=1)        zij3_arrowline_width_frm.grid_columnconfigure(3, weight=1)        zij3_arrowline_width_label = tk1.Label(zij3_arrowline_width_frm, text="Arrow/Line Width:")        zij3_arrowline_width_label.grid(row=0,column=1,sticky='NESW')                zijcont3.arrowline_width_var = tk1.IntVar(zij3_interior)        zijcont3.arrowline_width_var.set(zijcont3.arrowline_width)         zij3_arrowline_width_optionmenu = tk1.OptionMenu(zij3_arrowline_width_frm, zijcont3.arrowline_width_var, *linewidthchoices_set)        zij3_arrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_arrowline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont3.show_arrowline_var,False,[zij3_arrowline_label,zij3_arrowline_radio_arrow,zij3_arrowline_radio_line,zij3_arrowline_color_butt,zij3_arrowline_color_label,                                                         zij3_arrowline_width_label,zij3_arrowline_width_optionmenu],[],[])        zij3_legend_settings_frm = tk1.Frame(zij3_col2_frm,bd=2,relief=tk1.SUNKEN)        zij3_legend_settings_frm.pack(fill=tk1.X)        zij3_legend_settings_label = tk1.Label(zij3_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        zij3_legend_settings_label.pack(fill=tk1.X)                zij3_show_title_frm = tk1.Frame(zij3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        zij3_show_title_frm.pack(fill=tk1.X)        zijcont3.show_title_var = tk1.BooleanVar(value=zijcont3.show_title)        zij3_show_title_chbutt = tk1.Checkbutton(zij3_show_title_frm, text="Show Title?", variable=zijcont3.show_title_var,command= lambda:                                              disablewidgets(zijcont3.show_title_var,False,[zij3_title_color_butt,zij3_title_color_label],[],[]))        zij3_show_title_chbutt.pack(fill=tk1.X)        zij3_title_color_frm = tk1.Frame(zij3_show_title_frm,bd=2,relief=tk1.GROOVE)        zij3_title_color_frm.pack(fill=tk1.X)        zij3_title_color_frm.grid_columnconfigure(0, weight=1)        zij3_title_color_frm.grid_columnconfigure(3, weight=1)        zij3_title_color_butt = tk1.Button(zij3_title_color_frm,text="Select Title Color", command= lambda: getcolor(zij3_master,"zijcont3.title_color_temp","Zijderveld Title",zij3_title_color_label,zij3_title_color_frm,False))        zij3_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij3_title_color_label = tk1.Label(zij3_title_color_frm,text="Current\nColor:\n%s" % zijcont3.title_color_temp,fg=getoppositecolor(zijcont3.title_color_temp), bg=zijcont3.title_color_temp,width=10)        zij3_title_color_label.grid(row=0,column=2)        disablewidgets(zijcont3.show_title_var,False,[zij3_title_color_butt,zij3_title_color_label],[],[])        zij3_show_legend_frm = tk1.Frame(zij3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        zij3_show_legend_frm.pack(fill=tk1.X)        zijcont3.show_legend_var = tk1.BooleanVar(value=zijcont3.show_legend)        zij3_show_legend_chbutt = tk1.Checkbutton(zij3_show_legend_frm, text="Show Legend?", variable=zijcont3.show_legend_var,command= lambda:                                              disablewidgets(zijcont3.show_legend_var,False,[zij3_legend_color_butt,zij3_legend_color_label],[],[]))        zij3_show_legend_chbutt.pack(fill=tk1.X)        zij3_legend_color_frm = tk1.Frame(zij3_show_legend_frm,bd=2,relief=tk1.GROOVE)        zij3_legend_color_frm.pack(fill=tk1.X)        zij3_legend_color_frm.grid_columnconfigure(0, weight=1)        zij3_legend_color_frm.grid_columnconfigure(3, weight=1)        zij3_legend_color_butt = tk1.Button(zij3_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(zij3_master,"zijcont3.legend_color_temp","Zijderveld Legend",zij3_legend_color_label,zij3_legend_color_frm,False))        zij3_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        zij3_legend_color_label = tk1.Label(zij3_legend_color_frm,text="Current\nColor:\n%s" % zijcont3.legend_color_temp,fg=getoppositecolor(zijcont3.legend_color_temp), bg=zijcont3.legend_color_temp,width=10)        zij3_legend_color_label.grid(row=0,column=2)        disablewidgets(zijcont3.show_legend_var,False,[zij3_legend_color_butt,zij3_legend_color_label],[],[])        zij3_error_settings_frm = tk1.Frame(zij3_col2_frm,bd=2,relief=tk1.SUNKEN)        zij3_error_settings_frm.pack(fill=tk1.X)        zij3_error_settings_label = tk1.Label(zij3_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        zij3_error_settings_label.pack(fill=tk1.X)                zij3_error_radio_frm = tk1.Frame(zij3_error_settings_frm,bd=2,relief=tk1.GROOVE)        zij3_error_radio_frm.pack(fill=tk1.X)        zij3_error_settings_label = tk1.Label(zij3_error_radio_frm, text="Select Error-Scaling for Symbols:")        zij3_error_settings_label.pack(fill=tk1.X)        zijcont3.error_scaling_var = tk1.StringVar()        zijcont3.error_scaling_var.set(zijcont3.error_scaling)        zij3_errorscaling_radio_none = tk1.Radiobutton(zij3_error_radio_frm, text="No Error Scaling",variable=zijcont3.error_scaling_var,value="None",command = lambda:                                                      disablewidgets(zijcont3.error_scaling_var,"None",[],[zij3_dec_color_butt,zij3_dec_color_label,zij3_inc_color_butt,zij3_inc_color_label,                                                                                                          zijcont3.dec_symbol_size_slider,zijcont3.inc_symbol_size_slider,zij3_dec_size_label,zij3_inc_size_label],                                                                     [[zijcont3.show_dec_var,[False],[zij3_dec_color_butt,zij3_dec_color_label,zijcont3.dec_symbol_size_slider,zij3_dec_size_label]],                                                                        [zijcont3.show_inc_var,[False],[zij3_inc_color_butt,zij3_inc_color_label,zijcont3.inc_symbol_size_slider,zij3_inc_size_label]]]))        zij3_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        zij3_errorscaling_radio_size = tk1.Radiobutton(zij3_error_radio_frm, text="Scale Symbol Size by Error",variable=zijcont3.error_scaling_var,value="Size",command = lambda:                                                      disablewidgets(zijcont3.error_scaling_var,"Size",[zijcont3.dec_symbol_size_slider,zijcont3.inc_symbol_size_slider,zij3_dec_size_label,zij3_inc_size_label],                                                                     [zij3_dec_color_butt,zij3_dec_color_label,zij3_inc_color_butt,zij3_inc_color_label],                                                                     [[zijcont3.show_dec_var,[False],[zij3_dec_color_butt,zij3_dec_color_label]],                                                                      [zijcont3.show_inc_var,[False],[zij3_inc_color_butt,zij3_inc_color_label]]]))        zij3_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        zij3_errorscaling_radio_color = tk1.Radiobutton(zij3_error_radio_frm, text="Scale Symbol Color By Error",variable=zijcont3.error_scaling_var,value="Color",command = lambda:                                                       disablewidgets(zijcont3.error_scaling_var,"Color",[zij3_dec_color_butt,zij3_dec_color_label,zij3_inc_color_butt,zij3_inc_color_label],                                                                      [zijcont3.dec_symbol_size_slider,zijcont3.inc_symbol_size_slider,zij3_dec_size_label,zij3_inc_size_label],                                                                      [[zijcont3.show_dec_var,[False],[zijcont3.dec_symbol_size_slider,zij3_dec_size_label]],                                                                       [zijcont3.show_inc_var,[False],[zijcont3.inc_symbol_size_slider,zij3_inc_size_label]]]))        zij3_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        zij3_col3_frm = tk1.Frame(zij3_interior,bd=2) # Column 3        zij3_col3_frm.grid(row=0,column=3,sticky='NSEW')        zij3_dec_frm = tk1.Frame(zij3_col3_frm,bd=2,relief=tk1.SUNKEN)        zij3_dec_frm.pack(fill=tk1.X)        zij3_dec_symbol_settings_label = tk1.Label(zij3_dec_frm, text="Declination Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij3_dec_symbol_settings_label.pack(fill=tk1.X)        zij3_show_dec_frm = tk1.Frame(zij3_dec_frm,bd=2,relief=tk1.GROOVE)        zij3_show_dec_frm.pack(fill=tk1.X)        zijcont3.show_dec_var = tk1.BooleanVar(value=zijcont3.show_dec)        zij3_show_dec_chbutt = tk1.Checkbutton(zij3_show_dec_frm, text="Show Declination Points?", variable=zijcont3.show_dec_var,command= lambda:                                              disablewidgets(zijcont3.show_dec_var,False,[zij3_dec_symbol_label,zij3_dec_symbolchoices_optionmenu,zij3_dec_size_label,zijcont3.dec_symbol_size_slider,zij3_dec_color_butt,zij3_dec_color_label,                                                                                       zij3_show_dec_edge_chbutt,zij3_dec_edge_color_butt,zij3_dec_edge_color_label,zij3_dec_edge_width_label, zij3_dec_edge_width_optionmenu],[],                                                                                       [[zijcont3.show_dec_edge_var,[False],[zij3_dec_edge_color_butt,zij3_dec_edge_color_label,zij3_dec_edge_width_label,zij3_dec_edge_width_optionmenu]],                                                                                        [zijcont3.error_scaling_var,["Size"],[zijcont3.dec_symbol_size_slider,zij3_dec_size_label]],                                                                                        [zijcont3.error_scaling_var,["Color"],[zij3_dec_color_butt,zij3_dec_color_label]]]))        zij3_show_dec_chbutt.pack(fill=tk1.X)        zij3_dec_symbol_frm = tk1.Frame(zij3_dec_frm,bd=2,relief=tk1.GROOVE)        zij3_dec_symbol_frm.pack(fill=tk1.X)        zij3_dec_symbol_frm.grid_columnconfigure(0, weight=1)        zij3_dec_symbol_frm.grid_columnconfigure(3, weight=1)                zij3_dec_symbol_label = tk1.Label(zij3_dec_symbol_frm, text="Declination Symbol:",bd=1)        zij3_dec_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont3.dec_symbol_var = tk1.StringVar(zij3_interior)        zijcont3.dec_symbol_var.set(symbolchoices_dict_reverse[zijcont3.dec_symbol])         zij3_dec_symbolchoices_optionmenu = tk1.OptionMenu(zij3_dec_symbol_frm, zijcont3.dec_symbol_var, *symbolchoices_set)        zij3_dec_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_dec_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij3_dec_size_frm = tk1.Frame(zij3_dec_frm,bd=2,relief=tk1.GROOVE)        zij3_dec_size_frm.pack(fill=tk1.X)        zij3_dec_size_label = tk1.Label(zij3_dec_size_frm, text="Declination Symbol Size:")        zij3_dec_size_label.pack(fill=tk1.X)        zijcont3.dec_symbol_size_slider = Scale(zij3_dec_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont3.dec_symbol_size_slider.set(zijcont3.dec_size)        zijcont3.dec_symbol_size_slider.pack(fill=tk1.X)        zij3_dec_color_frm = tk1.Frame(zij3_dec_frm,bd=2,relief=tk1.GROOVE)        zij3_dec_color_frm.pack(fill=tk1.X)        zij3_dec_color_frm.grid_columnconfigure(0, weight=1)        zij3_dec_color_frm.grid_columnconfigure(3, weight=1)        zij3_dec_color_butt = tk1.Button(zij3_dec_color_frm,text="Select Declination\nSymbol Color", command= lambda: getcolor(zij3_master,"zijcont3.dec_color_temp","Zijderveld Declination Symbol",zij3_dec_color_label,zij3_dec_color_frm,False))        zij3_dec_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_dec_color_label = tk1.Label(zij3_dec_color_frm,text="Current\nColor:\n%s" % zijcont3.dec_color_temp,fg=getoppositecolor(zijcont3.dec_color_temp), bg=zijcont3.dec_color_temp,width=10)        zij3_dec_color_label.grid(row=0, column=2,sticky='NSEW')                zij3_show_dec_edge_frm = tk1.Frame(zij3_dec_frm,bd=2,relief=tk1.GROOVE)        zij3_show_dec_edge_frm.pack(fill=tk1.X)        zijcont3.show_dec_edge_var = tk1.BooleanVar(value=zijcont3.show_dec_edge)        zij3_show_dec_edge_chbutt = tk1.Checkbutton(zij3_show_dec_edge_frm, text="Show Declination Symbol Border?", variable=zijcont3.show_dec_edge_var,command= lambda:                                              disablewidgets(zijcont3.show_dec_edge_var,False,[zij3_dec_edge_color_butt,zij3_dec_edge_color_label,zij3_dec_edge_width_label,zij3_dec_edge_width_optionmenu],[],[]))        zij3_show_dec_edge_chbutt.pack(fill=tk1.X)        zij3_dec_edge_color_frm = tk1.Frame(zij3_dec_frm,bd=2,relief=tk1.GROOVE)        zij3_dec_edge_color_frm.pack(fill=tk1.X)        zij3_dec_edge_color_frm.grid_columnconfigure(0, weight=1)        zij3_dec_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij3_dec_edge_color_butt = tk1.Button(zij3_dec_edge_color_frm,text="Select Declination\nSymbol Border Color", command= lambda: getcolor(zij3_master,"zijcont3.dec_edge_color_temp","Zijderveld Declination Symbol Edge",                                                                                                                                              zij3_dec_edge_color_label,zij3_dec_edge_color_frm,False))        zij3_dec_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_dec_edge_color_label = tk1.Label(zij3_dec_edge_color_frm,text="Current\nColor:\n%s" % zijcont3.dec_edge_color_temp,fg=getoppositecolor(zijcont3.dec_edge_color_temp), bg=zijcont3.dec_edge_color_temp,width=10)        zij3_dec_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_dec_edge_width_frm = tk1.Frame(zij3_dec_frm,bd=2,relief=tk1.GROOVE)        zij3_dec_edge_width_frm.pack(fill=tk1.X)        zij3_dec_edge_width_frm.grid_columnconfigure(0, weight=1)        zij3_dec_edge_width_frm.grid_columnconfigure(3, weight=1)        zij3_dec_edge_width_label = tk1.Label(zij3_dec_edge_width_frm, text="Declination Symbol Border Width:")        zij3_dec_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont3.dec_edge_width_var = tk1.IntVar(zij3_interior)        zijcont3.dec_edge_width_var.set(zijcont3.dec_edge_width)         zij3_dec_edge_width_optionmenu = tk1.OptionMenu(zij3_dec_edge_width_frm, zijcont3.dec_edge_width_var, *linewidthchoices_set)        zij3_dec_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_dec_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont3.show_dec_edge_var,False,[zij3_dec_edge_color_butt,zij3_dec_edge_color_label,zij3_dec_edge_width_label,zij3_dec_edge_width_optionmenu],[],[])        disablewidgets(zijcont3.show_dec_var,False,[zij3_dec_symbol_label,zij3_dec_symbolchoices_optionmenu,zij3_dec_size_label,zijcont3.dec_symbol_size_slider,zij3_dec_color_butt,zij3_dec_color_label,                                                                                       zij3_show_dec_edge_chbutt,zij3_dec_edge_color_butt,zij3_dec_edge_color_label,zij3_dec_edge_width_label, zij3_dec_edge_width_optionmenu],[],                                                                                       [[zijcont3.show_dec_edge_var,[False],[zij3_dec_edge_color_butt,zij3_dec_edge_color_label,zij3_dec_edge_width_label,zij3_dec_edge_width_optionmenu]]])                zij3_inc_frm = tk1.Frame(zij3_col3_frm,bd=2,relief=tk1.SUNKEN)        zij3_inc_frm.pack(fill=tk1.X)        zij3_inc_symbol_settings_label = tk1.Label(zij3_inc_frm, text="Inclination Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij3_inc_symbol_settings_label.pack(fill=tk1.X)        zij3_show_inc_frm = tk1.Frame(zij3_inc_frm,bd=2,relief=tk1.GROOVE)        zij3_show_inc_frm.pack(fill=tk1.X)        zijcont3.show_inc_var = tk1.BooleanVar(value=zijcont3.show_inc)        zij3_show_inc_chbutt = tk1.Checkbutton(zij3_show_inc_frm, text="Show Inclination Points?", variable=zijcont3.show_inc_var,command= lambda:                                              disablewidgets(zijcont3.show_inc_var,False,[zij3_inc_symbol_label,zij3_inc_symbolchoices_optionmenu,zij3_inc_size_label,zijcont3.inc_symbol_size_slider,zij3_inc_color_butt,zij3_inc_color_label,                                                                                       zij3_show_inc_edge_chbutt,zij3_inc_edge_color_butt,zij3_inc_edge_color_label,zij3_inc_edge_width_label, zij3_inc_edge_width_optionmenu],[],                                                             [[zijcont3.show_inc_edge_var,[False],[zij3_inc_edge_color_butt,zij3_inc_edge_color_label,zij3_inc_edge_width_label, zij3_inc_edge_width_optionmenu]],                                                              [zijcont3.error_scaling_var,["Size"],[zijcont3.inc_symbol_size_slider,zij3_inc_size_label]],                                                                [zijcont3.error_scaling_var,["Color"],[zij3_inc_color_butt,zij3_inc_color_label]]]))        zij3_show_inc_chbutt.pack(fill=tk1.X)        zij3_inc_symbol_frm = tk1.Frame(zij3_inc_frm,bd=2,relief=tk1.GROOVE)        zij3_inc_symbol_frm.pack(fill=tk1.X)        zij3_inc_symbol_frm.grid_columnconfigure(0, weight=1)        zij3_inc_symbol_frm.grid_columnconfigure(3, weight=1)                  zij3_inc_symbol_label = tk1.Label(zij3_inc_symbol_frm, text="Inclination Symbol:",bd=1)        zij3_inc_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont3.inc_symbol_var = tk1.StringVar(zij3_interior)        zijcont3.inc_symbol_var.set(symbolchoices_dict_reverse[zijcont3.inc_symbol])         zij3_inc_symbolchoices_optionmenu = tk1.OptionMenu(zij3_inc_symbol_frm, zijcont3.inc_symbol_var, *symbolchoices_set)        zij3_inc_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_inc_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij3_incsize_frm = tk1.Frame(zij3_inc_frm,bd=2,relief=tk1.GROOVE)        zij3_incsize_frm.pack(fill=tk1.X)        zij3_inc_size_label = tk1.Label(zij3_incsize_frm, text="Inclination Symbol Size:")        zij3_inc_size_label.pack(fill=tk1.X)        zijcont3.inc_symbol_size_slider = Scale(zij3_incsize_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont3.inc_symbol_size_slider.set(zijcont3.inc_size)        zijcont3.inc_symbol_size_slider.pack(fill=tk1.X)        zij3_inc_color_frm = tk1.Frame(zij3_inc_frm,bd=2,relief=tk1.GROOVE)        zij3_inc_color_frm.pack(fill=tk1.X)        zij3_inc_color_frm.grid_columnconfigure(0, weight=1)        zij3_inc_color_frm.grid_columnconfigure(3, weight=1)        zij3_inc_color_butt = tk1.Button(zij3_inc_color_frm,text="Select Inclination\nSymbol Color", command= lambda: getcolor(zij3_master,"zijcont3.inc_color_temp","Zijderveld Inclination Symbol",                                                                                                                             zij3_inc_color_label,zij3_inc_color_frm,False))        zij3_inc_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_inc_color_label = tk1.Label(zij3_inc_color_frm,text="Current\nColor:\n%s" % zijcont3.inc_color_temp,fg=getoppositecolor(zijcont3.inc_color_temp), bg=zijcont3.inc_color_temp,width=10)        zij3_inc_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_show_inc_edge_frm = tk1.Frame(zij3_inc_frm,bd=2,relief=tk1.GROOVE)        zij3_show_inc_edge_frm.pack(fill=tk1.X)        zijcont3.show_inc_edge_var = tk1.BooleanVar(value=zijcont3.show_inc_edge)        zij3_show_inc_edge_chbutt = tk1.Checkbutton(zij3_show_inc_edge_frm, text="Show Inclination Symbol Border?", variable=zijcont3.show_inc_edge_var,command= lambda:                                              disablewidgets(zijcont3.show_inc_edge_var,False,[zij3_inc_edge_color_butt,zij3_inc_edge_color_label,zij3_inc_edge_width_label, zij3_inc_edge_width_optionmenu],[],[]))        zij3_show_inc_edge_chbutt.pack(fill=tk1.X)        zij3_inc_edge_color_frm = tk1.Frame(zij3_inc_frm,bd=2,relief=tk1.GROOVE)        zij3_inc_edge_color_frm.pack(fill=tk1.X)        zij3_inc_edge_color_frm.grid_columnconfigure(0, weight=1)        zij3_inc_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij3_inc_edge_color_butt = tk1.Button(zij3_inc_edge_color_frm,text="Select Inclination\nSymbol Border Color", command= lambda: getcolor(zij3_master,"zijcont3.inc_edge_color_temp","Zijderveld Inclination Symbol Edge",                                                                                                                                              zij3_inc_edge_color_label,zij3_inc_edge_color_frm,False))        zij3_inc_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_inc_edge_color_label = tk1.Label(zij3_inc_edge_color_frm,text="Current\nColor:\n%s" % zijcont3.inc_edge_color_temp,fg=getoppositecolor(zijcont3.inc_edge_color_temp), bg=zijcont3.inc_edge_color_temp,width=10)        zij3_inc_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_inc_edge_width_frm = tk1.Frame(zij3_inc_frm,bd=2,relief=tk1.GROOVE)        zij3_inc_edge_width_frm.pack(fill=tk1.X)        zij3_inc_edge_width_frm.grid_columnconfigure(0, weight=1)        zij3_inc_edge_width_frm.grid_columnconfigure(3, weight=1)        zij3_inc_edge_width_label = tk1.Label(zij3_inc_edge_width_frm, text="Inclination Symbol Border Width:")        zij3_inc_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont3.inc_edge_width_var = tk1.IntVar(zij3_interior)        zijcont3.inc_edge_width_var.set(zijcont3.inc_edge_width)         zij3_inc_edge_width_optionmenu = tk1.OptionMenu(zij3_inc_edge_width_frm, zijcont3.inc_edge_width_var, *linewidthchoices_set)        zij3_inc_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_inc_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont3.show_inc_edge_var,False,[zij3_inc_edge_color_butt,zij3_inc_edge_color_label,zij3_inc_edge_width_label, zij3_inc_edge_width_optionmenu],[],[])        disablewidgets(zijcont3.show_inc_var,False,[zij3_inc_symbol_label,zij3_inc_symbolchoices_optionmenu,zij3_inc_size_label,zijcont3.inc_symbol_size_slider,zij3_inc_color_butt,zij3_inc_color_label,                                                  zij3_show_inc_edge_chbutt,zij3_inc_edge_color_butt,zij3_inc_edge_color_label,zij3_inc_edge_width_label, zij3_inc_edge_width_optionmenu],[],                       [[zijcont3.show_inc_edge_var,[False],[zij3_inc_edge_color_butt,zij3_inc_edge_color_label,zij3_inc_edge_width_label, zij3_inc_edge_width_optionmenu]]])        disablewidgets(zijcont3.error_scaling_var,"None",[],[zij3_dec_color_butt,zij3_dec_color_label,zij3_inc_color_butt,zij3_inc_color_label,                zijcont3.dec_symbol_size_slider,zijcont3.inc_symbol_size_slider,zij3_dec_size_label,zij3_inc_size_label],                [[zijcont3.show_dec_var,[False],[zij3_dec_color_butt,zij3_dec_color_label,zijcont3.dec_symbol_size_slider,zij3_dec_size_label]],                [zijcont3.show_inc_var,[False],[zij3_inc_color_butt,zij3_inc_color_label,zijcont3.inc_symbol_size_slider,zij3_inc_size_label]]])        disablewidgets(zijcont3.error_scaling_var,"Size",[zijcont3.dec_symbol_size_slider,zijcont3.inc_symbol_size_slider,zij3_dec_size_label,zij3_inc_size_label],                [zij3_dec_color_butt,zij3_dec_color_label,zij3_inc_color_butt,zij3_inc_color_label],                [[zijcont3.show_dec_var,[False],[zij3_dec_color_butt,zij3_dec_color_label]],[zijcont3.show_inc_var,[False],[zij3_inc_color_butt,zij3_inc_color_label]]])        disablewidgets(zijcont3.error_scaling_var,"Color",[zij3_dec_color_butt,zij3_dec_color_label,zij3_inc_color_butt,zij3_inc_color_label],                [zijcont3.dec_symbol_size_slider,zijcont3.inc_symbol_size_slider,zij3_dec_size_label,zij3_inc_size_label],                [[zijcont3.show_dec_var,[False],[zijcont3.dec_symbol_size_slider,zij3_dec_size_label]],[zijcont3.show_inc_var,[False],[zijcont3.inc_symbol_size_slider,zij3_inc_size_label]]])        zij3_col4_frm = tk1.Frame(zij3_interior,bd=2) # Column 4        zij3_col4_frm.grid(row=0,column=4,sticky='NSEW')        zij3_firststep_frm = tk1.Frame(zij3_col4_frm,bd=2,relief=tk1.SUNKEN)        zij3_firststep_frm.pack(fill=tk1.X)        zij3_firststep_symbol_settings_label = tk1.Label(zij3_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij3_firststep_symbol_settings_label.pack(fill=tk1.X)        zij3_show_firststep_frm = tk1.Frame(zij3_firststep_frm,bd=2,relief=tk1.GROOVE)        zij3_show_firststep_frm.pack(fill=tk1.X)        zijcont3.show_firststep_var = tk1.BooleanVar(value=zijcont3.show_firststep)        zij3_show_firststep_chbutt = tk1.Checkbutton(zij3_show_firststep_frm, text="Show First Step Special Symbol?", variable=zijcont3.show_firststep_var,command= lambda:                                              disablewidgets(zijcont3.show_firststep_var,False,[zij3_firststep_symbol_label,zij3_firststep_symbolchoices_optionmenu,zij3_firststep_size_label,zijcont3.firststep_symbol_size_slider,                                                                                             zij3_firststep_color_butt,zij3_firststep_color_label,zij3_show_firststep_edge_chbutt,zij3_firststep_edge_color_butt,zij3_firststep_edge_color_label,                                                                                             zij3_firststep_edge_width_label,zij3_firststep_edge_width_optionmenu],[],                                                             [[zijcont3.show_firststep_edge_var,[False],[zij3_firststep_edge_color_butt,zij3_firststep_edge_color_label,zij3_firststep_edge_width_label,zij3_firststep_edge_width_optionmenu]]]))        zij3_show_firststep_chbutt.pack(fill=tk1.X)        zij3_firststep_symbol_frm = tk1.Frame(zij3_firststep_frm,bd=2,relief=tk1.GROOVE)        zij3_firststep_symbol_frm.pack(fill=tk1.X)        zij3_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        zij3_firststep_symbol_frm.grid_columnconfigure(3, weight=1)                  zij3_firststep_symbol_label = tk1.Label(zij3_firststep_symbol_frm, text="First Step Symbol:",bd=1)        zij3_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont3.firststep_symbol_var = tk1.StringVar(zij3_interior)        zijcont3.firststep_symbol_var.set(symbolchoices_dict_reverse[zijcont3.firststep_symbol])         zij3_firststep_symbolchoices_optionmenu = tk1.OptionMenu(zij3_firststep_symbol_frm, zijcont3.firststep_symbol_var, *symbolchoices_set)        zij3_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij3_firststep_size_frm = tk1.Frame(zij3_firststep_frm,bd=2,relief=tk1.GROOVE)        zij3_firststep_size_frm.pack(fill=tk1.X)        zij3_firststep_size_label = tk1.Label(zij3_firststep_size_frm, text="First Step Symbol Size:")        zij3_firststep_size_label.pack(fill=tk1.X)        zijcont3.firststep_symbol_size_slider = Scale(zij3_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont3.firststep_symbol_size_slider.set(zijcont3.firststep_size)        zijcont3.firststep_symbol_size_slider.pack(fill=tk1.X)        zij3_firststep_color_frm = tk1.Frame(zij3_firststep_frm,bd=2,relief=tk1.GROOVE)        zij3_firststep_color_frm.pack(fill=tk1.X)        zij3_firststep_color_frm.grid_columnconfigure(0, weight=1)        zij3_firststep_color_frm.grid_columnconfigure(3, weight=1)                      zij3_firststep_color_butt = tk1.Button(zij3_firststep_color_frm,text="Select First Step\nSymbol Color", command= lambda: getcolor(zij3_master,"zijcont3.firststep_color_temp","Zijderveld First Step Symbol",                                                                                                                                        zij3_firststep_color_label,zij3_firststep_color_frm,False))        zij3_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_firststep_color_label = tk1.Label(zij3_firststep_color_frm,text="Current\nColor:\n%s" % zijcont3.firststep_color_temp,fg=getoppositecolor(zijcont3.firststep_color_temp), bg=zijcont3.firststep_color_temp,width=10)        zij3_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_show_firststep_edge_frm = tk1.Frame(zij3_firststep_frm,bd=2,relief=tk1.GROOVE)        zij3_show_firststep_edge_frm.pack(fill=tk1.X)        zijcont3.show_firststep_edge_var = tk1.BooleanVar(value=zijcont3.show_firststep_edge)        zij3_show_firststep_edge_chbutt = tk1.Checkbutton(zij3_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=zijcont3.show_firststep_edge_var,command= lambda:                                              disablewidgets(zijcont3.show_firststep_edge_var,False,[zij3_firststep_edge_color_butt,zij3_firststep_edge_color_label,zij3_firststep_edge_width_label,zij3_firststep_edge_width_optionmenu],[],[]))        zij3_show_firststep_edge_chbutt.pack(fill=tk1.X)                zij3_firststep_edge_color_frm = tk1.Frame(zij3_firststep_frm,bd=2,relief=tk1.GROOVE)        zij3_firststep_edge_color_frm.pack(fill=tk1.X)        zij3_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        zij3_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)        zij3_firststep_edge_color_butt = tk1.Button(zij3_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color", command= lambda: getcolor(zij3_master,"zijcont3.firststep_edge_color_temp","Zijderveld First Step Symbol Edge",                                                                                                                                                         zij3_firststep_edge_color_label,zij3_firststep_edge_color_frm,False))        zij3_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_firststep_edge_color_label = tk1.Label(zij3_firststep_edge_color_frm,text="Current\nColor:\n%s" % zijcont3.firststep_edge_color_temp,fg=getoppositecolor(zijcont3.firststep_edge_color_temp), bg=zijcont3.firststep_edge_color_temp,width=10)        zij3_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_firststep_edge_width_frm = tk1.Frame(zij3_firststep_frm,bd=2,relief=tk1.GROOVE)        zij3_firststep_edge_width_frm.pack(fill=tk1.X)        zij3_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        zij3_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        zij3_firststep_edge_width_label = tk1.Label(zij3_firststep_edge_width_frm, text="First Step Symbol Border Width:")        zij3_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont3.firststep_edge_width_var = tk1.IntVar(zij3_interior)        zijcont3.firststep_edge_width_var.set(zijcont3.firststep_edge_width)         zij3_firststep_edge_width_optionmenu = tk1.OptionMenu(zij3_firststep_edge_width_frm, zijcont3.firststep_edge_width_var, *linewidthchoices_set)        zij3_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont3.show_firststep_edge_var,False,[zij3_firststep_edge_color_butt,zij3_firststep_edge_color_label,zij3_firststep_edge_width_label,zij3_firststep_edge_width_optionmenu],[],[])        disablewidgets(zijcont3.show_firststep_var,False,[zij3_firststep_symbol_label,zij3_firststep_symbolchoices_optionmenu,zij3_firststep_size_label,zijcont3.firststep_symbol_size_slider,zij3_firststep_color_butt,zij3_firststep_color_label,                                                       zij3_show_firststep_edge_chbutt,zij3_firststep_edge_color_butt,zij3_firststep_edge_color_label,zij3_firststep_edge_width_label,zij3_firststep_edge_width_optionmenu],[],                       [[zijcont3.show_firststep_edge_var,[False],[zij3_firststep_edge_color_butt,zij3_firststep_edge_color_label,zij3_firststep_edge_width_label,zij3_firststep_edge_width_optionmenu]]])        zij3_laststep_frm = tk1.Frame(zij3_col4_frm,bd=2,relief=tk1.SUNKEN)        zij3_laststep_frm.pack(fill=tk1.X)        zij3_laststep_symbol_settings_label = tk1.Label(zij3_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        zij3_laststep_symbol_settings_label.pack(fill=tk1.X)        zij3_show_laststep_frm = tk1.Frame(zij3_laststep_frm,bd=2,relief=tk1.GROOVE)        zij3_show_laststep_frm.pack(fill=tk1.X)        zijcont3.show_laststep_var = tk1.BooleanVar(value=zijcont3.show_laststep)        zij3_show_laststep_chbutt = tk1.Checkbutton(zij3_show_laststep_frm, text="Show Last Step Special Symbol?", variable=zijcont3.show_laststep_var,command= lambda:                                              disablewidgets(zijcont3.show_laststep_var,False,[zij3_laststep_symbol_label,zij3_laststep_symbolchoices_optionmenu,zij3_laststep_size_label,zijcont3.laststep_symbol_size_slider,                                                                                             zij3_laststep_color_butt,zij3_laststep_color_label,zij3_show_laststep_edge_chbutt,zij3_laststep_edge_color_butt,zij3_laststep_edge_color_label,                                                                                              zij3_laststep_edge_width_label,zij3_laststep_edge_width_optionmenu],[],                                                             [[zijcont3.show_laststep_edge_var,[False],[zij3_laststep_edge_color_butt,zij3_laststep_edge_color_label,zij3_laststep_edge_width_label,zij3_laststep_edge_width_optionmenu]]]))        zij3_show_laststep_chbutt.pack(fill=tk1.X)        zij3_laststep_symbol_frm = tk1.Frame(zij3_laststep_frm,bd=2,relief=tk1.GROOVE)        zij3_laststep_symbol_frm.pack(fill=tk1.X)        zij3_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        zij3_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  zij3_laststep_symbol_label = tk1.Label(zij3_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        zij3_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        zijcont3.laststep_symbol_var = tk1.StringVar(zij3_interior)        zijcont3.laststep_symbol_var.set(symbolchoices_dict_reverse[zijcont3.laststep_symbol])         zij3_laststep_symbolchoices_optionmenu = tk1.OptionMenu(zij3_laststep_symbol_frm, zijcont3.laststep_symbol_var, *symbolchoices_set)        zij3_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        zij3_laststep_size_frm = tk1.Frame(zij3_laststep_frm,bd=2,relief=tk1.GROOVE)        zij3_laststep_size_frm.pack(fill=tk1.X)        zij3_laststep_size_label = tk1.Label(zij3_laststep_size_frm, text="Last Step Symbol Size:")        zij3_laststep_size_label.pack(fill=tk1.X)        zijcont3.laststep_symbol_size_slider = Scale(zij3_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        zijcont3.laststep_symbol_size_slider.set(zijcont3.laststep_size)        zijcont3.laststep_symbol_size_slider.pack(fill=tk1.X)        zij3_laststep_color_frm = tk1.Frame(zij3_laststep_frm,bd=2,relief=tk1.GROOVE)        zij3_laststep_color_frm.pack(fill=tk1.X)        zij3_laststep_color_frm.grid_columnconfigure(0, weight=1)        zij3_laststep_color_frm.grid_columnconfigure(3, weight=1)         zij3_laststep_color_butt = tk1.Button(zij3_laststep_color_frm,text="Select Last Step\nSymbol Color", command= lambda: getcolor(zij3_master,"zijcont3.laststep_color_temp","Zijderveld Last Step Symbol",                                                                                                                                     zij3_laststep_color_label,zij3_laststep_color_frm,False))        zij3_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_laststep_color_label = tk1.Label(zij3_laststep_color_frm,text="Current\nColor:\n%s" % zijcont3.laststep_color_temp,fg=getoppositecolor(zijcont3.laststep_color_temp), bg=zijcont3.laststep_color_temp,width=10)        zij3_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_show_laststep_edge_frm = tk1.Frame(zij3_laststep_frm,bd=2,relief=tk1.GROOVE)        zij3_show_laststep_edge_frm.pack(fill=tk1.X)        zijcont3.show_laststep_edge_var = tk1.BooleanVar(value=zijcont3.show_laststep_edge)        zij3_show_laststep_edge_chbutt = tk1.Checkbutton(zij3_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=zijcont3.show_laststep_edge_var,command= lambda:                                              disablewidgets(zijcont3.show_laststep_edge_var,False,[zij3_laststep_edge_color_butt,zij3_laststep_edge_color_label,zij3_laststep_edge_width_label,zij3_laststep_edge_width_optionmenu],[],[]))        zij3_show_laststep_edge_chbutt.pack(fill=tk1.X)        zij3_laststep_edge_color_frm = tk1.Frame(zij3_laststep_frm,bd=2,relief=tk1.GROOVE)        zij3_laststep_edge_color_frm.pack(fill=tk1.X)        zij3_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        zij3_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        zij3_laststep_edge_color_butt = tk1.Button(zij3_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color", command= lambda: getcolor(zij3_master,"zijcont3.laststep_edge_color_temp","Zijderveld Last Step Symbol Edge",                                                                                                                                                      zij3_laststep_edge_color_label,zij3_laststep_edge_color_frm,False))        zij3_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_laststep_edge_color_label = tk1.Label(zij3_laststep_edge_color_frm,text="Current\nColor:\n%s" % zijcont3.laststep_edge_color_temp,fg=getoppositecolor(zijcont3.laststep_edge_color_temp), bg=zijcont3.laststep_edge_color_temp,width=10)        zij3_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        zij3_laststep_edge_width_frm = tk1.Frame(zij3_laststep_frm,bd=2,relief=tk1.GROOVE)        zij3_laststep_edge_width_frm.pack(fill=tk1.X)        zij3_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        zij3_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        zij3_laststep_edge_width_label = tk1.Label(zij3_laststep_edge_width_frm, text="Last Step Symbol Border Width:")        zij3_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        zijcont3.laststep_edge_width_var = tk1.IntVar(zij3_interior)        zijcont3.laststep_edge_width_var.set(zijcont3.laststep_edge_width)         zij3_laststep_edge_width_optionmenu = tk1.OptionMenu(zij3_laststep_edge_width_frm, zijcont3.laststep_edge_width_var, *linewidthchoices_set)        zij3_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(zijcont3.show_laststep_edge_var,False,[zij3_laststep_edge_color_butt,zij3_laststep_edge_color_label,zij3_laststep_edge_width_label,zij3_laststep_edge_width_optionmenu],[],[])        disablewidgets(zijcont3.show_laststep_var,False,[zij3_laststep_symbol_label,zij3_laststep_symbolchoices_optionmenu,zij3_laststep_size_label,zijcont3.laststep_symbol_size_slider,                                                      zij3_laststep_color_butt,zij3_laststep_color_label,zij3_show_laststep_edge_chbutt,zij3_laststep_edge_color_butt,zij3_laststep_edge_color_label,                                                        zij3_laststep_edge_width_label,zij3_laststep_edge_width_optionmenu],[],                       [[zijcont3.show_laststep_edge_var,[False],[zij3_laststep_edge_color_butt,zij3_laststep_edge_color_label,zij3_laststep_edge_width_label,zij3_laststep_edge_width_optionmenu]]])                zij3_col5_frm = tk1.Frame(zij3_interior,bd=2) # Column 5        zij3_col5_frm.grid(row=0,column=5,sticky='NSEW')        zij3_axesspecs_frm = tk1.Frame(zij3_col5_frm,bd=2,relief=tk1.SUNKEN)        zij3_axesspecs_frm.pack(fill=tk1.X)        zij3_axesspecs_label = tk1.Label(zij3_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        zij3_axesspecs_label.pack(fill=tk1.X)        zij3_show_axes_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_show_axes_frm.pack(fill=tk1.X)        zijcont3.show_axes_var = tk1.BooleanVar(value=zijcont3.show_axes)        zij3_show_axes_chbutt = tk1.Checkbutton(zij3_show_axes_frm, text="Show Axes?", variable=zijcont3.show_axes_var,command= lambda: disablewidgets(zijcont3.show_axes_var,False,                                                                                                                                               [zij3_axis_width_label,zij3_axis_width_optionmenu,zij3_axes_color_butt,zij3_axes_color_label],[],[]))        zij3_show_axes_chbutt.pack(fill=tk1.X)        zij3_axis_width_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_axis_width_frm.pack(fill=tk1.X)        zij3_axis_width_frm.grid_columnconfigure(0, weight=1)        zij3_axis_width_frm.grid_columnconfigure(3, weight=1)        zij3_axis_width_label = tk1.Label(zij3_axis_width_frm, text="Axes Width:")        zij3_axis_width_label.grid(row=0, column=1, sticky='NSEW')        zijcont3.axis_width_var = tk1.IntVar(zij3_interior)        zijcont3.axis_width_var.set(zijcont3.axis_width)         zij3_axis_width_optionmenu = tk1.OptionMenu(zij3_axis_width_frm, zijcont3.axis_width_var, *linewidthchoices_set)        zij3_axis_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_axis_width_optionmenu.configure(font=('Consolas',10))        zij3_axes_color_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_axes_color_frm.pack(fill=tk1.X)        zij3_axes_color_frm.grid_columnconfigure(0, weight=1)        zij3_axes_color_frm.grid_columnconfigure(3, weight=1)                        zij3_axes_color_butt = tk1.Button(zij3_axes_color_frm,text="Select Axes Color", command= lambda: getcolor(zij3_master,"zijcont3.axes_color_temp","Zijderveld Axes",zij3_axes_color_label,zij3_axes_color_frm,False))        zij3_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_axes_color_label = tk1.Label(zij3_axes_color_frm,text="Current\nColor:\n%s" % zijcont3.axes_color_temp,fg=getoppositecolor(zijcont3.axes_color_temp), bg=zijcont3.axes_color_temp,width=10)        zij3_axes_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(zijcont3.show_axes_var,False,[zij3_axis_width_label,zij3_axis_width_optionmenu,zij3_axes_color_butt,zij3_axes_color_label],[],[])        zij3_show_labels_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_show_labels_frm.pack(fill=tk1.X)        zijcont3.show_labels_var = tk1.BooleanVar(value=zijcont3.show_labels)        zij3_show_label_chbutt = tk1.Checkbutton(zij3_show_labels_frm, text="Show Axes Labels?", variable=zijcont3.show_labels_var,                                         command= lambda: disablewidgets(zijcont3.show_labels_var,False,                                                                         [zij3_label_fontsize_label,zij3_label_fontsize_optionmenu,zij3_label_color_butt,zij3_label_color_label],[],[]))        zij3_show_label_chbutt.pack(fill=tk1.X)        zij3_label_fontsize_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_label_fontsize_frm.pack(fill=tk1.X)        zij3_label_fontsize_frm.grid_columnconfigure(0, weight=1)        zij3_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    zij3_label_fontsize_label = tk1.Label(zij3_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        zij3_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        zijcont3.label_fontsize_var = tk1.StringVar(zij3_interior)        zijcont3.label_fontsize_var.set(zijcont3.label_fontsize_mod)         zij3_label_fontsize_optionmenu = tk1.OptionMenu(zij3_label_fontsize_frm, zijcont3.label_fontsize_var, *fontsizes_set)        zij3_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        zij3_label_fontsize_optionmenu.configure(font=('Consolas',10))        zij3_label_color_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_label_color_frm.pack(fill=tk1.X)        zij3_label_color_frm.grid_columnconfigure(0, weight=1)        zij3_label_color_frm.grid_columnconfigure(3, weight=1)                        zij3_label_color_butt = tk1.Button(zij3_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(zij3_master,"zijcont3.label_color_temp","Zijderveld label",zij3_label_color_label,zij3_label_color_frm,False))        zij3_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_label_color_label = tk1.Label(zij3_label_color_frm,text="Current\nColor:\n%s" % zijcont3.label_color_temp,fg=getoppositecolor(zijcont3.label_color_temp), bg=zijcont3.label_color_temp,width=10)        zij3_label_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(zijcont3.show_labels_var,False,[zij3_label_fontsize_label,zij3_label_fontsize_optionmenu,zij3_label_color_butt,zij3_label_color_label],[],[])        zij3_show_ticks_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_show_ticks_frm.pack(fill=tk1.X)        zijcont3.show_ticks_var = tk1.BooleanVar(value=zijcont3.show_ticks)        zij3_show_ticks_chbutt = tk1.Checkbutton(zij3_show_ticks_frm, text="Show Ticks?", variable=zijcont3.show_ticks_var,                                          command= lambda: disablewidgets(zijcont3.show_ticks_var,False,                                                                          [zij3_tick_width_label,zij3_tick_width_optionmenu,zij3_tick_length_label,zij3_tick_length_optionmenu,zij3_tick_color_butt,                                                                           zij3_tick_color_label,zij3_ticknum_label,zijcont3.ticknumslider],[],[]))        zij3_show_ticks_chbutt.pack(fill=tk1.X)        zij3_tick_width_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_tick_width_frm.pack(fill=tk1.X)        zij3_tick_width_frm.grid_columnconfigure(0, weight=1)        zij3_tick_width_frm.grid_columnconfigure(3, weight=1)        zij3_tick_width_label = tk1.Label(zij3_tick_width_frm, text="Tick Width:")        zij3_tick_width_label.grid(row=0, column=1, sticky='NSEW')        zijcont3.tick_width_var = tk1.IntVar(zij3_interior)        zijcont3.tick_width_var.set(zijcont3.tick_width)         zij3_tick_width_optionmenu = tk1.OptionMenu(zij3_tick_width_frm, zijcont3.tick_width_var, *linewidthchoices_set)        zij3_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_tick_width_optionmenu.configure(font=('Consolas',10))        zij3_tick_length_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_tick_length_frm.pack(fill=tk1.X)        zij3_tick_length_frm.grid_columnconfigure(0, weight=1)        zij3_tick_length_frm.grid_columnconfigure(3, weight=1)        zij3_tick_length_label = tk1.Label(zij3_tick_length_frm, text="Tick length:")        zij3_tick_length_label.grid(row=0, column=1, sticky='NSEW')        zijcont3.tick_length_var = tk1.IntVar(zij3_interior)        zijcont3.tick_length_var.set(zijcont3.tick_length)         zij3_tick_length_optionmenu = tk1.OptionMenu(zij3_tick_length_frm, zijcont3.tick_length_var, *linewidthchoices_set)        zij3_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        zij3_tick_length_optionmenu.configure(font=('Consolas',10))        zij3_tick_color_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_tick_color_frm.pack(fill=tk1.X)        zij3_tick_color_frm.grid_columnconfigure(0, weight=1)        zij3_tick_color_frm.grid_columnconfigure(3, weight=1)                        zij3_tick_color_butt = tk1.Button(zij3_tick_color_frm,text="Select Tick Color", command= lambda: getcolor(zij3_master,"zijcont3.tick_color_temp","Zijderveld tick",zij3_tick_color_label,zij3_tick_color_frm,False))        zij3_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        zij3_tick_color_label = tk1.Label(zij3_tick_color_frm,text="Current\nColor:\n%s" % zijcont3.tick_color_temp,fg=getoppositecolor(zijcont3.tick_color_temp), bg=zijcont3.tick_color_temp,width=10)        zij3_tick_color_label.grid(row=0, column=2,sticky='NSEW')                zij3_ticknum_frm = tk1.Frame(zij3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        zij3_ticknum_frm.pack(fill=tk1.X)        zij3_ticknum_label = tk1.Label(zij3_ticknum_frm, text="Maximum Number of Ticks per axis\n(smaller values shrink plot size):")        zij3_ticknum_label.pack(fill=tk1.X)        zijcont3.ticknumslider = Scale(zij3_ticknum_frm, from_=10, to=100,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        zijcont3.ticknumslider.set(zijcont3.numticks)        zijcont3.ticknumslider.pack(fill=tk1.X)        disablewidgets(zijcont3.show_ticks_var,False,[zij3_tick_width_label,zij3_tick_width_optionmenu,zij3_tick_length_label,zij3_tick_length_optionmenu,zij3_tick_color_butt,zij3_tick_color_label,zij3_ticknum_label,zijcont3.ticknumslider],[],[])                zij3_submit_butt_frm = tk1.Frame(zij3_interior,bd=2,relief=tk1.RIDGE)        zij3_submit_butt_frm.grid(row=2,column=0, columnspan=6, sticky='NSEW')        zij3_submit_butt = tk1.Button(zij3_submit_butt_frm, text="Submit and Save Changes and Update Zijderveld Multiple Plot", command= lambda: submitzij3controls(self,zijcont3,zij3_master))        zij3_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij3_submit_butt.configure(font=('Consolas bold',12))        zij3_reset_butt = tk1.Button(zij3_submit_butt_frm, text="Reset Zijderveld Multiple Plot to Defaults", command= lambda: zij3_resetdefaults(self,zij3_master))        zij3_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij3_reset_butt.configure(font=('Consolas',10))        zij3_cancel_butt = tk1.Button(zij3_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(zij3_master))        zij3_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        zij3_cancel_butt.configure(font=('Consolas',10))        tk1.mainloop()    return################ 3D Plot Controls ################class setdefaults3D:    def __init__(self):        self.show_popupannotations = True        self.show_arrowlines = True        self.show_jdecrease_edge = True        self.show_jincrease_edge = True        self.show_zijproj = True        self.show_axes = True        self.show_title = True        self.show_legend = True        self.show_firststep = True        self.show_laststep = True        self.show_laststep_edge = True        self.show_firststep_edge = True        self.show_grid = True        self.show_ticks = True        self.show_gridlines = True        self.show_ticklabels = True        self.show_labels = True        self.firststep_edge_color = "BLACK"        self.laststep_edge_color = "BLACK"        self.tick_color = "BLACK"        self.label_color = "BLACK"        self.title_color = "BLACK"        self.legend_color = "BLACK"        self.jdecrease_edge_color = "BLACK"        self.jincrease_edge_color = "BLACK"        self.arrowline_color = "GREEN"        self.jdecrease_color = "RED"        self.jincrease_color = "BLUE"        self.axes_color = "BLUE"        self.firststep_color = "YELLOW"        self.laststep_color = "YELLOW"        self.zijproj_color = "#FF69B4"        self.arrowsorlines = "Arrows"        self.label_fontsize_mod = "Normal"        self.jdecrease_symbol = 'o'        self.jincrease_symbol = 'o'        self.firststep_symbol = "s"        self.laststep_symbol = "^"        self.arrowline_width = 1        self.jincrease_edge_width = 1        self.jdecrease_edge_width = 1        self.firststep_edge_width = 1        self.laststep_edge_width = 1        self.axis_width = 1        self.arrowhead_length = 5        self.arrowhead_width = 6        self.firststep_size = 20        self.jdecrease_size = 50        self.jincrease_size = 50        self.laststep_size = 100        self.error_scaling = "None"        returndef resetdefaults3D(self,window):    global cont3D    cont3D = setdefaults3D()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef resetdefaults3D2(self,window):    global cont3D2    cont3D2 = setdefaults3D()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef resetdefaults3D3(self,window):    global cont3D3    cont3D3 = setdefaults3D()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submit3Dcontrols(self,cont3D,window):    cont3D.show_arrowlines = cont3D.show_arrowline_var.get()    cont3D.arrowsorlines = cont3D.arrowline_var.get()    cont3D.arrowline_width = cont3D.arrowline_width_var.get()    cont3D.arrowline_color = cont3D.arrowline_color_temp    cont3D.jincrease_color = cont3D.jincrease_color_temp    cont3D.jincrease_symbol = symbolchoices_dict[cont3D.jincrease_symbol_var.get()]    cont3D.jincrease_size = cont3D.jincrease_symbol_size_slider.get()    cont3D.show_jincrease_edge = cont3D.show_jincrease_edge_var.get()    cont3D.jincrease_edge_color = cont3D.jincrease_edge_color_temp    cont3D.jincrease_edge_width = cont3D.jincrease_edge_width_var.get()    cont3D.show_firststep = cont3D.show_firststep_var.get()    cont3D.firststep_symbol = symbolchoices_dict[cont3D.firststep_symbol_var.get()]    cont3D.firststep_size = cont3D.firststep_symbol_size_slider.get()    cont3D.firststep_color = cont3D.firststep_color_temp    cont3D.show_firststep_edge = cont3D.show_firststep_edge_var.get()    cont3D.firststep_edge_color = cont3D.firststep_edge_color_temp    cont3D.firststep_edge_width = cont3D.firststep_edge_width_var.get()    cont3D.show_laststep = cont3D.show_laststep_var.get()    cont3D.laststep_symbol = symbolchoices_dict[cont3D.laststep_symbol_var.get()]    cont3D.laststep_size = cont3D.laststep_symbol_size_slider.get()    cont3D.laststep_color = cont3D.laststep_color_temp    cont3D.show_laststep_edge = cont3D.show_laststep_edge_var.get()    cont3D.laststep_edge_color = cont3D.laststep_edge_color_temp    cont3D.laststep_edge_width = cont3D.laststep_edge_width_var.get()    cont3D.show_popupannotations = cont3D.show_popupannotations_var.get()    cont3D.jdecrease_color = cont3D.jdecrease_color_temp    cont3D.jdecrease_symbol = symbolchoices_dict[cont3D.jdecrease_symbol_var.get()]    cont3D.jdecrease_size = cont3D.jdecrease_symbol_size_slider.get()    cont3D.show_jdecrease_edge = cont3D.show_jdecrease_edge_var.get()    cont3D.jdecrease_edge_color = cont3D.jdecrease_edge_color_temp    cont3D.jdecrease_edge_width = cont3D.jdecrease_edge_width_var.get()    cont3D.show_zijproj = cont3D.show_zijproj_var.get()    cont3D.zijproj_color = cont3D.zijproj_color_temp    cont3D.show_axes = cont3D.show_axes_var.get()    cont3D.axis_width = cont3D.axis_width_var.get()    cont3D.axes_color = cont3D.axes_color_temp    cont3D.show_grid = cont3D.show_grid_var.get()    cont3D.show_ticks = cont3D.show_ticks_var.get()    cont3D.show_gridlines = cont3D.show_gridlines_var.get()    cont3D.show_ticklabels = cont3D.show_ticklabels_var.get()    cont3D.show_labels = cont3D.show_labels_var.get()    cont3D.label_fontsize_mod = cont3D.label_fontsize_var.get()    cont3D.label_color = cont3D.label_color_temp    cont3D.tick_color = cont3D.tick_color_temp    cont3D.show_title = cont3D.show_title_var.get()    cont3D.title_color = cont3D.title_color_temp    cont3D.show_legend = cont3D.show_legend_var.get()    cont3D.legend_color = cont3D.legend_color_temp    cont3D.error_scaling = cont3D.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submit3D2controls(self,cont3D2,window):    cont3D2.show_popupannotations = cont3D2.show_popupannotations_var.get()    cont3D2.jdecrease_color = cont3D2.jdecrease_color_temp    cont3D2.jdecrease_symbol = symbolchoices_dict[cont3D2.jdecrease_symbol_var.get()]    cont3D2.jdecrease_size = cont3D2.jdecrease_symbol_size_slider.get()    cont3D2.show_jdecrease_edge = cont3D2.show_jdecrease_edge_var.get()    cont3D2.jdecrease_edge_color = cont3D2.jdecrease_edge_color_temp    cont3D2.jdecrease_edge_width = cont3D2.jdecrease_edge_width_var.get()    cont3D2.show_zijproj = cont3D2.show_zijproj_var.get()    cont3D2.zijproj_color = cont3D2.zijproj_color_temp    cont3D2.show_axes = cont3D2.show_axes_var.get()    cont3D2.axis_width = cont3D2.axis_width_var.get()    cont3D2.axes_color = cont3D2.axes_color_temp    cont3D2.show_grid = cont3D2.show_grid_var.get()    cont3D2.show_ticks = cont3D2.show_ticks_var.get()    cont3D2.show_gridlines = cont3D2.show_gridlines_var.get()    cont3D2.show_ticklabels = cont3D2.show_ticklabels_var.get()    cont3D2.show_labels = cont3D2.show_labels_var.get()    cont3D2.label_fontsize_mod = cont3D2.label_fontsize_var.get()    cont3D2.label_color = cont3D2.label_color_temp    cont3D2.tick_color = cont3D2.tick_color_temp    cont3D2.show_title = cont3D2.show_title_var.get()    cont3D2.title_color = cont3D2.title_color_temp    cont3D2.show_legend = cont3D2.show_legend_var.get()    cont3D2.legend_color = cont3D2.legend_color_temp    cont3D2.error_scaling = cont3D2.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submit3D3controls(self,cont3D3,window):    cont3D3.show_arrowlines = cont3D3.show_arrowline_var.get()    cont3D3.arrowsorlines = cont3D3.arrowline_var.get()    cont3D3.arrowline_width = cont3D3.arrowline_width_var.get()    cont3D3.arrowline_color = cont3D3.arrowline_color_temp    cont3D3.jincrease_color = cont3D3.jincrease_color_temp    cont3D3.jincrease_symbol = symbolchoices_dict[cont3D3.jincrease_symbol_var.get()]    cont3D3.jincrease_size = cont3D3.jincrease_symbol_size_slider.get()    cont3D3.show_jincrease_edge = cont3D3.show_jincrease_edge_var.get()    cont3D3.jincrease_edge_color = cont3D3.jincrease_edge_color_temp    cont3D3.jincrease_edge_width = cont3D3.jincrease_edge_width_var.get()    cont3D3.show_firststep = cont3D3.show_firststep_var.get()    cont3D3.firststep_symbol = symbolchoices_dict[cont3D3.firststep_symbol_var.get()]    cont3D3.firststep_size = cont3D3.firststep_symbol_size_slider.get()    cont3D3.firststep_color = cont3D3.firststep_color_temp    cont3D3.show_firststep_edge = cont3D3.show_firststep_edge_var.get()    cont3D3.firststep_edge_color = cont3D3.firststep_edge_color_temp    cont3D3.firststep_edge_width = cont3D3.firststep_edge_width_var.get()    cont3D3.show_laststep = cont3D3.show_laststep_var.get()    cont3D3.laststep_symbol = symbolchoices_dict[cont3D3.laststep_symbol_var.get()]    cont3D3.laststep_size = cont3D3.laststep_symbol_size_slider.get()    cont3D3.laststep_color = cont3D3.laststep_color_temp    cont3D3.show_laststep_edge = cont3D3.show_laststep_edge_var.get()    cont3D3.laststep_edge_color = cont3D3.laststep_edge_color_temp    cont3D3.laststep_edge_width = cont3D3.laststep_edge_width_var.get()    cont3D3.show_popupannotations = cont3D3.show_popupannotations_var.get()    cont3D3.jdecrease_color = cont3D3.jdecrease_color_temp    cont3D3.jdecrease_symbol = symbolchoices_dict[cont3D3.jdecrease_symbol_var.get()]    cont3D3.jdecrease_size = cont3D3.jdecrease_symbol_size_slider.get()    cont3D3.show_jdecrease_edge = cont3D3.show_jdecrease_edge_var.get()    cont3D3.jdecrease_edge_color = cont3D3.jdecrease_edge_color_temp    cont3D3.jdecrease_edge_width = cont3D3.jdecrease_edge_width_var.get()    cont3D3.show_zijproj = cont3D3.show_zijproj_var.get()    cont3D3.zijproj_color = cont3D3.zijproj_color_temp    cont3D3.show_axes = cont3D3.show_axes_var.get()    cont3D3.axis_width = cont3D3.axis_width_var.get()    cont3D3.axes_color = cont3D3.axes_color_temp    cont3D3.show_grid = cont3D3.show_grid_var.get()    cont3D3.show_ticks = cont3D3.show_ticks_var.get()    cont3D3.show_gridlines = cont3D3.show_gridlines_var.get()    cont3D3.show_ticklabels = cont3D3.show_ticklabels_var.get()    cont3D3.show_labels = cont3D3.show_labels_var.get()    cont3D3.label_fontsize_mod = cont3D3.label_fontsize_var.get()    cont3D3.label_color = cont3D3.label_color_temp    cont3D3.tick_color = cont3D3.tick_color_temp    cont3D3.show_title = cont3D3.show_title_var.get()    cont3D3.title_color = cont3D3.title_color_temp    cont3D3.show_legend = cont3D3.show_legend_var.get()    cont3D3.legend_color = cont3D3.legend_color_temp    cont3D3.error_scaling = cont3D3.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef controls3D_sample(self):    global master_3D, cont3D##    if master_3D != None and master_3D.winfo_exists():##    else: # Create master_3D control window    try:        'normal' == master_3D.state()        master_3D.lift()        master_3D.attributes('-topmost',True)        master_3D.after_idle(master_3D.attributes,'-topmost',False)    except:        master_3D = tk1.Toplevel(root)        master_3D.title('master_3D')        master_3D.focus_set()        master_3D.title("3D Plot Controls (Sample Data)")        master_3D.geometry("+20+20")        cont3D.arrowline_color_temp = cont3D.arrowline_color        cont3D.jdecrease_color_temp = cont3D.jdecrease_color        cont3D.jdecrease_edge_color_temp = cont3D.jdecrease_edge_color        cont3D.jincrease_color_temp = cont3D.jincrease_color        cont3D.jincrease_edge_color_temp = cont3D.jincrease_edge_color        cont3D.firststep_color_temp = cont3D.firststep_color        cont3D.laststep_color_temp = cont3D.laststep_color        cont3D.firststep_edge_color_temp = cont3D.firststep_edge_color        cont3D.laststep_edge_color_temp = cont3D.laststep_edge_color        cont3D.zijproj_color_temp = cont3D.zijproj_color        cont3D.axes_color_temp = cont3D.axes_color        cont3D.label_color_temp = cont3D.label_color        cont3D.tick_color_temp = cont3D.tick_color        cont3D.title_color_temp = cont3D.title_color        cont3D.legend_color_temp = cont3D.legend_color        plot3D_vertical_scrollbar = tk1.Scrollbar(master_3D,orient=tk1.VERTICAL)        plot3D_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        plot3D_horizontal_scrollbar = tk1.Scrollbar(master_3D,orient=tk1.HORIZONTAL)        plot3D_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)        self.plot3D_canvas = tk1.Canvas(master_3D, bd=0, highlightthickness=0,yscrollcommand=plot3D_vertical_scrollbar.set,xscrollcommand=plot3D_horizontal_scrollbar.set,width=1090,height=730,scrollregion=(0,0,1090,730))        self.plot3D_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        plot3D_vertical_scrollbar.config(command=self.plot3D_canvas.yview)        plot3D_horizontal_scrollbar.config(command=self.plot3D_canvas.xview)        self.plot3D_canvas.xview_moveto(0)        self.plot3D_canvas.yview_moveto(0)        plot3D_interior = tk1.Frame(self.plot3D_canvas,width=500,height=500)        plot3D_interior_id = self.plot3D_canvas.create_window(0, 0, window=plot3D_interior,anchor=tk1.NW)                plot3D_col0_frm = tk1.Frame(plot3D_interior,bd=2) # Column 0        plot3D_col0_frm.grid(row=0,column=0,sticky='NSEW')                plot3D_arrowline_frm = tk1.Frame(plot3D_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D_arrowline_frm.pack(fill=tk1.X)                plot3D_arrowline_title_label = tk1.Label(plot3D_arrowline_frm, text="Arrows & Lines Settings:",font="Helvetica 12 bold")        plot3D_arrowline_title_label.pack(fill=tk1.X)        plot3D_plotarrow_frm = tk1.Frame(plot3D_arrowline_frm,bd=2,relief=tk1.GROOVE)        plot3D_plotarrow_frm.pack(fill=tk1.X)        cont3D.show_arrowline_var = tk1.BooleanVar(value=cont3D.show_arrowlines)        plot3D_show_arrowline_chbutt = tk1.Checkbutton(plot3D_plotarrow_frm, text="Show Arrows and Lines?", variable=cont3D.show_arrowline_var,command= lambda:                                              disablewidgets(cont3D.show_arrowline_var,False,[plot3D_arrowline_label,plot3D_arrowline_radio_arrow,plot3D_arrowline_radio_line,plot3D_arrowline_color_butt,plot3D_arrowline_color_label,                                                                                            plot3D_arrowline_width_label,plot3D_arrowline_width_optionmenu],[],[]))        plot3D_show_arrowline_chbutt.pack(fill=tk1.X)        plot3D_arrowline_radio_text_frm = tk1.Frame(plot3D_plotarrow_frm,bd=2,relief=tk1.GROOVE)        plot3D_arrowline_radio_text_frm.pack(fill=tk1.X)        plot3D_arrowline_label = tk1.Label(plot3D_arrowline_radio_text_frm, text="Plot Arrows or Lines?")        plot3D_arrowline_label.pack(fill=tk1.X)        cont3D.arrowline_var = tk1.StringVar()        cont3D.arrowline_var.set(cont3D.arrowsorlines)        plot3D_arrowline_radio_frm = tk1.Frame(plot3D_arrowline_radio_text_frm,bd=2)        plot3D_arrowline_radio_frm.pack(fill=tk1.X)        plot3D_arrowline_radio_arrow = tk1.Radiobutton(plot3D_arrowline_radio_frm, text="Plot Arrows",variable=cont3D.arrowline_var,value="Arrows")        plot3D_arrowline_radio_arrow.pack(side=tk1.LEFT,padx=40)        plot3D_arrowline_radio_line = tk1.Radiobutton(plot3D_arrowline_radio_frm, text="Plot Lines",variable=cont3D.arrowline_var,value="Lines")        plot3D_arrowline_radio_line.pack(side=tk1.LEFT,padx=0)        plot3D_arrowline_color_frm = tk1.Frame(plot3D_arrowline_frm,bd=2,relief=tk1.GROOVE)        plot3D_arrowline_color_frm.pack(fill=tk1.X)        plot3D_arrowline_color_frm.grid_columnconfigure(0, weight=1)        plot3D_arrowline_color_frm.grid_columnconfigure(3, weight=1)        plot3D_arrowline_color_butt = tk1.Button(plot3D_arrowline_color_frm,text="Select Arrow/Line Color", command= lambda: getcolor(master_3D,"cont3D.arrowline_color_temp","3D Plot Arrow/Line",                                                                                                                                      plot3D_arrowline_color_label,plot3D_arrowline_color_frm,False))        plot3D_arrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D_arrowline_color_label = tk1.Label(plot3D_arrowline_color_frm,text="Current\nColor:\n%s" % cont3D.arrowline_color_temp,fg=getoppositecolor(cont3D.arrowline_color_temp), bg=cont3D.arrowline_color_temp,width=10)        plot3D_arrowline_color_label.grid(row=0,column=2)        plot3D_arrowline_width_frm = tk1.Frame(plot3D_arrowline_frm,bd=2,relief=tk1.GROOVE)        plot3D_arrowline_width_frm.pack(fill=tk1.X)        plot3D_arrowline_width_frm.grid_columnconfigure(0, weight=1)        plot3D_arrowline_width_frm.grid_columnconfigure(3, weight=1)        plot3D_arrowline_width_label = tk1.Label(plot3D_arrowline_width_frm, text="Arrow/Line Width:")        plot3D_arrowline_width_label.grid(row=0,column=1,sticky='NESW')                cont3D.arrowline_width_var = tk1.IntVar(plot3D_interior)        cont3D.arrowline_width_var.set(cont3D.arrowline_width)         plot3D_arrowline_width_optionmenu = tk1.OptionMenu(plot3D_arrowline_width_frm, cont3D.arrowline_width_var, *linewidthchoices_set)        plot3D_arrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_arrowline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D.show_arrowline_var,False,[plot3D_arrowline_label,plot3D_arrowline_radio_arrow,plot3D_arrowline_radio_line,plot3D_arrowline_color_butt,                                                       plot3D_arrowline_color_label,plot3D_arrowline_width_label,plot3D_arrowline_width_optionmenu],[],[])        plot3D_zijproj_settings_frm = tk1.Frame(plot3D_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D_zijproj_settings_frm.pack(fill=tk1.X)        plot3D_zijproj_settings_label = tk1.Label(plot3D_zijproj_settings_frm, text="Zijderveld Heading Projection Settings:",bd=1,font="Helvetica 12 bold")        plot3D_zijproj_settings_label.pack(fill=tk1.X)        plot3D_show_zijproj_frm = tk1.Frame(plot3D_zijproj_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_zijproj_frm.pack(fill=tk1.X)        cont3D.show_zijproj_var = tk1.BooleanVar(value=cont3D.show_zijproj)        plot3D_show_zijproj_chbutt = tk1.Checkbutton(plot3D_show_zijproj_frm, text="Show Zijderveld Projection Heading?", variable=cont3D.show_zijproj_var,command= lambda:                                              disablewidgets(cont3D.show_zijproj_var,False,[plot3D_zijproj_color_butt,plot3D_zijproj_color_label],[],[]))        plot3D_show_zijproj_chbutt.pack(fill=tk1.X)        plot3D_zijproj_color_frm = tk1.Frame(plot3D_show_zijproj_frm,bd=2,relief=tk1.GROOVE)        plot3D_zijproj_color_frm.pack(fill=tk1.X)        plot3D_zijproj_color_frm.grid_columnconfigure(0, weight=1)        plot3D_zijproj_color_frm.grid_columnconfigure(3, weight=1)        plot3D_zijproj_color_butt = tk1.Button(plot3D_zijproj_color_frm,text="Select Zijderveld Projection\nHeading Color", command= lambda: getcolor(master_3D,"cont3D.zijproj_color_temp","Zijderveld Projection Heading",                                                                                                                                                      plot3D_zijproj_color_label,plot3D_zijproj_color_frm,False))        plot3D_zijproj_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D_zijproj_color_label = tk1.Label(plot3D_zijproj_color_frm,text="Current\nColor:\n%s" % cont3D.zijproj_color_temp,fg=getoppositecolor(cont3D.zijproj_color_temp), bg=cont3D.zijproj_color_temp,width=10)        plot3D_zijproj_color_label.grid(row=0,column=2)        disablewidgets(cont3D.show_zijproj_var,False,[plot3D_zijproj_color_butt,plot3D_zijproj_color_label],[],[])        plot3D_legend_settings_frm = tk1.Frame(plot3D_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D_legend_settings_frm.pack(fill=tk1.X)        plot3D_legend_settings_label = tk1.Label(plot3D_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        plot3D_legend_settings_label.pack(fill=tk1.X)                plot3D_show_title_frm = tk1.Frame(plot3D_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_title_frm.pack(fill=tk1.X)        cont3D.show_title_var = tk1.BooleanVar(value=cont3D.show_title)        plot3D_show_title_chbutt = tk1.Checkbutton(plot3D_show_title_frm, text="Show Title?", variable=cont3D.show_title_var,command= lambda:                                              disablewidgets(cont3D.show_title_var,False,[plot3D_title_color_butt,plot3D_title_color_label],[],[]))        plot3D_show_title_chbutt.pack(fill=tk1.X)        plot3D_title_color_frm = tk1.Frame(plot3D_show_title_frm,bd=2,relief=tk1.GROOVE)        plot3D_title_color_frm.pack(fill=tk1.X)        plot3D_title_color_frm.grid_columnconfigure(0, weight=1)        plot3D_title_color_frm.grid_columnconfigure(3, weight=1)        plot3D_title_color_butt = tk1.Button(plot3D_title_color_frm,text="Select Title Color", command= lambda: getcolor(master_3D,"cont3D.title_color_temp","3D Plot Title",plot3D_title_color_label,plot3D_title_color_frm,False))        plot3D_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D_title_color_label = tk1.Label(plot3D_title_color_frm,text="Current\nColor:\n%s" % cont3D.title_color_temp,fg=getoppositecolor(cont3D.title_color_temp), bg=cont3D.title_color_temp,width=10)        plot3D_title_color_label.grid(row=0,column=2)        disablewidgets(cont3D.show_title_var,False,[plot3D_title_color_butt,plot3D_title_color_label],[],[])        plot3D_show_legend_frm = tk1.Frame(plot3D_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_legend_frm.pack(fill=tk1.X)        cont3D.show_legend_var = tk1.BooleanVar(value=cont3D.show_legend)        plot3D_show_legend_chbutt = tk1.Checkbutton(plot3D_show_legend_frm, text="Show Legend?", variable=cont3D.show_legend_var,command= lambda:                                              disablewidgets(cont3D.show_legend_var,False,[plot3D_legend_color_butt,plot3D_legend_color_label],[],[]))        plot3D_show_legend_chbutt.pack(fill=tk1.X)        plot3D_legend_color_frm = tk1.Frame(plot3D_show_legend_frm,bd=2,relief=tk1.GROOVE)        plot3D_legend_color_frm.pack(fill=tk1.X)        plot3D_legend_color_frm.grid_columnconfigure(0, weight=1)        plot3D_legend_color_frm.grid_columnconfigure(3, weight=1)        plot3D_legend_color_butt = tk1.Button(plot3D_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(master_3D,"cont3D.legend_color_temp","3D Plot Legend",plot3D_legend_color_label,plot3D_legend_color_frm,False))        plot3D_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D_legend_color_label = tk1.Label(plot3D_legend_color_frm,text="Current\nColor:\n%s" % cont3D.legend_color_temp,fg=getoppositecolor(cont3D.legend_color_temp), bg=cont3D.legend_color_temp,width=10)        plot3D_legend_color_label.grid(row=0,column=2)        disablewidgets(cont3D.show_legend_var,False,[plot3D_legend_color_butt,plot3D_legend_color_label],[],[])        plot3D_showannot_frm = tk1.Frame(plot3D_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D_showannot_frm.pack(fill=tk1.X)        cont3D.show_popupannotations_var = tk1.BooleanVar(value=cont3D.show_popupannotations)        plot3D_show_popupannotations_chbutt = tk1.Checkbutton(plot3D_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=cont3D.show_popupannotations_var)        plot3D_show_popupannotations_chbutt.pack(fill=tk1.X)        plot3D_error_settings_frm = tk1.Frame(plot3D_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D_error_settings_frm.pack(fill=tk1.X)        plot3D_error_settings_label = tk1.Label(plot3D_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        plot3D_error_settings_label.pack(fill=tk1.X)                plot3D_error_radio_frm = tk1.Frame(plot3D_error_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D_error_radio_frm.pack(fill=tk1.X)        plot3D_error_settings_label = tk1.Label(plot3D_error_radio_frm, text="Select Error-Scaling for Symbols:")        plot3D_error_settings_label.pack(fill=tk1.X)        cont3D.error_scaling_var = tk1.StringVar()        cont3D.error_scaling_var.set(cont3D.error_scaling)        plot3D_errorscaling_radio_none = tk1.Radiobutton(plot3D_error_radio_frm, text="No Error Scaling",variable=cont3D.error_scaling_var,value="None",command = lambda:              disablewidgets(cont3D.error_scaling_var,"None",[],[plot3D_jdecrease_color_butt,plot3D_jdecrease_color_label,plot3D_jincrease_color_butt,plot3D_jincrease_color_label,                                  cont3D.jdecrease_symbol_size_slider,cont3D.jincrease_symbol_size_slider,plot3D_jdecrease_symbol_size_label,plot3D_jincrease_symbol_size_label],[]))        plot3D_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        plot3D_errorscaling_radio_size = tk1.Radiobutton(plot3D_error_radio_frm, text="Scale Symbol Size by Error",variable=cont3D.error_scaling_var,value="Size",command = lambda:                  disablewidgets(cont3D.error_scaling_var,"Size",[cont3D.jdecrease_symbol_size_slider,cont3D.jincrease_symbol_size_slider,plot3D_jdecrease_symbol_size_label,plot3D_jincrease_symbol_size_label],                                 [plot3D_jdecrease_color_butt,plot3D_jdecrease_color_label,plot3D_jincrease_color_butt,plot3D_jincrease_color_label],[]))        plot3D_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        plot3D_errorscaling_radio_color = tk1.Radiobutton(plot3D_error_radio_frm, text="Scale Symbol Color By Error",variable=cont3D.error_scaling_var,value="Color",command = lambda:                               disablewidgets(cont3D.error_scaling_var,"Color",[plot3D_jdecrease_color_butt,plot3D_jdecrease_color_label,plot3D_jincrease_color_butt,plot3D_jincrease_color_label],                                              [cont3D.jdecrease_symbol_size_slider,cont3D.jincrease_symbol_size_slider,plot3D_jdecrease_symbol_size_label,plot3D_jincrease_symbol_size_label],[]))        plot3D_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        plot3D_col1_frm = tk1.Frame(plot3D_interior,bd=2) # Column 1        plot3D_col1_frm.grid(row=0,column=1,sticky='NSEW')                plot3D_jdecrease_frm = tk1.Frame(plot3D_col1_frm,bd=2,relief=tk1.SUNKEN)        plot3D_jdecrease_frm.pack(fill=tk1.X)        plot3D_jdecrease_symbol_settings_label = tk1.Label(plot3D_jdecrease_frm, text="Intensity Decrease Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D_jdecrease_symbol_settings_label.pack(fill=tk1.X)        plot3D_jdecrease_symbol_frm = tk1.Frame(plot3D_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jdecrease_symbol_frm.pack(fill=tk1.X)        plot3D_jdecrease_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D_jdecrease_symbol_frm.grid_columnconfigure(3, weight=1)                plot3D_jdecrease_symbol_label = tk1.Label(plot3D_jdecrease_symbol_frm, text="Intensity Decrease Symbol:",bd=1)        plot3D_jdecrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D.jdecrease_symbol_var = tk1.StringVar(plot3D_interior)        cont3D.jdecrease_symbol_var.set(symbolchoices_dict_reverse[cont3D.jdecrease_symbol])         plot3D_jdecrease_symbolchoices_optionmenu = tk1.OptionMenu(plot3D_jdecrease_symbol_frm, cont3D.jdecrease_symbol_var, *symbolchoices_set)        plot3D_jdecrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_jdecrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D_jdecrease_size_frm = tk1.Frame(plot3D_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jdecrease_size_frm.pack(fill=tk1.X)        plot3D_jdecrease_symbol_size_label = tk1.Label(plot3D_jdecrease_size_frm, text="Intensity Decrease Symbol Size:")        plot3D_jdecrease_symbol_size_label.pack(fill=tk1.X)        cont3D.jdecrease_symbol_size_slider = Scale(plot3D_jdecrease_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D.jdecrease_symbol_size_slider.set(cont3D.jdecrease_size)        cont3D.jdecrease_symbol_size_slider.pack(fill=tk1.X)        plot3D_jdecrease_color_frm = tk1.Frame(plot3D_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jdecrease_color_frm.pack(fill=tk1.X)        plot3D_jdecrease_color_frm.grid_columnconfigure(0, weight=1)        plot3D_jdecrease_color_frm.grid_columnconfigure(3, weight=1)        plot3D_jdecrease_color_butt = tk1.Button(plot3D_jdecrease_color_frm,text="Select Intensity Decrease\nSymbol Color", command= lambda: getcolor(master_3D,"cont3D.jdecrease_color_temp","3D Plot Intensity Decrease Symbol",                                                                                                                                                          plot3D_jdecrease_color_label,plot3D_jdecrease_color_frm,False))        plot3D_jdecrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_jdecrease_color_label = tk1.Label(plot3D_jdecrease_color_frm,text="Current\nColor:\n%s" % cont3D.jdecrease_color_temp,fg=getoppositecolor(cont3D.jdecrease_color_temp), bg=cont3D.jdecrease_color_temp,width=10)        plot3D_jdecrease_color_label.grid(row=0, column=2,sticky='NSEW')                plot3D_show_jdecrease_edge_frm = tk1.Frame(plot3D_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_jdecrease_edge_frm.pack(fill=tk1.X)        cont3D.show_jdecrease_edge_var = tk1.BooleanVar(value=cont3D.show_jdecrease_edge)        plot3D_show_jdecrease_edge_chbutt = tk1.Checkbutton(plot3D_show_jdecrease_edge_frm, text="Show Intensity Decrease Symbol Border?", variable=cont3D.show_jdecrease_edge_var,command= lambda:                                              disablewidgets(cont3D.show_jdecrease_edge_var,False,[plot3D_jdecrease_edge_color_butt,plot3D_jdecrease_edge_color_label,                                                                                                   plot3D_jdecrease_edge_width_label,plot3D_jdecrease_edge_width_optionmenu],[],[]))        plot3D_show_jdecrease_edge_chbutt.pack(fill=tk1.X)        plot3D_jdecrease_edge_color_frm = tk1.Frame(plot3D_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jdecrease_edge_color_frm.pack(fill=tk1.X)        plot3D_jdecrease_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D_jdecrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_jdecrease_edge_color_butt = tk1.Button(plot3D_jdecrease_edge_color_frm,text="Select Intensity Decrease\nSymbol Border Color", command= lambda: getcolor(master_3D,"cont3D.jdecrease_edge_color_temp","3D Plot Intensity Decrease Symbol Edge",                                                                                                                                                                           plot3D_jdecrease_edge_color_label,plot3D_jdecrease_edge_color_frm,False))        plot3D_jdecrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_jdecrease_edge_color_label = tk1.Label(plot3D_jdecrease_edge_color_frm,text="Current\nColor:\n%s" % cont3D.jdecrease_edge_color_temp,fg=getoppositecolor(cont3D.jdecrease_edge_color_temp), bg=cont3D.jdecrease_edge_color_temp,width=10)        plot3D_jdecrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_jdecrease_edge_width_frm = tk1.Frame(plot3D_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jdecrease_edge_width_frm.pack(fill=tk1.X)        plot3D_jdecrease_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D_jdecrease_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D_jdecrease_edge_width_label = tk1.Label(plot3D_jdecrease_edge_width_frm, text="Intensity Decrease Symbol Border Width:")        plot3D_jdecrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D.jdecrease_edge_width_var = tk1.IntVar(plot3D_interior)        cont3D.jdecrease_edge_width_var.set(cont3D.jdecrease_edge_width)         plot3D_jdecrease_edge_width_optionmenu = tk1.OptionMenu(plot3D_jdecrease_edge_width_frm, cont3D.jdecrease_edge_width_var, *linewidthchoices_set)        plot3D_jdecrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_jdecrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D.show_jdecrease_edge_var,False,[plot3D_jdecrease_edge_color_butt,plot3D_jdecrease_edge_color_label,plot3D_jdecrease_edge_width_label,plot3D_jdecrease_edge_width_optionmenu],[],[])                plot3D_jincrease_frm = tk1.Frame(plot3D_col1_frm,bd=2,relief=tk1.SUNKEN)        plot3D_jincrease_frm.pack(fill=tk1.X)        plot3D_jincrease_symbol_settings_label = tk1.Label(plot3D_jincrease_frm, text="Intensity Increase Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D_jincrease_symbol_settings_label.pack(fill=tk1.X)        plot3D_jincrease_symbol_frm = tk1.Frame(plot3D_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jincrease_symbol_frm.pack(fill=tk1.X)        plot3D_jincrease_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D_jincrease_symbol_frm.grid_columnconfigure(3, weight=1)                  plot3D_jincrease_symbol_label = tk1.Label(plot3D_jincrease_symbol_frm, text="Intensity Increase Symbol:",bd=1)        plot3D_jincrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D.jincrease_symbol_var = tk1.StringVar(plot3D_interior)        cont3D.jincrease_symbol_var.set(symbolchoices_dict_reverse[cont3D.jincrease_symbol])         plot3D_jincrease_symbolchoices_optionmenu = tk1.OptionMenu(plot3D_jincrease_symbol_frm, cont3D.jincrease_symbol_var, *symbolchoices_set)        plot3D_jincrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_jincrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D_jincrease_size_frm = tk1.Frame(plot3D_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jincrease_size_frm.pack(fill=tk1.X)        plot3D_jincrease_symbol_size_label = tk1.Label(plot3D_jincrease_size_frm, text="Intensity Increase Symbol Size:")        plot3D_jincrease_symbol_size_label.pack(fill=tk1.X)        cont3D.jincrease_symbol_size_slider = Scale(plot3D_jincrease_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D.jincrease_symbol_size_slider.set(cont3D.jincrease_size)        cont3D.jincrease_symbol_size_slider.pack(fill=tk1.X)        plot3D_jincrease_color_frm = tk1.Frame(plot3D_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jincrease_color_frm.pack(fill=tk1.X)        plot3D_jincrease_color_frm.grid_columnconfigure(0, weight=1)        plot3D_jincrease_color_frm.grid_columnconfigure(3, weight=1)        plot3D_jincrease_color_butt = tk1.Button(plot3D_jincrease_color_frm,text="Select Intensity Increase\nSymbol Color", command= lambda: getcolor(master_3D,"cont3D.jincrease_color_temp","3D Plot Intensity Increase Symbol",                                                                                                                                                          plot3D_jincrease_color_label,plot3D_jincrease_color_frm,False))        plot3D_jincrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_jincrease_color_label = tk1.Label(plot3D_jincrease_color_frm,text="Current\nColor:\n%s" % cont3D.jincrease_color_temp,fg=getoppositecolor(cont3D.jincrease_color_temp), bg=cont3D.jincrease_color_temp,width=10)        plot3D_jincrease_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_show_jincrease_edge_frm = tk1.Frame(plot3D_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_jincrease_edge_frm.pack(fill=tk1.X)        cont3D.show_jincrease_edge_var = tk1.BooleanVar(value=cont3D.show_jincrease_edge)        plot3D_show_jincrease_edge_chbutt = tk1.Checkbutton(plot3D_show_jincrease_edge_frm, text="Show Intensity Increase Symbol Border?", variable=cont3D.show_jincrease_edge_var,command= lambda:                                              disablewidgets(cont3D.show_jincrease_edge_var,False,[plot3D_jincrease_edge_color_butt,plot3D_jincrease_edge_color_label,                                                                                                   plot3D_jincrease_edge_width_label,plot3D_jincrease_edge_width_optionmenu],[],[]))        plot3D_show_jincrease_edge_chbutt.pack(fill=tk1.X)        plot3D_jincrease_edge_color_frm = tk1.Frame(plot3D_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jincrease_edge_color_frm.pack(fill=tk1.X)        plot3D_jincrease_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D_jincrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_jincrease_edge_color_butt = tk1.Button(plot3D_jincrease_edge_color_frm,text="Select Intensity Increase\nSymbol Border Color", command= lambda: getcolor(master_3D,"cont3D.jincrease_edge_color_temp","3D Plot Intensity Increase Symbol Edge",                                                                                                                                                                           plot3D_jincrease_edge_color_label,plot3D_jincrease_edge_color_frm,False))        plot3D_jincrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_jincrease_edge_color_label = tk1.Label(plot3D_jincrease_edge_color_frm,text="Current\nColor:\n%s" % cont3D.jincrease_edge_color_temp,fg=getoppositecolor(cont3D.jincrease_edge_color_temp), bg=cont3D.jincrease_edge_color_temp,width=10)        plot3D_jincrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_jincrease_edge_width_frm = tk1.Frame(plot3D_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D_jincrease_edge_width_frm.pack(fill=tk1.X)        plot3D_jincrease_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D_jincrease_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D_jincrease_edge_width_label = tk1.Label(plot3D_jincrease_edge_width_frm, text="Intensity Increase Symbol Border Width:")        plot3D_jincrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D.jincrease_edge_width_var = tk1.IntVar(plot3D_interior)        cont3D.jincrease_edge_width_var.set(cont3D.jincrease_edge_width)         plot3D_jincrease_edge_width_optionmenu = tk1.OptionMenu(plot3D_jincrease_edge_width_frm, cont3D.jincrease_edge_width_var, *linewidthchoices_set)        plot3D_jincrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_jincrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D.show_jincrease_edge_var,False,[plot3D_jincrease_edge_color_butt,plot3D_jincrease_edge_color_label,plot3D_jincrease_edge_width_label,plot3D_jincrease_edge_width_optionmenu],[],[])        disablewidgets(cont3D.error_scaling_var,"None",[],[plot3D_jdecrease_color_butt,plot3D_jdecrease_color_label,plot3D_jincrease_color_butt,plot3D_jincrease_color_label,                cont3D.jdecrease_symbol_size_slider,cont3D.jincrease_symbol_size_slider,plot3D_jdecrease_symbol_size_label,plot3D_jincrease_symbol_size_label],[])        disablewidgets(cont3D.error_scaling_var,"Size",[cont3D.jdecrease_symbol_size_slider,cont3D.jincrease_symbol_size_slider,plot3D_jdecrease_symbol_size_label,plot3D_jincrease_symbol_size_label],                [plot3D_jdecrease_color_butt,plot3D_jdecrease_color_label,plot3D_jincrease_color_butt,plot3D_jincrease_color_label],[])        disablewidgets(cont3D.error_scaling_var,"Color",[plot3D_jdecrease_color_butt,plot3D_jdecrease_color_label,plot3D_jincrease_color_butt,plot3D_jincrease_color_label],                [cont3D.jdecrease_symbol_size_slider,cont3D.jincrease_symbol_size_slider,plot3D_jdecrease_symbol_size_label,plot3D_jincrease_symbol_size_label],[])        plot3D_col2_frm = tk1.Frame(plot3D_interior,bd=2) # Column 2        plot3D_col2_frm.grid(row=0,column=2,sticky='NSEW')        plot3D_firststep_frm = tk1.Frame(plot3D_col2_frm,bd=2,relief=tk1.SUNKEN)        plot3D_firststep_frm.pack(fill=tk1.X)        plot3D_firststep_symbol_settings_label = tk1.Label(plot3D_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D_firststep_symbol_settings_label.pack(fill=tk1.X)        plot3D_show_firststep_frm = tk1.Frame(plot3D_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_firststep_frm.pack(fill=tk1.X)        cont3D.show_firststep_var = tk1.BooleanVar(value=cont3D.show_firststep)        plot3D_show_firststep_chbutt = tk1.Checkbutton(plot3D_show_firststep_frm, text="Show First Step Special Symbol?", variable=cont3D.show_firststep_var,command= lambda:                                              disablewidgets(cont3D.show_firststep_var,False,[plot3D_firststep_symbol_label,plot3D_firststep_symbolchoices_optionmenu,plot3D_firststep_size_label,cont3D.firststep_symbol_size_slider,                                                                                            plot3D_firststep_color_butt,plot3D_firststep_color_label,plot3D_show_firststep_edge_chbutt,                                                                                            plot3D_firststep_edge_color_butt,plot3D_firststep_edge_color_label,plot3D_firststep_edge_width_label,plot3D_firststep_edge_width_optionmenu],[],                                                        [[cont3D.show_firststep_edge_var,[False],[plot3D_firststep_edge_color_butt,plot3D_firststep_edge_color_label,plot3D_firststep_edge_width_label,plot3D_firststep_edge_width_optionmenu]]]))        plot3D_show_firststep_chbutt.pack(fill=tk1.X)        plot3D_firststep_symbol_frm = tk1.Frame(plot3D_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_firststep_symbol_frm.pack(fill=tk1.X)        plot3D_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D_firststep_symbol_frm.grid_columnconfigure(3, weight=1)                  plot3D_firststep_symbol_label = tk1.Label(plot3D_firststep_symbol_frm, text="First Step Symbol:",bd=1)        plot3D_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D.firststep_symbol_var = tk1.StringVar(plot3D_interior)        cont3D.firststep_symbol_var.set(symbolchoices_dict_reverse[cont3D.firststep_symbol])         plot3D_firststep_symbolchoices_optionmenu = tk1.OptionMenu(plot3D_firststep_symbol_frm, cont3D.firststep_symbol_var, *symbolchoices_set)        plot3D_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D_firststep_size_frm = tk1.Frame(plot3D_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_firststep_size_frm.pack(fill=tk1.X)        plot3D_firststep_size_label = tk1.Label(plot3D_firststep_size_frm, text="First Step Symbol Size:")        plot3D_firststep_size_label.pack(fill=tk1.X)        cont3D.firststep_symbol_size_slider = Scale(plot3D_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D.firststep_symbol_size_slider.set(cont3D.firststep_size)        cont3D.firststep_symbol_size_slider.pack(fill=tk1.X)        plot3D_firststep_color_frm = tk1.Frame(plot3D_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_firststep_color_frm.pack(fill=tk1.X)        plot3D_firststep_color_frm.grid_columnconfigure(0, weight=1)        plot3D_firststep_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_firststep_color_butt = tk1.Button(plot3D_firststep_color_frm,text="Select First Step\nSymbol Color", command= lambda: getcolor(master_3D,"cont3D.firststep_color_temp","3D Plot First Step Symbol",plot3D_firststep_color_label,                                                                                                                                              plot3D_firststep_color_frm,False))        plot3D_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_firststep_color_label = tk1.Label(plot3D_firststep_color_frm,text="Current\nColor:\n%s" % cont3D.firststep_color_temp,fg=getoppositecolor(cont3D.firststep_color_temp), bg=cont3D.firststep_color_temp,width=10)        plot3D_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_show_firststep_edge_frm = tk1.Frame(plot3D_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_firststep_edge_frm.pack(fill=tk1.X)        cont3D.show_firststep_edge_var = tk1.BooleanVar(value=cont3D.show_firststep_edge)        plot3D_show_firststep_edge_chbutt = tk1.Checkbutton(plot3D_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=cont3D.show_firststep_edge_var,command= lambda:                                    disablewidgets(cont3D.show_firststep_edge_var,False,[plot3D_firststep_edge_color_butt,plot3D_firststep_edge_color_label,plot3D_firststep_edge_width_label,plot3D_firststep_edge_width_optionmenu],[],[]))        plot3D_show_firststep_edge_chbutt.pack(fill=tk1.X)                plot3D_firststep_edge_color_frm = tk1.Frame(plot3D_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_firststep_edge_color_frm.pack(fill=tk1.X)        plot3D_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_firststep_edge_color_butt = tk1.Button(plot3D_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color", command= lambda: getcolor(master_3D,"cont3D.firststep_edge_color_temp","3D Plot First Step Symbol Edge",                                                                                                                                                               plot3D_firststep_edge_color_label,plot3D_firststep_edge_color_frm,False))        plot3D_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_firststep_edge_color_label = tk1.Label(plot3D_firststep_edge_color_frm,text="Current\nColor:\n%s" % cont3D.firststep_edge_color_temp,fg=getoppositecolor(cont3D.firststep_edge_color_temp), bg=cont3D.firststep_edge_color_temp,width=10)        plot3D_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_firststep_edge_width_frm = tk1.Frame(plot3D_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_firststep_edge_width_frm.pack(fill=tk1.X)        plot3D_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D_firststep_edge_width_label = tk1.Label(plot3D_firststep_edge_width_frm, text="First Step Symbol Border Width:")        plot3D_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D.firststep_edge_width_var = tk1.IntVar(plot3D_interior)        cont3D.firststep_edge_width_var.set(cont3D.firststep_edge_width)         plot3D_firststep_edge_width_optionmenu = tk1.OptionMenu(plot3D_firststep_edge_width_frm, cont3D.firststep_edge_width_var, *linewidthchoices_set)        plot3D_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D.show_firststep_edge_var,False,[plot3D_firststep_edge_color_butt,plot3D_firststep_edge_color_label,plot3D_firststep_edge_width_label,plot3D_firststep_edge_width_optionmenu],[],[])        disablewidgets(cont3D.show_firststep_var,False,[plot3D_firststep_symbol_label,plot3D_firststep_symbolchoices_optionmenu,plot3D_firststep_size_label,cont3D.firststep_symbol_size_slider,plot3D_firststep_color_butt,plot3D_firststep_color_label,                                                       plot3D_show_firststep_edge_chbutt,plot3D_firststep_edge_color_butt,plot3D_firststep_edge_color_label,plot3D_firststep_edge_width_label,plot3D_firststep_edge_width_optionmenu],[],                       [[cont3D.show_firststep_edge_var,[False],[plot3D_firststep_edge_color_butt,plot3D_firststep_edge_color_label,plot3D_firststep_edge_width_label,plot3D_firststep_edge_width_optionmenu]]])                plot3D_laststep_frm = tk1.Frame(plot3D_col2_frm,bd=2,relief=tk1.SUNKEN)        plot3D_laststep_frm.pack(fill=tk1.X)        plot3D_laststep_symbol_settings_label = tk1.Label(plot3D_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D_laststep_symbol_settings_label.pack(fill=tk1.X)        plot3D_show_laststep_frm = tk1.Frame(plot3D_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_laststep_frm.pack(fill=tk1.X)        cont3D.show_laststep_var = tk1.BooleanVar(value=cont3D.show_laststep)        plot3D_show_laststep_chbutt = tk1.Checkbutton(plot3D_show_laststep_frm, text="Show Last Step Special Symbol?", variable=cont3D.show_laststep_var,command= lambda:                    disablewidgets(cont3D.show_laststep_var,False,[plot3D_laststep_symbol_label,plot3D_laststep_symbolchoices_optionmenu,plot3D_laststep_size_label,cont3D.laststep_symbol_size_slider,                    plot3D_laststep_color_butt,plot3D_laststep_color_label,plot3D_show_laststep_edge_chbutt,plot3D_laststep_edge_color_butt,plot3D_laststep_edge_color_label,plot3D_laststep_edge_width_label,plot3D_laststep_edge_width_optionmenu],                    [],[[cont3D.show_laststep_edge_var,[False],[plot3D_laststep_edge_color_butt,plot3D_laststep_edge_color_label,plot3D_laststep_edge_width_label,plot3D_laststep_edge_width_optionmenu]]]))        plot3D_show_laststep_chbutt.pack(fill=tk1.X)        plot3D_laststep_symbol_frm = tk1.Frame(plot3D_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_laststep_symbol_frm.pack(fill=tk1.X)        plot3D_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  plot3D_laststep_symbol_label = tk1.Label(plot3D_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        plot3D_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D.laststep_symbol_var = tk1.StringVar(plot3D_interior)        cont3D.laststep_symbol_var.set(symbolchoices_dict_reverse[cont3D.laststep_symbol])         plot3D_laststep_symbolchoices_optionmenu = tk1.OptionMenu(plot3D_laststep_symbol_frm, cont3D.laststep_symbol_var, *symbolchoices_set)        plot3D_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D_laststep_size_frm = tk1.Frame(plot3D_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_laststep_size_frm.pack(fill=tk1.X)        plot3D_laststep_size_label = tk1.Label(plot3D_laststep_size_frm, text="Last Step Symbol Size:")        plot3D_laststep_size_label.pack(fill=tk1.X)        cont3D.laststep_symbol_size_slider = Scale(plot3D_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D.laststep_symbol_size_slider.set(cont3D.laststep_size)        cont3D.laststep_symbol_size_slider.pack(fill=tk1.X)        plot3D_laststep_color_frm = tk1.Frame(plot3D_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_laststep_color_frm.pack(fill=tk1.X)        plot3D_laststep_color_frm.grid_columnconfigure(0, weight=1)        plot3D_laststep_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_laststep_color_butt = tk1.Button(plot3D_laststep_color_frm,text="Select Last Step\nSymbol Color", command= lambda: getcolor(master_3D,"cont3D.laststep_color_temp","3D Plot Last Step Symbol",                                                                                                                                           plot3D_laststep_color_label,plot3D_laststep_color_frm,False))        plot3D_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_laststep_color_label = tk1.Label(plot3D_laststep_color_frm,text="Current\nColor:\n%s" % cont3D.laststep_color_temp,fg=getoppositecolor(cont3D.laststep_color_temp), bg=cont3D.laststep_color_temp,width=10)        plot3D_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_show_laststep_edge_frm = tk1.Frame(plot3D_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_laststep_edge_frm.pack(fill=tk1.X)        cont3D.show_laststep_edge_var = tk1.BooleanVar(value=cont3D.show_laststep_edge)        plot3D_show_laststep_edge_chbutt = tk1.Checkbutton(plot3D_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=cont3D.show_laststep_edge_var,command= lambda:                                              disablewidgets(cont3D.show_laststep_edge_var,False,[plot3D_laststep_edge_color_butt,plot3D_laststep_edge_color_label,plot3D_laststep_edge_width_label,plot3D_laststep_edge_width_optionmenu],[],[]))        plot3D_show_laststep_edge_chbutt.pack(fill=tk1.X)        plot3D_laststep_edge_color_frm = tk1.Frame(plot3D_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_laststep_edge_color_frm.pack(fill=tk1.X)        plot3D_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_laststep_edge_color_butt = tk1.Button(plot3D_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color", command= lambda: getcolor(master_3D,"cont3D.laststep_edge_color_temp","3D Plot Last Step Symbol Edge",                                                                                                                                                            plot3D_laststep_edge_color_label,plot3D_laststep_edge_color_frm,False))        plot3D_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_laststep_edge_color_label = tk1.Label(plot3D_laststep_edge_color_frm,text="Current\nColor:\n%s" % cont3D.laststep_edge_color_temp,fg=getoppositecolor(cont3D.laststep_edge_color_temp), bg=cont3D.laststep_edge_color_temp,width=10)        plot3D_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_laststep_edge_width_frm = tk1.Frame(plot3D_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D_laststep_edge_width_frm.pack(fill=tk1.X)        plot3D_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D_laststep_edge_width_label = tk1.Label(plot3D_laststep_edge_width_frm, text="Last Step Symbol Border Width:")        plot3D_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D.laststep_edge_width_var = tk1.IntVar(plot3D_interior)        cont3D.laststep_edge_width_var.set(cont3D.laststep_edge_width)         plot3D_laststep_edge_width_optionmenu = tk1.OptionMenu(plot3D_laststep_edge_width_frm, cont3D.laststep_edge_width_var, *linewidthchoices_set)        plot3D_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D.show_laststep_edge_var,False,[plot3D_laststep_edge_color_butt,plot3D_laststep_edge_color_label,plot3D_laststep_edge_width_label,plot3D_laststep_edge_width_optionmenu],[],[])        disablewidgets(cont3D.show_laststep_var,False,[plot3D_laststep_symbol_label,plot3D_laststep_symbolchoices_optionmenu,plot3D_laststep_size_label,cont3D.laststep_symbol_size_slider,                plot3D_laststep_color_butt,plot3D_laststep_color_label,plot3D_show_laststep_edge_chbutt,plot3D_laststep_edge_color_butt,plot3D_laststep_edge_color_label,plot3D_laststep_edge_width_label,plot3D_laststep_edge_width_optionmenu],[],                [[cont3D.show_laststep_edge_var,[False],[plot3D_laststep_edge_color_butt,plot3D_laststep_edge_color_label,plot3D_laststep_edge_width_label,plot3D_laststep_edge_width_optionmenu]]])                plot3D_col3_frm = tk1.Frame(plot3D_interior,bd=2) # Column 3        plot3D_col3_frm.grid(row=0,column=3,sticky='NSEW')        plot3D_axesspecs_frm = tk1.Frame(plot3D_col3_frm,bd=2,relief=tk1.SUNKEN)        plot3D_axesspecs_frm.pack(fill=tk1.X)        plot3D_axesspecs_label = tk1.Label(plot3D_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        plot3D_axesspecs_label.pack(fill=tk1.X)        plot3D_show_axes_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_axes_frm.pack(fill=tk1.X)        cont3D.show_axes_var = tk1.BooleanVar(value=cont3D.show_axes)        plot3D_show_axes_chbutt = tk1.Checkbutton(plot3D_show_axes_frm, text="Show Axes?", variable=cont3D.show_axes_var,command= lambda:                                                disablewidgets(cont3D.show_axes_var,False,[plot3D_axis_width_label,plot3D_axis_width_optionmenu,plot3D_axes_color_butt,plot3D_axes_color_label],[],[]))        plot3D_show_axes_chbutt.pack(fill=tk1.X)        plot3D_axis_width_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_axis_width_frm.pack(fill=tk1.X)        plot3D_axis_width_frm.grid_columnconfigure(0, weight=1)        plot3D_axis_width_frm.grid_columnconfigure(3, weight=1)        plot3D_axis_width_label = tk1.Label(plot3D_axis_width_frm, text="Axes Width:")        plot3D_axis_width_label.grid(row=0, column=1, sticky='NSEW')        cont3D.axis_width_var = tk1.IntVar(plot3D_interior)        cont3D.axis_width_var.set(cont3D.axis_width)         plot3D_axis_width_optionmenu = tk1.OptionMenu(plot3D_axis_width_frm, cont3D.axis_width_var, *linewidthchoices_set)        plot3D_axis_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D_axis_width_optionmenu.configure(font=('Consolas',10))        plot3D_axes_color_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_axes_color_frm.pack(fill=tk1.X)        plot3D_axes_color_frm.grid_columnconfigure(0, weight=1)        plot3D_axes_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_axes_color_butt = tk1.Button(plot3D_axes_color_frm,text="Select Axes Color", command= lambda: getcolor(master_3D,"cont3D.axes_color_temp","3D Plot Axes",plot3D_axes_color_label,plot3D_axes_color_frm,False))        plot3D_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_axes_color_label = tk1.Label(plot3D_axes_color_frm,text="Current\nColor:\n%s" % cont3D.axes_color_temp,fg=getoppositecolor(cont3D.axes_color_temp), bg=cont3D.axes_color_temp,width=10)        plot3D_axes_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(cont3D.show_axes_var,False,[plot3D_axis_width_label,plot3D_axis_width_optionmenu,plot3D_axes_color_butt,plot3D_axes_color_label],[],[])        plot3D_show_grid_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_grid_frm.pack(fill=tk1.X)        cont3D.show_grid_var = tk1.BooleanVar(value=cont3D.show_grid)        plot3D_show_grid_chbutt = tk1.Checkbutton(plot3D_show_grid_frm, text="Show Grid?", variable=cont3D.show_grid_var,                                         command= lambda: disablewidgets(cont3D.show_grid_var,False,[plot3D_show_label_chbutt,plot3D_label_fontsize_label,plot3D_label_fontsize_optionmenu,plot3D_label_color_butt,plot3D_label_color_label,                                                                                                   plot3D_show_ticks_chbutt,plot3D_tick_color_butt,plot3D_tick_color_label,plot3D_show_gridlines_chbutt,plot3D_show_ticklabels_chbutt],[],                                                                         [[cont3D.show_labels_var,[False],[plot3D_label_fontsize_label,plot3D_label_fontsize_optionmenu,plot3D_label_color_butt,plot3D_label_color_label]],                                                                          [cont3D.show_ticks_var,[False],[plot3D_tick_color_butt,plot3D_tick_color_label,plot3D_show_gridlines_chbutt,plot3D_show_ticklabels_chbutt]]]))        plot3D_show_grid_chbutt.pack(fill=tk1.X)        plot3D_show_labels_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_labels_frm.pack(fill=tk1.X)        cont3D.show_labels_var = tk1.BooleanVar(value=cont3D.show_labels)        plot3D_show_label_chbutt = tk1.Checkbutton(plot3D_show_labels_frm, text="Show Axes Labels?", variable=cont3D.show_labels_var,                                         command= lambda: disablewidgets(cont3D.show_labels_var,False,[plot3D_label_fontsize_label,plot3D_label_fontsize_optionmenu,plot3D_label_color_butt,plot3D_label_color_label],[],[]))        plot3D_show_label_chbutt.pack(fill=tk1.X)        plot3D_label_fontsize_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_label_fontsize_frm.pack(fill=tk1.X)        plot3D_label_fontsize_frm.grid_columnconfigure(0, weight=1)        plot3D_label_fontsize_frm.grid_columnconfigure(3, weight=1)        plot3D_label_fontsize_label = tk1.Label(plot3D_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        plot3D_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        cont3D.label_fontsize_var = tk1.StringVar(plot3D_interior)        cont3D.label_fontsize_var.set(cont3D.label_fontsize_mod)         plot3D_label_fontsize_optionmenu = tk1.OptionMenu(plot3D_label_fontsize_frm, cont3D.label_fontsize_var, *fontsizes_set)        plot3D_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        plot3D_label_fontsize_optionmenu.configure(font=('Consolas',10))        plot3D_label_color_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_label_color_frm.pack(fill=tk1.X)        plot3D_label_color_frm.grid_columnconfigure(0, weight=1)        plot3D_label_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_label_color_butt = tk1.Button(plot3D_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(master_3D,"cont3D.label_color_temp","3D Plot label",plot3D_label_color_label,plot3D_label_color_frm,False))        plot3D_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_label_color_label = tk1.Label(plot3D_label_color_frm,text="Current\nColor:\n%s" % cont3D.label_color_temp,fg=getoppositecolor(cont3D.label_color_temp), bg=cont3D.label_color_temp,width=10)        plot3D_label_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(cont3D.show_labels_var,False,[plot3D_label_fontsize_label,plot3D_label_fontsize_optionmenu,plot3D_label_color_butt,plot3D_label_color_label],[],[])        plot3D_show_ticks_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_ticks_frm.pack(fill=tk1.X)        cont3D.show_ticks_var = tk1.BooleanVar(value=cont3D.show_ticks)        plot3D_show_ticks_chbutt = tk1.Checkbutton(plot3D_show_ticks_frm, text="Show Ticks?", variable=cont3D.show_ticks_var,                                         command= lambda: disablewidgets(cont3D.show_ticks_var,False,[plot3D_show_gridlines_chbutt,plot3D_show_ticklabels_chbutt,plot3D_tick_color_butt,plot3D_tick_color_label],[],[]))        plot3D_show_ticks_chbutt.pack(fill=tk1.X)        plot3D_tick_color_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_tick_color_frm.pack(fill=tk1.X)        plot3D_tick_color_frm.grid_columnconfigure(0, weight=1)        plot3D_tick_color_frm.grid_columnconfigure(3, weight=1)                        plot3D_tick_color_butt = tk1.Button(plot3D_tick_color_frm,text="Select Tick Color", command= lambda: getcolor(master_3D,"cont3D.tick_color_temp","3D Plot tick",plot3D_tick_color_label,plot3D_tick_color_frm,False))        plot3D_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D_tick_color_label = tk1.Label(plot3D_tick_color_frm,text="Current\nColor:\n%s" % cont3D.tick_color_temp,fg=getoppositecolor(cont3D.tick_color_temp), bg=cont3D.tick_color_temp,width=10)        plot3D_tick_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D_show_gridlines_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_gridlines_frm.pack(fill=tk1.X)        cont3D.show_gridlines_var = tk1.BooleanVar(value=cont3D.show_gridlines)        plot3D_show_gridlines_chbutt = tk1.Checkbutton(plot3D_show_gridlines_frm, text="Show Gridlines?", variable=cont3D.show_gridlines_var)        plot3D_show_gridlines_chbutt.pack(fill=tk1.X)        plot3D_show_ticklabels_frm = tk1.Frame(plot3D_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D_show_ticklabels_frm.pack(fill=tk1.X)        cont3D.show_ticklabels_var = tk1.BooleanVar(value=cont3D.show_ticklabels)        plot3D_show_ticklabels_chbutt = tk1.Checkbutton(plot3D_show_ticklabels_frm, text="Show Tick Labels?", variable=cont3D.show_ticklabels_var)        plot3D_show_ticklabels_chbutt.pack(fill=tk1.X)        disablewidgets(cont3D.show_ticks_var,False,[plot3D_show_gridlines_chbutt,plot3D_show_ticklabels_chbutt,plot3D_tick_color_butt,plot3D_tick_color_label],[],[])        disablewidgets(cont3D.show_grid_var,False,[plot3D_show_label_chbutt,plot3D_label_fontsize_label,plot3D_label_fontsize_optionmenu,plot3D_label_color_butt,plot3D_label_color_label,                                                                                                   plot3D_show_ticks_chbutt,plot3D_show_gridlines_chbutt,plot3D_show_ticklabels_chbutt],[],[])        plot3D_submit_butt_frm = tk1.Frame(plot3D_interior,bd=2,relief=tk1.RIDGE)        plot3D_submit_butt_frm.grid(row=2,column=0, columnspan=4, sticky='NSEW')        plot3D_submit_butt = tk1.Button(plot3D_submit_butt_frm, text="Submit and Save Changes and Update 3D Sample Plot", command= lambda: submit3Dcontrols(self,cont3D,master_3D))        plot3D_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D_submit_butt.configure(font=('Consolas bold',12))        plot3D_reset_butt = tk1.Button(plot3D_submit_butt_frm, text="Reset 3D Sample Plot to Defaults", command= lambda: resetdefaults3D(self,master_3D))        plot3D_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D_reset_butt.configure(font=('Consolas',10))        plot3D_cancel_butt = tk1.Button(plot3D_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(master_3D))        plot3D_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D_cancel_butt.configure(font=('Consolas',10))                tk1.mainloop()    returndef controls3D_step(self):    global master_3D2, cont3D2##    if master_3D2 != None and master_3D2.winfo_exists():##    else: # Create master_3D2 control window    try:        'normal' == master_3D2.state()        master_3D2.lift()        master_3D2.attributes('-topmost',True)        master_3D2.after_idle(master_3D2.attributes,'-topmost',False)    except:        master_3D2 = tk1.Toplevel(root)        master_3D2.title('master_3D2')        master_3D2.focus_set()        master_3D2.title("3D Plot Controls (Step Data)")        master_3D2.geometry("+20+20")                cont3D2.arrowline_color_temp = cont3D2.arrowline_color        cont3D2.jdecrease_color_temp = cont3D2.jdecrease_color        cont3D2.jdecrease_edge_color_temp = cont3D2.jdecrease_edge_color        cont3D2.jincrease_color_temp = cont3D2.jincrease_color        cont3D2.jincrease_edge_color_temp = cont3D2.jincrease_edge_color        cont3D2.firststep_color_temp = cont3D2.firststep_color        cont3D2.laststep_color_temp = cont3D2.laststep_color        cont3D2.firststep_edge_color_temp = cont3D2.firststep_edge_color        cont3D2.laststep_edge_color_temp = cont3D2.laststep_edge_color        cont3D2.zijproj_color_temp = cont3D2.zijproj_color        cont3D2.axes_color_temp = cont3D2.axes_color        cont3D2.label_color_temp = cont3D2.label_color        cont3D2.tick_color_temp = cont3D2.tick_color        cont3D2.title_color_temp = cont3D2.title_color        cont3D2.legend_color_temp = cont3D2.legend_color        plot3D2_vertical_scrollbar = tk1.Scrollbar(master_3D2,orient=tk1.VERTICAL)        plot3D2_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        plot3D2_horizontal_scrollbar = tk1.Scrollbar(master_3D2,orient=tk1.HORIZONTAL)        plot3D2_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)        self.plot3D2_canvas = tk1.Canvas(master_3D2, bd=0, highlightthickness=0,yscrollcommand=plot3D2_vertical_scrollbar.set,xscrollcommand=plot3D2_horizontal_scrollbar.set,width=1070,height=510,scrollregion=(0,0,1070,510))        self.plot3D2_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        plot3D2_vertical_scrollbar.config(command=self.plot3D2_canvas.yview)        plot3D2_horizontal_scrollbar.config(command=self.plot3D2_canvas.xview)        self.plot3D2_canvas.xview_moveto(0)        self.plot3D2_canvas.yview_moveto(0)        plot3D2_interior = tk1.Frame(self.plot3D2_canvas,width=500,height=500)        plot3D2_interior_id = self.plot3D2_canvas.create_window(0, 0, window=plot3D2_interior,anchor=tk1.NW)                plot3D2_col0_frm = tk1.Frame(plot3D2_interior,bd=2) # Column 0        plot3D2_col0_frm.grid(row=0,column=0,sticky='NSEW')                plot3D2_zijproj_settings_frm = tk1.Frame(plot3D2_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D2_zijproj_settings_frm.pack(fill=tk1.X)        plot3D2_zijproj_settings_label = tk1.Label(plot3D2_zijproj_settings_frm, text="Zijderveld Heading Projection Settings:",bd=1,font="Helvetica 12 bold")        plot3D2_zijproj_settings_label.pack(fill=tk1.X)        plot3D2_show_zijproj_frm = tk1.Frame(plot3D2_zijproj_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_zijproj_frm.pack(fill=tk1.X)        cont3D2.show_zijproj_var = tk1.BooleanVar(value=cont3D2.show_zijproj)        plot3D2_show_zijproj_chbutt = tk1.Checkbutton(plot3D2_show_zijproj_frm, text="Show Zijderveld Projection Heading?", variable=cont3D2.show_zijproj_var,command= lambda:                                              disablewidgets(cont3D2.show_zijproj_var,False,[plot3D2_zijproj_color_butt,plot3D2_zijproj_color_label],[],[]))        plot3D2_show_zijproj_chbutt.pack(fill=tk1.X)        plot3D2_zijproj_color_frm = tk1.Frame(plot3D2_show_zijproj_frm,bd=2,relief=tk1.GROOVE)        plot3D2_zijproj_color_frm.pack(fill=tk1.X)        plot3D2_zijproj_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_zijproj_color_frm.grid_columnconfigure(3, weight=1)        plot3D2_zijproj_color_butt = tk1.Button(plot3D2_zijproj_color_frm,text="Select Zijderveld Projection\nHeading Color", command= lambda: getcolor(master_3D2,"cont3D2.zijproj_color_temp","Zijderveld Projection Heading",                                                                                                                                                      plot3D2_zijproj_color_label,plot3D2_zijproj_color_frm,False))        plot3D2_zijproj_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D2_zijproj_color_label = tk1.Label(plot3D2_zijproj_color_frm,text="Current\nColor:\n%s" % cont3D2.zijproj_color_temp,fg=getoppositecolor(cont3D2.zijproj_color_temp), bg=cont3D2.zijproj_color_temp,width=10)        plot3D2_zijproj_color_label.grid(row=0,column=2)        disablewidgets(cont3D2.show_zijproj_var,False,[plot3D2_zijproj_color_butt,plot3D2_zijproj_color_label],[],[])        plot3D2_legend_settings_frm = tk1.Frame(plot3D2_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D2_legend_settings_frm.pack(fill=tk1.X)        plot3D2_legend_settings_label = tk1.Label(plot3D2_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        plot3D2_legend_settings_label.pack(fill=tk1.X)                plot3D2_show_title_frm = tk1.Frame(plot3D2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_title_frm.pack(fill=tk1.X)        cont3D2.show_title_var = tk1.BooleanVar(value=cont3D2.show_title)        plot3D2_show_title_chbutt = tk1.Checkbutton(plot3D2_show_title_frm, text="Show Title?", variable=cont3D2.show_title_var,command= lambda:                                              disablewidgets(cont3D2.show_title_var,False,[plot3D2_title_color_butt,plot3D2_title_color_label],[],[]))        plot3D2_show_title_chbutt.pack(fill=tk1.X)        plot3D2_title_color_frm = tk1.Frame(plot3D2_show_title_frm,bd=2,relief=tk1.GROOVE)        plot3D2_title_color_frm.pack(fill=tk1.X)        plot3D2_title_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_title_color_frm.grid_columnconfigure(3, weight=1)        plot3D2_title_color_butt = tk1.Button(plot3D2_title_color_frm,text="Select Title Color", command= lambda: getcolor(master_3D2,"cont3D2.title_color_temp","3D Plot Title",plot3D2_title_color_label,plot3D2_title_color_frm,False))        plot3D2_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D2_title_color_label = tk1.Label(plot3D2_title_color_frm,text="Current\nColor:\n%s" % cont3D2.title_color_temp,fg=getoppositecolor(cont3D2.title_color_temp), bg=cont3D2.title_color_temp,width=10)        plot3D2_title_color_label.grid(row=0,column=2)        disablewidgets(cont3D2.show_title_var,False,[plot3D2_title_color_butt,plot3D2_title_color_label],[],[])        plot3D2_show_legend_frm = tk1.Frame(plot3D2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_legend_frm.pack(fill=tk1.X)        cont3D2.show_legend_var = tk1.BooleanVar(value=cont3D2.show_legend)        plot3D2_show_legend_chbutt = tk1.Checkbutton(plot3D2_show_legend_frm, text="Show Legend?", variable=cont3D2.show_legend_var,command= lambda:                                              disablewidgets(cont3D2.show_legend_var,False,[plot3D2_legend_color_butt,plot3D2_legend_color_label],[],[]))        plot3D2_show_legend_chbutt.pack(fill=tk1.X)        plot3D2_legend_color_frm = tk1.Frame(plot3D2_show_legend_frm,bd=2,relief=tk1.GROOVE)        plot3D2_legend_color_frm.pack(fill=tk1.X)        plot3D2_legend_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_legend_color_frm.grid_columnconfigure(3, weight=1)        plot3D2_legend_color_butt = tk1.Button(plot3D2_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(master_3D2,"cont3D2.legend_color_temp","3D Plot Legend",plot3D2_legend_color_label,plot3D2_legend_color_frm,False))        plot3D2_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D2_legend_color_label = tk1.Label(plot3D2_legend_color_frm,text="Current\nColor:\n%s" % cont3D2.legend_color_temp,fg=getoppositecolor(cont3D2.legend_color_temp), bg=cont3D2.legend_color_temp,width=10)        plot3D2_legend_color_label.grid(row=0,column=2)        disablewidgets(cont3D2.show_legend_var,False,[plot3D2_legend_color_butt,plot3D2_legend_color_label],[],[])        plot3D2_showannot_frm = tk1.Frame(plot3D2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D2_showannot_frm.pack(fill=tk1.X)        cont3D2.show_popupannotations_var = tk1.BooleanVar(value=cont3D2.show_popupannotations)        plot3D2_show_popupannotations_chbutt = tk1.Checkbutton(plot3D2_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=cont3D2.show_popupannotations_var)        plot3D2_show_popupannotations_chbutt.pack(fill=tk1.X)        plot3D2_error_settings_frm = tk1.Frame(plot3D2_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D2_error_settings_frm.pack(fill=tk1.X)        plot3D2_error_settings_label = tk1.Label(plot3D2_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        plot3D2_error_settings_label.pack(fill=tk1.X)                plot3D2_error_radio_frm = tk1.Frame(plot3D2_error_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D2_error_radio_frm.pack(fill=tk1.X)        plot3D2_error_settings_label = tk1.Label(plot3D2_error_radio_frm, text="Select Error-Scaling for Symbols:")        plot3D2_error_settings_label.pack(fill=tk1.X)        cont3D2.error_scaling_var = tk1.StringVar()        cont3D2.error_scaling_var.set(cont3D2.error_scaling)        plot3D2_errorscaling_radio_none = tk1.Radiobutton(plot3D2_error_radio_frm, text="No Error Scaling",variable=cont3D2.error_scaling_var,value="None",command = lambda:              disablewidgets(cont3D2.error_scaling_var,"None",[],[plot3D2_jdecrease_color_butt,plot3D2_jdecrease_color_label,                                                                 cont3D2.jdecrease_symbol_size_slider,plot3D2_jdecrease_symbol_size_label],[]))        plot3D2_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        plot3D2_errorscaling_radio_size = tk1.Radiobutton(plot3D2_error_radio_frm, text="Scale Symbol Size by Error",variable=cont3D2.error_scaling_var,value="Size",command = lambda:                  disablewidgets(cont3D2.error_scaling_var,"Size",[cont3D2.jdecrease_symbol_size_slider,plot3D2_jdecrease_symbol_size_label],                                 [plot3D2_jdecrease_color_butt,plot3D2_jdecrease_color_label],[]))        plot3D2_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        plot3D2_errorscaling_radio_color = tk1.Radiobutton(plot3D2_error_radio_frm, text="Scale Symbol Color By Error",variable=cont3D2.error_scaling_var,value="Color",command = lambda:                               disablewidgets(cont3D2.error_scaling_var,"Color",[plot3D2_jdecrease_color_butt,plot3D2_jdecrease_color_label],                                              [cont3D2.jdecrease_symbol_size_slider,plot3D2_jdecrease_symbol_size_label],[]))        plot3D2_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        plot3D2_col1_frm = tk1.Frame(plot3D2_interior,bd=2) # Column 1        plot3D2_col1_frm.grid(row=0,column=1,sticky='NSEW')                plot3D2_jdecrease_frm = tk1.Frame(plot3D2_col1_frm,bd=2,relief=tk1.SUNKEN)        plot3D2_jdecrease_frm.pack(fill=tk1.X)        plot3D2_jdecrease_symbol_settings_label = tk1.Label(plot3D2_jdecrease_frm, text="Point Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D2_jdecrease_symbol_settings_label.pack(fill=tk1.X)        plot3D2_jdecrease_symbol_frm = tk1.Frame(plot3D2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D2_jdecrease_symbol_frm.pack(fill=tk1.X)        plot3D2_jdecrease_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D2_jdecrease_symbol_frm.grid_columnconfigure(3, weight=1)                plot3D2_jdecrease_symbol_label = tk1.Label(plot3D2_jdecrease_symbol_frm, text="Point Symbol:",bd=1)        plot3D2_jdecrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D2.jdecrease_symbol_var = tk1.StringVar(plot3D2_interior)        cont3D2.jdecrease_symbol_var.set(symbolchoices_dict_reverse[cont3D2.jdecrease_symbol])         plot3D2_jdecrease_symbolchoices_optionmenu = tk1.OptionMenu(plot3D2_jdecrease_symbol_frm, cont3D2.jdecrease_symbol_var, *symbolchoices_set)        plot3D2_jdecrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D2_jdecrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D2_jdecrease_size_frm = tk1.Frame(plot3D2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D2_jdecrease_size_frm.pack(fill=tk1.X)        plot3D2_jdecrease_symbol_size_label = tk1.Label(plot3D2_jdecrease_size_frm, text="Point Symbol Size:")        plot3D2_jdecrease_symbol_size_label.pack(fill=tk1.X)        cont3D2.jdecrease_symbol_size_slider = Scale(plot3D2_jdecrease_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D2.jdecrease_symbol_size_slider.set(cont3D2.jdecrease_size)        cont3D2.jdecrease_symbol_size_slider.pack(fill=tk1.X)        plot3D2_jdecrease_color_frm = tk1.Frame(plot3D2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D2_jdecrease_color_frm.pack(fill=tk1.X)        plot3D2_jdecrease_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_jdecrease_color_frm.grid_columnconfigure(3, weight=1)        plot3D2_jdecrease_color_butt = tk1.Button(plot3D2_jdecrease_color_frm,text="Point Symbol Color", command= lambda: getcolor(master_3D2,"cont3D2.jdecrease_color_temp","3D Plot Intensity Decrease Symbol",                                                                                                                                                          plot3D2_jdecrease_color_label,plot3D2_jdecrease_color_frm,False))        plot3D2_jdecrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D2_jdecrease_color_label = tk1.Label(plot3D2_jdecrease_color_frm,text="Current\nColor:\n%s" % cont3D2.jdecrease_color_temp,fg=getoppositecolor(cont3D2.jdecrease_color_temp), bg=cont3D2.jdecrease_color_temp,width=10)        plot3D2_jdecrease_color_label.grid(row=0, column=2,sticky='NSEW')                plot3D2_show_jdecrease_edge_frm = tk1.Frame(plot3D2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_jdecrease_edge_frm.pack(fill=tk1.X)        cont3D2.show_jdecrease_edge_var = tk1.BooleanVar(value=cont3D2.show_jdecrease_edge)        plot3D2_show_jdecrease_edge_chbutt = tk1.Checkbutton(plot3D2_show_jdecrease_edge_frm, text="Show Point Symbol Border?", variable=cont3D2.show_jdecrease_edge_var,command= lambda:                                              disablewidgets(cont3D2.show_jdecrease_edge_var,False,[plot3D2_jdecrease_edge_color_butt,plot3D2_jdecrease_edge_color_label,                                                                                                   plot3D2_jdecrease_edge_width_label,plot3D2_jdecrease_edge_width_optionmenu],[],[]))        plot3D2_show_jdecrease_edge_chbutt.pack(fill=tk1.X)        plot3D2_jdecrease_edge_color_frm = tk1.Frame(plot3D2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D2_jdecrease_edge_color_frm.pack(fill=tk1.X)        plot3D2_jdecrease_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_jdecrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D2_jdecrease_edge_color_butt = tk1.Button(plot3D2_jdecrease_edge_color_frm,text="Select Point\nSymbol Border Color", command= lambda: getcolor(master_3D2,"cont3D2.jdecrease_edge_color_temp","3D Plot Intensity Decrease Symbol Edge",                                                                                                                                                                           plot3D2_jdecrease_edge_color_label,plot3D2_jdecrease_edge_color_frm,False))        plot3D2_jdecrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D2_jdecrease_edge_color_label = tk1.Label(plot3D2_jdecrease_edge_color_frm,text="Current\nColor:\n%s" % cont3D2.jdecrease_edge_color_temp,fg=getoppositecolor(cont3D2.jdecrease_edge_color_temp), bg=cont3D2.jdecrease_edge_color_temp,width=10)        plot3D2_jdecrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D2_jdecrease_edge_width_frm = tk1.Frame(plot3D2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D2_jdecrease_edge_width_frm.pack(fill=tk1.X)        plot3D2_jdecrease_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D2_jdecrease_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D2_jdecrease_edge_width_label = tk1.Label(plot3D2_jdecrease_edge_width_frm, text="Point Symbol Border Width:")        plot3D2_jdecrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D2.jdecrease_edge_width_var = tk1.IntVar(plot3D2_interior)        cont3D2.jdecrease_edge_width_var.set(cont3D2.jdecrease_edge_width)         plot3D2_jdecrease_edge_width_optionmenu = tk1.OptionMenu(plot3D2_jdecrease_edge_width_frm, cont3D2.jdecrease_edge_width_var, *linewidthchoices_set)        plot3D2_jdecrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D2_jdecrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D2.show_jdecrease_edge_var,False,[plot3D2_jdecrease_edge_color_butt,plot3D2_jdecrease_edge_color_label,plot3D2_jdecrease_edge_width_label,plot3D2_jdecrease_edge_width_optionmenu],[],[])        disablewidgets(cont3D2.error_scaling_var,"None",[],[plot3D2_jdecrease_color_butt,plot3D2_jdecrease_color_label,                cont3D2.jdecrease_symbol_size_slider,plot3D2_jdecrease_symbol_size_label],[])        disablewidgets(cont3D2.error_scaling_var,"Size",[cont3D2.jdecrease_symbol_size_slider,plot3D2_jdecrease_symbol_size_label],                [plot3D2_jdecrease_color_butt,plot3D2_jdecrease_color_label],[])        disablewidgets(cont3D2.error_scaling_var,"Color",[plot3D2_jdecrease_color_butt,plot3D2_jdecrease_color_label],                [cont3D2.jdecrease_symbol_size_slider,plot3D2_jdecrease_symbol_size_label],[])        plot3D2_col2_frm = tk1.Frame(plot3D2_interior,bd=2) # Column 2        plot3D2_col2_frm.grid(row=0,column=2,sticky='NSEW')                plot3D2_axesspecs_frm = tk1.Frame(plot3D2_col2_frm,bd=2,relief=tk1.SUNKEN)        plot3D2_axesspecs_frm.pack(fill=tk1.X)        plot3D2_axesspecs_label = tk1.Label(plot3D2_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        plot3D2_axesspecs_label.pack(fill=tk1.X)        plot3D2_show_axes_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_axes_frm.pack(fill=tk1.X)        cont3D2.show_axes_var = tk1.BooleanVar(value=cont3D2.show_axes)        plot3D2_show_axes_chbutt = tk1.Checkbutton(plot3D2_show_axes_frm, text="Show Axes?", variable=cont3D2.show_axes_var,command= lambda:                                                disablewidgets(cont3D2.show_axes_var,False,[plot3D2_axis_width_label,plot3D2_axis_width_optionmenu,plot3D2_axes_color_butt,plot3D2_axes_color_label],[],[]))        plot3D2_show_axes_chbutt.pack(fill=tk1.X)        plot3D2_axis_width_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_axis_width_frm.pack(fill=tk1.X)        plot3D2_axis_width_frm.grid_columnconfigure(0, weight=1)        plot3D2_axis_width_frm.grid_columnconfigure(3, weight=1)        plot3D2_axis_width_label = tk1.Label(plot3D2_axis_width_frm, text="Axes Width:")        plot3D2_axis_width_label.grid(row=0, column=1, sticky='NSEW')        cont3D2.axis_width_var = tk1.IntVar(plot3D2_interior)        cont3D2.axis_width_var.set(cont3D2.axis_width)         plot3D2_axis_width_optionmenu = tk1.OptionMenu(plot3D2_axis_width_frm, cont3D2.axis_width_var, *linewidthchoices_set)        plot3D2_axis_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D2_axis_width_optionmenu.configure(font=('Consolas',10))        plot3D2_axes_color_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_axes_color_frm.pack(fill=tk1.X)        plot3D2_axes_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_axes_color_frm.grid_columnconfigure(3, weight=1)                        plot3D2_axes_color_butt = tk1.Button(plot3D2_axes_color_frm,text="Select Axes Color", command= lambda: getcolor(master_3D2,"cont3D2.axes_color_temp","3D Plot Axes",plot3D2_axes_color_label,plot3D2_axes_color_frm,False))        plot3D2_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D2_axes_color_label = tk1.Label(plot3D2_axes_color_frm,text="Current\nColor:\n%s" % cont3D2.axes_color_temp,fg=getoppositecolor(cont3D2.axes_color_temp), bg=cont3D2.axes_color_temp,width=10)        plot3D2_axes_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(cont3D2.show_axes_var,False,[plot3D2_axis_width_label,plot3D2_axis_width_optionmenu,plot3D2_axes_color_butt,plot3D2_axes_color_label],[],[])        plot3D2_show_grid_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_grid_frm.pack(fill=tk1.X)        cont3D2.show_grid_var = tk1.BooleanVar(value=cont3D2.show_grid)        plot3D2_show_grid_chbutt = tk1.Checkbutton(plot3D2_show_grid_frm, text="Show Grid?", variable=cont3D2.show_grid_var,                                         command= lambda: disablewidgets(cont3D2.show_grid_var,False,[plot3D2_show_label_chbutt,plot3D2_label_fontsize_label,plot3D2_label_fontsize_optionmenu,plot3D2_label_color_butt,plot3D2_label_color_label,                                                                                                   plot3D2_show_ticks_chbutt,plot3D2_tick_color_butt,plot3D2_tick_color_label,plot3D2_show_gridlines_chbutt,plot3D2_show_ticklabels_chbutt],[],                                                                         [[cont3D2.show_labels_var,[False],[plot3D2_label_fontsize_label,plot3D2_label_fontsize_optionmenu,plot3D2_label_color_butt,plot3D2_label_color_label]],                                                                          [cont3D2.show_ticks_var,[False],[plot3D2_tick_color_butt,plot3D2_tick_color_label,plot3D2_show_gridlines_chbutt,plot3D2_show_ticklabels_chbutt]]]))        plot3D2_show_grid_chbutt.pack(fill=tk1.X)        plot3D2_show_labels_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_labels_frm.pack(fill=tk1.X)        cont3D2.show_labels_var = tk1.BooleanVar(value=cont3D2.show_labels)        plot3D2_show_label_chbutt = tk1.Checkbutton(plot3D2_show_labels_frm, text="Show Axes Labels?", variable=cont3D2.show_labels_var,                                         command= lambda: disablewidgets(cont3D2.show_labels_var,False,[plot3D2_label_fontsize_label,plot3D2_label_fontsize_optionmenu,plot3D2_label_color_butt,plot3D2_label_color_label],[],[]))        plot3D2_show_label_chbutt.pack(fill=tk1.X)        plot3D2_label_fontsize_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_label_fontsize_frm.pack(fill=tk1.X)        plot3D2_label_fontsize_frm.grid_columnconfigure(0, weight=1)        plot3D2_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    plot3D2_label_fontsize_label = tk1.Label(plot3D2_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        plot3D2_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        cont3D2.label_fontsize_var = tk1.StringVar(plot3D2_interior)        cont3D2.label_fontsize_var.set(cont3D2.label_fontsize_mod)         plot3D2_label_fontsize_optionmenu = tk1.OptionMenu(plot3D2_label_fontsize_frm, cont3D2.label_fontsize_var, *fontsizes_set)        plot3D2_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        plot3D2_label_fontsize_optionmenu.configure(font=('Consolas',10))        plot3D2_label_color_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_label_color_frm.pack(fill=tk1.X)        plot3D2_label_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_label_color_frm.grid_columnconfigure(3, weight=1)                        plot3D2_label_color_butt = tk1.Button(plot3D2_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(master_3D2,"cont3D2.label_color_temp","3D Plot label",plot3D2_label_color_label,plot3D2_label_color_frm,False))        plot3D2_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D2_label_color_label = tk1.Label(plot3D2_label_color_frm,text="Current\nColor:\n%s" % cont3D2.label_color_temp,fg=getoppositecolor(cont3D2.label_color_temp), bg=cont3D2.label_color_temp,width=10)        plot3D2_label_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(cont3D2.show_labels_var,False,[plot3D2_label_fontsize_label,plot3D2_label_fontsize_optionmenu,plot3D2_label_color_butt,plot3D2_label_color_label],[],[])        plot3D2_show_ticks_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_ticks_frm.pack(fill=tk1.X)        cont3D2.show_ticks_var = tk1.BooleanVar(value=cont3D2.show_ticks)        plot3D2_show_ticks_chbutt = tk1.Checkbutton(plot3D2_show_ticks_frm, text="Show Ticks?", variable=cont3D2.show_ticks_var,                                         command= lambda: disablewidgets(cont3D2.show_ticks_var,False,[plot3D2_show_gridlines_chbutt,plot3D2_show_ticklabels_chbutt,plot3D2_tick_color_butt,plot3D2_tick_color_label],[],[]))        plot3D2_show_ticks_chbutt.pack(fill=tk1.X)        plot3D2_tick_color_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_tick_color_frm.pack(fill=tk1.X)        plot3D2_tick_color_frm.grid_columnconfigure(0, weight=1)        plot3D2_tick_color_frm.grid_columnconfigure(3, weight=1)                        plot3D2_tick_color_butt = tk1.Button(plot3D2_tick_color_frm,text="Select Tick Color", command= lambda: getcolor(master_3D2,"cont3D2.tick_color_temp","3D Plot tick",plot3D2_tick_color_label,plot3D2_tick_color_frm,False))        plot3D2_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D2_tick_color_label = tk1.Label(plot3D2_tick_color_frm,text="Current\nColor:\n%s" % cont3D2.tick_color_temp,fg=getoppositecolor(cont3D2.tick_color_temp), bg=cont3D2.tick_color_temp,width=10)        plot3D2_tick_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D2_show_gridlines_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_gridlines_frm.pack(fill=tk1.X)        cont3D2.show_gridlines_var = tk1.BooleanVar(value=cont3D2.show_gridlines)        plot3D2_show_gridlines_chbutt = tk1.Checkbutton(plot3D2_show_gridlines_frm, text="Show Gridlines?", variable=cont3D2.show_gridlines_var)        plot3D2_show_gridlines_chbutt.pack(fill=tk1.X)        plot3D2_show_ticklabels_frm = tk1.Frame(plot3D2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D2_show_ticklabels_frm.pack(fill=tk1.X)        cont3D2.show_ticklabels_var = tk1.BooleanVar(value=cont3D2.show_ticklabels)        plot3D2_show_ticklabels_chbutt = tk1.Checkbutton(plot3D2_show_ticklabels_frm, text="Show Tick Labels?", variable=cont3D2.show_ticklabels_var)        plot3D2_show_ticklabels_chbutt.pack(fill=tk1.X)        disablewidgets(cont3D2.show_ticks_var,False,[plot3D2_show_gridlines_chbutt,plot3D2_show_ticklabels_chbutt,plot3D2_tick_color_butt,plot3D2_tick_color_label],[],[])        disablewidgets(cont3D2.show_grid_var,False,[plot3D2_show_label_chbutt,plot3D2_label_fontsize_label,plot3D2_label_fontsize_optionmenu,plot3D2_label_color_butt,plot3D2_label_color_label,                                                                                                   plot3D2_show_ticks_chbutt,plot3D2_show_gridlines_chbutt,plot3D2_show_ticklabels_chbutt],[],[])        plot3D2_submit_butt_frm = tk1.Frame(plot3D2_interior,bd=2,relief=tk1.RIDGE)        plot3D2_submit_butt_frm.grid(row=2,column=0, columnspan=4, sticky='NSEW')        plot3D2_submit_butt = tk1.Button(plot3D2_submit_butt_frm, text="Submit and Save Changes and Update 3D Step Plot", command= lambda: submit3D2controls(self,cont3D2,master_3D2))        plot3D2_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D2_submit_butt.configure(font=('Consolas bold',12))        plot3D2_reset_butt = tk1.Button(plot3D2_submit_butt_frm, text="Reset 3D Step Plot to Defaults", command= lambda: resetdefaults3D2(self,master_3D2))        plot3D2_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D2_reset_butt.configure(font=('Consolas',10))        plot3D2_cancel_butt = tk1.Button(plot3D2_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(master_3D2))        plot3D2_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D2_cancel_butt.configure(font=('Consolas',10))                tk1.mainloop()    returndef controls3D_multiple(self):    global master_3D3, cont3D3##    if master_3D3 != None and master_3D3.winfo_exists():##    else: # Create master_3D3 control window    try:        'normal' == master_3D3.state()        master_3D3.lift()        master_3D3.attributes('-topmost',True)        master_3D3.after_idle(master_3D3.attributes,'-topmost',False)    except:        master_3D3 = tk1.Toplevel(root)        master_3D3.title('master_3D3')        master_3D3.focus_set()        master_3D3.title("3D Plot Controls (Sample Data)")        master_3D3.geometry("+20+20")                cont3D3.arrowline_color_temp = cont3D3.arrowline_color        cont3D3.jdecrease_color_temp = cont3D3.jdecrease_color        cont3D3.jdecrease_edge_color_temp = cont3D3.jdecrease_edge_color        cont3D3.jincrease_color_temp = cont3D3.jincrease_color        cont3D3.jincrease_edge_color_temp = cont3D3.jincrease_edge_color        cont3D3.firststep_color_temp = cont3D3.firststep_color        cont3D3.laststep_color_temp = cont3D3.laststep_color        cont3D3.firststep_edge_color_temp = cont3D3.firststep_edge_color        cont3D3.laststep_edge_color_temp = cont3D3.laststep_edge_color        cont3D3.zijproj_color_temp = cont3D3.zijproj_color        cont3D3.axes_color_temp = cont3D3.axes_color        cont3D3.label_color_temp = cont3D3.label_color        cont3D3.tick_color_temp = cont3D3.tick_color        cont3D3.title_color_temp = cont3D3.title_color        cont3D3.legend_color_temp = cont3D3.legend_color        plot3D3_vertical_scrollbar = tk1.Scrollbar(master_3D3,orient=tk1.VERTICAL)        plot3D3_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        plot3D3_horizontal_scrollbar = tk1.Scrollbar(master_3D3,orient=tk1.HORIZONTAL)        plot3D3_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.plot3D3_canvas = tk1.Canvas(master_3D3, bd=0, highlightthickness=0,yscrollcommand=plot3D3_vertical_scrollbar.set,xscrollcommand=plot3D3_horizontal_scrollbar.set,width=1105,height=730,scrollregion=(0,0,1105,730))        self.plot3D3_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        plot3D3_vertical_scrollbar.config(command=self.plot3D3_canvas.yview)        plot3D3_horizontal_scrollbar.config(command=self.plot3D3_canvas.xview)        self.plot3D3_canvas.xview_moveto(0)        self.plot3D3_canvas.yview_moveto(0)        plot3D3_interior = tk1.Frame(self.plot3D3_canvas,width=500,height=500)        plot3D3_interior_id = self.plot3D3_canvas.create_window(0, 0, window=plot3D3_interior,anchor=tk1.NW)                plot3D3_col0_frm = tk1.Frame(plot3D3_interior,bd=2) # Column 0        plot3D3_col0_frm.grid(row=0,column=0,sticky='NSEW')                plot3D3_arrowline_frm = tk1.Frame(plot3D3_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_arrowline_frm.pack(fill=tk1.X)                plot3D3_arrowline_title_label = tk1.Label(plot3D3_arrowline_frm, text="Arrows & Lines Settings:",font="Helvetica 12 bold")        plot3D3_arrowline_title_label.pack(fill=tk1.X)        plot3D3_plotarrow_frm = tk1.Frame(plot3D3_arrowline_frm,bd=2,relief=tk1.GROOVE)        plot3D3_plotarrow_frm.pack(fill=tk1.X)        cont3D3.show_arrowline_var = tk1.BooleanVar(value=cont3D3.show_arrowlines)        plot3D3_show_arrowline_chbutt = tk1.Checkbutton(plot3D3_plotarrow_frm, text="Show Arrows and Lines?", variable=cont3D3.show_arrowline_var,command= lambda:                                              disablewidgets(cont3D3.show_arrowline_var,False,[plot3D3_arrowline_label,plot3D3_arrowline_radio_arrow,plot3D3_arrowline_radio_line,plot3D3_arrowline_color_butt,plot3D3_arrowline_color_label,                                                                                            plot3D3_arrowline_width_label,plot3D3_arrowline_width_optionmenu],[],[]))        plot3D3_show_arrowline_chbutt.pack(fill=tk1.X)        plot3D3_arrowline_radio_text_frm = tk1.Frame(plot3D3_plotarrow_frm,bd=2,relief=tk1.GROOVE)        plot3D3_arrowline_radio_text_frm.pack(fill=tk1.X)        plot3D3_arrowline_label = tk1.Label(plot3D3_arrowline_radio_text_frm, text="Plot Arrows or Lines?")        plot3D3_arrowline_label.pack(fill=tk1.X)        cont3D3.arrowline_var = tk1.StringVar()        cont3D3.arrowline_var.set(cont3D3.arrowsorlines)        plot3D3_arrowline_radio_frm = tk1.Frame(plot3D3_arrowline_radio_text_frm,bd=2)        plot3D3_arrowline_radio_frm.pack(fill=tk1.X)        plot3D3_arrowline_radio_arrow = tk1.Radiobutton(plot3D3_arrowline_radio_frm, text="Plot Arrows",variable=cont3D3.arrowline_var,value="Arrows")        plot3D3_arrowline_radio_arrow.pack(side=tk1.LEFT,padx=40)        plot3D3_arrowline_radio_line = tk1.Radiobutton(plot3D3_arrowline_radio_frm, text="Plot Lines",variable=cont3D3.arrowline_var,value="Lines")        plot3D3_arrowline_radio_line.pack(side=tk1.LEFT,padx=0)        plot3D3_arrowline_color_frm = tk1.Frame(plot3D3_arrowline_frm,bd=2,relief=tk1.GROOVE)        plot3D3_arrowline_color_frm.pack(fill=tk1.X)        plot3D3_arrowline_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_arrowline_color_frm.grid_columnconfigure(3, weight=1)        plot3D3_arrowline_color_butt = tk1.Button(plot3D3_arrowline_color_frm,text="Select Arrow/Line Color", command= lambda: getcolor(master_3D3,"cont3D3.arrowline_color_temp","3D Plot Arrow/Line",                                                                                                                                      plot3D3_arrowline_color_label,plot3D3_arrowline_color_frm,False))        plot3D3_arrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D3_arrowline_color_label = tk1.Label(plot3D3_arrowline_color_frm,text="Current\nColor:\n%s" % cont3D3.arrowline_color_temp,fg=getoppositecolor(cont3D3.arrowline_color_temp), bg=cont3D3.arrowline_color_temp,width=10)        plot3D3_arrowline_color_label.grid(row=0,column=2)        plot3D3_arrowline_width_frm = tk1.Frame(plot3D3_arrowline_frm,bd=2,relief=tk1.GROOVE)        plot3D3_arrowline_width_frm.pack(fill=tk1.X)        plot3D3_arrowline_width_frm.grid_columnconfigure(0, weight=1)        plot3D3_arrowline_width_frm.grid_columnconfigure(3, weight=1)        plot3D3_arrowline_width_label = tk1.Label(plot3D3_arrowline_width_frm, text="Arrow/Line Width:")        plot3D3_arrowline_width_label.grid(row=0,column=1,sticky='NESW')                cont3D3.arrowline_width_var = tk1.IntVar(plot3D3_interior)        cont3D3.arrowline_width_var.set(cont3D3.arrowline_width)         plot3D3_arrowline_width_optionmenu = tk1.OptionMenu(plot3D3_arrowline_width_frm, cont3D3.arrowline_width_var, *linewidthchoices_set)        plot3D3_arrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_arrowline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D3.show_arrowline_var,False,[plot3D3_arrowline_label,plot3D3_arrowline_radio_arrow,plot3D3_arrowline_radio_line,plot3D3_arrowline_color_butt,                                                       plot3D3_arrowline_color_label,plot3D3_arrowline_width_label,plot3D3_arrowline_width_optionmenu],[],[])        plot3D3_zijproj_settings_frm = tk1.Frame(plot3D3_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_zijproj_settings_frm.pack(fill=tk1.X)        plot3D3_zijproj_settings_label = tk1.Label(plot3D3_zijproj_settings_frm, text="Zijderveld Heading Projection Settings:",bd=1,font="Helvetica 12 bold")        plot3D3_zijproj_settings_label.pack(fill=tk1.X)        plot3D3_show_zijproj_frm = tk1.Frame(plot3D3_zijproj_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_zijproj_frm.pack(fill=tk1.X)        cont3D3.show_zijproj_var = tk1.BooleanVar(value=cont3D3.show_zijproj)        plot3D3_show_zijproj_chbutt = tk1.Checkbutton(plot3D3_show_zijproj_frm, text="Show Zijderveld Projection Heading?", variable=cont3D3.show_zijproj_var,command= lambda:                                              disablewidgets(cont3D3.show_zijproj_var,False,[plot3D3_zijproj_color_butt,plot3D3_zijproj_color_label],[],[]))        plot3D3_show_zijproj_chbutt.pack(fill=tk1.X)        plot3D3_zijproj_color_frm = tk1.Frame(plot3D3_show_zijproj_frm,bd=2,relief=tk1.GROOVE)        plot3D3_zijproj_color_frm.pack(fill=tk1.X)        plot3D3_zijproj_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_zijproj_color_frm.grid_columnconfigure(3, weight=1)        plot3D3_zijproj_color_butt = tk1.Button(plot3D3_zijproj_color_frm,text="Select Zijderveld Projection\nHeading Color", command= lambda: getcolor(master_3D3,"cont3D3.zijproj_color_temp","Zijderveld Projection Heading",                                                                                                                                                      plot3D3_zijproj_color_label,plot3D3_zijproj_color_frm,False))        plot3D3_zijproj_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D3_zijproj_color_label = tk1.Label(plot3D3_zijproj_color_frm,text="Current\nColor:\n%s" % cont3D3.zijproj_color_temp,fg=getoppositecolor(cont3D3.zijproj_color_temp), bg=cont3D3.zijproj_color_temp,width=10)        plot3D3_zijproj_color_label.grid(row=0,column=2)        disablewidgets(cont3D3.show_zijproj_var,False,[plot3D3_zijproj_color_butt,plot3D3_zijproj_color_label],[],[])        plot3D3_legend_settings_frm = tk1.Frame(plot3D3_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_legend_settings_frm.pack(fill=tk1.X)        plot3D3_legend_settings_label = tk1.Label(plot3D3_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        plot3D3_legend_settings_label.pack(fill=tk1.X)                plot3D3_show_title_frm = tk1.Frame(plot3D3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_title_frm.pack(fill=tk1.X)        cont3D3.show_title_var = tk1.BooleanVar(value=cont3D3.show_title)        plot3D3_show_title_chbutt = tk1.Checkbutton(plot3D3_show_title_frm, text="Show Title?", variable=cont3D3.show_title_var,command= lambda:                                              disablewidgets(cont3D3.show_title_var,False,[plot3D3_title_color_butt,plot3D3_title_color_label],[],[]))        plot3D3_show_title_chbutt.pack(fill=tk1.X)        plot3D3_title_color_frm = tk1.Frame(plot3D3_show_title_frm,bd=2,relief=tk1.GROOVE)        plot3D3_title_color_frm.pack(fill=tk1.X)        plot3D3_title_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_title_color_frm.grid_columnconfigure(3, weight=1)        plot3D3_title_color_butt = tk1.Button(plot3D3_title_color_frm,text="Select Title Color", command= lambda: getcolor(master_3D3,"cont3D3.title_color_temp","3D Plot Title",plot3D3_title_color_label,plot3D3_title_color_frm,False))        plot3D3_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D3_title_color_label = tk1.Label(plot3D3_title_color_frm,text="Current\nColor:\n%s" % cont3D3.title_color_temp,fg=getoppositecolor(cont3D3.title_color_temp), bg=cont3D3.title_color_temp,width=10)        plot3D3_title_color_label.grid(row=0,column=2)        disablewidgets(cont3D3.show_title_var,False,[plot3D3_title_color_butt,plot3D3_title_color_label],[],[])        plot3D3_show_legend_frm = tk1.Frame(plot3D3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_legend_frm.pack(fill=tk1.X)        cont3D3.show_legend_var = tk1.BooleanVar(value=cont3D3.show_legend)        plot3D3_show_legend_chbutt = tk1.Checkbutton(plot3D3_show_legend_frm, text="Show Legend?", variable=cont3D3.show_legend_var,command= lambda:                                              disablewidgets(cont3D3.show_legend_var,False,[plot3D3_legend_color_butt,plot3D3_legend_color_label],[],[]))        plot3D3_show_legend_chbutt.pack(fill=tk1.X)        plot3D3_legend_color_frm = tk1.Frame(plot3D3_show_legend_frm,bd=2,relief=tk1.GROOVE)        plot3D3_legend_color_frm.pack(fill=tk1.X)        plot3D3_legend_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_legend_color_frm.grid_columnconfigure(3, weight=1)        plot3D3_legend_color_butt = tk1.Button(plot3D3_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(master_3D3,"cont3D3.legend_color_temp","3D Plot Legend",plot3D3_legend_color_label,plot3D3_legend_color_frm,False))        plot3D3_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        plot3D3_legend_color_label = tk1.Label(plot3D3_legend_color_frm,text="Current\nColor:\n%s" % cont3D3.legend_color_temp,fg=getoppositecolor(cont3D3.legend_color_temp), bg=cont3D3.legend_color_temp,width=10)        plot3D3_legend_color_label.grid(row=0,column=2)        disablewidgets(cont3D3.show_legend_var,False,[plot3D3_legend_color_butt,plot3D3_legend_color_label],[],[])        plot3D3_showannot_frm = tk1.Frame(plot3D3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D3_showannot_frm.pack(fill=tk1.X)        cont3D3.show_popupannotations_var = tk1.BooleanVar(value=cont3D3.show_popupannotations)        plot3D3_show_popupannotations_chbutt = tk1.Checkbutton(plot3D3_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=cont3D3.show_popupannotations_var)        plot3D3_show_popupannotations_chbutt.pack(fill=tk1.X)        plot3D3_error_settings_frm = tk1.Frame(plot3D3_col0_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_error_settings_frm.pack(fill=tk1.X)        plot3D3_error_settings_label = tk1.Label(plot3D3_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        plot3D3_error_settings_label.pack(fill=tk1.X)                plot3D3_error_radio_frm = tk1.Frame(plot3D3_error_settings_frm,bd=2,relief=tk1.GROOVE)        plot3D3_error_radio_frm.pack(fill=tk1.X)        plot3D3_error_settings_label = tk1.Label(plot3D3_error_radio_frm, text="Select Error-Scaling for Symbols:")        plot3D3_error_settings_label.pack(fill=tk1.X)        cont3D3.error_scaling_var = tk1.StringVar()        cont3D3.error_scaling_var.set(cont3D3.error_scaling)        plot3D3_errorscaling_radio_none = tk1.Radiobutton(plot3D3_error_radio_frm, text="No Error Scaling",variable=cont3D3.error_scaling_var,value="None",command = lambda:              disablewidgets(cont3D3.error_scaling_var,"None",[],[plot3D3_jdecrease_color_butt,plot3D3_jdecrease_color_label,plot3D3_jincrease_color_butt,plot3D3_jincrease_color_label,                                  cont3D3.jdecrease_symbol_size_slider,cont3D3.jincrease_symbol_size_slider,plot3D3_jdecrease_symbol_size_label,plot3D3_jincrease_symbol_size_label],[]))        plot3D3_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        plot3D3_errorscaling_radio_size = tk1.Radiobutton(plot3D3_error_radio_frm, text="Scale Symbol Size by Error",variable=cont3D3.error_scaling_var,value="Size",command = lambda:                  disablewidgets(cont3D3.error_scaling_var,"Size",[cont3D3.jdecrease_symbol_size_slider,cont3D3.jincrease_symbol_size_slider,plot3D3_jdecrease_symbol_size_label,plot3D3_jincrease_symbol_size_label],                                 [plot3D3_jdecrease_color_butt,plot3D3_jdecrease_color_label,plot3D3_jincrease_color_butt,plot3D3_jincrease_color_label],[]))        plot3D3_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        plot3D3_errorscaling_radio_color = tk1.Radiobutton(plot3D3_error_radio_frm, text="Scale Symbol Color By Error",variable=cont3D3.error_scaling_var,value="Color",command = lambda:                               disablewidgets(cont3D3.error_scaling_var,"Color",[plot3D3_jdecrease_color_butt,plot3D3_jdecrease_color_label,plot3D3_jincrease_color_butt,plot3D3_jincrease_color_label],                                              [cont3D3.jdecrease_symbol_size_slider,cont3D3.jincrease_symbol_size_slider,plot3D3_jdecrease_symbol_size_label,plot3D3_jincrease_symbol_size_label],[]))        plot3D3_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        plot3D3_col1_frm = tk1.Frame(plot3D3_interior,bd=2) # Column 1        plot3D3_col1_frm.grid(row=0,column=1,sticky='NSEW')                plot3D3_jdecrease_frm = tk1.Frame(plot3D3_col1_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_jdecrease_frm.pack(fill=tk1.X)        plot3D3_jdecrease_symbol_settings_label = tk1.Label(plot3D3_jdecrease_frm, text="Intensity Decrease Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D3_jdecrease_symbol_settings_label.pack(fill=tk1.X)        plot3D3_jdecrease_symbol_frm = tk1.Frame(plot3D3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jdecrease_symbol_frm.pack(fill=tk1.X)        plot3D3_jdecrease_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D3_jdecrease_symbol_frm.grid_columnconfigure(3, weight=1)                plot3D3_jdecrease_symbol_label = tk1.Label(plot3D3_jdecrease_symbol_frm, text="Intensity Decrease Symbol:",bd=1)        plot3D3_jdecrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D3.jdecrease_symbol_var = tk1.StringVar(plot3D3_interior)        cont3D3.jdecrease_symbol_var.set(symbolchoices_dict_reverse[cont3D3.jdecrease_symbol])         plot3D3_jdecrease_symbolchoices_optionmenu = tk1.OptionMenu(plot3D3_jdecrease_symbol_frm, cont3D3.jdecrease_symbol_var, *symbolchoices_set)        plot3D3_jdecrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_jdecrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D3_jdecrease_size_frm = tk1.Frame(plot3D3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jdecrease_size_frm.pack(fill=tk1.X)        plot3D3_jdecrease_symbol_size_label = tk1.Label(plot3D3_jdecrease_size_frm, text="Intensity Decrease Symbol Size:")        plot3D3_jdecrease_symbol_size_label.pack(fill=tk1.X)        cont3D3.jdecrease_symbol_size_slider = Scale(plot3D3_jdecrease_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D3.jdecrease_symbol_size_slider.set(cont3D3.jdecrease_size)        cont3D3.jdecrease_symbol_size_slider.pack(fill=tk1.X)        plot3D3_jdecrease_color_frm = tk1.Frame(plot3D3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jdecrease_color_frm.pack(fill=tk1.X)        plot3D3_jdecrease_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_jdecrease_color_frm.grid_columnconfigure(3, weight=1)        plot3D3_jdecrease_color_butt = tk1.Button(plot3D3_jdecrease_color_frm,text="Select Intensity Decrease\nSymbol Color", command= lambda: getcolor(master_3D3,"cont3D3.jdecrease_color_temp","3D Plot Intensity Decrease Symbol",                                                                                                                                                          plot3D3_jdecrease_color_label,plot3D3_jdecrease_color_frm,False))        plot3D3_jdecrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_jdecrease_color_label = tk1.Label(plot3D3_jdecrease_color_frm,text="Current\nColor:\n%s" % cont3D3.jdecrease_color_temp,fg=getoppositecolor(cont3D3.jdecrease_color_temp), bg=cont3D3.jdecrease_color_temp,width=10)        plot3D3_jdecrease_color_label.grid(row=0, column=2,sticky='NSEW')                plot3D3_show_jdecrease_edge_frm = tk1.Frame(plot3D3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_jdecrease_edge_frm.pack(fill=tk1.X)        cont3D3.show_jdecrease_edge_var = tk1.BooleanVar(value=cont3D3.show_jdecrease_edge)        plot3D3_show_jdecrease_edge_chbutt = tk1.Checkbutton(plot3D3_show_jdecrease_edge_frm, text="Show Intensity Decrease Symbol Border?", variable=cont3D3.show_jdecrease_edge_var,command= lambda:                                              disablewidgets(cont3D3.show_jdecrease_edge_var,False,[plot3D3_jdecrease_edge_color_butt,plot3D3_jdecrease_edge_color_label,                                                                                                   plot3D3_jdecrease_edge_width_label,plot3D3_jdecrease_edge_width_optionmenu],[],[]))        plot3D3_show_jdecrease_edge_chbutt.pack(fill=tk1.X)        plot3D3_jdecrease_edge_color_frm = tk1.Frame(plot3D3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jdecrease_edge_color_frm.pack(fill=tk1.X)        plot3D3_jdecrease_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_jdecrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_jdecrease_edge_color_butt = tk1.Button(plot3D3_jdecrease_edge_color_frm,text="Select Intensity Decrease\nSymbol Border Color", command= lambda: getcolor(master_3D3,"cont3D3.jdecrease_edge_color_temp","3D Plot Intensity Decrease Symbol Edge",                                                                                                                                                                           plot3D3_jdecrease_edge_color_label,plot3D3_jdecrease_edge_color_frm,False))        plot3D3_jdecrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_jdecrease_edge_color_label = tk1.Label(plot3D3_jdecrease_edge_color_frm,text="Current\nColor:\n%s" % cont3D3.jdecrease_edge_color_temp,fg=getoppositecolor(cont3D3.jdecrease_edge_color_temp), bg=cont3D3.jdecrease_edge_color_temp,width=10)        plot3D3_jdecrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_jdecrease_edge_width_frm = tk1.Frame(plot3D3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jdecrease_edge_width_frm.pack(fill=tk1.X)        plot3D3_jdecrease_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D3_jdecrease_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D3_jdecrease_edge_width_label = tk1.Label(plot3D3_jdecrease_edge_width_frm, text="Intensity Decrease Symbol Border Width:")        plot3D3_jdecrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D3.jdecrease_edge_width_var = tk1.IntVar(plot3D3_interior)        cont3D3.jdecrease_edge_width_var.set(cont3D3.jdecrease_edge_width)         plot3D3_jdecrease_edge_width_optionmenu = tk1.OptionMenu(plot3D3_jdecrease_edge_width_frm, cont3D3.jdecrease_edge_width_var, *linewidthchoices_set)        plot3D3_jdecrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_jdecrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D3.show_jdecrease_edge_var,False,[plot3D3_jdecrease_edge_color_butt,plot3D3_jdecrease_edge_color_label,plot3D3_jdecrease_edge_width_label,plot3D3_jdecrease_edge_width_optionmenu],[],[])                plot3D3_jincrease_frm = tk1.Frame(plot3D3_col1_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_jincrease_frm.pack(fill=tk1.X)        plot3D3_jincrease_symbol_settings_label = tk1.Label(plot3D3_jincrease_frm, text="Intensity Increase Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D3_jincrease_symbol_settings_label.pack(fill=tk1.X)        plot3D3_jincrease_symbol_frm = tk1.Frame(plot3D3_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jincrease_symbol_frm.pack(fill=tk1.X)        plot3D3_jincrease_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D3_jincrease_symbol_frm.grid_columnconfigure(3, weight=1)                  plot3D3_jincrease_symbol_label = tk1.Label(plot3D3_jincrease_symbol_frm, text="Intensity Increase Symbol:",bd=1)        plot3D3_jincrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D3.jincrease_symbol_var = tk1.StringVar(plot3D3_interior)        cont3D3.jincrease_symbol_var.set(symbolchoices_dict_reverse[cont3D3.jincrease_symbol])         plot3D3_jincrease_symbolchoices_optionmenu = tk1.OptionMenu(plot3D3_jincrease_symbol_frm, cont3D3.jincrease_symbol_var, *symbolchoices_set)        plot3D3_jincrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_jincrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D3_jincrease_size_frm = tk1.Frame(plot3D3_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jincrease_size_frm.pack(fill=tk1.X)        plot3D3_jincrease_symbol_size_label = tk1.Label(plot3D3_jincrease_size_frm, text="Intensity Increase Symbol Size:")        plot3D3_jincrease_symbol_size_label.pack(fill=tk1.X)        cont3D3.jincrease_symbol_size_slider = Scale(plot3D3_jincrease_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D3.jincrease_symbol_size_slider.set(cont3D3.jincrease_size)        cont3D3.jincrease_symbol_size_slider.pack(fill=tk1.X)        plot3D3_jincrease_color_frm = tk1.Frame(plot3D3_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jincrease_color_frm.pack(fill=tk1.X)        plot3D3_jincrease_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_jincrease_color_frm.grid_columnconfigure(3, weight=1)        plot3D3_jincrease_color_butt = tk1.Button(plot3D3_jincrease_color_frm,text="Select Intensity Increase\nSymbol Color", command= lambda: getcolor(master_3D3,"cont3D3.jincrease_color_temp","3D Plot Intensity Increase Symbol",                                                                                                                                                          plot3D3_jincrease_color_label,plot3D3_jincrease_color_frm,False))        plot3D3_jincrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_jincrease_color_label = tk1.Label(plot3D3_jincrease_color_frm,text="Current\nColor:\n%s" % cont3D3.jincrease_color_temp,fg=getoppositecolor(cont3D3.jincrease_color_temp), bg=cont3D3.jincrease_color_temp,width=10)        plot3D3_jincrease_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_show_jincrease_edge_frm = tk1.Frame(plot3D3_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_jincrease_edge_frm.pack(fill=tk1.X)        cont3D3.show_jincrease_edge_var = tk1.BooleanVar(value=cont3D3.show_jincrease_edge)        plot3D3_show_jincrease_edge_chbutt = tk1.Checkbutton(plot3D3_show_jincrease_edge_frm, text="Show Intensity Increase Symbol Border?", variable=cont3D3.show_jincrease_edge_var,command= lambda:                                              disablewidgets(cont3D3.show_jincrease_edge_var,False,[plot3D3_jincrease_edge_color_butt,plot3D3_jincrease_edge_color_label,                                                                                                   plot3D3_jincrease_edge_width_label,plot3D3_jincrease_edge_width_optionmenu],[],[]))        plot3D3_show_jincrease_edge_chbutt.pack(fill=tk1.X)        plot3D3_jincrease_edge_color_frm = tk1.Frame(plot3D3_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jincrease_edge_color_frm.pack(fill=tk1.X)        plot3D3_jincrease_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_jincrease_edge_color_frm.grid_columnconfigure(3, weight=1)        plot3D3_jincrease_edge_color_butt = tk1.Button(plot3D3_jincrease_edge_color_frm,text="Select Intensity Increase\nSymbol Border Color", command= lambda: getcolor(master_3D3,"cont3D3.jincrease_edge_color_temp","3D Plot Intensity Increase Symbol Edge",                                                                                                                                                                           plot3D3_jincrease_edge_color_label,plot3D3_jincrease_edge_color_frm,False))        plot3D3_jincrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_jincrease_edge_color_label = tk1.Label(plot3D3_jincrease_edge_color_frm,text="Current\nColor:\n%s" % cont3D3.jincrease_edge_color_temp,fg=getoppositecolor(cont3D3.jincrease_edge_color_temp), bg=cont3D3.jincrease_edge_color_temp,width=10)        plot3D3_jincrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_jincrease_edge_width_frm = tk1.Frame(plot3D3_jincrease_frm,bd=2,relief=tk1.GROOVE)        plot3D3_jincrease_edge_width_frm.pack(fill=tk1.X)        plot3D3_jincrease_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D3_jincrease_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D3_jincrease_edge_width_label = tk1.Label(plot3D3_jincrease_edge_width_frm, text="Intensity Increase Symbol Border Width:")        plot3D3_jincrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D3.jincrease_edge_width_var = tk1.IntVar(plot3D3_interior)        cont3D3.jincrease_edge_width_var.set(cont3D3.jincrease_edge_width)         plot3D3_jincrease_edge_width_optionmenu = tk1.OptionMenu(plot3D3_jincrease_edge_width_frm, cont3D3.jincrease_edge_width_var, *linewidthchoices_set)        plot3D3_jincrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_jincrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D3.show_jincrease_edge_var,False,[plot3D3_jincrease_edge_color_butt,plot3D3_jincrease_edge_color_label,plot3D3_jincrease_edge_width_label,plot3D3_jincrease_edge_width_optionmenu],[],[])        disablewidgets(cont3D3.error_scaling_var,"None",[],[plot3D3_jdecrease_color_butt,plot3D3_jdecrease_color_label,plot3D3_jincrease_color_butt,plot3D3_jincrease_color_label,                cont3D3.jdecrease_symbol_size_slider,cont3D3.jincrease_symbol_size_slider,plot3D3_jdecrease_symbol_size_label,plot3D3_jincrease_symbol_size_label],[])        disablewidgets(cont3D3.error_scaling_var,"Size",[cont3D3.jdecrease_symbol_size_slider,cont3D3.jincrease_symbol_size_slider,plot3D3_jdecrease_symbol_size_label,plot3D3_jincrease_symbol_size_label],                [plot3D3_jdecrease_color_butt,plot3D3_jdecrease_color_label,plot3D3_jincrease_color_butt,plot3D3_jincrease_color_label],[])        disablewidgets(cont3D3.error_scaling_var,"Color",[plot3D3_jdecrease_color_butt,plot3D3_jdecrease_color_label,plot3D3_jincrease_color_butt,plot3D3_jincrease_color_label],                [cont3D3.jdecrease_symbol_size_slider,cont3D3.jincrease_symbol_size_slider,plot3D3_jdecrease_symbol_size_label,plot3D3_jincrease_symbol_size_label],[])        plot3D3_col2_frm = tk1.Frame(plot3D3_interior,bd=2) # Column 2        plot3D3_col2_frm.grid(row=0,column=2,sticky='NSEW')        plot3D3_firststep_frm = tk1.Frame(plot3D3_col2_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_firststep_frm.pack(fill=tk1.X)        plot3D3_firststep_symbol_settings_label = tk1.Label(plot3D3_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D3_firststep_symbol_settings_label.pack(fill=tk1.X)        plot3D3_show_firststep_frm = tk1.Frame(plot3D3_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_firststep_frm.pack(fill=tk1.X)        cont3D3.show_firststep_var = tk1.BooleanVar(value=cont3D3.show_firststep)        plot3D3_show_firststep_chbutt = tk1.Checkbutton(plot3D3_show_firststep_frm, text="Show First Step Special Symbol?", variable=cont3D3.show_firststep_var,command= lambda:                                              disablewidgets(cont3D3.show_firststep_var,False,[plot3D3_firststep_symbol_label,plot3D3_firststep_symbolchoices_optionmenu,plot3D3_firststep_size_label,cont3D3.firststep_symbol_size_slider,                                                                                            plot3D3_firststep_color_butt,plot3D3_firststep_color_label,plot3D3_show_firststep_edge_chbutt,                                                                                            plot3D3_firststep_edge_color_butt,plot3D3_firststep_edge_color_label,plot3D3_firststep_edge_width_label,plot3D3_firststep_edge_width_optionmenu],[],                                                        [[cont3D3.show_firststep_edge_var,[False],[plot3D3_firststep_edge_color_butt,plot3D3_firststep_edge_color_label,plot3D3_firststep_edge_width_label,plot3D3_firststep_edge_width_optionmenu]]]))        plot3D3_show_firststep_chbutt.pack(fill=tk1.X)        plot3D3_firststep_symbol_frm = tk1.Frame(plot3D3_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_firststep_symbol_frm.pack(fill=tk1.X)        plot3D3_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D3_firststep_symbol_frm.grid_columnconfigure(3, weight=1)        plot3D3_firststep_symbol_label = tk1.Label(plot3D3_firststep_symbol_frm, text="First Step Symbol:",bd=1)        plot3D3_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D3.firststep_symbol_var = tk1.StringVar(plot3D3_interior)        cont3D3.firststep_symbol_var.set(symbolchoices_dict_reverse[cont3D3.firststep_symbol])         plot3D3_firststep_symbolchoices_optionmenu = tk1.OptionMenu(plot3D3_firststep_symbol_frm, cont3D3.firststep_symbol_var, *symbolchoices_set)        plot3D3_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D3_firststep_size_frm = tk1.Frame(plot3D3_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_firststep_size_frm.pack(fill=tk1.X)        plot3D3_firststep_size_label = tk1.Label(plot3D3_firststep_size_frm, text="First Step Symbol Size:")        plot3D3_firststep_size_label.pack(fill=tk1.X)        cont3D3.firststep_symbol_size_slider = Scale(plot3D3_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D3.firststep_symbol_size_slider.set(cont3D3.firststep_size)        cont3D3.firststep_symbol_size_slider.pack(fill=tk1.X)        plot3D3_firststep_color_frm = tk1.Frame(plot3D3_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_firststep_color_frm.pack(fill=tk1.X)        plot3D3_firststep_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_firststep_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_firststep_color_butt = tk1.Button(plot3D3_firststep_color_frm,text="Select First Step\nSymbol Color", command= lambda: getcolor(master_3D3,"cont3D3.firststep_color_temp","3D Plot First Step Symbol",plot3D3_firststep_color_label,                                                                                                                                              plot3D3_firststep_color_frm,False))        plot3D3_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_firststep_color_label = tk1.Label(plot3D3_firststep_color_frm,text="Current\nColor:\n%s" % cont3D3.firststep_color_temp,fg=getoppositecolor(cont3D3.firststep_color_temp), bg=cont3D3.firststep_color_temp,width=10)        plot3D3_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_show_firststep_edge_frm = tk1.Frame(plot3D3_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_firststep_edge_frm.pack(fill=tk1.X)        cont3D3.show_firststep_edge_var = tk1.BooleanVar(value=cont3D3.show_firststep_edge)        plot3D3_show_firststep_edge_chbutt = tk1.Checkbutton(plot3D3_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=cont3D3.show_firststep_edge_var,command= lambda:                                    disablewidgets(cont3D3.show_firststep_edge_var,False,[plot3D3_firststep_edge_color_butt,plot3D3_firststep_edge_color_label,plot3D3_firststep_edge_width_label,plot3D3_firststep_edge_width_optionmenu],[],[]))        plot3D3_show_firststep_edge_chbutt.pack(fill=tk1.X)                plot3D3_firststep_edge_color_frm = tk1.Frame(plot3D3_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_firststep_edge_color_frm.pack(fill=tk1.X)        plot3D3_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_firststep_edge_color_butt = tk1.Button(plot3D3_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color", command= lambda: getcolor(master_3D3,"cont3D3.firststep_edge_color_temp","3D Plot First Step Symbol Edge",                                                                                                                                                               plot3D3_firststep_edge_color_label,plot3D3_firststep_edge_color_frm,False))        plot3D3_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_firststep_edge_color_label = tk1.Label(plot3D3_firststep_edge_color_frm,text="Current\nColor:\n%s" % cont3D3.firststep_edge_color_temp,fg=getoppositecolor(cont3D3.firststep_edge_color_temp), bg=cont3D3.firststep_edge_color_temp,width=10)        plot3D3_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_firststep_edge_width_frm = tk1.Frame(plot3D3_firststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_firststep_edge_width_frm.pack(fill=tk1.X)        plot3D3_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D3_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D3_firststep_edge_width_label = tk1.Label(plot3D3_firststep_edge_width_frm, text="First Step Symbol Border Width:")        plot3D3_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D3.firststep_edge_width_var = tk1.IntVar(plot3D3_interior)        cont3D3.firststep_edge_width_var.set(cont3D3.firststep_edge_width)         plot3D3_firststep_edge_width_optionmenu = tk1.OptionMenu(plot3D3_firststep_edge_width_frm, cont3D3.firststep_edge_width_var, *linewidthchoices_set)        plot3D3_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D3.show_firststep_edge_var,False,[plot3D3_firststep_edge_color_butt,plot3D3_firststep_edge_color_label,plot3D3_firststep_edge_width_label,plot3D3_firststep_edge_width_optionmenu],[],[])        disablewidgets(cont3D3.show_firststep_var,False,[plot3D3_firststep_symbol_label,plot3D3_firststep_symbolchoices_optionmenu,plot3D3_firststep_size_label,cont3D3.firststep_symbol_size_slider,plot3D3_firststep_color_butt,plot3D3_firststep_color_label,                                                       plot3D3_show_firststep_edge_chbutt,plot3D3_firststep_edge_color_butt,plot3D3_firststep_edge_color_label,plot3D3_firststep_edge_width_label,plot3D3_firststep_edge_width_optionmenu],[],                       [[cont3D3.show_firststep_edge_var,[False],[plot3D3_firststep_edge_color_butt,plot3D3_firststep_edge_color_label,plot3D3_firststep_edge_width_label,plot3D3_firststep_edge_width_optionmenu]]])        plot3D3_laststep_frm = tk1.Frame(plot3D3_col2_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_laststep_frm.pack(fill=tk1.X)        plot3D3_laststep_symbol_settings_label = tk1.Label(plot3D3_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        plot3D3_laststep_symbol_settings_label.pack(fill=tk1.X)        plot3D3_show_laststep_frm = tk1.Frame(plot3D3_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_laststep_frm.pack(fill=tk1.X)        cont3D3.show_laststep_var = tk1.BooleanVar(value=cont3D3.show_laststep)        plot3D3_show_laststep_chbutt = tk1.Checkbutton(plot3D3_show_laststep_frm, text="Show Last Step Special Symbol?", variable=cont3D3.show_laststep_var,command= lambda:                    disablewidgets(cont3D3.show_laststep_var,False,[plot3D3_laststep_symbol_label,plot3D3_laststep_symbolchoices_optionmenu,plot3D3_laststep_size_label,cont3D3.laststep_symbol_size_slider,                    plot3D3_laststep_color_butt,plot3D3_laststep_color_label,plot3D3_show_laststep_edge_chbutt,plot3D3_laststep_edge_color_butt,plot3D3_laststep_edge_color_label,plot3D3_laststep_edge_width_label,plot3D3_laststep_edge_width_optionmenu],                    [],[[cont3D3.show_laststep_edge_var,[False],[plot3D3_laststep_edge_color_butt,plot3D3_laststep_edge_color_label,plot3D3_laststep_edge_width_label,plot3D3_laststep_edge_width_optionmenu]]]))        plot3D3_show_laststep_chbutt.pack(fill=tk1.X)        plot3D3_laststep_symbol_frm = tk1.Frame(plot3D3_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_laststep_symbol_frm.pack(fill=tk1.X)        plot3D3_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        plot3D3_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  plot3D3_laststep_symbol_label = tk1.Label(plot3D3_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        plot3D3_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        cont3D3.laststep_symbol_var = tk1.StringVar(plot3D3_interior)        cont3D3.laststep_symbol_var.set(symbolchoices_dict_reverse[cont3D3.laststep_symbol])         plot3D3_laststep_symbolchoices_optionmenu = tk1.OptionMenu(plot3D3_laststep_symbol_frm, cont3D3.laststep_symbol_var, *symbolchoices_set)        plot3D3_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        plot3D3_laststep_size_frm = tk1.Frame(plot3D3_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_laststep_size_frm.pack(fill=tk1.X)        plot3D3_laststep_size_label = tk1.Label(plot3D3_laststep_size_frm, text="Last Step Symbol Size:")        plot3D3_laststep_size_label.pack(fill=tk1.X)        cont3D3.laststep_symbol_size_slider = Scale(plot3D3_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        cont3D3.laststep_symbol_size_slider.set(cont3D3.laststep_size)        cont3D3.laststep_symbol_size_slider.pack(fill=tk1.X)        plot3D3_laststep_color_frm = tk1.Frame(plot3D3_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_laststep_color_frm.pack(fill=tk1.X)        plot3D3_laststep_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_laststep_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_laststep_color_butt = tk1.Button(plot3D3_laststep_color_frm,text="Select Last Step\nSymbol Color", command= lambda: getcolor(master_3D3,"cont3D3.laststep_color_temp","3D Plot Last Step Symbol",                                                                                                                                           plot3D3_laststep_color_label,plot3D3_laststep_color_frm,False))        plot3D3_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_laststep_color_label = tk1.Label(plot3D3_laststep_color_frm,text="Current\nColor:\n%s" % cont3D3.laststep_color_temp,fg=getoppositecolor(cont3D3.laststep_color_temp), bg=cont3D3.laststep_color_temp,width=10)        plot3D3_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_show_laststep_edge_frm = tk1.Frame(plot3D3_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_laststep_edge_frm.pack(fill=tk1.X)        cont3D3.show_laststep_edge_var = tk1.BooleanVar(value=cont3D3.show_laststep_edge)        plot3D3_show_laststep_edge_chbutt = tk1.Checkbutton(plot3D3_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=cont3D3.show_laststep_edge_var,command= lambda:                                              disablewidgets(cont3D3.show_laststep_edge_var,False,[plot3D3_laststep_edge_color_butt,plot3D3_laststep_edge_color_label,plot3D3_laststep_edge_width_label,plot3D3_laststep_edge_width_optionmenu],[],[]))        plot3D3_show_laststep_edge_chbutt.pack(fill=tk1.X)        plot3D3_laststep_edge_color_frm = tk1.Frame(plot3D3_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_laststep_edge_color_frm.pack(fill=tk1.X)        plot3D3_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_laststep_edge_color_butt = tk1.Button(plot3D3_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color", command= lambda: getcolor(master_3D3,"cont3D3.laststep_edge_color_temp","3D Plot Last Step Symbol Edge",                                                                                                                                                            plot3D3_laststep_edge_color_label,plot3D3_laststep_edge_color_frm,False))        plot3D3_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_laststep_edge_color_label = tk1.Label(plot3D3_laststep_edge_color_frm,text="Current\nColor:\n%s" % cont3D3.laststep_edge_color_temp,fg=getoppositecolor(cont3D3.laststep_edge_color_temp), bg=cont3D3.laststep_edge_color_temp,width=10)        plot3D3_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_laststep_edge_width_frm = tk1.Frame(plot3D3_laststep_frm,bd=2,relief=tk1.GROOVE)        plot3D3_laststep_edge_width_frm.pack(fill=tk1.X)        plot3D3_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        plot3D3_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        plot3D3_laststep_edge_width_label = tk1.Label(plot3D3_laststep_edge_width_frm, text="Last Step Symbol Border Width:")        plot3D3_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        cont3D3.laststep_edge_width_var = tk1.IntVar(plot3D3_interior)        cont3D3.laststep_edge_width_var.set(cont3D3.laststep_edge_width)         plot3D3_laststep_edge_width_optionmenu = tk1.OptionMenu(plot3D3_laststep_edge_width_frm, cont3D3.laststep_edge_width_var, *linewidthchoices_set)        plot3D3_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(cont3D3.show_laststep_edge_var,False,[plot3D3_laststep_edge_color_butt,plot3D3_laststep_edge_color_label,plot3D3_laststep_edge_width_label,plot3D3_laststep_edge_width_optionmenu],[],[])        disablewidgets(cont3D3.show_laststep_var,False,[plot3D3_laststep_symbol_label,plot3D3_laststep_symbolchoices_optionmenu,plot3D3_laststep_size_label,cont3D3.laststep_symbol_size_slider,                plot3D3_laststep_color_butt,plot3D3_laststep_color_label,plot3D3_show_laststep_edge_chbutt,plot3D3_laststep_edge_color_butt,plot3D3_laststep_edge_color_label,plot3D3_laststep_edge_width_label,plot3D3_laststep_edge_width_optionmenu],[],                [[cont3D3.show_laststep_edge_var,[False],[plot3D3_laststep_edge_color_butt,plot3D3_laststep_edge_color_label,plot3D3_laststep_edge_width_label,plot3D3_laststep_edge_width_optionmenu]]])                plot3D3_col3_frm = tk1.Frame(plot3D3_interior,bd=2) # Column 3        plot3D3_col3_frm.grid(row=0,column=3,sticky='NSEW')        plot3D3_axesspecs_frm = tk1.Frame(plot3D3_col3_frm,bd=2,relief=tk1.SUNKEN)        plot3D3_axesspecs_frm.pack(fill=tk1.X)        plot3D3_axesspecs_label = tk1.Label(plot3D3_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        plot3D3_axesspecs_label.pack(fill=tk1.X)        plot3D3_show_axes_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_axes_frm.pack(fill=tk1.X)        cont3D3.show_axes_var = tk1.BooleanVar(value=cont3D3.show_axes)        plot3D3_show_axes_chbutt = tk1.Checkbutton(plot3D3_show_axes_frm, text="Show Axes?", variable=cont3D3.show_axes_var,command= lambda:                                                disablewidgets(cont3D3.show_axes_var,False,[plot3D3_axis_width_label,plot3D3_axis_width_optionmenu,plot3D3_axes_color_butt,plot3D3_axes_color_label],[],[]))        plot3D3_show_axes_chbutt.pack(fill=tk1.X)        plot3D3_axis_width_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_axis_width_frm.pack(fill=tk1.X)        plot3D3_axis_width_frm.grid_columnconfigure(0, weight=1)        plot3D3_axis_width_frm.grid_columnconfigure(3, weight=1)        plot3D3_axis_width_label = tk1.Label(plot3D3_axis_width_frm, text="Axes Width:")        plot3D3_axis_width_label.grid(row=0, column=1, sticky='NSEW')        cont3D3.axis_width_var = tk1.IntVar(plot3D3_interior)        cont3D3.axis_width_var.set(cont3D3.axis_width)         plot3D3_axis_width_optionmenu = tk1.OptionMenu(plot3D3_axis_width_frm, cont3D3.axis_width_var, *linewidthchoices_set)        plot3D3_axis_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        plot3D3_axis_width_optionmenu.configure(font=('Consolas',10))        plot3D3_axes_color_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_axes_color_frm.pack(fill=tk1.X)        plot3D3_axes_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_axes_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_axes_color_butt = tk1.Button(plot3D3_axes_color_frm,text="Select Axes Color", command= lambda: getcolor(master_3D3,"cont3D3.axes_color_temp","3D Plot Axes",plot3D3_axes_color_label,plot3D3_axes_color_frm,False))        plot3D3_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_axes_color_label = tk1.Label(plot3D3_axes_color_frm,text="Current\nColor:\n%s" % cont3D3.axes_color_temp,fg=getoppositecolor(cont3D3.axes_color_temp), bg=cont3D3.axes_color_temp,width=10)        plot3D3_axes_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(cont3D3.show_axes_var,False,[plot3D3_axis_width_label,plot3D3_axis_width_optionmenu,plot3D3_axes_color_butt,plot3D3_axes_color_label],[],[])        plot3D3_show_grid_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_grid_frm.pack(fill=tk1.X)        cont3D3.show_grid_var = tk1.BooleanVar(value=cont3D3.show_grid)        plot3D3_show_grid_chbutt = tk1.Checkbutton(plot3D3_show_grid_frm, text="Show Grid?", variable=cont3D3.show_grid_var,                                         command= lambda: disablewidgets(cont3D3.show_grid_var,False,[plot3D3_show_label_chbutt,plot3D3_label_fontsize_label,plot3D3_label_fontsize_optionmenu,plot3D3_label_color_butt,plot3D3_label_color_label,                                                                                                   plot3D3_show_ticks_chbutt,plot3D3_tick_color_butt,plot3D3_tick_color_label,plot3D3_show_gridlines_chbutt,plot3D3_show_ticklabels_chbutt],[],                                                                         [[cont3D3.show_labels_var,[False],[plot3D3_label_fontsize_label,plot3D3_label_fontsize_optionmenu,plot3D3_label_color_butt,plot3D3_label_color_label]],                                                                          [cont3D3.show_ticks_var,[False],[plot3D3_tick_color_butt,plot3D3_tick_color_label,plot3D3_show_gridlines_chbutt,plot3D3_show_ticklabels_chbutt]]]))        plot3D3_show_grid_chbutt.pack(fill=tk1.X)        plot3D3_show_labels_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_labels_frm.pack(fill=tk1.X)        cont3D3.show_labels_var = tk1.BooleanVar(value=cont3D3.show_labels)        plot3D3_show_label_chbutt = tk1.Checkbutton(plot3D3_show_labels_frm, text="Show Axes Labels?", variable=cont3D3.show_labels_var,                                         command= lambda: disablewidgets(cont3D3.show_labels_var,False,[plot3D3_label_fontsize_label,plot3D3_label_fontsize_optionmenu,plot3D3_label_color_butt,plot3D3_label_color_label],[],[]))        plot3D3_show_label_chbutt.pack(fill=tk1.X)        plot3D3_label_fontsize_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_label_fontsize_frm.pack(fill=tk1.X)        plot3D3_label_fontsize_frm.grid_columnconfigure(0, weight=1)        plot3D3_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    plot3D3_label_fontsize_label = tk1.Label(plot3D3_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        plot3D3_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        cont3D3.label_fontsize_var = tk1.StringVar(plot3D3_interior)        cont3D3.label_fontsize_var.set(cont3D3.label_fontsize_mod)         plot3D3_label_fontsize_optionmenu = tk1.OptionMenu(plot3D3_label_fontsize_frm, cont3D3.label_fontsize_var, *fontsizes_set)        plot3D3_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        plot3D3_label_fontsize_optionmenu.configure(font=('Consolas',10))        plot3D3_label_color_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_label_color_frm.pack(fill=tk1.X)        plot3D3_label_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_label_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_label_color_butt = tk1.Button(plot3D3_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(master_3D3,"cont3D3.label_color_temp","3D Plot label",plot3D3_label_color_label,plot3D3_label_color_frm,False))        plot3D3_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_label_color_label = tk1.Label(plot3D3_label_color_frm,text="Current\nColor:\n%s" % cont3D3.label_color_temp,fg=getoppositecolor(cont3D3.label_color_temp), bg=cont3D3.label_color_temp,width=10)        plot3D3_label_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(cont3D3.show_labels_var,False,[plot3D3_label_fontsize_label,plot3D3_label_fontsize_optionmenu,plot3D3_label_color_butt,plot3D3_label_color_label],[],[])        plot3D3_show_ticks_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_ticks_frm.pack(fill=tk1.X)        cont3D3.show_ticks_var = tk1.BooleanVar(value=cont3D3.show_ticks)        plot3D3_show_ticks_chbutt = tk1.Checkbutton(plot3D3_show_ticks_frm, text="Show Ticks?", variable=cont3D3.show_ticks_var,                                         command= lambda: disablewidgets(cont3D3.show_ticks_var,False,[plot3D3_show_gridlines_chbutt,plot3D3_show_ticklabels_chbutt,plot3D3_tick_color_butt,plot3D3_tick_color_label],[],[]))        plot3D3_show_ticks_chbutt.pack(fill=tk1.X)        plot3D3_tick_color_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_tick_color_frm.pack(fill=tk1.X)        plot3D3_tick_color_frm.grid_columnconfigure(0, weight=1)        plot3D3_tick_color_frm.grid_columnconfigure(3, weight=1)                        plot3D3_tick_color_butt = tk1.Button(plot3D3_tick_color_frm,text="Select Tick Color", command= lambda: getcolor(master_3D3,"cont3D3.tick_color_temp","3D Plot tick",plot3D3_tick_color_label,plot3D3_tick_color_frm,False))        plot3D3_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        plot3D3_tick_color_label = tk1.Label(plot3D3_tick_color_frm,text="Current\nColor:\n%s" % cont3D3.tick_color_temp,fg=getoppositecolor(cont3D3.tick_color_temp), bg=cont3D3.tick_color_temp,width=10)        plot3D3_tick_color_label.grid(row=0, column=2,sticky='NSEW')        plot3D3_show_gridlines_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_gridlines_frm.pack(fill=tk1.X)        cont3D3.show_gridlines_var = tk1.BooleanVar(value=cont3D3.show_gridlines)        plot3D3_show_gridlines_chbutt = tk1.Checkbutton(plot3D3_show_gridlines_frm, text="Show Gridlines?", variable=cont3D3.show_gridlines_var)        plot3D3_show_gridlines_chbutt.pack(fill=tk1.X)        plot3D3_show_ticklabels_frm = tk1.Frame(plot3D3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        plot3D3_show_ticklabels_frm.pack(fill=tk1.X)        cont3D3.show_ticklabels_var = tk1.BooleanVar(value=cont3D3.show_ticklabels)        plot3D3_show_ticklabels_chbutt = tk1.Checkbutton(plot3D3_show_ticklabels_frm, text="Show Tick Labels?", variable=cont3D3.show_ticklabels_var)        plot3D3_show_ticklabels_chbutt.pack(fill=tk1.X)        disablewidgets(cont3D3.show_ticks_var,False,[plot3D3_show_gridlines_chbutt,plot3D3_show_ticklabels_chbutt,plot3D3_tick_color_butt,plot3D3_tick_color_label],[],[])        disablewidgets(cont3D3.show_grid_var,False,[plot3D3_show_label_chbutt,plot3D3_label_fontsize_label,plot3D3_label_fontsize_optionmenu,plot3D3_label_color_butt,plot3D3_label_color_label,                                                                                                   plot3D3_show_ticks_chbutt,plot3D3_show_gridlines_chbutt,plot3D3_show_ticklabels_chbutt],[],[])        plot3D3_submit_butt_frm = tk1.Frame(plot3D3_interior,bd=2,relief=tk1.RIDGE)        plot3D3_submit_butt_frm.grid(row=2,column=0, columnspan=4, sticky='NSEW')        plot3D3_submit_butt = tk1.Button(plot3D3_submit_butt_frm, text="Submit and Save Changes and Update 3D Multiple Plot", command= lambda: submit3D3controls(self,cont3D3,master_3D3))        plot3D3_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D3_submit_butt.configure(font=('Consolas bold',12))        plot3D3_reset_butt = tk1.Button(plot3D3_submit_butt_frm, text="Reset 3D Sample Plot to Defaults", command= lambda: resetdefaults3D3(self,master_3D3))        plot3D3_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D3_reset_butt.configure(font=('Consolas',10))        plot3D3_cancel_butt = tk1.Button(plot3D3_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(master_3D3))        plot3D3_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        plot3D3_cancel_butt.configure(font=('Consolas',10))                tk1.mainloop()    return################ Equal Area Plot Controls ################class eq_setdefaults:    def __init__(self):                self.show_popupannotations = True        self.show_arcarrowline = True        self.show_lowerhem_edge = True        self.show_upperhem_edge = True        self.show_firststep = True        self.show_firststep_edge = True        self.show_laststep = True        self.show_laststep_edge = True        self.show_cross = True        self.show_circleticks = True        self.show_labels = True        self.show_north = True        self.show_0 = True        self.show_axesticks = True        self.show_posxaxis_ticks = True        self.show_posyaxis_ticks = True        self.show_negxaxis_ticks = True        self.show_negyaxis_ticks = True        self.show_gadfield_edge = True        self.show_title = True        self.show_east = False        self.show_south = False        self.show_west = False        self.show_90 = False        self.show_180 = False        self.show_270 = False        self.show_gadfield = False        self.show_gadfield_label = False        self.lowerhem_edge_color = "BLACK"        self.upperhem_edge_color = "BLACK"        self.firststep_edge_color = "BLACK"        self.laststep_edge_color = "BLACK"        self.axes_color = "BLACK"        self.axestick_color = "BLACK"        self.title_color = "BLACK"        self.circle_color = "BLACK"        self.circletick_color = "BLACK"        self.label_color = "BLACK"        self.field_color = "BLACK"        self.field_edge_color = "BLACK"        self.printsamp_color = "GREEN"        self.arcarrowline_color = "GREEN"        self.printstep_color= "PURPLE"        self.lowerhem_color = "BLUE"        self.upperhem_color = "RED"        self.firststep_color = "YELLOW"        self.laststep_color = "YELLOW"        self.samp_fontsize_mod = "Normal"        self.step_fontsize_mod = "Normal"        self.axestick_length_mod = "Normal"        self.circletick_length_mod = "Normal"        self.label_fontsize_mod = "Normal"        self.arcsarrowsorlines = "Arcs"        self.numsordirs = "Dirs"        self.lowerhem_symbol = "o"        self.upperhem_symbol = "o"        self.firststep_symbol = "s"        self.laststep_symbol = "^"        self.field_symbol = "x"        self.sitelat = 0        self.lowerhem_edge_width = 1        self.upperhem_edge_width = 1        self.firststep_edge_width = 1        self.laststep_edge_width = 1        self.axestick_width = 1        self.circletick_width = 1        self.circle_thickness = 2        self.numaxesticks = 3        self.arrowhead_length = 5        self.arrowhead_width = 6        self.arcarrowline_width = 10        self.numcircleticks = 12        self.firststep_size = self.laststep_size = 40        self.arc_densityfactor = 50        self.lowerhem_size = 150        self.upperhem_size = 150        self.field_size = 150        self.circle_rad = 375        self.axes_length = 400        self.show_legend = True        self.legend_color = "BLACK"        self.error_scaling = "None"        returndef eq_resetdefaults(self,window):    global eqcont    eqcont = eq_setdefaults()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef eq2_resetdefaults(self,window):    global eqcont2    eqcont2 = eq_setdefaults()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef eq3_resetdefaults(self,window):    global eqcont3    eqcont3 = eq_setdefaults()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submiteqcontrols(self,eqcont,window):    eqprintstep_index_list = eqcont.printsteplist_box.curselection()    for showindex, step in enumerate(self.sample.data):        step.eq_printlabel = not(showindex in eqprintstep_index_list)    eqcont.show_arcarrowline = eqcont.show_arcarrowline_var.get()    eqcont.arcsarrowsorlines = eqcont.arcsarrowsorlines_var.get()    eqcont.arcarrowline_color = eqcont.arcarrowline_color_temp    eqcont.arcarrowline_width = eqcont.arcarrowline_width_var.get()    eqcont.arc_densityfactor = eqcont.arc_densityfactor_slider.get()    eqcont.show_firststep = eqcont.show_firststep_var.get()    eqcont.firststep_symbol = symbolchoices_dict[eqcont.firststep_symbol_var.get()]    eqcont.firststep_size = eqcont.firststep_symbol_size_slider.get()    eqcont.firststep_color = eqcont.firststep_color_temp    eqcont.show_firststep_edge = eqcont.show_firststep_edge_var.get()    eqcont.firststep_edge_color = eqcont.firststep_edge_color_temp    eqcont.firststep_edge_width = eqcont.firststep_edge_width_var.get()    eqcont.show_laststep = eqcont.show_laststep_var.get()    eqcont.laststep_symbol = symbolchoices_dict[eqcont.laststep_symbol_var.get()]    eqcont.laststep_size = eqcont.laststep_symbol_size_slider.get()    eqcont.laststep_color = eqcont.laststep_color_temp    eqcont.laststep_edge_color = eqcont.laststep_edge_color_temp    eqcont.show_laststep_edge = eqcont.show_laststep_edge_var.get()    eqcont.laststep_edge_color = eqcont.laststep_edge_color_temp    eqcont.laststep_edge_width = eqcont.laststep_edge_width_var.get()    eqcont.step_fontsize_mod = eqcont.step_fontsize_mod_var.get()    eqcont.printstep_color = eqcont.printstep_color_temp    eqcont.show_popupannotations = eqcont.show_popupannotations_var.get()    eqcont.lowerhem_symbol = symbolchoices_dict[eqcont.lowerhem_symbol_var.get()]    eqcont.lowerhem_size = eqcont.lowerhem_symbol_size_slider.get()    eqcont.lowerhem_color = eqcont.lowerhem_color_temp    eqcont.show_lowerhem_edge = eqcont.show_lowerhem_edge_var.get()    eqcont.lowerhem_edge_color = eqcont.lowerhem_edge_color_temp    eqcont.lowerhem_edge_width = eqcont.lowerhem_edge_width_var.get()    eqcont.upperhem_symbol = symbolchoices_dict[eqcont.upperhem_symbol_var.get()]    eqcont.upperhem_size = eqcont.upperhem_symbol_size_slider.get()    eqcont.upperhem_color = eqcont.upperhem_color_temp    eqcont.show_upperhem_edge = eqcont.show_upperhem_edge_var.get()    eqcont.upperhem_edge_color = eqcont.upperhem_edge_color_temp    eqcont.upperhem_edge_width = eqcont.upperhem_edge_width_var.get()    eqcont.show_cross = eqcont.show_cross_var.get()    eqcont.show_axesticks = eqcont.show_axesticks_var.get()    eqcont.show_posxaxis_ticks = eqcont.show_posxaxis_ticks_var.get()    eqcont.show_posyaxis_ticks = eqcont.show_posyaxis_ticks_var.get()    eqcont.show_negxaxis_ticks = eqcont.show_negxaxis_ticks_var.get()    eqcont.show_negyaxis_ticks = eqcont.show_negyaxis_ticks_var.get()    eqcont.numaxesticks = axisticknumchoices_dict[eqcont.numaxesticks_var.get()]    eqcont.axestick_width = eqcont.axestick_width_var.get()    eqcont.axestick_color = eqcont.axestick_color_temp    eqcont.axestick_length_mod = eqcont.axestick_length_mod_var.get()    eqcont.circle_thickness = eqcont.circle_thickness_var.get()    eqcont.circle_color = eqcont.circle_color_temp    eqcont.circle_rad = eqcont.circle_rad_slider.get()    eqcont.show_circleticks = eqcont.show_circleticks_var.get()    eqcont.numcircleticks = circleticknumchoices_dict[eqcont.numcircleticks_var.get()]    eqcont.circletick_width = eqcont.circletick_width_var.get()    eqcont.circletick_color = eqcont.circletick_color_temp    eqcont.circletick_length_mod = eqcont.circletick_length_var.get()    eqcont.show_labels = eqcont.show_labels_var.get()    eqcont.numsordirs = eqcont.numsordirs_var.get()    eqcont.show_north = eqcont.show_north_var.get()    eqcont.show_east = eqcont.show_east_var.get()    eqcont.show_south = eqcont.show_south_var.get()    eqcont.show_west = eqcont.show_west_var.get()    eqcont.show_0 = eqcont.show_0_var.get()    eqcont.show_90 = eqcont.show_90_var.get()    eqcont.show_180 = eqcont.show_180_var.get()    eqcont.show_270 = eqcont.show_270_var.get()    eqcont.label_color = eqcont.label_color_temp    eqcont.label_fontsize_mod = eqcont.label_fontsize_var.get()    eqcont.show_gadfield = eqcont.show_gadfield_var.get()    eqcont.sitelat = eqcont.sitelat_slider.get()    eqcont.field_symbol = symbolchoices_dict[eqcont.field_symbol_var.get()]    eqcont.field_color = eqcont.field_color_temp    eqcont.field_size = eqcont.field_symbol_size_slider.get()    eqcont.show_gadfield_edge = eqcont.show_gadfield_edge_var.get()    eqcont.field_edge_color = eqcont.field_edge_color_temp    eqcont.show_gadfield_label = eqcont.show_gadfield_label_var.get()    eqcont.show_title = eqcont.show_title_var.get()    eqcont.title_color = eqcont.title_color_temp    eqcont.show_legend = eqcont.show_legend_var.get()    eqcont.legend_color = eqcont.legend_color_temp    eqcont.error_scaling = eqcont.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submiteq2controls(self,eqcont2,window):    eq2_printstep_index_list = eqcont2.printsteplist_box.curselection()    for showindex, sample in enumerate(self.sitesteptext):        sample.eq2_printlabel = not(showindex in eq2_printstep_index_list)    eqcont2.step_fontsize_mod = eqcont2.step_fontsize_mod_var.get()    eqcont2.printstep_color = eqcont2.printstep_color_temp    eqcont2.show_popupannotations = eqcont2.show_popupannotations_var.get()    eqcont2.lowerhem_symbol = symbolchoices_dict[eqcont2.lowerhem_symbol_var.get()]    eqcont2.lowerhem_size = eqcont2.lowerhem_symbol_size_slider.get()    eqcont2.lowerhem_color = eqcont2.lowerhem_color_temp    eqcont2.show_lowerhem_edge = eqcont2.show_lowerhem_edge_var.get()    eqcont2.lowerhem_edge_color = eqcont2.lowerhem_edge_color_temp    eqcont2.lowerhem_edge_width = eqcont2.lowerhem_edge_width_var.get()    eqcont2.upperhem_symbol = symbolchoices_dict[eqcont2.upperhem_symbol_var.get()]    eqcont2.upperhem_size = eqcont2.upperhem_symbol_size_slider.get()    eqcont2.upperhem_color = eqcont2.upperhem_color_temp    eqcont2.show_upperhem_edge = eqcont2.show_upperhem_edge_var.get()    eqcont2.upperhem_edge_color = eqcont2.upperhem_edge_color_temp    eqcont2.upperhem_edge_width = eqcont2.upperhem_edge_width_var.get()    eqcont2.show_cross = eqcont2.show_cross_var.get()    eqcont2.show_axesticks = eqcont2.show_axesticks_var.get()    eqcont2.show_posxaxis_ticks = eqcont2.show_posxaxis_ticks_var.get()    eqcont2.show_posyaxis_ticks = eqcont2.show_posyaxis_ticks_var.get()    eqcont2.show_negxaxis_ticks = eqcont2.show_negxaxis_ticks_var.get()    eqcont2.show_negyaxis_ticks = eqcont2.show_negyaxis_ticks_var.get()    eqcont2.numaxesticks = axisticknumchoices_dict[eqcont2.numaxesticks_var.get()]    eqcont2.axestick_width = eqcont2.axestick_width_var.get()    eqcont2.axestick_color = eqcont2.axestick_color_temp    eqcont2.axestick_length_mod = eqcont2.axestick_length_mod_var.get()    eqcont2.circle_thickness = eqcont2.circle_thickness_var.get()    eqcont2.circle_color = eqcont2.circle_color_temp    eqcont2.circle_rad = eqcont2.circle_rad_slider.get()    eqcont2.show_circleticks = eqcont2.show_circleticks_var.get()    eqcont2.numcircleticks = circleticknumchoices_dict[eqcont2.numcircleticks_var.get()]    eqcont2.circletick_width = eqcont2.circletick_width_var.get()    eqcont2.circletick_color = eqcont2.circletick_color_temp    eqcont2.circletick_length_mod = eqcont2.circletick_length_var.get()    eqcont2.show_labels = eqcont2.show_labels_var.get()    eqcont2.numsordirs = eqcont2.numsordirs_var.get()    eqcont2.show_north = eqcont2.show_north_var.get()    eqcont2.show_east = eqcont2.show_east_var.get()    eqcont2.show_south = eqcont2.show_south_var.get()    eqcont2.show_west = eqcont2.show_west_var.get()    eqcont2.show_0 = eqcont2.show_0_var.get()    eqcont2.show_90 = eqcont2.show_90_var.get()    eqcont2.show_180 = eqcont2.show_180_var.get()    eqcont2.show_270 = eqcont2.show_270_var.get()    eqcont2.label_color = eqcont2.label_color_temp    eqcont2.label_fontsize_mod = eqcont2.label_fontsize_var.get()    eqcont2.show_gadfield = eqcont2.show_gadfield_var.get()    eqcont2.sitelat = eqcont2.sitelat_slider.get()    eqcont2.field_symbol = symbolchoices_dict[eqcont2.field_symbol_var.get()]    eqcont2.field_color = eqcont2.field_color_temp    eqcont2.field_size = eqcont2.field_symbol_size_slider.get()    eqcont2.show_gadfield_edge = eqcont2.show_gadfield_edge_var.get()    eqcont2.field_edge_color = eqcont2.field_edge_color_temp    eqcont2.show_gadfield_label = eqcont2.show_gadfield_label_var.get()    eqcont2.show_title = eqcont2.show_title_var.get()    eqcont2.title_color = eqcont2.title_color_temp    eqcont2.show_legend = eqcont2.show_legend_var.get()    eqcont2.legend_color = eqcont2.legend_color_temp    eqcont2.error_scaling = eqcont2.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submiteq3controls(self,eqcont3,window):    eqprintsamp_index_list = eqcont3.printsamplabel_box.curselection()    for showindex, sample in enumerate(self.sitedata):        sample.eq_printname = not(showindex in eqprintsamp_index_list)    stepselection = eqcont3.printsteplist_box.curselection()    for sample in eqcont3.sitedata:        if sample.name == eqcont3.prevsamp:            for showstepindex, step in enumerate(sample.data):                step.eq_printlabel = not(showstepindex in stepselection)    for sampindex, sample in enumerate(eqcont3.sitedata):        for stepindex, step in enumerate(sample.data):            self.sitedata[sampindex].data[stepindex].eq_printlabel = step.eq_printlabel    eqcont3.printsamp_color = eqcont3.printsamp_color_temp    eqcont3.samp_fontsize_mod = eqcont3.samp_fontsize_mod_var.get()    eqcont3.show_arcarrowline = eqcont3.show_arcarrowline_var.get()    eqcont3.arcsarrowsorlines = eqcont3.arcsarrowsorlines_var.get()    eqcont3.arcarrowline_color = eqcont3.arcarrowline_color_temp    eqcont3.arcarrowline_width = eqcont3.arcarrowline_width_var.get()    eqcont3.arc_densityfactor = eqcont3.arc_densityfactor_slider.get()    eqcont3.show_firststep = eqcont3.show_firststep_var.get()    eqcont3.firststep_symbol = symbolchoices_dict[eqcont3.firststep_symbol_var.get()]    eqcont3.firststep_size = eqcont3.firststep_symbol_size_slider.get()    eqcont3.firststep_color = eqcont3.firststep_color_temp    eqcont3.show_firststep_edge = eqcont3.show_firststep_edge_var.get()    eqcont3.firststep_edge_color = eqcont3.firststep_edge_color_temp    eqcont3.firststep_edge_width = eqcont3.firststep_edge_width_var.get()    eqcont3.show_laststep = eqcont3.show_laststep_var.get()    eqcont3.laststep_symbol = symbolchoices_dict[eqcont3.laststep_symbol_var.get()]    eqcont3.laststep_size = eqcont3.laststep_symbol_size_slider.get()    eqcont3.laststep_color = eqcont3.laststep_color_temp    eqcont3.laststep_edge_color = eqcont3.laststep_edge_color_temp    eqcont3.show_laststep_edge = eqcont3.show_laststep_edge_var.get()    eqcont3.laststep_edge_color = eqcont3.laststep_edge_color_temp    eqcont3.laststep_edge_width = eqcont3.laststep_edge_width_var.get()    eqcont3.step_fontsize_mod = eqcont3.step_fontsize_mod_var.get()    eqcont3.printstep_color = eqcont3.printstep_color_temp    eqcont3.show_popupannotations = eqcont3.show_popupannotations_var.get()    eqcont3.lowerhem_symbol = symbolchoices_dict[eqcont3.lowerhem_symbol_var.get()]    eqcont3.lowerhem_size = eqcont3.lowerhem_symbol_size_slider.get()    eqcont3.lowerhem_color = eqcont3.lowerhem_color_temp    eqcont3.show_lowerhem_edge = eqcont3.show_lowerhem_edge_var.get()    eqcont3.lowerhem_edge_color = eqcont3.lowerhem_edge_color_temp    eqcont3.lowerhem_edge_width = eqcont3.lowerhem_edge_width_var.get()    eqcont3.upperhem_symbol = symbolchoices_dict[eqcont3.upperhem_symbol_var.get()]    eqcont3.upperhem_size = eqcont3.upperhem_symbol_size_slider.get()    eqcont3.upperhem_color = eqcont3.upperhem_color_temp    eqcont3.show_upperhem_edge = eqcont3.show_upperhem_edge_var.get()    eqcont3.upperhem_edge_color = eqcont3.upperhem_edge_color_temp    eqcont3.upperhem_edge_width = eqcont3.upperhem_edge_width_var.get()    eqcont3.show_cross = eqcont3.show_cross_var.get()    eqcont3.show_axesticks = eqcont3.show_axesticks_var.get()    eqcont3.show_posxaxis_ticks = eqcont3.show_posxaxis_ticks_var.get()    eqcont3.show_posyaxis_ticks = eqcont3.show_posyaxis_ticks_var.get()    eqcont3.show_negxaxis_ticks = eqcont3.show_negxaxis_ticks_var.get()    eqcont3.show_negyaxis_ticks = eqcont3.show_negyaxis_ticks_var.get()    eqcont3.numaxesticks = axisticknumchoices_dict[eqcont3.numaxesticks_var.get()]    eqcont3.axestick_width = eqcont3.axestick_width_var.get()    eqcont3.axestick_color = eqcont3.axestick_color_temp    eqcont3.axestick_length_mod = eqcont3.axestick_length_mod_var.get()    eqcont3.circle_thickness = eqcont3.circle_thickness_var.get()    eqcont3.circle_color = eqcont3.circle_color_temp    eqcont3.circle_rad = eqcont3.circle_rad_slider.get()    eqcont3.show_circleticks = eqcont3.show_circleticks_var.get()    eqcont3.numcircleticks = circleticknumchoices_dict[eqcont3.numcircleticks_var.get()]    eqcont3.circletick_width = eqcont3.circletick_width_var.get()    eqcont3.circletick_color = eqcont3.circletick_color_temp    eqcont3.circletick_length_mod = eqcont3.circletick_length_var.get()    eqcont3.show_labels = eqcont3.show_labels_var.get()    eqcont3.numsordirs = eqcont3.numsordirs_var.get()    eqcont3.show_north = eqcont3.show_north_var.get()    eqcont3.show_east = eqcont3.show_east_var.get()    eqcont3.show_south = eqcont3.show_south_var.get()    eqcont3.show_west = eqcont3.show_west_var.get()    eqcont3.show_0 = eqcont3.show_0_var.get()    eqcont3.show_90 = eqcont3.show_90_var.get()    eqcont3.show_180 = eqcont3.show_180_var.get()    eqcont3.show_270 = eqcont3.show_270_var.get()    eqcont3.label_color = eqcont3.label_color_temp    eqcont3.label_fontsize_mod = eqcont3.label_fontsize_var.get()    eqcont3.show_gadfield = eqcont3.show_gadfield_var.get()    eqcont3.sitelat = eqcont3.sitelat_slider.get()    eqcont3.field_symbol = symbolchoices_dict[eqcont3.field_symbol_var.get()]    eqcont3.field_color = eqcont3.field_color_temp    eqcont3.field_size = eqcont3.field_symbol_size_slider.get()    eqcont3.show_gadfield_edge = eqcont3.show_gadfield_edge_var.get()    eqcont3.field_edge_color = eqcont3.field_edge_color_temp    eqcont3.show_gadfield_label = eqcont3.show_gadfield_label_var.get()    eqcont3.show_title = eqcont3.show_title_var.get()    eqcont3.title_color = eqcont3.title_color_temp    eqcont3.show_legend = eqcont3.show_legend_var.get()    eqcont3.legend_color = eqcont3.legend_color_temp    eqcont3.error_scaling = eqcont3.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef entereq_printsteplistbox(self):    self.ineq_printsteplistbox = True    returndef leaveeq_printsteplistbox(self):    self.ineq_printsteplistbox = False    self.focustopwin()    returndef entereq2_printsteplistbox(self):    self.ineq2_printsteplistbox = True    returndef leaveeq2_printsteplistbox(self):    self.ineq2_printsteplistbox = False    self.focustopwin()    returndef entereq3_printsamplabelbox(self):    self.ineq3_printsamplabelbox = True    returndef leaveeq3_printsamplabelbox(self):    self.ineq3_printsamplabelbox = False    self.focustopwin()    returndef entereq3_printsamplistbox(self):    self.ineq3_printsamplistbox = True    returndef leaveeq3_printsamplistbox(self):    self.ineq3_printsamplistbox = False    self.focustopwin()    returndef entereq3_printsteplistbox(self):    self.ineq3_printsteplistbox = True    returndef leaveeq3_printsteplistbox(self):    self.ineq3_printsteplistbox = False    self.focustopwin()    returndef updateeq3steps(self):    global eqcont3    stepselection = eqcont3.printsteplist_box.curselection()    for sample in eqcont3.sitedata:        if sample.name == eqcont3.prevsamp:            for showstepindex, step in enumerate(sample.data):                step.eq_printlabel = not(showstepindex in stepselection)    newsampleselection = self.samplelist[eqcont3.printsamplist_box.curselection()[0]]    eqcont3.printsteplist_box.delete(0,tk1.END)    for sample in eqcont3.sitedata:        if sample.name == newsampleselection:            for showstepindex, step in enumerate(sample.data):                eqcont3.printsteplist_box.insert(tk1.END,step.dmagstep)                eqcont3.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")                if not(step.eq_printlabel):                    eqcont3.printsteplist_box.select_set(showstepindex)    eqcont3.prevsamp = newsampleselection    returndef eqcontrols_sample(self):    global eq_master, eqcont##    if eq_master != None and eq_master.winfo_exists():##    else: # Create eq_master control window    try:        'normal' == eq_master.state()        eq_master.lift()        eq_master.attributes('-topmost',True)        eq_master.after_idle(eq_master.attributes,'-topmost',False)    except:        eq_master = tk1.Toplevel(root)        eq_master.focus_set()        eq_master.title("Equal Area Plot Controls (Sample Data)")        eq_master.geometry("+30+30")        eqcont.printstep_color_temp = eqcont.printstep_color # set color temps        eqcont.arcarrowline_color_temp = eqcont.arcarrowline_color        eqcont.lowerhem_color_temp = eqcont.lowerhem_color        eqcont.lowerhem_edge_color_temp = eqcont.lowerhem_edge_color        eqcont.upperhem_color_temp = eqcont.upperhem_color        eqcont.upperhem_edge_color_temp = eqcont.upperhem_edge_color        eqcont.firststep_color_temp = eqcont.firststep_color        eqcont.firststep_edge_color_temp = eqcont.firststep_edge_color        eqcont.laststep_color_temp = eqcont.laststep_color        eqcont.laststep_edge_color_temp = eqcont.laststep_edge_color        eqcont.axestick_color_temp = eqcont.axestick_color        eqcont.circle_color_temp = eqcont.circle_color        eqcont.circletick_color_temp = eqcont.circletick_color        eqcont.field_edge_color_temp = eqcont.field_edge_color        eqcont.field_color_temp = eqcont.field_color        eqcont.label_color_temp = eqcont.label_color        eqcont.title_color_temp = eqcont.title_color        eqcont.legend_color_temp = eqcont.legend_color        eq_vertical_scrollbar = tk1.Scrollbar(eq_master,orient=tk1.VERTICAL)        eq_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        eq_horizontal_scrollbar = tk1.Scrollbar(eq_master,orient=tk1.HORIZONTAL)        eq_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.eq_canvas = tk1.Canvas(eq_master, bd=0, highlightthickness=0,yscrollcommand=eq_vertical_scrollbar.set,xscrollcommand=eq_horizontal_scrollbar.set,width=1630,height=800,scrollregion=(0,0,1630,800))        self.eq_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        eq_vertical_scrollbar.config(command=self.eq_canvas.yview)        eq_horizontal_scrollbar.config(command=self.eq_canvas.xview)        self.eq_canvas.xview_moveto(0)        self.eq_canvas.yview_moveto(0)        eq_interior = tk1.Frame(self.eq_canvas,width=500,height=500)        eq_interior_id = self.eq_canvas.create_window(0, 0, window=eq_interior,anchor=tk1.NW)                eq_col0_frm = tk1.Frame(eq_interior,bd=2) # Column 0        eq_col0_frm.grid(row=0,column=0,sticky='NSEW')                eq_printsteps_frm = tk1.Frame(eq_col0_frm,bd=2,relief=tk1.SUNKEN)        eq_printsteps_frm.pack(fill=tk1.X)                step_settings_label = tk1.Label(eq_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        step_settings_label.grid(row=0, column=0, sticky='NSEW')        eq_selectprintsteps_frm = tk1.Frame(eq_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        selectsteps_label = tk1.Label(eq_selectprintsteps_frm, text="Select which Step\nLabels to NOT Print:")        selectsteps_label.grid(row=0, column=0, sticky='NSEW')        eqcont.printsteplist_box = tk1.Listbox(eq_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sample.data):            eqcont.printsteplist_box.insert(tk1.END,step.dmagstep)            eqcont.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.eq_printlabel):                eqcont.printsteplist_box.select_set(stepoffindex)        eqcont.printsteplist_box.grid(row=1,column=0,sticky='NSEW')        eqcont.printsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("eqcont.printsteplist_box"))        eqcont.printsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("eqcont.printsteplist_box"))        eqcont.print_scrollbar = tk1.Scrollbar(eqcont.printsteplist_box,orient=tk1.VERTICAL)        eqcont.print_scrollbar.config(command=eqcont.printsteplist_box.yview)        eqcont.printsteplist_box.config(yscrollcommand=eqcont.print_scrollbar.set)        eqcont.print_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        eqcont.printsteplist_box.bind("<Enter>", lambda x: entereq_printsteplistbox(self))        eqcont.printsteplist_box.bind("<Leave>", lambda x: leaveeq_printsteplistbox(self))        eq_show_allsteps_butt = tk1.Button(eq_printsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: eqcont.printsteplist_box.selection_clear(0, tk1.END))        eq_show_allsteps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        eq_show_nosteps_butt = tk1.Button(eq_printsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: eqcont.printsteplist_box.selection_set(0, tk1.END))        eq_show_nosteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        eq_printstep_color_frm = tk1.Frame(eq_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        eq_printstep_color_frm.grid_columnconfigure(0, weight=1)        eq_printstep_color_frm.grid_columnconfigure(3, weight=1)                        eq_printstep_color_butt = tk1.Button(eq_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(eq_master,"eqcont.printstep_color_temp","Equal Area Plot Step Labels",                                                                                                                              eq_printstep_color_label,eq_printstep_color_frm,False))        eq_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_printstep_color_label = tk1.Label(eq_printstep_color_frm,text="Current\nColor:\n%s" % eqcont.printstep_color_temp,fg=getoppositecolor(eqcont.printstep_color_temp), bg=eqcont.printstep_color_temp,width=10)        eq_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        eq_step_fontsize_frm = tk1.Frame(eq_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        eq_step_fontsize_frm.grid_columnconfigure(0, weight=1)        eq_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    eq_step_fontsize_label = tk1.Label(eq_step_fontsize_frm, text="Step Font Size:",bd=1)        eq_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        eqcont.step_fontsize_mod_var = tk1.StringVar(eq_interior)        eqcont.step_fontsize_mod_var.set(eqcont.step_fontsize_mod)         eq_step_fontsize_optionmenu = tk1.OptionMenu(eq_step_fontsize_frm, eqcont.step_fontsize_mod_var, *fontsizes_set)        eq_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        eq_step_fontsize_optionmenu.configure(font=('Consolas',10))        eq_showannot_frm = tk1.Frame(eq_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq_showannot_frm.grid(row=6, column=0,sticky='NSEW')        eqcont.show_popupannotations_var = tk1.BooleanVar(value=eqcont.show_popupannotations)        eq_show_popupannotations_chbutt = tk1.Checkbutton(eq_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=eqcont.show_popupannotations_var)        eq_show_popupannotations_chbutt.pack(fill=tk1.X)        eq_col1_frm = tk1.Frame(eq_interior,bd=2) # Column 1        eq_col1_frm.grid(row=0,column=1,sticky='NSEW')        eq_arcarrowline_frm = tk1.Frame(eq_col1_frm,bd=2,relief=tk1.SUNKEN)        eq_arcarrowline_frm.pack(fill=tk1.X)        eq_arrowline_title_text = tk1.Label(eq_arcarrowline_frm, text="Arcs / Arrows / Lines Settings:",font="Helvetica 12 bold")        eq_arrowline_title_text.pack(fill=tk1.X)        eq_show_arcarrowline_frm = tk1.Frame(eq_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq_show_arcarrowline_frm.pack(fill=tk1.X)        eqcont.show_arcarrowline_var = tk1.BooleanVar(value=eqcont.show_arcarrowline)        eq_show_arcarrowline_butt = tk1.Checkbutton(eq_show_arcarrowline_frm, text="Show Arcs/Arrows/Lines?", variable=eqcont.show_arcarrowline_var,command= lambda:                                              disablewidgets(eqcont.show_arcarrowline_var,False,[eq_arcarrowline_radio_text,eq_arc_radio,eq_arrow_radio,eq_line_radio,eq_arcarrowline_color_butt,eq_arcarrowline_color_text,                                                                                             eq_arcarrowline_width_text,eq_arcarrowline_width_optionmenu,eq_arc_density_label,eqcont.arc_densityfactor_slider],[],                                                             [[eqcont.arcsarrowsorlines_var,["Arrows","Lines"],[eq_arc_density_label,eqcont.arc_densityfactor_slider]]]))        eq_show_arcarrowline_butt.pack(fill=tk1.X)        eq_arcarrowline_radio_text_frm = tk1.Frame(eq_show_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq_arcarrowline_radio_text_frm.pack(fill=tk1.X)        eq_arcarrowline_radio_text = tk1.Label(eq_arcarrowline_radio_text_frm, text="Plot Arcs, Arrows, or Lines?")        eq_arcarrowline_radio_text.pack(fill=tk1.X)        eqcont.arcsarrowsorlines_var = tk1.StringVar()        eqcont.arcsarrowsorlines_var.set(eqcont.arcsarrowsorlines)        eq_arcarrowline_radio_frm = tk1.Frame(eq_arcarrowline_radio_text_frm,bd=2)        eq_arcarrowline_radio_frm.pack(fill=tk1.X)        eq_arc_radio = tk1.Radiobutton(eq_arcarrowline_radio_frm, text="Plot Arcs",variable=eqcont.arcsarrowsorlines_var,value="Arcs",command= lambda: disablewidgets(eqcont.arcsarrowsorlines_var,"",                                                            [eq_arc_density_label,eqcont.arc_densityfactor_slider],[eq_arc_density_label,eqcont.arc_densityfactor_slider],[]))        eq_arc_radio.pack(side=tk1.LEFT,padx=20)        eq_arrow_radio = tk1.Radiobutton(eq_arcarrowline_radio_frm, text="Plot Arrows",variable=eqcont.arcsarrowsorlines_var,value="Arrows",command= lambda: disablewidgets(eqcont.arcsarrowsorlines_var,"Arrows",                                                            [eq_arc_density_label,eqcont.arc_densityfactor_slider],[],[]))        eq_arrow_radio.pack(side=tk1.LEFT,padx=20)        eq_line_radio = tk1.Radiobutton(eq_arcarrowline_radio_frm, text="Plot Lines",variable=eqcont.arcsarrowsorlines_var,value="Lines",command= lambda: disablewidgets(eqcont.arcsarrowsorlines_var,"Lines",                                                            [eq_arc_density_label,eqcont.arc_densityfactor_slider],[],[]))        eq_line_radio.pack(side=tk1.LEFT,padx=20)        eq_arcarrowline_color_frm = tk1.Frame(eq_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq_arcarrowline_color_frm.pack(fill=tk1.X)        eq_arcarrowline_color_frm.grid_columnconfigure(0, weight=1)        eq_arcarrowline_color_frm.grid_columnconfigure(3, weight=1)        eq_arcarrowline_color_butt = tk1.Button(eq_arcarrowline_color_frm,text="Select Arc/Arrow/Line Color", command= lambda: getcolor(eq_master,"eqcont.arcarrowline_color_temp","Equal Area Arc/Arrow/Line",                                                                                                                              eq_arcarrowline_color_text,eq_arcarrowline_color_frm,False))        eq_arcarrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq_arcarrowline_color_text = tk1.Label(eq_arcarrowline_color_frm,text="Current\nColor:\n%s" % eqcont.arcarrowline_color_temp,fg=getoppositecolor(eqcont.arcarrowline_color_temp), bg=eqcont.arcarrowline_color_temp,width=10)        eq_arcarrowline_color_text.grid(row=0,column=2)        eq_arcarrowline_width_frm = tk1.Frame(eq_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq_arcarrowline_width_frm.pack(fill=tk1.X)        eq_arcarrowline_width_frm.grid_columnconfigure(0, weight=1)        eq_arcarrowline_width_frm.grid_columnconfigure(3, weight=1)        eq_arcarrowline_width_text = tk1.Label(eq_arcarrowline_width_frm, text="Arc/Arrow/Line Width:")        eq_arcarrowline_width_text.grid(row=0,column=1,sticky='NESW')                eqcont.arcarrowline_width_var = tk1.IntVar(eq_interior)        eqcont.arcarrowline_width_var.set(eqcont.arcarrowline_width)         eq_arcarrowline_width_optionmenu = tk1.OptionMenu(eq_arcarrowline_width_frm, eqcont.arcarrowline_width_var, *eq_linewidthchoices_set)        eq_arcarrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_arcarrowline_width_optionmenu.configure(font=('Consolas',10))        eq_arc_densityfactor_frm = tk1.Frame(eq_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq_arc_densityfactor_frm.pack(fill=tk1.X)        eq_arc_density_label = tk1.Label(eq_arc_densityfactor_frm, text="Point Density on Arcs\n(Higher densities take longer to plot):")        eq_arc_density_label.pack(fill=tk1.X)        eqcont.arc_densityfactor_slider = Scale(eq_arc_densityfactor_frm, from_=1, to=300,orient=tk1.HORIZONTAL,resolution=1,length=150,width=15)        eqcont.arc_densityfactor_slider.set(eqcont.arc_densityfactor)        eqcont.arc_densityfactor_slider.pack(fill=tk1.X)        if eqcont.show_arcarrowline:            if eqcont.arcsarrowsorlines_var.get() == "Arrows" or eqcont.arcsarrowsorlines_var.get() == "Lines":                eq_arc_density_label.config(state='disabled')                eqcont.arc_densityfactor_slider.config(state='disabled')        else:            disablewidgets(eqcont.show_arcarrowline_var,False,[eq_arcarrowline_radio_text,eq_arc_radio,eq_line_radio,eq_arrow_radio,eq_arcarrowline_color_butt,eq_arcarrowline_color_text,                                                               eq_arcarrowline_width_text,eq_arcarrowline_width_optionmenu,eq_arc_density_label,eqcont.arc_densityfactor_slider],[],[])        eq_circlespecs_frm = tk1.Frame(eq_col1_frm,bd=2,relief=tk1.SUNKEN)        eq_circlespecs_frm.pack(fill=tk1.X)        eq_circlespecs_label = tk1.Label(eq_circlespecs_frm, text="Circle Settings:",font="Helvetica 12 bold")        eq_circlespecs_label.pack(fill=tk1.X)        eq_circle_thickness_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_circle_thickness_frm.pack(fill=tk1.X)        eq_circle_thickness_frm.grid_columnconfigure(0, weight=1)        eq_circle_thickness_frm.grid_columnconfigure(3, weight=1)        eq_circle_thickness_label = tk1.Label(eq_circle_thickness_frm, text="Circle Thickness:")        eq_circle_thickness_label.grid(row=0, column=1, sticky='NSEW')        eqcont.circle_thickness_var = tk1.IntVar(eq_interior)        eqcont.circle_thickness_var.set(eqcont.circle_thickness)         eq_circle_thickness_optionmenu = tk1.OptionMenu(eq_circle_thickness_frm, eqcont.circle_thickness_var, *linewidthchoices_set)        eq_circle_thickness_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_circle_thickness_optionmenu.configure(font=('Consolas',10))        eq_circleradius_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_circleradius_frm.pack(fill=tk1.X)        eq_circleradius_label = tk1.Label(eq_circleradius_frm, text="Equal Area Plot Circle Radius:")        eq_circleradius_label.pack(fill=tk1.X)        eqcont.circle_rad_slider = Scale(eq_circleradius_frm, from_=100, to=500,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        eqcont.circle_rad_slider.set(eqcont.circle_rad)        eqcont.circle_rad_slider.pack(fill=tk1.X)        eq_circle_color_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_circle_color_frm.pack(fill=tk1.X)        eq_circle_color_frm.grid_columnconfigure(0, weight=1)        eq_circle_color_frm.grid_columnconfigure(3, weight=1)                        eq_circle_color_butt = tk1.Button(eq_circle_color_frm,text="Select Circle Color", command= lambda: getcolor(eq_master,"eqcont.circle_color_temp","Equal Area Plot Circle",eq_circle_color_label,eq_circle_color_frm,False))        eq_circle_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_circle_color_label = tk1.Label(eq_circle_color_frm,text="Current\nColor:\n%s" % eqcont.circle_color_temp,fg=getoppositecolor(eqcont.circle_color_temp), bg=eqcont.circle_color_temp,width=10)        eq_circle_color_label.grid(row=0, column=2,sticky='NSEW')        eq_show_circleticks_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_show_circleticks_frm.pack(fill=tk1.X)        eqcont.show_circleticks_var = tk1.BooleanVar(value=eqcont.show_circleticks)        eq_show_circleticks_chbutt = tk1.Checkbutton(eq_show_circleticks_frm, text="Show Circle Ticks?", variable=eqcont.show_circleticks_var,                                          command= lambda: disablewidgets(eqcont.show_circleticks_var,False,                                                                          [eq_circletick_width_label,eq_circletick_width_optionmenu,eq_circletick_length_label,eq_circletick_length_optionmenu,eq_circletick_color_butt,                                                                           eq_circletick_color_label,eq_circleticknum_label,eq_circleticknum_optionmenu],[],[]))        eq_show_circleticks_chbutt.pack(fill=tk1.X)        eq_circletick_width_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_circletick_width_frm.pack(fill=tk1.X)        eq_circletick_width_frm.grid_columnconfigure(0, weight=1)        eq_circletick_width_frm.grid_columnconfigure(3, weight=1)        eq_circletick_width_label = tk1.Label(eq_circletick_width_frm, text="Circle Tick Width:")        eq_circletick_width_label.grid(row=0, column=1, sticky='NSEW')        eqcont.circletick_width_var = tk1.IntVar(eq_interior)        eqcont.circletick_width_var.set(eqcont.circletick_width)         eq_circletick_width_optionmenu = tk1.OptionMenu(eq_circletick_width_frm, eqcont.circletick_width_var, *linewidthchoices_set)        eq_circletick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_circletick_width_optionmenu.configure(font=('Consolas',10))        eq_circletick_length_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_circletick_length_frm.pack(fill=tk1.X)        eq_circletick_length_frm.grid_columnconfigure(0, weight=1)        eq_circletick_length_frm.grid_columnconfigure(3, weight=1)        eq_circletick_length_label = tk1.Label(eq_circletick_length_frm, text="Circle Tick Length:")        eq_circletick_length_label.grid(row=0, column=1, sticky='NSEW')        eqcont.circletick_length_var = tk1.StringVar(eq_interior)        eqcont.circletick_length_var.set(eqcont.circletick_length_mod)         eq_circletick_length_optionmenu = tk1.OptionMenu(eq_circletick_length_frm, eqcont.circletick_length_var, *fontsizes_set)        eq_circletick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_circletick_length_optionmenu.configure(font=('Consolas',10))        eq_circletick_color_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_circletick_color_frm.pack(fill=tk1.X)        eq_circletick_color_frm.grid_columnconfigure(0, weight=1)        eq_circletick_color_frm.grid_columnconfigure(3, weight=1)                        eq_circletick_color_butt = tk1.Button(eq_circletick_color_frm,text="Select Circle Tick Color", command= lambda: getcolor(eq_master,"eqcont.circletick_color_temp","Equal Area Circle Tick",                                                                                                                                 eq_circletick_color_label,eq_circletick_color_frm,False))        eq_circletick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_circletick_color_label = tk1.Label(eq_circletick_color_frm,text="Current\nColor:\n%s" % eqcont.circletick_color_temp,fg=getoppositecolor(eqcont.circletick_color_temp), bg=eqcont.circletick_color_temp,width=10)        eq_circletick_color_label.grid(row=0, column=2,sticky='NSEW')                eq_circleticknum_frm = tk1.Frame(eq_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq_circleticknum_frm.pack(fill=tk1.X)        eq_circleticknum_label = tk1.Label(eq_circleticknum_frm, text="Number of Ticks on Circle:")        eq_circleticknum_label.pack(fill=tk1.X)        eqcont.numcircleticks_var = tk1.StringVar(eq_interior)        eqcont.numcircleticks_var.set(circleticknumchoices_dict_reverse[eqcont.numcircleticks])         eq_circleticknum_optionmenu = tk1.OptionMenu(eq_circleticknum_frm, eqcont.numcircleticks_var, *circleticknumchoices_set)        eq_circleticknum_optionmenu.pack(fill=tk1.X)        eq_circleticknum_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont.show_circleticks_var,False,[eq_circletick_width_label,eq_circletick_width_optionmenu,eq_circletick_length_label,eq_circletick_length_optionmenu,                                                         eq_circletick_color_butt,eq_circletick_color_label,eq_circleticknum_label,eq_circleticknum_optionmenu],[],[])        eq_col2_frm = tk1.Frame(eq_interior,bd=2) # Column 2        eq_col2_frm.grid(row=0,column=2,sticky='NSEW')        eq_error_settings_frm = tk1.Frame(eq_col2_frm,bd=2,relief=tk1.SUNKEN)        eq_error_settings_frm.pack(fill=tk1.X)        eq_error_settings_label = tk1.Label(eq_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        eq_error_settings_label.pack(fill=tk1.X)                eq_error_radio_frm = tk1.Frame(eq_error_settings_frm,bd=2,relief=tk1.GROOVE)        eq_error_radio_frm.pack(fill=tk1.X)        eq_error_settings_label = tk1.Label(eq_error_radio_frm, text="Select Error-Scaling for Symbols:")        eq_error_settings_label.pack(fill=tk1.X)        eqcont.error_scaling_var = tk1.StringVar()        eqcont.error_scaling_var.set(eqcont.error_scaling)        eq_errorscaling_radio_none = tk1.Radiobutton(eq_error_radio_frm, text="No Error Scaling",variable=eqcont.error_scaling_var,value="None",command = lambda:              disablewidgets(eqcont.error_scaling_var,"None",[],[eq_lowerhem_color_butt,eq_lowerhem_color_label,eq_upperhem_color_butt,eq_upperhem_color_label,                                  eqcont.lowerhem_symbol_size_slider,eqcont.upperhem_symbol_size_slider,eq_lowerhem_size_label,eq_upperhem_size_label],[]))        eq_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        eq_errorscaling_radio_size = tk1.Radiobutton(eq_error_radio_frm, text="Scale Symbol Size by Error",variable=eqcont.error_scaling_var,value="Size",command = lambda:                  disablewidgets(eqcont.error_scaling_var,"Size",[eqcont.lowerhem_symbol_size_slider,eqcont.upperhem_symbol_size_slider,eq_lowerhem_size_label,eq_upperhem_size_label],                                 [eq_lowerhem_color_butt,eq_lowerhem_color_label,eq_upperhem_color_butt,eq_upperhem_color_label],[]))        eq_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        eq_errorscaling_radio_color = tk1.Radiobutton(eq_error_radio_frm, text="Scale Symbol Color By Error",variable=eqcont.error_scaling_var,value="Color",command = lambda:                               disablewidgets(eqcont.error_scaling_var,"Color",[eq_lowerhem_color_butt,eq_lowerhem_color_label,eq_upperhem_color_butt,eq_upperhem_color_label],                                              [eqcont.lowerhem_symbol_size_slider,eqcont.upperhem_symbol_size_slider,eq_lowerhem_size_label,eq_upperhem_size_label],[]))        eq_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        eq_lowerhem_frm = tk1.Frame(eq_col2_frm,bd=2,relief=tk1.SUNKEN)        eq_lowerhem_frm.pack(fill=tk1.X)        eq_lowerhem_symbol_settings_label = tk1.Label(eq_lowerhem_frm, text="Lower Hemisphere Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq_lowerhem_symbol_settings_label.pack(fill=tk1.X)        eq_lowerhem_symbol_frm = tk1.Frame(eq_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq_lowerhem_symbol_frm.pack(fill=tk1.X)        eq_lowerhem_symbol_frm.grid_columnconfigure(0, weight=1)        eq_lowerhem_symbol_frm.grid_columnconfigure(3, weight=1)                eq_lowerhem_symbol_label = tk1.Label(eq_lowerhem_symbol_frm, text="Lower Hemisphere Symbol:",bd=1)        eq_lowerhem_symbol_label.grid(row=0, column=1,sticky='NSEW')                eqcont.lowerhem_symbol_var = tk1.StringVar(eq_interior)        eqcont.lowerhem_symbol_var.set(symbolchoices_dict_reverse[eqcont.lowerhem_symbol])         eq_lowerhem_symbolchoices_optionmenu = tk1.OptionMenu(eq_lowerhem_symbol_frm, eqcont.lowerhem_symbol_var, *symbolchoices_set)        eq_lowerhem_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_lowerhem_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq_lowerhem_symbol_size_frm = tk1.Frame(eq_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq_lowerhem_symbol_size_frm.pack(fill=tk1.X)        eq_lowerhem_size_label = tk1.Label(eq_lowerhem_symbol_size_frm, text="Lower Hemisphere Symbol Size:")        eq_lowerhem_size_label.pack(fill=tk1.X)        eqcont.lowerhem_symbol_size_slider = Scale(eq_lowerhem_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont.lowerhem_symbol_size_slider.set(eqcont.lowerhem_size)        eqcont.lowerhem_symbol_size_slider.pack(fill=tk1.X)        eq_lowerhem_color_frm = tk1.Frame(eq_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq_lowerhem_color_frm.pack(fill=tk1.X)        eq_lowerhem_color_frm.grid_columnconfigure(0, weight=1)        eq_lowerhem_color_frm.grid_columnconfigure(3, weight=1)        eq_lowerhem_color_butt = tk1.Button(eq_lowerhem_color_frm,text="Select Lower Hemisphere\nSymbol Color", command= lambda: getcolor(eq_master,"eqcont.lowerhem_color_temp","Lower Hemisphere Symbol",                                                                                                                                          eq_lowerhem_color_label,eq_lowerhem_color_frm,False))        eq_lowerhem_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_lowerhem_color_label = tk1.Label(eq_lowerhem_color_frm,text="Current\nColor:\n%s" % eqcont.lowerhem_color_temp,fg=getoppositecolor(eqcont.lowerhem_color_temp), bg=eqcont.lowerhem_color_temp,width=10)        eq_lowerhem_color_label.grid(row=0, column=2,sticky='NSEW')                eq_show_lowerhem_edge_frm = tk1.Frame(eq_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq_show_lowerhem_edge_frm.pack(fill=tk1.X)        eqcont.show_lowerhem_edge_var = tk1.BooleanVar(value=eqcont.show_lowerhem_edge)        eq_show_lowerhem_edge_chbutt = tk1.Checkbutton(eq_show_lowerhem_edge_frm, text="Show Lower Hemisphere Symbol Border?", variable=eqcont.show_lowerhem_edge_var,command= lambda:                                              disablewidgets(eqcont.show_lowerhem_edge_var,False,[eq_lowerhem_edge_color_butt,eq_lowerhem_edge_color_label,eq_lowerhem_edge_width_label,eq_lowerhem_edge_width_optionmenu],[],[]))        eq_show_lowerhem_edge_chbutt.pack(fill=tk1.X)        eq_lowerhem_edge_color_frm = tk1.Frame(eq_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq_lowerhem_edge_color_frm.pack(fill=tk1.X)        eq_lowerhem_edge_color_frm.grid_columnconfigure(0, weight=1)        eq_lowerhem_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq_lowerhem_edge_color_butt = tk1.Button(eq_lowerhem_edge_color_frm,text="Select Lower Hemisphere\nSymbol Border Color", command= lambda: getcolor(eq_master,"eqcont.lowerhem_edge_color_temp","Lower Hemisphere Symbol Edge",                                                                                                                                                           eq_lowerhem_edge_color_label,eq_lowerhem_edge_color_frm,False))        eq_lowerhem_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_lowerhem_edge_color_label = tk1.Label(eq_lowerhem_edge_color_frm,text="Current\nColor:\n%s" % eqcont.lowerhem_edge_color_temp,fg=getoppositecolor(eqcont.lowerhem_edge_color_temp), bg=eqcont.lowerhem_edge_color_temp,width=10)        eq_lowerhem_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq_lowerhem_edge_width_frm = tk1.Frame(eq_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq_lowerhem_edge_width_frm.pack(fill=tk1.X)        eq_lowerhem_edge_width_frm.grid_columnconfigure(0, weight=1)        eq_lowerhem_edge_width_frm.grid_columnconfigure(3, weight=1)        eq_lowerhem_edge_width_label = tk1.Label(eq_lowerhem_edge_width_frm, text="Lower Hemisphere Symbol Border Width:")        eq_lowerhem_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont.lowerhem_edge_width_var = tk1.IntVar(eq_interior)        eqcont.lowerhem_edge_width_var.set(eqcont.lowerhem_edge_width)         eq_lowerhem_edge_width_optionmenu = tk1.OptionMenu(eq_lowerhem_edge_width_frm, eqcont.lowerhem_edge_width_var, *linewidthchoices_set)        eq_lowerhem_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_lowerhem_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont.show_lowerhem_edge_var,False,[eq_lowerhem_edge_color_butt,eq_lowerhem_edge_color_label,eq_lowerhem_edge_width_label,eq_lowerhem_edge_width_optionmenu],[],[])                eq_upperhem_frm = tk1.Frame(eq_col2_frm,bd=2,relief=tk1.SUNKEN)        eq_upperhem_frm.pack(fill=tk1.X)        eq_upperhem_symbol_settings_label = tk1.Label(eq_upperhem_frm, text="Upper Hemisphere Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq_upperhem_symbol_settings_label.pack(fill=tk1.X)        eq_upperhem_symbol_frm = tk1.Frame(eq_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq_upperhem_symbol_frm.pack(fill=tk1.X)        eq_upperhem_symbol_frm.grid_columnconfigure(0, weight=1)        eq_upperhem_symbol_frm.grid_columnconfigure(3, weight=1)                  eq_upperhem_symbol_label = tk1.Label(eq_upperhem_symbol_frm, text="Upper Hemisphere Symbol:",bd=1)        eq_upperhem_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont.upperhem_symbol_var = tk1.StringVar(eq_interior)        eqcont.upperhem_symbol_var.set(symbolchoices_dict_reverse[eqcont.upperhem_symbol])         eq_upperhem_symbolchoices_optionmenu = tk1.OptionMenu(eq_upperhem_symbol_frm, eqcont.upperhem_symbol_var, *symbolchoices_set)        eq_upperhem_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_upperhem_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq_upperhem_symbol_size_frm = tk1.Frame(eq_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq_upperhem_symbol_size_frm.pack(fill=tk1.X)        eq_upperhem_size_label = tk1.Label(eq_upperhem_symbol_size_frm, text="Upper Hemisphere Symbol Size:")        eq_upperhem_size_label.pack(fill=tk1.X)        eqcont.upperhem_symbol_size_slider = Scale(eq_upperhem_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont.upperhem_symbol_size_slider.set(eqcont.upperhem_size)        eqcont.upperhem_symbol_size_slider.pack(fill=tk1.X)        eq_upperhem_color_frm = tk1.Frame(eq_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq_upperhem_color_frm.pack(fill=tk1.X)        eq_upperhem_color_frm.grid_columnconfigure(0, weight=1)        eq_upperhem_color_frm.grid_columnconfigure(3, weight=1)        eq_upperhem_color_butt = tk1.Button(eq_upperhem_color_frm,text="Select Upper Hemisphere\nSymbol Color", command= lambda: getcolor(eq_master,"eqcont.upperhem_color_temp","Upper Hemisphere Symbol",                                                                                                                                          eq_upperhem_color_label,eq_upperhem_color_frm,False))        eq_upperhem_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_upperhem_color_label = tk1.Label(eq_upperhem_color_frm,text="Current\nColor:\n%s" % eqcont.upperhem_color_temp,fg=getoppositecolor(eqcont.upperhem_color_temp), bg=eqcont.upperhem_color_temp,width=10)        eq_upperhem_color_label.grid(row=0, column=2,sticky='NSEW')        eq_show_upperhem_edge_frm = tk1.Frame(eq_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq_show_upperhem_edge_frm.pack(fill=tk1.X)        eqcont.show_upperhem_edge_var = tk1.BooleanVar(value=eqcont.show_upperhem_edge)        eq_show_upperhem_edge_chbutt = tk1.Checkbutton(eq_show_upperhem_edge_frm, text="Show Upper Hemisphere Symbol Border?", variable=eqcont.show_upperhem_edge_var,command= lambda:                                              disablewidgets(eqcont.show_upperhem_edge_var,False,[eq_upperhem_edge_color_butt,eq_upperhem_edge_color_label,eq_upperhem_edge_width_label,eq_upperhem_edge_width_optionmenu],[],[]))        eq_show_upperhem_edge_chbutt.pack(fill=tk1.X)        eq_upperhem_edge_color_frm = tk1.Frame(eq_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq_upperhem_edge_color_frm.pack(fill=tk1.X)        eq_upperhem_edge_color_frm.grid_columnconfigure(0, weight=1)        eq_upperhem_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq_upperhem_edge_color_butt = tk1.Button(eq_upperhem_edge_color_frm,text="Select Upper Hemisphere\nSymbol Border Color", command= lambda: getcolor(eq_master,"eqcont.upperhem_edge_color_temp","Upper Hemisphere Symbol Edge",                                                                                                                                                           eq_upperhem_edge_color_label,eq_upperhem_edge_color_frm,False))        eq_upperhem_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_upperhem_edge_color_label = tk1.Label(eq_upperhem_edge_color_frm,text="Current\nColor:\n%s" % eqcont.upperhem_edge_color_temp,fg=getoppositecolor(eqcont.upperhem_edge_color_temp), bg=eqcont.upperhem_edge_color_temp,width=10)        eq_upperhem_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq_upperhem_edge_width_frm = tk1.Frame(eq_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq_upperhem_edge_width_frm.pack(fill=tk1.X)        eq_upperhem_edge_width_frm.grid_columnconfigure(0, weight=1)        eq_upperhem_edge_width_frm.grid_columnconfigure(3, weight=1)        eq_upperhem_edge_width_label = tk1.Label(eq_upperhem_edge_width_frm, text="Upper Hemisphere Symbol Border Width:")        eq_upperhem_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont.upperhem_edge_width_var = tk1.IntVar(eq_interior)        eqcont.upperhem_edge_width_var.set(eqcont.upperhem_edge_width)         eq_upperhem_edge_width_optionmenu = tk1.OptionMenu(eq_upperhem_edge_width_frm, eqcont.upperhem_edge_width_var, *linewidthchoices_set)        eq_upperhem_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_upperhem_edge_width_optionmenu.configure(font=('Consolas',10))                disablewidgets(eqcont.show_upperhem_edge_var,False,[eq_upperhem_edge_color_butt,eq_upperhem_edge_color_label,eq_upperhem_edge_width_label,eq_upperhem_edge_width_optionmenu],[],[])        disablewidgets(eqcont.error_scaling_var,"None",[],[eq_lowerhem_color_butt,eq_lowerhem_color_label,eq_upperhem_color_butt,eq_upperhem_color_label,                eqcont.lowerhem_symbol_size_slider,eqcont.upperhem_symbol_size_slider,eq_lowerhem_size_label,eq_upperhem_size_label],[])        disablewidgets(eqcont.error_scaling_var,"Size",[eqcont.lowerhem_symbol_size_slider,eqcont.upperhem_symbol_size_slider,eq_lowerhem_size_label,eq_upperhem_size_label],                [eq_lowerhem_color_butt,eq_lowerhem_color_label,eq_upperhem_color_butt,eq_upperhem_color_label],[])        disablewidgets(eqcont.error_scaling_var,"Color",[eq_lowerhem_color_butt,eq_lowerhem_color_label,eq_upperhem_color_butt,eq_upperhem_color_label],                [eqcont.lowerhem_symbol_size_slider,eqcont.upperhem_symbol_size_slider,eq_lowerhem_size_label,eq_upperhem_size_label],[])        eq_col3_frm = tk1.Frame(eq_interior,bd=2) # Column 3        eq_col3_frm.grid(row=0,column=3,sticky='NSEW')        eq_firststep_frm = tk1.Frame(eq_col3_frm,bd=2,relief=tk1.SUNKEN)        eq_firststep_frm.pack(fill=tk1.X)        eq_firststep_symbol_settings_label = tk1.Label(eq_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq_firststep_symbol_settings_label.pack(fill=tk1.X)        eq_show_firststep_frm = tk1.Frame(eq_firststep_frm,bd=2,relief=tk1.GROOVE)        eq_show_firststep_frm.pack(fill=tk1.X)        eqcont.show_firststep_var = tk1.BooleanVar(value=eqcont.show_firststep)        eq_show_firststep_chbutt = tk1.Checkbutton(eq_show_firststep_frm, text="Show First Step Special Symbol?", variable=eqcont.show_firststep_var,command= lambda:                                              disablewidgets(eqcont.show_firststep_var,False,[eq_firststep_symbol_label,eq_firststep_symbolchoices_optionmenu,eq_firststep_size_label,eqcont.firststep_symbol_size_slider,                                                                                             eq_firststep_color_butt,eq_firststep_color_label,eq_show_firststep_edge_chbutt,eq_firststep_edge_color_butt,eq_firststep_edge_color_label,                                                                                             eq_firststep_edge_width_label,eq_firststep_edge_width_optionmenu],[],                                                             [[eqcont.show_firststep_edge_var,[False],[eq_firststep_edge_color_butt,eq_firststep_edge_color_label,eq_firststep_edge_width_label,eq_firststep_edge_width_optionmenu]]]))        eq_show_firststep_chbutt.pack(fill=tk1.X)        eq_firststep_symbol_frm = tk1.Frame(eq_firststep_frm,bd=2,relief=tk1.GROOVE)        eq_firststep_symbol_frm.pack(fill=tk1.X)        eq_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        eq_firststep_symbol_frm.grid_columnconfigure(3, weight=1)                  eq_firststep_symbol_label = tk1.Label(eq_firststep_symbol_frm, text="First Step Symbol:",bd=1)        eq_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont.firststep_symbol_var = tk1.StringVar(eq_interior)        eqcont.firststep_symbol_var.set(symbolchoices_dict_reverse[eqcont.firststep_symbol])         eq_firststep_symbolchoices_optionmenu = tk1.OptionMenu(eq_firststep_symbol_frm, eqcont.firststep_symbol_var, *symbolchoices_set)        eq_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq_firststep_size_frm = tk1.Frame(eq_firststep_frm,bd=2,relief=tk1.GROOVE)        eq_firststep_size_frm.pack(fill=tk1.X)        eq_firststep_size_label = tk1.Label(eq_firststep_size_frm, text="First Step Symbol Size:")        eq_firststep_size_label.pack(fill=tk1.X)        eqcont.firststep_symbol_size_slider = Scale(eq_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont.firststep_symbol_size_slider.set(eqcont.firststep_size)        eqcont.firststep_symbol_size_slider.pack(fill=tk1.X)        eq_firststep_color_frm = tk1.Frame(eq_firststep_frm,bd=2,relief=tk1.GROOVE)        eq_firststep_color_frm.pack(fill=tk1.X)        eq_firststep_color_frm.grid_columnconfigure(0, weight=1)        eq_firststep_color_frm.grid_columnconfigure(3, weight=1)                        eq_firststep_color_butt = tk1.Button(eq_firststep_color_frm,text="Select First Step\nSymbol Color", command= lambda: getcolor(eq_master,"eqcont.firststep_color_temp","Equal Area First Step Symbol",                                                                                                                                      eq_firststep_color_label,eq_firststep_color_frm,False))        eq_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_firststep_color_label = tk1.Label(eq_firststep_color_frm,text="Current\nColor:\n%s" % eqcont.firststep_color_temp,fg=getoppositecolor(eqcont.firststep_color_temp), bg=eqcont.firststep_color_temp,width=10)        eq_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        eq_show_firststep_edge_frm = tk1.Frame(eq_firststep_frm,bd=2,relief=tk1.GROOVE)        eq_show_firststep_edge_frm.pack(fill=tk1.X)        eqcont.show_firststep_edge_var = tk1.BooleanVar(value=eqcont.show_firststep_edge)        eq_show_firststep_edge_chbutt = tk1.Checkbutton(eq_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=eqcont.show_firststep_edge_var,command= lambda:                                              disablewidgets(eqcont.show_firststep_edge_var,False,[eq_firststep_edge_color_butt,eq_firststep_edge_color_label,eq_firststep_edge_width_label,eq_firststep_edge_width_optionmenu],[],[]))        eq_show_firststep_edge_chbutt.pack(fill=tk1.X)                eq_firststep_edge_color_frm = tk1.Frame(eq_firststep_frm,bd=2,relief=tk1.GROOVE)        eq_firststep_edge_color_frm.pack(fill=tk1.X)        eq_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        eq_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq_firststep_edge_color_butt = tk1.Button(eq_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color", command= lambda: getcolor(eq_master,"eqcont.firststep_edge_color_temp","Equal Area First Step Symbol Edge",                                                                                                                                                       eq_firststep_edge_color_label,eq_firststep_edge_color_frm,False))        eq_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_firststep_edge_color_label = tk1.Label(eq_firststep_edge_color_frm,text="Current\nColor:\n%s" % eqcont.firststep_edge_color_temp,fg=getoppositecolor(eqcont.firststep_edge_color_temp), bg=eqcont.firststep_edge_color_temp,width=10)        eq_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq_firststep_edge_width_frm = tk1.Frame(eq_firststep_frm,bd=2,relief=tk1.GROOVE)        eq_firststep_edge_width_frm.pack(fill=tk1.X)        eq_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        eq_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        eq_firststep_edge_width_label = tk1.Label(eq_firststep_edge_width_frm, text="First Step Symbol Border Width:")        eq_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont.firststep_edge_width_var = tk1.IntVar(eq_interior)        eqcont.firststep_edge_width_var.set(eqcont.firststep_edge_width)         eq_firststep_edge_width_optionmenu = tk1.OptionMenu(eq_firststep_edge_width_frm, eqcont.firststep_edge_width_var, *linewidthchoices_set)        eq_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont.show_firststep_edge_var,False,[eq_firststep_edge_color_butt,eq_firststep_edge_color_label,eq_firststep_edge_width_label,eq_firststep_edge_width_optionmenu],[],                       [[eqcont.show_firststep_edge_var,[False],[eq_firststep_edge_color_butt,eq_firststep_edge_color_label,eq_firststep_edge_width_label,eq_firststep_edge_width_optionmenu]]])        disablewidgets(eqcont.show_firststep_var,False,[eq_firststep_symbol_label,eq_firststep_symbolchoices_optionmenu,eq_firststep_size_label,eqcont.firststep_symbol_size_slider,eq_firststep_color_butt,eq_firststep_color_label,                                                       eq_show_firststep_edge_chbutt,eq_firststep_edge_color_butt,eq_firststep_edge_color_label,eq_firststep_edge_width_label,eq_firststep_edge_width_optionmenu],[],[])                eq_laststep_frm = tk1.Frame(eq_col3_frm,bd=2,relief=tk1.SUNKEN)        eq_laststep_frm.pack(fill=tk1.X)        eq_laststep_symbol_settings_label = tk1.Label(eq_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq_laststep_symbol_settings_label.pack(fill=tk1.X)        eq_show_laststep_frm = tk1.Frame(eq_laststep_frm,bd=2,relief=tk1.GROOVE)        eq_show_laststep_frm.pack(fill=tk1.X)        eqcont.show_laststep_var = tk1.BooleanVar(value=eqcont.show_laststep)        eq_show_laststep_chbutt = tk1.Checkbutton(eq_show_laststep_frm, text="Show Last Step Special Symbol?", variable=eqcont.show_laststep_var,command= lambda:                                              disablewidgets(eqcont.show_laststep_var,False,[eq_laststep_symbol_label,eq_laststep_symbolchoices_optionmenu,eq_laststep_size_label,eqcont.laststep_symbol_size_slider,                                                                                             eq_laststep_color_butt,eq_laststep_color_label,eq_show_laststep_edge_chbutt,eq_laststep_edge_color_butt,eq_laststep_edge_color_label,                                                                                             eq_laststep_edge_width_label,eq_laststep_edge_width_optionmenu],[],                                                             [[eqcont.show_laststep_edge_var,[False],[eq_laststep_edge_color_butt,eq_laststep_edge_color_label,eq_laststep_edge_width_label,eq_laststep_edge_width_optionmenu]]]))        eq_show_laststep_chbutt.pack(fill=tk1.X)        eq_laststep_symbol_frm = tk1.Frame(eq_laststep_frm,bd=2,relief=tk1.GROOVE)        eq_laststep_symbol_frm.pack(fill=tk1.X)        eq_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        eq_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  eq_laststep_symbol_label = tk1.Label(eq_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        eq_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont.laststep_symbol_var = tk1.StringVar(eq_interior)        eqcont.laststep_symbol_var.set(symbolchoices_dict_reverse[eqcont.laststep_symbol])         eq_laststep_symbolchoices_optionmenu = tk1.OptionMenu(eq_laststep_symbol_frm, eqcont.laststep_symbol_var, *symbolchoices_set)        eq_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq_laststep_size_frm = tk1.Frame(eq_laststep_frm,bd=2,relief=tk1.GROOVE)        eq_laststep_size_frm.pack(fill=tk1.X)        eq_laststep_size_label = tk1.Label(eq_laststep_size_frm, text="Last Step Symbol Size:")        eq_laststep_size_label.pack(fill=tk1.X)        eqcont.laststep_symbol_size_slider = Scale(eq_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont.laststep_symbol_size_slider.set(eqcont.laststep_size)        eqcont.laststep_symbol_size_slider.pack(fill=tk1.X)        eq_laststep_color_frm = tk1.Frame(eq_laststep_frm,bd=2,relief=tk1.GROOVE)        eq_laststep_color_frm.pack(fill=tk1.X)        eq_laststep_color_frm.grid_columnconfigure(0, weight=1)        eq_laststep_color_frm.grid_columnconfigure(3, weight=1)                        eq_laststep_color_butt = tk1.Button(eq_laststep_color_frm,text="Select Last Step\nSymbol Color", command= lambda: getcolor(eq_master,"eqcont.laststep_color_temp","Equal Area Last Step Symbol",                                                                                                                                   eq_laststep_color_label,eq_laststep_color_frm,False))        eq_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_laststep_color_label = tk1.Label(eq_laststep_color_frm,text="Current\nColor:\n%s" % eqcont.laststep_color_temp,fg=getoppositecolor(eqcont.laststep_color_temp), bg=eqcont.laststep_color_temp,width=10)        eq_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        eq_show_laststep_edge_frm = tk1.Frame(eq_laststep_frm,bd=2,relief=tk1.GROOVE)        eq_show_laststep_edge_frm.pack(fill=tk1.X)        eqcont.show_laststep_edge_var = tk1.BooleanVar(value=eqcont.show_laststep_edge)        eq_show_laststep_edge_chbutt = tk1.Checkbutton(eq_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=eqcont.show_laststep_edge_var,command= lambda:                                              disablewidgets(eqcont.show_laststep_edge_var,False,[eq_laststep_edge_color_butt,eq_laststep_edge_color_label,eq_laststep_edge_width_label,eq_laststep_edge_width_optionmenu],[],[]))        eq_show_laststep_edge_chbutt.pack(fill=tk1.X)        eq_laststep_edge_color_frm = tk1.Frame(eq_laststep_frm,bd=2,relief=tk1.GROOVE)        eq_laststep_edge_color_frm.pack(fill=tk1.X)        eq_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        eq_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq_laststep_edge_color_butt = tk1.Button(eq_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color", command= lambda: getcolor(eq_master,"eqcont.laststep_edge_color_temp","Equal Area Last Step Symbol Edge",                                                                                                                                                    eq_laststep_edge_color_label,eq_laststep_edge_color_frm,False))        eq_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_laststep_edge_color_label = tk1.Label(eq_laststep_edge_color_frm,text="Current\nColor:\n%s" % eqcont.laststep_edge_color_temp,fg=getoppositecolor(eqcont.laststep_edge_color_temp), bg=eqcont.laststep_edge_color_temp,width=10)        eq_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq_laststep_edge_width_frm = tk1.Frame(eq_laststep_frm,bd=2,relief=tk1.GROOVE)        eq_laststep_edge_width_frm.pack(fill=tk1.X)        eq_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        eq_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        eq_laststep_edge_width_label = tk1.Label(eq_laststep_edge_width_frm, text="Last Step Symbol Border Width:")        eq_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont.laststep_edge_width_var = tk1.IntVar(eq_interior)        eqcont.laststep_edge_width_var.set(eqcont.laststep_edge_width)         eq_laststep_edge_width_optionmenu = tk1.OptionMenu(eq_laststep_edge_width_frm, eqcont.laststep_edge_width_var, *linewidthchoices_set)        eq_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont.show_laststep_edge_var,False,[eq_laststep_edge_color_butt,eq_laststep_edge_color_label,eq_laststep_edge_width_label,eq_laststep_edge_width_optionmenu],[],[])        disablewidgets(eqcont.show_laststep_var,False,[eq_laststep_symbol_label,eq_laststep_symbolchoices_optionmenu,eq_laststep_size_label,eqcont.laststep_symbol_size_slider,                                                      eq_laststep_color_butt,eq_laststep_color_label,eq_show_laststep_edge_chbutt,eq_laststep_edge_color_butt,eq_laststep_edge_color_label,                                                       eq_laststep_edge_width_label,eq_laststep_edge_width_optionmenu],[],                       [[eqcont.show_laststep_edge_var,[False],[eq_laststep_edge_color_butt,eq_laststep_edge_color_label,eq_laststep_edge_width_label,eq_laststep_edge_width_optionmenu]]])                eq_col4_frm = tk1.Frame(eq_interior,bd=2) # Column 4        eq_col4_frm.grid(row=0,column=4,sticky='NSEW')        eq_axesspecs_frm = tk1.Frame(eq_col4_frm,bd=2,relief=tk1.SUNKEN)        eq_axesspecs_frm.pack(fill=tk1.X)        eq_axesspecs_label = tk1.Label(eq_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        eq_axesspecs_label.pack(fill=tk1.X)        eq_show_cross_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_show_cross_frm.pack(fill=tk1.X)        eqcont.show_cross_var = tk1.BooleanVar(value=eqcont.show_cross)        eq_show_cross_chbutton = tk1.Checkbutton(eq_show_cross_frm, text="Show Cross at Plot Center?", variable=eqcont.show_cross_var)        eq_show_cross_chbutton.pack(fill=tk1.X)        eq_show_axesticks_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_show_axesticks_frm.pack(fill=tk1.X)        eqcont.show_axesticks_var = tk1.BooleanVar(value=eqcont.show_axesticks)        eq_show_axes_chbutt = tk1.Checkbutton(eq_show_axesticks_frm, text="Show Axes Ticks?", variable=eqcont.show_axesticks_var,command= lambda:                                            disablewidgets(eqcont.show_axesticks_var,False,[eq_show_posxaxis_ticks_chbutt,eq_show_posyaxis_ticks_chbutt,eq_show_negxaxis_ticks_chbutt,eq_show_negyaxis_ticks_chbutt,eq_axisticknum_label,                                                                                          eq_axesticknum_optionmenu,eq_axestick_color_butt,eq_axestick_color_label,eq_axestick_width_label,eq_axestick_width_optionmenu,                                                                                          eq_axestick_length_label,eq_axestick_length_optionmenu],[],[]))        eq_show_axes_chbutt.pack(fill=tk1.X)        eqcont.show_posxaxis_ticks_var = tk1.BooleanVar(value=eqcont.show_posxaxis_ticks)        eq_show_posxaxis_ticks_chbutt = tk1.Checkbutton(eq_show_axesticks_frm, text="Show Positive X Axis Ticks?", variable=eqcont.show_posxaxis_ticks_var)        eq_show_posxaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont.show_posyaxis_ticks_var = tk1.BooleanVar(value=eqcont.show_posyaxis_ticks)        eq_show_posyaxis_ticks_chbutt = tk1.Checkbutton(eq_show_axesticks_frm, text="Show Positive Y Axis Ticks?", variable=eqcont.show_posyaxis_ticks_var)        eq_show_posyaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont.show_negxaxis_ticks_var = tk1.BooleanVar(value=eqcont.show_negxaxis_ticks)        eq_show_negxaxis_ticks_chbutt = tk1.Checkbutton(eq_show_axesticks_frm, text="Show Negative X Axis Ticks?", variable=eqcont.show_negxaxis_ticks_var)        eq_show_negxaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont.show_negyaxis_ticks_var = tk1.BooleanVar(value=eqcont.show_negyaxis_ticks)        eq_show_negyaxis_ticks_chbutt = tk1.Checkbutton(eq_show_axesticks_frm, text="Show Negative Y Axis Ticks?", variable=eqcont.show_negyaxis_ticks_var)        eq_show_negyaxis_ticks_chbutt.pack(fill=tk1.X)        eq_axisticknum_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_axisticknum_frm.pack(fill=tk1.X)        eq_axisticknum_label = tk1.Label(eq_axisticknum_frm, text="Number of Ticks Per Axis:")        eq_axisticknum_label.pack(fill=tk1.X)        eqcont.numaxesticks_var = tk1.StringVar(eq_interior)        eqcont.numaxesticks_var.set(axisticknumchoices_dict_reverse[eqcont.numaxesticks])         eq_axesticknum_optionmenu = tk1.OptionMenu(eq_axisticknum_frm, eqcont.numaxesticks_var, *axisticknumchoices_set)        eq_axesticknum_optionmenu.pack(fill=tk1.X)        eq_axesticknum_optionmenu.configure(font=('Consolas',10))                eq_axestick_color_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_axestick_color_frm.pack(fill=tk1.X)        eq_axestick_color_frm.grid_columnconfigure(0, weight=1)        eq_axestick_color_frm.grid_columnconfigure(3, weight=1)                        eq_axestick_color_butt = tk1.Button(eq_axestick_color_frm,text="Select Axes Tick Color", command= lambda: getcolor(eq_master,"eqcont.axestick_color_temp","Equal Area Plot Axes Ticks",                                                                                                                           eq_axestick_color_label,eq_axestick_color_frm,False))        eq_axestick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_axestick_color_label = tk1.Label(eq_axestick_color_frm,text="Current\nColor:\n%s" % eqcont.axestick_color_temp,fg=getoppositecolor(eqcont.axestick_color_temp), bg=eqcont.axestick_color_temp,width=10)        eq_axestick_color_label.grid(row=0, column=2,sticky='NSEW')        eq_axestick_width_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_axestick_width_frm.pack(fill=tk1.X)        eq_axestick_width_frm.grid_columnconfigure(0, weight=1)        eq_axestick_width_frm.grid_columnconfigure(3, weight=1)        eq_axestick_width_label = tk1.Label(eq_axestick_width_frm, text="Axes Tick Width:")        eq_axestick_width_label.grid(row=0,column=1,sticky='NESW')        eqcont.axestick_width_var = tk1.IntVar(eq_interior)        eqcont.axestick_width_var.set(eqcont.axestick_width)         eq_axestick_width_optionmenu = tk1.OptionMenu(eq_axestick_width_frm, eqcont.axestick_width_var, *linewidthchoices_set)        eq_axestick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_axestick_width_optionmenu.configure(font=('Consolas',10))        eq_axestick_length_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_axestick_length_frm.pack(fill=tk1.X)        eq_axestick_length_frm.grid_columnconfigure(0, weight=1)        eq_axestick_length_frm.grid_columnconfigure(3, weight=1)        eq_axestick_length_label = tk1.Label(eq_axestick_length_frm, text="Axes Tick Length:")        eq_axestick_length_label.grid(row=0, column=1, sticky='NSEW')        eqcont.axestick_length_mod_var = tk1.StringVar(eq_interior)        eqcont.axestick_length_mod_var.set(eqcont.axestick_length_mod)         eq_axestick_length_optionmenu = tk1.OptionMenu(eq_axestick_length_frm, eqcont.axestick_length_mod_var, *fontsizes_set)        eq_axestick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_axestick_length_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont.show_axesticks_var,False,[eq_show_posxaxis_ticks_chbutt,eq_show_posyaxis_ticks_chbutt,eq_show_negxaxis_ticks_chbutt,eq_show_negyaxis_ticks_chbutt,eq_axisticknum_label,eq_axesticknum_optionmenu,                                                      eq_axestick_color_butt,eq_axestick_color_label,eq_axestick_width_label,eq_axestick_width_optionmenu,eq_axestick_length_label,eq_axestick_length_optionmenu],[],[])        eq_show_labels_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_show_labels_frm.pack(fill=tk1.X)        eqcont.show_labels_var = tk1.BooleanVar(value=eqcont.show_labels)        eq_show_label_chbutt = tk1.Checkbutton(eq_show_labels_frm, text="Show Cardinal Directions or Degrees?", variable=eqcont.show_labels_var,                                         command= lambda: disablewidgets(eqcont.show_labels_var,False,                                                                         [eq_numdirradio_dirs,eq_numdirradio_nums,eq_show_north_chbutt,eq_show_east_chbutt,eq_show_south_chbutt,eq_show_west_chbutt,                                                                          eq_show_0_chbutt,eq_show_90_chbutt,eq_show_180_chbutt,eq_show_270_chbutt,eq_label_color_butt,eq_label_color_label,eq_label_fontsize_label,                                                                          eq_label_fontsize_optionmenu],[],                                                                         [[eqcont.numsordirs_var,["Nums"],[eq_show_north_chbutt,eq_show_east_chbutt,eq_show_south_chbutt,eq_show_west_chbutt]],                                                                          [eqcont.numsordirs_var,["Dirs"],[eq_show_0_chbutt,eq_show_90_chbutt,eq_show_180_chbutt,eq_show_270_chbutt]]]))        eq_show_label_chbutt.pack(fill=tk1.X)        eq_numsordirs_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_numsordirs_frm.pack(fill=tk1.X)        eqcont.numsordirs_var = tk1.StringVar()        eqcont.numsordirs_var.set(eqcont.numsordirs)        eq_numdircheckbutts_frm = tk1.Frame(eq_numsordirs_frm,bd=2)        eq_numdircheckbutts_frm.pack(fill=tk1.X)        eq_dircheck_butt_frm = tk1.Frame(eq_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        eq_dircheck_butt_frm.grid(row=0,column=0,sticky='NSEW')        eq_numcheck_butt_frm = tk1.Frame(eq_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        eq_numcheck_butt_frm.grid(row=0,column=1,sticky='NSEW')        eq_numdirradio_dirs = tk1.Radiobutton(eq_dircheck_butt_frm, text="Cardinal Directions",variable=eqcont.numsordirs_var,value="Dirs",command= lambda: disablewidgets(eqcont.numsordirs_var,"Dirs",                                                                         [eq_show_0_chbutt,eq_show_90_chbutt,eq_show_180_chbutt,eq_show_270_chbutt],[eq_show_north_chbutt,eq_show_east_chbutt,eq_show_south_chbutt,eq_show_west_chbutt],[]))        eq_numdirradio_dirs.pack(fill=tk1.X)        eq_numdirradio_nums = tk1.Radiobutton(eq_numcheck_butt_frm, text="Degrees",variable=eqcont.numsordirs_var,value="Nums",command= lambda: disablewidgets(eqcont.numsordirs_var,"Nums",                                                                         [eq_show_north_chbutt,eq_show_east_chbutt,eq_show_south_chbutt,eq_show_west_chbutt],[eq_show_0_chbutt,eq_show_90_chbutt,eq_show_180_chbutt,eq_show_270_chbutt],[]))        eq_numdirradio_nums.pack(fill=tk1.X)        eqcont.show_north_var = tk1.BooleanVar(value=eqcont.show_north)        eq_show_north_chbutt = tk1.Checkbutton(eq_dircheck_butt_frm, text="Show North (\"N\")?", variable=eqcont.show_north_var)        eq_show_north_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont.show_east_var = tk1.BooleanVar(value=eqcont.show_east)        eq_show_east_chbutt = tk1.Checkbutton(eq_dircheck_butt_frm, text="Show East (\"E\")?", variable=eqcont.show_east_var)        eq_show_east_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont.show_south_var = tk1.BooleanVar(value=eqcont.show_south)        eq_show_south_chbutt = tk1.Checkbutton(eq_dircheck_butt_frm, text="Show South (\"S\")?", variable=eqcont.show_south_var)        eq_show_south_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont.show_west_var = tk1.BooleanVar(value=eqcont.show_west)        eq_show_west_chbutt = tk1.Checkbutton(eq_dircheck_butt_frm, text="Show West (\"W\")?", variable=eqcont.show_west_var)        eq_show_west_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont.show_0_var = tk1.BooleanVar(value=eqcont.show_0)        eq_show_0_chbutt = tk1.Checkbutton(eq_numcheck_butt_frm, text="Show 0%s?" % degree_sign, variable=eqcont.show_0_var)        eq_show_0_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont.show_90_var = tk1.BooleanVar(value=eqcont.show_90)        eq_show_90_chbutt = tk1.Checkbutton(eq_numcheck_butt_frm, text="Show 90%s?" % degree_sign, variable=eqcont.show_90_var)        eq_show_90_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont.show_180_var = tk1.BooleanVar(value=eqcont.show_180)        eq_show_180_chbutt = tk1.Checkbutton(eq_numcheck_butt_frm, text="Show 180%s?" % degree_sign, variable=eqcont.show_180_var)        eq_show_180_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont.show_270_var = tk1.BooleanVar(value=eqcont.show_270)        eq_show_270_chbutt = tk1.Checkbutton(eq_numcheck_butt_frm, text="Show 270%s?" % degree_sign, variable=eqcont.show_270_var)        eq_show_270_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eq_label_color_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_label_color_frm.pack(fill=tk1.X)        eq_label_color_frm.grid_columnconfigure(0, weight=1)        eq_label_color_frm.grid_columnconfigure(3, weight=1)                        eq_label_color_butt = tk1.Button(eq_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(eq_master,"eqcont.label_color_temp","Equal Area Axes Labels",                                                                                                                      eq_label_color_label,eq_label_color_frm,False))        eq_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_label_color_label = tk1.Label(eq_label_color_frm,text="Current\nColor:\n%s" % eqcont.label_color_temp,fg=getoppositecolor(eqcont.label_color_temp), bg=eqcont.label_color_temp,width=10)        eq_label_color_label.grid(row=0, column=2,sticky='NSEW')        eq_label_fontsize_frm = tk1.Frame(eq_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq_label_fontsize_frm.pack(fill=tk1.X)        eq_label_fontsize_frm.grid_columnconfigure(0, weight=1)        eq_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    eq_label_fontsize_label = tk1.Label(eq_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        eq_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        eqcont.label_fontsize_var = tk1.StringVar(eq_interior)        eqcont.label_fontsize_var.set(eqcont.label_fontsize_mod)         eq_label_fontsize_optionmenu = tk1.OptionMenu(eq_label_fontsize_frm, eqcont.label_fontsize_var, *fontsizes_set)        eq_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        eq_label_fontsize_optionmenu.configure(font=('Consolas',10))        if eqcont.show_labels:            if eqcont.numsordirs_var.get() == "Dirs":                eq_show_0_chbutt.config(state='disabled')                eq_show_90_chbutt.config(state='disabled')                eq_show_180_chbutt.config(state='disabled')                eq_show_270_chbutt.config(state='disabled')            elif eqcont.numsordirs_var.get() == "Nums":                eq_show_north_chbutt.config(state='disabled')                eq_show_east_chbutt.config(state='disabled')                eq_show_south_chbutt.config(state='disabled')                eq_show_west_chbutt.config(state='disabled')        else:            disablewidgets(eqcont.show_labels_var,False,[eq_numdirradio_dirs,eq_numdirradio_nums,eq_show_north_chbutt,eq_show_east_chbutt,eq_show_south_chbutt,eq_show_west_chbutt,eq_show_0_chbutt,eq_show_90_chbutt,                                                    eq_show_180_chbutt,eq_show_270_chbutt,eq_label_color_butt,eq_label_color_label,eq_label_fontsize_label,eq_label_fontsize_optionmenu],[],[])        eq_col5_frm = tk1.Frame(eq_interior,bd=2) # Column 5        eq_col5_frm.grid(row=0,column=5,sticky='NSEW')        eq_legend_settings_frm = tk1.Frame(eq_col5_frm,bd=2,relief=tk1.SUNKEN)        eq_legend_settings_frm.pack(fill=tk1.X)        eq_legend_settings_label = tk1.Label(eq_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        eq_legend_settings_label.pack(fill=tk1.X)                eq_show_title_frm = tk1.Frame(eq_legend_settings_frm,bd=2,relief=tk1.GROOVE)        eq_show_title_frm.pack(fill=tk1.X)        eqcont.show_title_var = tk1.BooleanVar(value=eqcont.show_title)        eq_show_title_chbutt = tk1.Checkbutton(eq_show_title_frm, text="Show Title?", variable=eqcont.show_title_var,command= lambda:                                              disablewidgets(eqcont.show_title_var,False,[eq_title_color_butt,eq_title_color_color],[],[]))        eq_show_title_chbutt.pack(fill=tk1.X)        eq_title_color_frm = tk1.Frame(eq_show_title_frm,bd=2,relief=tk1.GROOVE)        eq_title_color_frm.pack(fill=tk1.X)        eq_title_color_frm.grid_columnconfigure(0, weight=1)        eq_title_color_frm.grid_columnconfigure(3, weight=1)        eq_title_color_butt = tk1.Button(eq_title_color_frm,text="Select Title Color", command= lambda: getcolor(eq_master,"eqcont.title_color_temp","Equal Area Title",eq_title_color_color,eq_title_color_frm,False))        eq_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq_title_color_color = tk1.Label(eq_title_color_frm,text="Current\nColor:\n%s" % eqcont.title_color_temp,fg=getoppositecolor(eqcont.title_color_temp), bg=eqcont.title_color_temp,width=10)        eq_title_color_color.grid(row=0,column=2)        disablewidgets(eqcont.show_title_var,False,[eq_title_color_butt,eq_title_color_color],[],[])        eq_show_legend_frm = tk1.Frame(eq_legend_settings_frm,bd=2,relief=tk1.GROOVE)        eq_show_legend_frm.pack(fill=tk1.X)        eqcont.show_legend_var = tk1.BooleanVar(value=eqcont.show_legend)        eq_show_legend_chbutt = tk1.Checkbutton(eq_show_legend_frm, text="Show Legend?", variable=eqcont.show_legend_var,command= lambda:                                              disablewidgets(eqcont.show_legend_var,False,[eq_legend_color_butt,eq_legend_color_label],[],[]))        eq_show_legend_chbutt.pack(fill=tk1.X)        eq_legend_color_frm = tk1.Frame(eq_show_legend_frm,bd=2,relief=tk1.GROOVE)        eq_legend_color_frm.pack(fill=tk1.X)        eq_legend_color_frm.grid_columnconfigure(0, weight=1)        eq_legend_color_frm.grid_columnconfigure(3, weight=1)        eq_legend_color_butt = tk1.Button(eq_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(eq_master,"eqcont.legend_color_temp","Equal Area Legend",eq_legend_color_label,eq_legend_color_frm,False))        eq_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq_legend_color_label = tk1.Label(eq_legend_color_frm,text="Current\nColor:\n%s" % eqcont.legend_color_temp,fg=getoppositecolor(eqcont.legend_color_temp), bg=eqcont.legend_color_temp,width=10)        eq_legend_color_label.grid(row=0,column=2)        disablewidgets(eqcont.show_legend_var,False,[eq_legend_color_butt,eq_legend_color_label],[],[])        eq_field_frm = tk1.Frame(eq_col5_frm,bd=2,relief=tk1.SUNKEN)        eq_field_frm.pack(fill=tk1.X)        eq_field_symbol_settings_label = tk1.Label(eq_field_frm, text="Local Field Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq_field_symbol_settings_label.pack(fill=tk1.X)        eq_show_gadfield_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_show_gadfield_frm.pack(fill=tk1.X)        eqcont.show_gadfield_var = tk1.BooleanVar(value=eqcont.show_gadfield)        eq_show_gadfield_chbutt = tk1.Checkbutton(eq_show_gadfield_frm, text="Show Symbol for Field?", variable=eqcont.show_gadfield_var,command= lambda: disablewidgets(eqcont.show_gadfield_var,False,                                                                [eq_field_lat_label,eqcont.sitelat_slider,eq_field_symbol_label,eq_field_symbolchoices_optionmenu,eq_field_size_label,                                                                 eqcont.field_symbol_size_slider,eq_field_color_butt,eq_field_color_label,                                                                 eq_field_edge_color_butt,eq_field_edge_color_label,eq_show_gadfield_edge_chbutt,eq_show_gadfield_label_chbutt],[],                                                                [[eqcont.show_gadfield_edge_var,[False],[eq_field_edge_color_butt,eq_field_edge_color_label]]]))        eq_show_gadfield_chbutt.pack(fill=tk1.X)        eq_field_lat_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_field_lat_frm.pack(fill=tk1.X)        eq_field_lat_label = tk1.Label(eq_field_lat_frm, text="Site Latitude:")        eq_field_lat_label.pack(fill=tk1.X)        eqcont.sitelat_slider = Scale(eq_field_lat_frm, from_=-90, to=90,orient=tk1.HORIZONTAL,resolution=1,length=180,width=15)        eqcont.sitelat_slider.set(eqcont.sitelat)        eqcont.sitelat_slider.pack(fill=tk1.X)        eq_field_symbol_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_field_symbol_frm.pack(fill=tk1.X)        eq_field_symbol_frm.grid_columnconfigure(0, weight=1)        eq_field_symbol_frm.grid_columnconfigure(3, weight=1)                  eq_field_symbol_label = tk1.Label(eq_field_symbol_frm, text="Field Symbol:",bd=1)        eq_field_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont.field_symbol_var = tk1.StringVar(eq_interior)        eqcont.field_symbol_var.set(symbolchoices_dict_reverse[eqcont.field_symbol])         eq_field_symbolchoices_optionmenu = tk1.OptionMenu(eq_field_symbol_frm, eqcont.field_symbol_var, *symbolchoices_set)        eq_field_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq_field_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq_field_size_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_field_size_frm.pack(fill=tk1.X)        eq_field_size_label = tk1.Label(eq_field_size_frm, text="Field Symbol Size:")        eq_field_size_label.pack(fill=tk1.X)        eqcont.field_symbol_size_slider = Scale(eq_field_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont.field_symbol_size_slider.set(eqcont.field_size)        eqcont.field_symbol_size_slider.pack(fill=tk1.X)        eq_field_color_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_field_color_frm.pack(fill=tk1.X)        eq_field_color_frm.grid_columnconfigure(0, weight=1)        eq_field_color_frm.grid_columnconfigure(3, weight=1)                        eq_field_color_butt = tk1.Button(eq_field_color_frm,text="Select Field\nSymbol Color", command= lambda: getcolor(eq_master,"eqcont.field_color_temp","Equal Area Field Symbol",                                                                                                                                      eq_field_color_label,eq_field_color_frm,False))        eq_field_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_field_color_label = tk1.Label(eq_field_color_frm,text="Current\nColor:\n%s" % eqcont.field_color_temp,fg=getoppositecolor(eqcont.field_color_temp), bg=eqcont.field_color_temp,width=10)        eq_field_color_label.grid(row=0, column=2,sticky='NSEW')        eq_show_gadfield_edge_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_show_gadfield_edge_frm.pack(fill=tk1.X)        eqcont.show_gadfield_edge_var = tk1.BooleanVar(value=eqcont.show_gadfield_edge)        eq_show_gadfield_edge_chbutt = tk1.Checkbutton(eq_show_gadfield_edge_frm, text="Show Field Symbol Border?", variable=eqcont.show_gadfield_edge_var,command= lambda:                                              disablewidgets(eqcont.show_gadfield_edge_var,False,[eq_field_edge_color_butt,eq_field_edge_color_label],[],[]))        eq_show_gadfield_edge_chbutt.pack(fill=tk1.X)                eq_field_edge_color_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_field_edge_color_frm.pack(fill=tk1.X)        eq_field_edge_color_frm.grid_columnconfigure(0, weight=1)        eq_field_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq_field_edge_color_butt = tk1.Button(eq_field_edge_color_frm,text="Select Field\nSymbol Border Color", command= lambda: getcolor(eq_master,"eqcont.field_edge_color_temp","Equal Area Field Symbol Edge",                                                                                                                                                       eq_field_edge_color_label,eq_field_edge_color_frm,False))        eq_field_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq_field_edge_color_label = tk1.Label(eq_field_edge_color_frm,text="Current\nColor:\n%s" % eqcont.field_edge_color_temp,fg=getoppositecolor(eqcont.field_edge_color_temp), bg=eqcont.field_edge_color_temp,width=10)        eq_field_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq_show_gadfield_label_frm = tk1.Frame(eq_field_frm,bd=2,relief=tk1.GROOVE)        eq_show_gadfield_label_frm.pack(fill=tk1.X)        eqcont.show_gadfield_label_var = tk1.BooleanVar(value=eqcont.show_gadfield_label)        eq_show_gadfield_label_chbutt = tk1.Checkbutton(eq_show_gadfield_label_frm, text="Show Field Label?", variable=eqcont.show_gadfield_label_var)        eq_show_gadfield_label_chbutt.pack(fill=tk1.X)        disablewidgets(eqcont.show_gadfield_edge_var,False,[eq_field_edge_color_butt,eq_field_edge_color_label],[],[])        disablewidgets(eqcont.show_gadfield_var,False,[eq_field_lat_label,eqcont.sitelat_slider,eq_field_symbol_label,eq_field_symbolchoices_optionmenu,eq_field_size_label,                                                    eqcont.field_symbol_size_slider,eq_field_color_butt,eq_field_color_label,eq_field_edge_color_butt,eq_field_edge_color_label,                                                    eq_show_gadfield_edge_chbutt,eq_show_gadfield_label_chbutt],[],[[eqcont.show_gadfield_edge_var,[False],[eq_field_edge_color_butt,eq_field_edge_color_label]]])            eq_submit_butt_frm = tk1.Frame(eq_interior,bd=2,relief=tk1.RIDGE)        eq_submit_butt_frm.grid(row=2,column=0, columnspan=6, sticky='NSEW')        eq_submit_butt = tk1.Button(eq_submit_butt_frm, text="Submit and Save Changes and Update Equal Area Sample Plot", command= lambda: submiteqcontrols(self,eqcont,eq_master))        eq_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq_submit_butt.configure(font=('Consolas bold',12))        eq_reset_butt = tk1.Button(eq_submit_butt_frm, text="Reset Equal Area Sample Plot to Defaults", command= lambda: eq_resetdefaults(self,eq_master))        eq_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq_reset_butt.configure(font=('Consolas',10))        eq_cancel_butt = tk1.Button(eq_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(eq_master))        eq_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq_cancel_butt.configure(font=('Consolas',10))        tk1.mainloop()    returndef eqcontrols_step(self):    global eq2_master, eqcont2##    if eq2_master != None and eq2_master.winfo_exists():##    else: # Create eq2_master control window    try:        'normal' == eq2_master.state()        eq2_master.lift()        eq2_master.attributes('-topmost',True)        eq2_master.after_idle(eq2_master.attributes,'-topmost',False)    except:        eq2_master = tk1.Toplevel(root)        eq2_master.focus_set()        eq2_master.title("Equal Area Plot Controls (Step Data)")        eq2_master.geometry("+30+30")        eqcont2.printstep_color_temp = eqcont2.printstep_color # set color temps        eqcont2.lowerhem_color_temp = eqcont2.lowerhem_color        eqcont2.lowerhem_edge_color_temp = eqcont2.lowerhem_edge_color        eqcont2.upperhem_color_temp = eqcont2.upperhem_color        eqcont2.upperhem_edge_color_temp = eqcont2.upperhem_edge_color        eqcont2.firststep_color_temp = eqcont2.firststep_color        eqcont2.firststep_edge_color_temp = eqcont2.firststep_edge_color        eqcont2.laststep_color_temp = eqcont2.laststep_color        eqcont2.laststep_edge_color_temp = eqcont2.laststep_edge_color        eqcont2.axestick_color_temp = eqcont2.axestick_color        eqcont2.circle_color_temp = eqcont2.circle_color        eqcont2.circletick_color_temp = eqcont2.circletick_color        eqcont2.field_edge_color_temp = eqcont2.field_edge_color        eqcont2.field_color_temp = eqcont2.field_color        eqcont2.label_color_temp = eqcont2.label_color        eqcont2.title_color_temp = eqcont2.title_color        eqcont2.legend_color_temp = eqcont2.legend_color        eq2_vertical_scrollbar = tk1.Scrollbar(eq2_master,orient=tk1.VERTICAL)        eq2_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        eq2_horizontal_scrollbar = tk1.Scrollbar(eq2_master,orient=tk1.HORIZONTAL)        eq2_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.eq2_canvas = tk1.Canvas(eq2_master, bd=0, highlightthickness=0,yscrollcommand=eq2_vertical_scrollbar.set,xscrollcommand=eq2_horizontal_scrollbar.set,width=1250,height=680,scrollregion=(0,0,1250,680))        self.eq2_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        eq2_vertical_scrollbar.config(command=self.eq2_canvas.yview)        eq2_horizontal_scrollbar.config(command=self.eq2_canvas.xview)        self.eq2_canvas.xview_moveto(0)        self.eq2_canvas.yview_moveto(0)        eq2_interior = tk1.Frame(self.eq2_canvas,width=500,height=500)        eq2_interior_id = self.eq2_canvas.create_window(0, 0, window=eq2_interior,anchor=tk1.NW)                eq2_col0_frm = tk1.Frame(eq2_interior,bd=2) # Column 0        eq2_col0_frm.grid(row=0,column=0,sticky='NSEW')                eq2_printsteps_frm = tk1.Frame(eq2_col0_frm,bd=2,relief=tk1.SUNKEN)        eq2_printsteps_frm.pack(fill=tk1.X)                step_settings_label = tk1.Label(eq2_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        step_settings_label.grid(row=0, column=0, sticky='NSEW')        eq2_selectprintsteps_frm = tk1.Frame(eq2_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq2_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        selectsteps_label = tk1.Label(eq2_selectprintsteps_frm, text="Select which Step\nLabels to NOT Print:")        selectsteps_label.grid(row=0, column=0, sticky='NSEW')        eqcont2.printsteplist_box = tk1.Listbox(eq2_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, sample in enumerate(self.sitesteptext):            eqcont2.printsteplist_box.insert(tk1.END,sample.samplename)            eqcont2.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.eq2_printlabel):                eqcont2.printsteplist_box.select_set(stepoffindex)                      eqcont2.printsteplist_box.grid(row=1,column=0,sticky='NSEW')        eqcont2.printsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("eqcont2.printsteplist_box"))        eqcont2.printsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("eqcont2.printsteplist_box"))        eqcont2.print_scrollbar = tk1.Scrollbar(eqcont2.printsteplist_box,orient=tk1.VERTICAL)        eqcont2.print_scrollbar.config(command=eqcont2.printsteplist_box.yview)        eqcont2.printsteplist_box.config(yscrollcommand=eqcont2.print_scrollbar.set)        eqcont2.print_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        eqcont2.printsteplist_box.bind("<Enter>", lambda x: entereq2_printsteplistbox(self))        eqcont2.printsteplist_box.bind("<Leave>", lambda x: leaveeq2_printsteplistbox(self))        eq2_show_allsteps_butt = tk1.Button(eq2_printsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: eqcont2.printsteplist_box.selection_clear(0, tk1.END))        eq2_show_allsteps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        eq2_show_nosteps_butt = tk1.Button(eq2_printsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: eqcont2.printsteplist_box.selection_set(0, tk1.END))        eq2_show_nosteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        eq2_printstep_color_frm = tk1.Frame(eq2_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq2_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        eq2_printstep_color_frm.grid_columnconfigure(0, weight=1)        eq2_printstep_color_frm.grid_columnconfigure(3, weight=1)                        eq2_printstep_color_butt = tk1.Button(eq2_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(eq2_master,"eqcont2.printstep_color_temp","Equal Area Plot Step Labels",                                                                                                                              eq2_printstep_color_label,eq2_printstep_color_frm,False))        eq2_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_printstep_color_label = tk1.Label(eq2_printstep_color_frm,text="Current\nColor:\n%s" % eqcont2.printstep_color_temp,fg=getoppositecolor(eqcont2.printstep_color_temp), bg=eqcont2.printstep_color_temp,width=10)        eq2_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_step_fontsize_frm = tk1.Frame(eq2_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq2_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        eq2_step_fontsize_frm.grid_columnconfigure(0, weight=1)        eq2_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    eq2_step_fontsize_label = tk1.Label(eq2_step_fontsize_frm, text="Step Font Size:",bd=1)        eq2_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        eqcont2.step_fontsize_mod_var = tk1.StringVar(eq2_interior)        eqcont2.step_fontsize_mod_var.set(eqcont2.step_fontsize_mod)         eq2_step_fontsize_optionmenu = tk1.OptionMenu(eq2_step_fontsize_frm, eqcont2.step_fontsize_mod_var, *fontsizes_set)        eq2_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        eq2_step_fontsize_optionmenu.configure(font=('Consolas',10))        eq2_showannot_frm = tk1.Frame(eq2_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq2_showannot_frm.grid(row=6, column=0,sticky='NSEW')        eqcont2.show_popupannotations_var = tk1.BooleanVar(value=eqcont2.show_popupannotations)        eq2_show_popupannotations_chbutt = tk1.Checkbutton(eq2_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=eqcont2.show_popupannotations_var)        eq2_show_popupannotations_chbutt.pack(fill=tk1.X)        eq2_col1_frm = tk1.Frame(eq2_interior,bd=2) # Column 1        eq2_col1_frm.grid(row=0,column=1,sticky='NSEW')        eq2_circlespecs_frm = tk1.Frame(eq2_col1_frm,bd=2,relief=tk1.SUNKEN)        eq2_circlespecs_frm.pack(fill=tk1.X)        eq2_circlespecs_label = tk1.Label(eq2_circlespecs_frm, text="Circle Settings:",font="Helvetica 12 bold")        eq2_circlespecs_label.pack(fill=tk1.X)        eq2_circle_thickness_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_circle_thickness_frm.pack(fill=tk1.X)        eq2_circle_thickness_frm.grid_columnconfigure(0, weight=1)        eq2_circle_thickness_frm.grid_columnconfigure(3, weight=1)        eq2_circle_thickness_label = tk1.Label(eq2_circle_thickness_frm, text="Circle Thickness:")        eq2_circle_thickness_label.grid(row=0, column=1, sticky='NSEW')        eqcont2.circle_thickness_var = tk1.IntVar(eq2_interior)        eqcont2.circle_thickness_var.set(eqcont2.circle_thickness)         eq2_circle_thickness_optionmenu = tk1.OptionMenu(eq2_circle_thickness_frm, eqcont2.circle_thickness_var, *linewidthchoices_set)        eq2_circle_thickness_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_circle_thickness_optionmenu.configure(font=('Consolas',10))        eq2_circleradius_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_circleradius_frm.pack(fill=tk1.X)        eq2_circleradius_label = tk1.Label(eq2_circleradius_frm, text="Equal Area Plot Circle Radius:")        eq2_circleradius_label.pack(fill=tk1.X)        eqcont2.circle_rad_slider = Scale(eq2_circleradius_frm, from_=100, to=500,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        eqcont2.circle_rad_slider.set(eqcont2.circle_rad)        eqcont2.circle_rad_slider.pack(fill=tk1.X)        eq2_circle_color_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_circle_color_frm.pack(fill=tk1.X)        eq2_circle_color_frm.grid_columnconfigure(0, weight=1)        eq2_circle_color_frm.grid_columnconfigure(3, weight=1)                        eq2_circle_color_butt = tk1.Button(eq2_circle_color_frm,text="Select Circle Color", command= lambda: getcolor(eq2_master,"eqcont2.circle_color_temp","Equal Area Plot Circle",eq2_circle_color_label,eq2_circle_color_frm,False))        eq2_circle_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_circle_color_label = tk1.Label(eq2_circle_color_frm,text="Current\nColor:\n%s" % eqcont2.circle_color_temp,fg=getoppositecolor(eqcont2.circle_color_temp), bg=eqcont2.circle_color_temp,width=10)        eq2_circle_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_show_circleticks_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_show_circleticks_frm.pack(fill=tk1.X)        eqcont2.show_circleticks_var = tk1.BooleanVar(value=eqcont2.show_circleticks)        eq2_show_circleticks_chbutt = tk1.Checkbutton(eq2_show_circleticks_frm, text="Show Circle Ticks?", variable=eqcont2.show_circleticks_var,                                          command= lambda: disablewidgets(eqcont2.show_circleticks_var,False,                                                                          [eq2_circletick_width_label,eq2_circletick_width_optionmenu,eq2_circletick_length_label,eq2_circletick_length_optionmenu,eq2_circletick_color_butt,                                                                           eq2_circletick_color_label,eq2_circleticknum_label,eq2_circleticknum_optionmenu],[],[]))        eq2_show_circleticks_chbutt.pack(fill=tk1.X)        eq2_circletick_width_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_circletick_width_frm.pack(fill=tk1.X)        eq2_circletick_width_frm.grid_columnconfigure(0, weight=1)        eq2_circletick_width_frm.grid_columnconfigure(3, weight=1)        eq2_circletick_width_label = tk1.Label(eq2_circletick_width_frm, text="Circle Tick Width:")        eq2_circletick_width_label.grid(row=0, column=1, sticky='NSEW')        eqcont2.circletick_width_var = tk1.IntVar(eq2_interior)        eqcont2.circletick_width_var.set(eqcont2.circletick_width)         eq2_circletick_width_optionmenu = tk1.OptionMenu(eq2_circletick_width_frm, eqcont2.circletick_width_var, *linewidthchoices_set)        eq2_circletick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_circletick_width_optionmenu.configure(font=('Consolas',10))        eq2_circletick_length_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_circletick_length_frm.pack(fill=tk1.X)        eq2_circletick_length_frm.grid_columnconfigure(0, weight=1)        eq2_circletick_length_frm.grid_columnconfigure(3, weight=1)        eq2_circletick_length_label = tk1.Label(eq2_circletick_length_frm, text="Circle Tick Length:")        eq2_circletick_length_label.grid(row=0, column=1, sticky='NSEW')        eqcont2.circletick_length_var = tk1.StringVar(eq2_interior)        eqcont2.circletick_length_var.set(eqcont2.circletick_length_mod)         eq2_circletick_length_optionmenu = tk1.OptionMenu(eq2_circletick_length_frm, eqcont2.circletick_length_var, *fontsizes_set)        eq2_circletick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_circletick_length_optionmenu.configure(font=('Consolas',10))        eq2_circletick_color_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_circletick_color_frm.pack(fill=tk1.X)        eq2_circletick_color_frm.grid_columnconfigure(0, weight=1)        eq2_circletick_color_frm.grid_columnconfigure(3, weight=1)                        eq2_circletick_color_butt = tk1.Button(eq2_circletick_color_frm,text="Select Circle Tick Color", command= lambda: getcolor(eq2_master,"eqcont2.circletick_color_temp","Equal Area Circle Tick",                                                                                                                                 eq2_circletick_color_label,eq2_circletick_color_frm,False))        eq2_circletick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_circletick_color_label = tk1.Label(eq2_circletick_color_frm,text="Current\nColor:\n%s" % eqcont2.circletick_color_temp,fg=getoppositecolor(eqcont2.circletick_color_temp), bg=eqcont2.circletick_color_temp,width=10)        eq2_circletick_color_label.grid(row=0, column=2,sticky='NSEW')                eq2_circleticknum_frm = tk1.Frame(eq2_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq2_circleticknum_frm.pack(fill=tk1.X)        eq2_circleticknum_label = tk1.Label(eq2_circleticknum_frm, text="Number of Ticks on Circle:")        eq2_circleticknum_label.pack(fill=tk1.X)        eqcont2.numcircleticks_var = tk1.StringVar(eq2_interior)        eqcont2.numcircleticks_var.set(circleticknumchoices_dict_reverse[eqcont2.numcircleticks])         eq2_circleticknum_optionmenu = tk1.OptionMenu(eq2_circleticknum_frm, eqcont2.numcircleticks_var, *circleticknumchoices_set)        eq2_circleticknum_optionmenu.pack(fill=tk1.X)        eq2_circleticknum_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont2.show_circleticks_var,False,[eq2_circletick_width_label,eq2_circletick_width_optionmenu,eq2_circletick_length_label,eq2_circletick_length_optionmenu,                                                         eq2_circletick_color_butt,eq2_circletick_color_label,eq2_circleticknum_label,eq2_circleticknum_optionmenu],[],[])        eq2_error_settings_frm = tk1.Frame(eq2_col1_frm,bd=2,relief=tk1.SUNKEN)        eq2_error_settings_frm.pack(fill=tk1.X)        eq2_error_settings_label = tk1.Label(eq2_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        eq2_error_settings_label.pack(fill=tk1.X)                eq2_error_radio_frm = tk1.Frame(eq2_error_settings_frm,bd=2,relief=tk1.GROOVE)        eq2_error_radio_frm.pack(fill=tk1.X)        eq2_error_settings_label = tk1.Label(eq2_error_radio_frm, text="Select Error-Scaling for Symbols:")        eq2_error_settings_label.pack(fill=tk1.X)        eqcont2.error_scaling_var = tk1.StringVar()        eqcont2.error_scaling_var.set(eqcont2.error_scaling)        eq2_errorscaling_radio_none = tk1.Radiobutton(eq2_error_radio_frm, text="No Error Scaling",variable=eqcont2.error_scaling_var,value="None",command = lambda:              disablewidgets(eqcont2.error_scaling_var,"None",[],[eq2_lowerhem_color_butt,eq2_lowerhem_color_label,eq2_upperhem_color_butt,eq2_upperhem_color_label,                                  eqcont2.lowerhem_symbol_size_slider,eqcont2.upperhem_symbol_size_slider,eq2_lowerhem_size_label,eq2_upperhem_size_label],[]))        eq2_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        eq2_errorscaling_radio_size = tk1.Radiobutton(eq2_error_radio_frm, text="Scale Symbol Size by Error",variable=eqcont2.error_scaling_var,value="Size",command = lambda:                  disablewidgets(eqcont2.error_scaling_var,"Size",[eqcont2.lowerhem_symbol_size_slider,eqcont2.upperhem_symbol_size_slider,eq2_lowerhem_size_label,eq2_upperhem_size_label],                                 [eq2_lowerhem_color_butt,eq2_lowerhem_color_label,eq2_upperhem_color_butt,eq2_upperhem_color_label],[]))        eq2_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        eq2_errorscaling_radio_color = tk1.Radiobutton(eq2_error_radio_frm, text="Scale Symbol Color By Error",variable=eqcont2.error_scaling_var,value="Color",command = lambda:                               disablewidgets(eqcont2.error_scaling_var,"Color",[eq2_lowerhem_color_butt,eq2_lowerhem_color_label,eq2_upperhem_color_butt,eq2_upperhem_color_label],                                              [eqcont2.lowerhem_symbol_size_slider,eqcont2.upperhem_symbol_size_slider,eq2_lowerhem_size_label,eq2_upperhem_size_label],[]))        eq2_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        eq2_col2_frm = tk1.Frame(eq2_interior,bd=2) # Column 2        eq2_col2_frm.grid(row=0,column=2,sticky='NSEW')        eq2_lowerhem_frm = tk1.Frame(eq2_col2_frm,bd=2,relief=tk1.SUNKEN)        eq2_lowerhem_frm.pack(fill=tk1.X)        eq2_lowerhem_symbol_settings_label = tk1.Label(eq2_lowerhem_frm, text="Lower Hemisphere Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq2_lowerhem_symbol_settings_label.pack(fill=tk1.X)        eq2_lowerhem_symbol_frm = tk1.Frame(eq2_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq2_lowerhem_symbol_frm.pack(fill=tk1.X)        eq2_lowerhem_symbol_frm.grid_columnconfigure(0, weight=1)        eq2_lowerhem_symbol_frm.grid_columnconfigure(3, weight=1)                eq2_lowerhem_symbol_label = tk1.Label(eq2_lowerhem_symbol_frm, text="Lower Hemisphere Symbol:",bd=1)        eq2_lowerhem_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont2.lowerhem_symbol_var = tk1.StringVar(eq2_interior)        eqcont2.lowerhem_symbol_var.set(symbolchoices_dict_reverse[eqcont2.lowerhem_symbol])         eq2_lowerhem_symbolchoices_optionmenu = tk1.OptionMenu(eq2_lowerhem_symbol_frm, eqcont2.lowerhem_symbol_var, *symbolchoices_set)        eq2_lowerhem_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_lowerhem_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq2_lowerhem_symbol_size_frm = tk1.Frame(eq2_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq2_lowerhem_symbol_size_frm.pack(fill=tk1.X)        eq2_lowerhem_size_label = tk1.Label(eq2_lowerhem_symbol_size_frm, text="Lower Hemisphere Symbol Size:")        eq2_lowerhem_size_label.pack(fill=tk1.X)        eqcont2.lowerhem_symbol_size_slider = Scale(eq2_lowerhem_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont2.lowerhem_symbol_size_slider.set(eqcont2.lowerhem_size)        eqcont2.lowerhem_symbol_size_slider.pack(fill=tk1.X)        eq2_lowerhem_color_frm = tk1.Frame(eq2_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq2_lowerhem_color_frm.pack(fill=tk1.X)        eq2_lowerhem_color_frm.grid_columnconfigure(0, weight=1)        eq2_lowerhem_color_frm.grid_columnconfigure(3, weight=1)        eq2_lowerhem_color_butt = tk1.Button(eq2_lowerhem_color_frm,text="Select Lower Hemisphere\nSymbol Color", command= lambda: getcolor(eq2_master,"eqcont2.lowerhem_color_temp","Lower Hemisphere Symbol",                                                                                                                                          eq2_lowerhem_color_label,eq2_lowerhem_color_frm,False))        eq2_lowerhem_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_lowerhem_color_label = tk1.Label(eq2_lowerhem_color_frm,text="Current\nColor:\n%s" % eqcont2.lowerhem_color_temp,fg=getoppositecolor(eqcont2.lowerhem_color_temp), bg=eqcont2.lowerhem_color_temp,width=10)        eq2_lowerhem_color_label.grid(row=0, column=2,sticky='NSEW')                eq2_show_lowerhem_edge_frm = tk1.Frame(eq2_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq2_show_lowerhem_edge_frm.pack(fill=tk1.X)        eqcont2.show_lowerhem_edge_var = tk1.BooleanVar(value=eqcont2.show_lowerhem_edge)        eq2_show_lowerhem_edge_chbutt = tk1.Checkbutton(eq2_show_lowerhem_edge_frm, text="Show Lower Hemisphere Symbol Border?", variable=eqcont2.show_lowerhem_edge_var,command= lambda:                                              disablewidgets(eqcont2.show_lowerhem_edge_var,False,[eq2_lowerhem_edge_color_butt,eq2_lowerhem_edge_color_label,eq2_lowerhem_edge_width_label,eq2_lowerhem_edge_width_optionmenu],[],[]))        eq2_show_lowerhem_edge_chbutt.pack(fill=tk1.X)        eq2_lowerhem_edge_color_frm = tk1.Frame(eq2_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq2_lowerhem_edge_color_frm.pack(fill=tk1.X)        eq2_lowerhem_edge_color_frm.grid_columnconfigure(0, weight=1)        eq2_lowerhem_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq2_lowerhem_edge_color_butt = tk1.Button(eq2_lowerhem_edge_color_frm,text="Select Lower Hemisphere\nSymbol Border Color", command= lambda: getcolor(eq2_master,"eqcont2.lowerhem_edge_color_temp","Lower Hemisphere Symbol Edge",                                                                                                                                                           eq2_lowerhem_edge_color_label,eq2_lowerhem_edge_color_frm,False))        eq2_lowerhem_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_lowerhem_edge_color_label = tk1.Label(eq2_lowerhem_edge_color_frm,text="Current\nColor:\n%s" % eqcont2.lowerhem_edge_color_temp,fg=getoppositecolor(eqcont2.lowerhem_edge_color_temp), bg=eqcont2.lowerhem_edge_color_temp,width=10)        eq2_lowerhem_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_lowerhem_edge_width_frm = tk1.Frame(eq2_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq2_lowerhem_edge_width_frm.pack(fill=tk1.X)        eq2_lowerhem_edge_width_frm.grid_columnconfigure(0, weight=1)        eq2_lowerhem_edge_width_frm.grid_columnconfigure(3, weight=1)        eq2_lowerhem_edge_width_label = tk1.Label(eq2_lowerhem_edge_width_frm, text="Lower Hemisphere Symbol Border Width:")        eq2_lowerhem_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont2.lowerhem_edge_width_var = tk1.IntVar(eq2_interior)        eqcont2.lowerhem_edge_width_var.set(eqcont2.lowerhem_edge_width)         eq2_lowerhem_edge_width_optionmenu = tk1.OptionMenu(eq2_lowerhem_edge_width_frm, eqcont2.lowerhem_edge_width_var, *linewidthchoices_set)        eq2_lowerhem_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_lowerhem_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont2.show_lowerhem_edge_var,False,[eq2_lowerhem_edge_color_butt,eq2_lowerhem_edge_color_label,eq2_lowerhem_edge_width_label,eq2_lowerhem_edge_width_optionmenu],[],[])        eq2_upperhem_frm = tk1.Frame(eq2_col2_frm,bd=2,relief=tk1.SUNKEN)        eq2_upperhem_frm.pack(fill=tk1.X)        eq2_upperhem_symbol_settings_label = tk1.Label(eq2_upperhem_frm, text="Upper Hemisphere Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq2_upperhem_symbol_settings_label.pack(fill=tk1.X)        eq2_upperhem_symbol_frm = tk1.Frame(eq2_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq2_upperhem_symbol_frm.pack(fill=tk1.X)        eq2_upperhem_symbol_frm.grid_columnconfigure(0, weight=1)        eq2_upperhem_symbol_frm.grid_columnconfigure(3, weight=1)                  eq2_upperhem_symbol_label = tk1.Label(eq2_upperhem_symbol_frm, text="Upper Hemisphere Symbol:",bd=1)        eq2_upperhem_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont2.upperhem_symbol_var = tk1.StringVar(eq2_interior)        eqcont2.upperhem_symbol_var.set(symbolchoices_dict_reverse[eqcont2.upperhem_symbol])         eq2_upperhem_symbolchoices_optionmenu = tk1.OptionMenu(eq2_upperhem_symbol_frm, eqcont2.upperhem_symbol_var, *symbolchoices_set)        eq2_upperhem_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_upperhem_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq2_upperhem_symbol_size_frm = tk1.Frame(eq2_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq2_upperhem_symbol_size_frm.pack(fill=tk1.X)        eq2_upperhem_size_label = tk1.Label(eq2_upperhem_symbol_size_frm, text="Upper Hemisphere Symbol Size:")        eq2_upperhem_size_label.pack(fill=tk1.X)        eqcont2.upperhem_symbol_size_slider = Scale(eq2_upperhem_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont2.upperhem_symbol_size_slider.set(eqcont2.upperhem_size)        eqcont2.upperhem_symbol_size_slider.pack(fill=tk1.X)        eq2_upperhem_color_frm = tk1.Frame(eq2_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq2_upperhem_color_frm.pack(fill=tk1.X)        eq2_upperhem_color_frm.grid_columnconfigure(0, weight=1)        eq2_upperhem_color_frm.grid_columnconfigure(3, weight=1)        eq2_upperhem_color_butt = tk1.Button(eq2_upperhem_color_frm,text="Select Upper Hemisphere\nSymbol Color", command= lambda: getcolor(eq2_master,"eqcont2.upperhem_color_temp","Upper Hemisphere Symbol",                                                                                                                                          eq2_upperhem_color_label,eq2_upperhem_color_frm,False))        eq2_upperhem_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_upperhem_color_label = tk1.Label(eq2_upperhem_color_frm,text="Current\nColor:\n%s" % eqcont2.upperhem_color_temp,fg=getoppositecolor(eqcont2.upperhem_color_temp), bg=eqcont2.upperhem_color_temp,width=10)        eq2_upperhem_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_show_upperhem_edge_frm = tk1.Frame(eq2_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq2_show_upperhem_edge_frm.pack(fill=tk1.X)        eqcont2.show_upperhem_edge_var = tk1.BooleanVar(value=eqcont2.show_upperhem_edge)        eq2_show_upperhem_edge_chbutt = tk1.Checkbutton(eq2_show_upperhem_edge_frm, text="Show Upper Hemisphere Symbol Border?", variable=eqcont2.show_upperhem_edge_var,command= lambda:                                              disablewidgets(eqcont2.show_upperhem_edge_var,False,[eq2_upperhem_edge_color_butt,eq2_upperhem_edge_color_label,eq2_upperhem_edge_width_label,eq2_upperhem_edge_width_optionmenu],[],[]))        eq2_show_upperhem_edge_chbutt.pack(fill=tk1.X)        eq2_upperhem_edge_color_frm = tk1.Frame(eq2_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq2_upperhem_edge_color_frm.pack(fill=tk1.X)        eq2_upperhem_edge_color_frm.grid_columnconfigure(0, weight=1)        eq2_upperhem_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq2_upperhem_edge_color_butt = tk1.Button(eq2_upperhem_edge_color_frm,text="Select Upper Hemisphere\nSymbol Border Color", command= lambda: getcolor(eq2_master,"eqcont2.upperhem_edge_color_temp","Upper Hemisphere Symbol Edge",                                                                                                                                                           eq2_upperhem_edge_color_label,eq2_upperhem_edge_color_frm,False))        eq2_upperhem_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_upperhem_edge_color_label = tk1.Label(eq2_upperhem_edge_color_frm,text="Current\nColor:\n%s" % eqcont2.upperhem_edge_color_temp,fg=getoppositecolor(eqcont2.upperhem_edge_color_temp), bg=eqcont2.upperhem_edge_color_temp,width=10)        eq2_upperhem_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_upperhem_edge_width_frm = tk1.Frame(eq2_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq2_upperhem_edge_width_frm.pack(fill=tk1.X)        eq2_upperhem_edge_width_frm.grid_columnconfigure(0, weight=1)        eq2_upperhem_edge_width_frm.grid_columnconfigure(3, weight=1)        eq2_upperhem_edge_width_label = tk1.Label(eq2_upperhem_edge_width_frm, text="Upper Hemisphere Symbol Border Width:")        eq2_upperhem_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont2.upperhem_edge_width_var = tk1.IntVar(eq2_interior)        eqcont2.upperhem_edge_width_var.set(eqcont2.upperhem_edge_width)         eq2_upperhem_edge_width_optionmenu = tk1.OptionMenu(eq2_upperhem_edge_width_frm, eqcont2.upperhem_edge_width_var, *linewidthchoices_set)        eq2_upperhem_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_upperhem_edge_width_optionmenu.configure(font=('Consolas',10))                disablewidgets(eqcont2.show_upperhem_edge_var,False,[eq2_upperhem_edge_color_butt,eq2_upperhem_edge_color_label,eq2_upperhem_edge_width_label,eq2_upperhem_edge_width_optionmenu],[],[])        disablewidgets(eqcont2.error_scaling_var,"None",[],[eq2_lowerhem_color_butt,eq2_lowerhem_color_label,eq2_upperhem_color_butt,eq2_upperhem_color_label,                eqcont2.lowerhem_symbol_size_slider,eqcont2.upperhem_symbol_size_slider,eq2_lowerhem_size_label,eq2_upperhem_size_label],[])        disablewidgets(eqcont2.error_scaling_var,"Size",[eqcont2.lowerhem_symbol_size_slider,eqcont2.upperhem_symbol_size_slider,eq2_lowerhem_size_label,eq2_upperhem_size_label],                [eq2_lowerhem_color_butt,eq2_lowerhem_color_label,eq2_upperhem_color_butt,eq2_upperhem_color_label],[])        disablewidgets(eqcont2.error_scaling_var,"Color",[eq2_lowerhem_color_butt,eq2_lowerhem_color_label,eq2_upperhem_color_butt,eq2_upperhem_color_label],                [eqcont2.lowerhem_symbol_size_slider,eqcont2.upperhem_symbol_size_slider,eq2_lowerhem_size_label,eq2_upperhem_size_label],[])        eq2_col3_frm = tk1.Frame(eq2_interior,bd=2) # Column 3        eq2_col3_frm.grid(row=0,column=3,sticky='NSEW')        eq2_axesspecs_frm = tk1.Frame(eq2_col3_frm,bd=2,relief=tk1.SUNKEN)        eq2_axesspecs_frm.pack(fill=tk1.X)        eq2_axesspecs_label = tk1.Label(eq2_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        eq2_axesspecs_label.pack(fill=tk1.X)        eq2_show_cross_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_show_cross_frm.pack(fill=tk1.X)        eqcont2.show_cross_var = tk1.BooleanVar(value=eqcont2.show_cross)        eq2_show_cross_chbutton = tk1.Checkbutton(eq2_show_cross_frm, text="Show Cross at Plot Center?", variable=eqcont2.show_cross_var)        eq2_show_cross_chbutton.pack(fill=tk1.X)        eq2_show_axesticks_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_show_axesticks_frm.pack(fill=tk1.X)        eqcont2.show_axesticks_var = tk1.BooleanVar(value=eqcont2.show_axesticks)        eq2_show_axes_chbutt = tk1.Checkbutton(eq2_show_axesticks_frm, text="Show Axes Ticks?", variable=eqcont2.show_axesticks_var,command= lambda:                                            disablewidgets(eqcont2.show_axesticks_var,False,[eq2_show_posxaxis_ticks_chbutt,eq2_show_posyaxis_ticks_chbutt,eq2_show_negxaxis_ticks_chbutt,eq2_show_negyaxis_ticks_chbutt,eq2_axisticknum_label,                                                                                          eq2_axesticknum_optionmenu,eq2_axestick_color_butt,eq2_axestick_color_label,eq2_axestick_width_label,eq2_axestick_width_optionmenu,                                                                                          eq2_axestick_length_label,eq2_axestick_length_optionmenu],[],[]))        eq2_show_axes_chbutt.pack(fill=tk1.X)        eqcont2.show_posxaxis_ticks_var = tk1.BooleanVar(value=eqcont2.show_posxaxis_ticks)        eq2_show_posxaxis_ticks_chbutt = tk1.Checkbutton(eq2_show_axesticks_frm, text="Show Positive X Axis Ticks?", variable=eqcont2.show_posxaxis_ticks_var)        eq2_show_posxaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont2.show_posyaxis_ticks_var = tk1.BooleanVar(value=eqcont2.show_posyaxis_ticks)        eq2_show_posyaxis_ticks_chbutt = tk1.Checkbutton(eq2_show_axesticks_frm, text="Show Positive Y Axis Ticks?", variable=eqcont2.show_posyaxis_ticks_var)        eq2_show_posyaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont2.show_negxaxis_ticks_var = tk1.BooleanVar(value=eqcont2.show_negxaxis_ticks)        eq2_show_negxaxis_ticks_chbutt = tk1.Checkbutton(eq2_show_axesticks_frm, text="Show Negative X Axis Ticks?", variable=eqcont2.show_negxaxis_ticks_var)        eq2_show_negxaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont2.show_negyaxis_ticks_var = tk1.BooleanVar(value=eqcont2.show_negyaxis_ticks)        eq2_show_negyaxis_ticks_chbutt = tk1.Checkbutton(eq2_show_axesticks_frm, text="Show Negative Y Axis Ticks?", variable=eqcont2.show_negyaxis_ticks_var)        eq2_show_negyaxis_ticks_chbutt.pack(fill=tk1.X)        eq2_axisticknum_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_axisticknum_frm.pack(fill=tk1.X)        eq2_axisticknum_label = tk1.Label(eq2_axisticknum_frm, text="Number of Ticks Per Axis:")        eq2_axisticknum_label.pack(fill=tk1.X)        eqcont2.numaxesticks_var = tk1.StringVar(eq2_interior)        eqcont2.numaxesticks_var.set(axisticknumchoices_dict_reverse[eqcont2.numaxesticks])         eq2_axesticknum_optionmenu = tk1.OptionMenu(eq2_axisticknum_frm, eqcont2.numaxesticks_var, *axisticknumchoices_set)        eq2_axesticknum_optionmenu.pack(fill=tk1.X)        eq2_axesticknum_optionmenu.configure(font=('Consolas',10))                eq2_axestick_color_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_axestick_color_frm.pack(fill=tk1.X)        eq2_axestick_color_frm.grid_columnconfigure(0, weight=1)        eq2_axestick_color_frm.grid_columnconfigure(3, weight=1)                        eq2_axestick_color_butt = tk1.Button(eq2_axestick_color_frm,text="Select Axes Tick Color", command= lambda: getcolor(eq2_master,"eqcont2.axestick_color_temp","Equal Area Plot Axes Ticks",                                                                                                                           eq2_axestick_color_label,eq2_axestick_color_frm,False))        eq2_axestick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_axestick_color_label = tk1.Label(eq2_axestick_color_frm,text="Current\nColor:\n%s" % eqcont2.axestick_color_temp,fg=getoppositecolor(eqcont2.axestick_color_temp), bg=eqcont2.axestick_color_temp,width=10)        eq2_axestick_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_axestick_width_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_axestick_width_frm.pack(fill=tk1.X)        eq2_axestick_width_frm.grid_columnconfigure(0, weight=1)        eq2_axestick_width_frm.grid_columnconfigure(3, weight=1)        eq2_axestick_width_label = tk1.Label(eq2_axestick_width_frm, text="Axes Tick Width:")        eq2_axestick_width_label.grid(row=0,column=1,sticky='NESW')                eqcont2.axestick_width_var = tk1.IntVar(eq2_interior)        eqcont2.axestick_width_var.set(eqcont2.axestick_width)         eq2_axestick_width_optionmenu = tk1.OptionMenu(eq2_axestick_width_frm, eqcont2.axestick_width_var, *linewidthchoices_set)        eq2_axestick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_axestick_width_optionmenu.configure(font=('Consolas',10))        eq2_axestick_length_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_axestick_length_frm.pack(fill=tk1.X)        eq2_axestick_length_frm.grid_columnconfigure(0, weight=1)        eq2_axestick_length_frm.grid_columnconfigure(3, weight=1)        eq2_axestick_length_label = tk1.Label(eq2_axestick_length_frm, text="Axes Tick Length:")        eq2_axestick_length_label.grid(row=0, column=1, sticky='NSEW')        eqcont2.axestick_length_mod_var = tk1.StringVar(eq2_interior)        eqcont2.axestick_length_mod_var.set(eqcont2.axestick_length_mod)         eq2_axestick_length_optionmenu = tk1.OptionMenu(eq2_axestick_length_frm, eqcont2.axestick_length_mod_var, *fontsizes_set)        eq2_axestick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_axestick_length_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont2.show_axesticks_var,False,[eq2_show_posxaxis_ticks_chbutt,eq2_show_posyaxis_ticks_chbutt,eq2_show_negxaxis_ticks_chbutt,eq2_show_negyaxis_ticks_chbutt,eq2_axisticknum_label,eq2_axesticknum_optionmenu,                                                      eq2_axestick_color_butt,eq2_axestick_color_label,eq2_axestick_width_label,eq2_axestick_width_optionmenu,eq2_axestick_length_label,eq2_axestick_length_optionmenu],[],[])        eq2_show_labels_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_show_labels_frm.pack(fill=tk1.X)        eqcont2.show_labels_var = tk1.BooleanVar(value=eqcont2.show_labels)        eq2_show_label_chbutt = tk1.Checkbutton(eq2_show_labels_frm, text="Show Cardinal Directions or Degrees?", variable=eqcont2.show_labels_var,                                         command= lambda: disablewidgets(eqcont2.show_labels_var,False,                                                                         [eq2_numdirradio_dirs,eq2_numdirradio_nums,eq2_show_north_chbutt,eq2_show_east_chbutt,eq2_show_south_chbutt,eq2_show_west_chbutt,                                                                          eq2_show_0_chbutt,eq2_show_90_chbutt,eq2_show_180_chbutt,eq2_show_270_chbutt,eq2_label_color_butt,eq2_label_color_label,eq2_label_fontsize_label,eq2_label_fontsize_optionmenu],[],                                                                         [[eqcont2.numsordirs_var,["Nums"],[eq2_show_north_chbutt,eq2_show_east_chbutt,eq2_show_south_chbutt,eq2_show_west_chbutt]],                                                                          [eqcont2.numsordirs_var,["Dirs"],[eq2_show_0_chbutt,eq2_show_90_chbutt,eq2_show_180_chbutt,eq2_show_270_chbutt]]]))        eq2_show_label_chbutt.pack(fill=tk1.X)        eq2_numsordirs_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_numsordirs_frm.pack(fill=tk1.X)        eqcont2.numsordirs_var = tk1.StringVar()        eqcont2.numsordirs_var.set(eqcont2.numsordirs)        eq2_numdircheckbutts_frm = tk1.Frame(eq2_numsordirs_frm,bd=2)        eq2_numdircheckbutts_frm.pack(fill=tk1.X)        eq2_dircheck_butt_frm = tk1.Frame(eq2_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        eq2_dircheck_butt_frm.grid(row=0,column=0,sticky='NSEW')        eq2_numcheck_butt_frm = tk1.Frame(eq2_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        eq2_numcheck_butt_frm.grid(row=0,column=1,sticky='NSEW')        eq2_numdirradio_dirs = tk1.Radiobutton(eq2_dircheck_butt_frm, text="Cardinal Directions",variable=eqcont2.numsordirs_var,value="Dirs",command= lambda: disablewidgets(eqcont2.numsordirs_var,"Dirs",                                                                         [eq2_show_0_chbutt,eq2_show_90_chbutt,eq2_show_180_chbutt,eq2_show_270_chbutt],[eq2_show_north_chbutt,eq2_show_east_chbutt,eq2_show_south_chbutt,eq2_show_west_chbutt],[]))        eq2_numdirradio_dirs.pack(fill=tk1.X)        eq2_numdirradio_nums = tk1.Radiobutton(eq2_numcheck_butt_frm, text="Degrees",variable=eqcont2.numsordirs_var,value="Nums",command= lambda: disablewidgets(eqcont2.numsordirs_var,"Nums",                                                                         [eq2_show_north_chbutt,eq2_show_east_chbutt,eq2_show_south_chbutt,eq2_show_west_chbutt],[eq2_show_0_chbutt,eq2_show_90_chbutt,eq2_show_180_chbutt,eq2_show_270_chbutt],[]))        eq2_numdirradio_nums.pack(fill=tk1.X)        eqcont2.show_north_var = tk1.BooleanVar(value=eqcont2.show_north)        eq2_show_north_chbutt = tk1.Checkbutton(eq2_dircheck_butt_frm, text="Show North (\"N\")?", variable=eqcont2.show_north_var)        eq2_show_north_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont2.show_east_var = tk1.BooleanVar(value=eqcont2.show_east)        eq2_show_east_chbutt = tk1.Checkbutton(eq2_dircheck_butt_frm, text="Show East (\"E\")?", variable=eqcont2.show_east_var)        eq2_show_east_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont2.show_south_var = tk1.BooleanVar(value=eqcont2.show_south)        eq2_show_south_chbutt = tk1.Checkbutton(eq2_dircheck_butt_frm, text="Show South (\"S\")?", variable=eqcont2.show_south_var)        eq2_show_south_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont2.show_west_var = tk1.BooleanVar(value=eqcont2.show_west)        eq2_show_west_chbutt = tk1.Checkbutton(eq2_dircheck_butt_frm, text="Show West (\"W\")?", variable=eqcont2.show_west_var)        eq2_show_west_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont2.show_0_var = tk1.BooleanVar(value=eqcont2.show_0)        eq2_show_0_chbutt = tk1.Checkbutton(eq2_numcheck_butt_frm, text="Show 0%s?" % degree_sign, variable=eqcont2.show_0_var)        eq2_show_0_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont2.show_90_var = tk1.BooleanVar(value=eqcont2.show_90)        eq2_show_90_chbutt = tk1.Checkbutton(eq2_numcheck_butt_frm, text="Show 90%s?" % degree_sign, variable=eqcont2.show_90_var)        eq2_show_90_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont2.show_180_var = tk1.BooleanVar(value=eqcont2.show_180)        eq2_show_180_chbutt = tk1.Checkbutton(eq2_numcheck_butt_frm, text="Show 180%s?" % degree_sign, variable=eqcont2.show_180_var)        eq2_show_180_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont2.show_270_var = tk1.BooleanVar(value=eqcont2.show_270)        eq2_show_270_chbutt = tk1.Checkbutton(eq2_numcheck_butt_frm, text="Show 270%s?" % degree_sign, variable=eqcont2.show_270_var)        eq2_show_270_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eq2_label_color_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_label_color_frm.pack(fill=tk1.X)        eq2_label_color_frm.grid_columnconfigure(0, weight=1)        eq2_label_color_frm.grid_columnconfigure(3, weight=1)                        eq2_label_color_butt = tk1.Button(eq2_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(eq2_master,"eqcont2.label_color_temp","Equal Area Axes Labels",                                                                                                                      eq2_label_color_label,eq2_label_color_frm,False))        eq2_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_label_color_label = tk1.Label(eq2_label_color_frm,text="Current\nColor:\n%s" % eqcont2.label_color_temp,fg=getoppositecolor(eqcont2.label_color_temp), bg=eqcont2.label_color_temp,width=10)        eq2_label_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_label_fontsize_frm = tk1.Frame(eq2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq2_label_fontsize_frm.pack(fill=tk1.X)        eq2_label_fontsize_frm.grid_columnconfigure(0, weight=1)        eq2_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    eq2_label_fontsize_label = tk1.Label(eq2_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        eq2_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        eqcont2.label_fontsize_var = tk1.StringVar(eq2_interior)        eqcont2.label_fontsize_var.set(eqcont2.label_fontsize_mod)         eq2_label_fontsize_optionmenu = tk1.OptionMenu(eq2_label_fontsize_frm, eqcont2.label_fontsize_var, *fontsizes_set)        eq2_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        eq2_label_fontsize_optionmenu.configure(font=('Consolas',10))        if eqcont2.show_labels:            if eqcont2.numsordirs_var.get() == "Dirs":                eq2_show_0_chbutt.config(state='disabled')                eq2_show_90_chbutt.config(state='disabled')                eq2_show_180_chbutt.config(state='disabled')                eq2_show_270_chbutt.config(state='disabled')            elif eqcont2.numsordirs_var.get() == "Nums":                eq2_show_north_chbutt.config(state='disabled')                eq2_show_east_chbutt.config(state='disabled')                eq2_show_south_chbutt.config(state='disabled')                eq2_show_west_chbutt.config(state='disabled')        else:            disablewidgets(eqcont2.show_labels_var,False,[eq2_numdirradio_dirs,eq2_numdirradio_nums,eq2_show_north_chbutt,eq2_show_east_chbutt,eq2_show_south_chbutt,eq2_show_west_chbutt,eq2_show_0_chbutt,eq2_show_90_chbutt,                                                    eq2_show_180_chbutt,eq2_show_270_chbutt,eq2_label_color_butt,eq2_label_color_label,eq2_label_fontsize_label,eq2_label_fontsize_optionmenu],[],[])        eq2_col4_frm = tk1.Frame(eq2_interior,bd=2) # Column 4        eq2_col4_frm.grid(row=0,column=4,sticky='NSEW')        eq2_legend_settings_frm = tk1.Frame(eq2_col4_frm,bd=2,relief=tk1.SUNKEN)        eq2_legend_settings_frm.pack(fill=tk1.X)        eq2_legend_settings_label = tk1.Label(eq2_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        eq2_legend_settings_label.pack(fill=tk1.X)                eq2_show_title_frm = tk1.Frame(eq2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        eq2_show_title_frm.pack(fill=tk1.X)        eqcont2.show_title_var = tk1.BooleanVar(value=eqcont2.show_title)        eq2_show_title_chbutt = tk1.Checkbutton(eq2_show_title_frm, text="Show Title?", variable=eqcont2.show_title_var,command= lambda:                                              disablewidgets(eqcont2.show_title_var,False,[eq2_title_color_butt,eq2_title_color_color],[],[]))        eq2_show_title_chbutt.pack(fill=tk1.X)        eq2_title_color_frm = tk1.Frame(eq2_show_title_frm,bd=2,relief=tk1.GROOVE)        eq2_title_color_frm.pack(fill=tk1.X)        eq2_title_color_frm.grid_columnconfigure(0, weight=1)        eq2_title_color_frm.grid_columnconfigure(3, weight=1)        eq2_title_color_butt = tk1.Button(eq2_title_color_frm,text="Select Title Color", command= lambda: getcolor(eq2_master,"eqcont2.title_color_temp","Equal Area Title",eq2_title_color_color,eq2_title_color_frm,False))        eq2_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq2_title_color_color = tk1.Label(eq2_title_color_frm,text="Current\nColor:\n%s" % eqcont2.title_color_temp,fg=getoppositecolor(eqcont2.title_color_temp), bg=eqcont2.title_color_temp,width=10)        eq2_title_color_color.grid(row=0,column=2)        disablewidgets(eqcont2.show_title_var,False,[eq2_title_color_butt,eq2_title_color_color],[],[])        eq2_show_legend_frm = tk1.Frame(eq2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        eq2_show_legend_frm.pack(fill=tk1.X)        eqcont2.show_legend_var = tk1.BooleanVar(value=eqcont2.show_legend)        eq2_show_legend_chbutt = tk1.Checkbutton(eq2_show_legend_frm, text="Show Legend?", variable=eqcont2.show_legend_var,command= lambda:                                              disablewidgets(eqcont2.show_legend_var,False,[eq2_legend_color_butt,eq2_legend_color_label],[],[]))        eq2_show_legend_chbutt.pack(fill=tk1.X)        eq2_legend_color_frm = tk1.Frame(eq2_show_legend_frm,bd=2,relief=tk1.GROOVE)        eq2_legend_color_frm.pack(fill=tk1.X)        eq2_legend_color_frm.grid_columnconfigure(0, weight=1)        eq2_legend_color_frm.grid_columnconfigure(3, weight=1)        eq2_legend_color_butt = tk1.Button(eq2_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(eq2_master,"eqcont2.legend_color_temp","Equal Area Legend",eq2_legend_color_label,eq2_legend_color_frm,False))        eq2_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq2_legend_color_label = tk1.Label(eq2_legend_color_frm,text="Current\nColor:\n%s" % eqcont2.legend_color_temp,fg=getoppositecolor(eqcont2.legend_color_temp), bg=eqcont2.legend_color_temp,width=10)        eq2_legend_color_label.grid(row=0,column=2)        disablewidgets(eqcont2.show_legend_var,False,[eq2_legend_color_butt,eq2_legend_color_label],[],[])        eq2_field_frm = tk1.Frame(eq2_col4_frm,bd=2,relief=tk1.SUNKEN)        eq2_field_frm.pack(fill=tk1.X)        eq2_field_symbol_settings_label = tk1.Label(eq2_field_frm, text="Local Field Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq2_field_symbol_settings_label.pack(fill=tk1.X)        eq2_show_gadfield_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_show_gadfield_frm.pack(fill=tk1.X)        eqcont2.show_gadfield_var = tk1.BooleanVar(value=eqcont2.show_gadfield)        eq2_show_gadfield_chbutt = tk1.Checkbutton(eq2_show_gadfield_frm, text="Show Symbol for Field?", variable=eqcont2.show_gadfield_var,command= lambda: disablewidgets(eqcont2.show_gadfield_var,False,                                                                [eq2_field_lat_label,eqcont2.sitelat_slider,eq2_field_symbol_label,eq2_field_symbolchoices_optionmenu,eq2_field_size_label,                                                                 eqcont2.field_symbol_size_slider,eq2_field_color_butt,eq2_field_color_label,                                                                 eq2_field_edge_color_butt,eq2_field_edge_color_label,eq2_show_gadfield_edge_chbutt,eq2_show_gadfield_label_chbutt],[],                                                                [[eqcont2.show_gadfield_edge_var,[False],[eq2_field_edge_color_butt,eq2_field_edge_color_label]]]))        eq2_show_gadfield_chbutt.pack(fill=tk1.X)        eq2_field_lat_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_field_lat_frm.pack(fill=tk1.X)        eq2_field_lat_label = tk1.Label(eq2_field_lat_frm, text="Site Latitude:")        eq2_field_lat_label.pack(fill=tk1.X)        eqcont2.sitelat_slider = Scale(eq2_field_lat_frm, from_=-90, to=90,orient=tk1.HORIZONTAL,resolution=1,length=180,width=15)        eqcont2.sitelat_slider.set(eqcont2.sitelat)        eqcont2.sitelat_slider.pack(fill=tk1.X)        eq2_field_symbol_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_field_symbol_frm.pack(fill=tk1.X)        eq2_field_symbol_frm.grid_columnconfigure(0, weight=1)        eq2_field_symbol_frm.grid_columnconfigure(3, weight=1)                  eq2_field_symbol_label = tk1.Label(eq2_field_symbol_frm, text="Field Symbol:",bd=1)        eq2_field_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont2.field_symbol_var = tk1.StringVar(eq2_interior)        eqcont2.field_symbol_var.set(symbolchoices_dict_reverse[eqcont2.field_symbol])         eq2_field_symbolchoices_optionmenu = tk1.OptionMenu(eq2_field_symbol_frm, eqcont2.field_symbol_var, *symbolchoices_set)        eq2_field_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq2_field_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq2_field_size_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_field_size_frm.pack(fill=tk1.X)        eq2_field_size_label = tk1.Label(eq2_field_size_frm, text="Field Symbol Size:")        eq2_field_size_label.pack(fill=tk1.X)        eqcont2.field_symbol_size_slider = Scale(eq2_field_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont2.field_symbol_size_slider.set(eqcont2.field_size)        eqcont2.field_symbol_size_slider.pack(fill=tk1.X)        eq2_field_color_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_field_color_frm.pack(fill=tk1.X)        eq2_field_color_frm.grid_columnconfigure(0, weight=1)        eq2_field_color_frm.grid_columnconfigure(3, weight=1)                        eq2_field_color_butt = tk1.Button(eq2_field_color_frm,text="Select Field\nSymbol Color", command= lambda: getcolor(eq2_master,"eqcont2.field_color_temp","Equal Area Field Symbol",                                                                                                                                      eq2_field_color_label,eq2_field_color_frm,False))        eq2_field_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_field_color_label = tk1.Label(eq2_field_color_frm,text="Current\nColor:\n%s" % eqcont2.field_color_temp,fg=getoppositecolor(eqcont2.field_color_temp), bg=eqcont2.field_color_temp,width=10)        eq2_field_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_show_gadfield_edge_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_show_gadfield_edge_frm.pack(fill=tk1.X)        eqcont2.show_gadfield_edge_var = tk1.BooleanVar(value=eqcont2.show_gadfield_edge)        eq2_show_gadfield_edge_chbutt = tk1.Checkbutton(eq2_show_gadfield_edge_frm, text="Show Field Symbol Border?", variable=eqcont2.show_gadfield_edge_var,command= lambda:                                              disablewidgets(eqcont2.show_gadfield_edge_var,False,[eq2_field_edge_color_butt,eq2_field_edge_color_label],[],[]))        eq2_show_gadfield_edge_chbutt.pack(fill=tk1.X)                eq2_field_edge_color_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_field_edge_color_frm.pack(fill=tk1.X)        eq2_field_edge_color_frm.grid_columnconfigure(0, weight=1)        eq2_field_edge_color_frm.grid_columnconfigure(3, weight=1)        eq2_field_edge_color_butt = tk1.Button(eq2_field_edge_color_frm,text="Select Field\nSymbol Border Color", command= lambda: getcolor(eq2_master,"eqcont2.field_edge_color_temp","Equal Area Field Symbol Edge",                                                                                                                                                       eq2_field_edge_color_label,eq2_field_edge_color_frm,False))        eq2_field_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq2_field_edge_color_label = tk1.Label(eq2_field_edge_color_frm,text="Current\nColor:\n%s" % eqcont2.field_edge_color_temp,fg=getoppositecolor(eqcont2.field_edge_color_temp), bg=eqcont2.field_edge_color_temp,width=10)        eq2_field_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq2_show_gadfield_label_frm = tk1.Frame(eq2_field_frm,bd=2,relief=tk1.GROOVE)        eq2_show_gadfield_label_frm.pack(fill=tk1.X)        eqcont2.show_gadfield_label_var = tk1.BooleanVar(value=eqcont2.show_gadfield_label)        eq2_show_gadfield_label_chbutt = tk1.Checkbutton(eq2_show_gadfield_label_frm, text="Show Field Label?", variable=eqcont2.show_gadfield_label_var)        eq2_show_gadfield_label_chbutt.pack(fill=tk1.X)        disablewidgets(eqcont2.show_gadfield_edge_var,False,[eq2_field_edge_color_butt,eq2_field_edge_color_label],[],[])        disablewidgets(eqcont2.show_gadfield_var,False,[eq2_field_lat_label,eqcont2.sitelat_slider,eq2_field_symbol_label,eq2_field_symbolchoices_optionmenu,eq2_field_size_label,                                                    eqcont2.field_symbol_size_slider,eq2_field_color_butt,eq2_field_color_label,eq2_field_edge_color_butt,eq2_field_edge_color_label,                                                    eq2_show_gadfield_edge_chbutt,eq2_show_gadfield_label_chbutt],[],[[eqcont2.show_gadfield_edge_var,[False],[eq2_field_edge_color_butt,eq2_field_edge_color_label]]])            eq2_submit_butt_frm = tk1.Frame(eq2_interior,bd=2,relief=tk1.RIDGE)        eq2_submit_butt_frm.grid(row=2,column=0, columnspan=6, sticky='NSEW')        eq2_submit_butt = tk1.Button(eq2_submit_butt_frm, text="Submit and Save Changes and Update Equal Area Step Plot", command= lambda: submiteq2controls(self,eqcont2,eq2_master))        eq2_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq2_submit_butt.configure(font=('Consolas bold',12))        eq2_reset_butt = tk1.Button(eq2_submit_butt_frm, text="Reset Equal Area Step Plot to Defaults", command= lambda: eq2_resetdefaults(self,eq2_master))        eq2_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq2_reset_butt.configure(font=('Consolas',10))        eq2_cancel_butt = tk1.Button(eq2_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(eq2_master))        eq2_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq2_cancel_butt.configure(font=('Consolas',10))                tk1.mainloop()    returndef eqcontrols_multiple(self):    global eq3_master, eqcont3##    if eq3_master != None and eq3_master.winfo_exists():##    else: # Create eq3_master control window    try:        'normal' == eq3_master.state()        eq3_master.lift()        eq3_master.attributes('-topmost',True)        eq3_master.after_idle(eq3_master.attributes,'-topmost',False)    except:        eq3_master = tk1.Toplevel(root)        eq3_master.focus_set()        eq3_master.title("Equal Area Plot Controls (Multiple)")        eq3_master.geometry("+30+30")        eqcont3.printsamp_color_temp = eqcont3.printsamp_color  # set color temps        eqcont3.printstep_color_temp = eqcont3.printstep_color        eqcont3.arcarrowline_color_temp = eqcont3.arcarrowline_color        eqcont3.lowerhem_color_temp = eqcont3.lowerhem_color        eqcont3.lowerhem_edge_color_temp = eqcont3.lowerhem_edge_color        eqcont3.upperhem_color_temp = eqcont3.upperhem_color        eqcont3.upperhem_edge_color_temp = eqcont3.upperhem_edge_color        eqcont3.firststep_color_temp = eqcont3.firststep_color        eqcont3.firststep_edge_color_temp = eqcont3.firststep_edge_color        eqcont3.laststep_color_temp = eqcont3.laststep_color        eqcont3.laststep_edge_color_temp = eqcont3.laststep_edge_color        eqcont3.axestick_color_temp = eqcont3.axestick_color        eqcont3.circle_color_temp = eqcont3.circle_color        eqcont3.circletick_color_temp = eqcont3.circletick_color        eqcont3.field_edge_color_temp = eqcont3.field_edge_color        eqcont3.field_color_temp = eqcont3.field_color        eqcont3.label_color_temp = eqcont3.label_color        eqcont3.title_color_temp = eqcont3.title_color        eqcont3.legend_color_temp = eqcont3.legend_color        eq3_vertical_scrollbar = tk1.Scrollbar(eq3_master,orient=tk1.VERTICAL)        eq3_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        eq3_horizontal_scrollbar = tk1.Scrollbar(eq3_master,orient=tk1.HORIZONTAL)        eq3_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.eq3_canvas = tk1.Canvas(eq3_master, bd=0, highlightthickness=0,yscrollcommand=eq3_vertical_scrollbar.set,xscrollcommand=eq3_horizontal_scrollbar.set,width=1880,height=800,scrollregion=(0,0,1880,800))        self.eq3_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        eq3_vertical_scrollbar.config(command=self.eq3_canvas.yview)        eq3_horizontal_scrollbar.config(command=self.eq3_canvas.xview)        self.eq3_canvas.xview_moveto(0)        self.eq3_canvas.yview_moveto(0)        eq3_interior = tk1.Frame(self.eq3_canvas,width=500,height=500)        eq3_interior_id = self.eq3_canvas.create_window(0, 0, window=eq3_interior,anchor=tk1.NW)                eq3_col0_frm = tk1.Frame(eq3_interior,bd=2) # Column 0        eq3_col0_frm.grid(row=0,column=0,sticky='NSEW')                eq3_printsamps_frm = tk1.Frame(eq3_col0_frm,bd=2,relief=tk1.SUNKEN)        eq3_printsamps_frm.pack(fill=tk1.X)                eq3_samp_settings_label = tk1.Label(eq3_printsamps_frm, text="Sample Label Settings:",font="Helvetica 12 bold")        eq3_samp_settings_label.grid(row=0, column=0, sticky='NSEW')        eq3_selectprintsamps_frm = tk1.Frame(eq3_printsamps_frm,bd=2,relief=tk1.GROOVE)        eq3_selectprintsamps_frm.grid(row=1,column=0,sticky='NSEW')        selectsamps_label = tk1.Label(eq3_selectprintsamps_frm, text="Select which Sample\nLabels to NOT Print:")        selectsamps_label.grid(row=0, column=0, sticky='NSEW')        eqcont3.printsamplabel_box = tk1.Listbox(eq3_selectprintsamps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for sampoffindex, sample in enumerate(self.sitedata):            eqcont3.printsamplabel_box.insert(tk1.END,sample.name)            eqcont3.printsamplabel_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.eq_printname):                eqcont3.printsamplabel_box.select_set(sampoffindex)        eqcont3.printsamplabel_box.grid(row=1,column=0,sticky='NSEW')        eqcont3.printsamplabel_box.bind("<Control-Key-a>", lambda x: selectall_printsamplistbox("eqcont3.printsamplabel_box"))        eqcont3.printsamplabel_box.bind("<Control-Key-A>", lambda x: selectall_printsamplistbox("eqcont3.printsamplabel_box"))        eqcont3.printsamplabel_scrollbar = tk1.Scrollbar(eqcont3.printsamplabel_box,orient=tk1.VERTICAL)        eqcont3.printsamplabel_scrollbar.config(command=eqcont3.printsamplabel_box.yview)        eqcont3.printsamplabel_box.config(yscrollcommand=eqcont3.printsamplabel_scrollbar.set)        eqcont3.printsamplabel_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        eqcont3.printsamplabel_box.bind("<Enter>", lambda x: entereq3_printsamplabelbox(self))        eqcont3.printsamplabel_box.bind("<Leave>", lambda x: leaveeq3_printsamplabelbox(self))        eq3_show_allsamps_butt = tk1.Button(eq3_printsamps_frm, text="Print ALL Sample Labels\n(Deselect All)", command= lambda: eqcont3.printsamplabel_box.selection_clear(0, tk1.END))        eq3_show_allsamps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        eq3_show_nosamps_butt = tk1.Button(eq3_printsamps_frm, text="Print NO Sample Labels\n(Select All)", command= lambda: eqcont3.printsamplabel_box.selection_set(0, tk1.END))        eq3_show_nosamps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        eq3_printsamp_color_frm = tk1.Frame(eq3_printsamps_frm,bd=2,relief=tk1.GROOVE)        eq3_printsamp_color_frm.grid(row=4,column=0,sticky='NSEW')        eq3_printsamp_color_frm.grid_columnconfigure(0, weight=1)        eq3_printsamp_color_frm.grid_columnconfigure(3, weight=1)                        eq3_printsamp_color_butt = tk1.Button(eq3_printsamp_color_frm,text="Select Sample Label Color", command= lambda: getcolor(eq3_master,"eqcont3.printsamp_color_temp","Equal Area Plot Sample Labels",                                                                                                                              eq3_printsamp_color_label,eq3_printsamp_color_frm,False))        eq3_printsamp_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_printsamp_color_label = tk1.Label(eq3_printsamp_color_frm,text="Current\nColor:\n%s" % eqcont3.printsamp_color_temp,fg=getoppositecolor(eqcont3.printsamp_color_temp), bg=eqcont3.printsamp_color_temp,width=10)        eq3_printsamp_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_samp_fontsize_frm = tk1.Frame(eq3_printsamps_frm,bd=2,relief=tk1.GROOVE)        eq3_samp_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        eq3_samp_fontsize_frm.grid_columnconfigure(0, weight=1)        eq3_samp_fontsize_frm.grid_columnconfigure(3, weight=1)                    eq3_samp_fontsize_label = tk1.Label(eq3_samp_fontsize_frm, text="samp Font Size:",bd=1)        eq3_samp_fontsize_label.grid(row=1, column=1,sticky='NSEW')        eqcont3.samp_fontsize_mod_var = tk1.StringVar(eq3_interior)        eqcont3.samp_fontsize_mod_var.set(eqcont3.samp_fontsize_mod)         eq3_samp_fontsize_optionmenu = tk1.OptionMenu(eq3_samp_fontsize_frm, eqcont3.samp_fontsize_mod_var, *fontsizes_set)        eq3_samp_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        eq3_samp_fontsize_optionmenu.configure(font=('Consolas',10))        eq3_showannot_frm = tk1.Frame(eq3_printsamps_frm,bd=2,relief=tk1.GROOVE)        eq3_showannot_frm.grid(row=6, column=0,sticky='NSEW')        eqcont3.show_popupannotations_var = tk1.BooleanVar(value=eqcont3.show_popupannotations)        eq3_show_popupannotations_chbutt = tk1.Checkbutton(eq3_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=eqcont3.show_popupannotations_var)        eq3_show_popupannotations_chbutt.pack(fill=tk1.X)        eq3_col1_frm = tk1.Frame(eq3_interior,bd=2) # Column 1        eq3_col1_frm.grid(row=0,column=1,sticky='NSEW')        eq3_printsteps_frm = tk1.Frame(eq3_col1_frm,bd=2,relief=tk1.SUNKEN)        eq3_printsteps_frm.pack(fill=tk1.X)                eq3_step_settings_label = tk1.Label(eq3_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        eq3_step_settings_label.grid(row=0, column=0, sticky='NSEW')        eq3_selectprintsteps_frm = tk1.Frame(eq3_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq3_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        eq3_selectsampleforprint_label = tk1.Label(eq3_selectprintsteps_frm, text="Select Sample to\nSelect Step Labels:")        eq3_selectsampleforprint_label.grid(row=0, column=0, sticky='NSEW')        eqcont3.sitedata = self.sitedata        eqcont3.printsamplist_box = tk1.Listbox(eq3_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.SINGLE,exportselection=0)        for sampoffindex, sample in enumerate(self.sitedata):            eqcont3.printsamplist_box.insert(tk1.END,sample.name)            eqcont3.printsamplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="WHITE")        eqcont3.printsamplist_box.select_set(0)        eqcont3.prevsamp = self.samplelist[eqcont3.printsamplist_box.curselection()[0]]        eqcont3.printsamplist_box.grid(row=1,column=0,sticky='NSEW')        eqcont3.printsamplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("eqcont3.printsamplist_box"))        eqcont3.printsamplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("eqcont3.printsamplist_box"))        eqcont3.printsamplist_scrollbar = tk1.Scrollbar(eqcont3.printsamplist_box,orient=tk1.VERTICAL)        eqcont3.printsamplist_scrollbar.config(command=eqcont3.printsamplist_box.yview)        eqcont3.printsamplist_box.config(yscrollcommand=eqcont3.printsamplist_scrollbar.set)        eqcont3.printsamplist_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        eqcont3.printsamplist_box.bind("<<ListboxSelect>>", lambda x: updateeq3steps(self)) # single-click sample to select        eqcont3.printsamplist_box.bind("<Enter>", lambda x: entereq3_printsamplistbox(self))        eqcont3.printsamplist_box.bind("<Leave>", lambda x: leaveeq3_printsamplistbox(self))        eq3_selectsteps_label = tk1.Label(eq3_selectprintsteps_frm, text="Select which Step\nLabels to NOT Print:")        eq3_selectsteps_label.grid(row=0, column=1, sticky='NSEW')        eqcont3.printsteplist_box = tk1.Listbox(eq3_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sitedata[0].data):            eqcont3.printsteplist_box.insert(tk1.END,step.dmagstep)            eqcont3.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.eq_printlabel):                eqcont3.printsteplist_box.select_set(stepoffindex)        eqcont3.printsteplist_box.grid(row=1,column=1,sticky='NSEW')        eqcont3.printsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("eqcont3.printsteplist_box"))        eqcont3.printsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("eqcont3.printsteplist_box"))        eqcont3.printsteplist_scrollbar = tk1.Scrollbar(eqcont3.printsteplist_box,orient=tk1.VERTICAL)        eqcont3.printsteplist_scrollbar.config(command=eqcont3.printsteplist_box.yview)        eqcont3.printsteplist_box.config(yscrollcommand=eqcont3.printsteplist_scrollbar.set)        eqcont3.printsteplist_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        eqcont3.printsteplist_box.bind("<Enter>", lambda x: entereq3_printsteplistbox(self))        eqcont3.printsteplist_box.bind("<Leave>", lambda x: leaveeq3_printsteplistbox(self))        eq3_show_allsteps_butt = tk1.Button(eq3_printsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: eqcont3.printsteplist_box.selection_clear(0, tk1.END))        eq3_show_allsteps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        eq3_show_nosteps_butt = tk1.Button(eq3_printsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: eqcont3.printsteplist_box.selection_set(0, tk1.END))        eq3_show_nosteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        eq3_printstep_color_frm = tk1.Frame(eq3_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq3_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        eq3_printstep_color_frm.grid_columnconfigure(0, weight=1)        eq3_printstep_color_frm.grid_columnconfigure(3, weight=1)                        eq3_printstep_color_butt = tk1.Button(eq3_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(eq3_master,"eqcont3.printstep_color_temp","Equal Area Plot Step Labels",                                                                                                                                eq3_printstep_color_label,eq3_printstep_color_frm,False))        eq3_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_printstep_color_label = tk1.Label(eq3_printstep_color_frm,text="Current\nColor:\n%s" % eqcont3.printstep_color_temp,fg=getoppositecolor(eqcont3.printstep_color_temp), bg=eqcont3.printstep_color_temp,width=10)        eq3_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_step_fontsize_frm = tk1.Frame(eq3_printsteps_frm,bd=2,relief=tk1.GROOVE)        eq3_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        eq3_step_fontsize_frm.grid_columnconfigure(0, weight=1)        eq3_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    eq3_step_fontsize_label = tk1.Label(eq3_step_fontsize_frm, text="Step Font Size:",bd=1)        eq3_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        eqcont3.step_fontsize_mod_var = tk1.StringVar(eq3_interior)        eqcont3.step_fontsize_mod_var.set(eqcont3.step_fontsize_mod)         eq3_step_fontsize_optionmenu = tk1.OptionMenu(eq3_step_fontsize_frm, eqcont3.step_fontsize_mod_var, *fontsizes_set)        eq3_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        eq3_step_fontsize_optionmenu.configure(font=('Consolas',10))        eq3_col2_frm = tk1.Frame(eq3_interior,bd=2) # Column 2        eq3_col2_frm.grid(row=0,column=2,sticky='NSEW')        eq3_arcarrowline_frm = tk1.Frame(eq3_col2_frm,bd=2,relief=tk1.SUNKEN)        eq3_arcarrowline_frm.pack(fill=tk1.X)        eq3_arrowline_title_text = tk1.Label(eq3_arcarrowline_frm, text="Arcs / Arrows / Lines Settings:",font="Helvetica 12 bold")        eq3_arrowline_title_text.pack(fill=tk1.X)        eq3_show_arcarrowline_frm = tk1.Frame(eq3_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq3_show_arcarrowline_frm.pack(fill=tk1.X)        eqcont3.show_arcarrowline_var = tk1.BooleanVar(value=eqcont3.show_arcarrowline)        eq3_show_arcarrowline_butt = tk1.Checkbutton(eq3_show_arcarrowline_frm, text="Show Arcs/Arrows/Lines?", variable=eqcont3.show_arcarrowline_var,command= lambda:                                              disablewidgets(eqcont3.show_arcarrowline_var,False,[eq3_arcarrowline_radio_text,eq3_arc_radio,eq3_arrow_radio,eq3_line_radio,eq3_arcarrowline_color_butt,eq3_arcarrowline_color_text,                                                                                             eq3_arcarrowline_width_text,eq3_arcarrowline_width_optionmenu,eq3_arc_density_label,eqcont3.arc_densityfactor_slider],[],                                                             [[eqcont3.arcsarrowsorlines_var,["Arrows","Lines"],[eq3_arc_density_label,eqcont3.arc_densityfactor_slider]]]))        eq3_show_arcarrowline_butt.pack(fill=tk1.X)        eq3_arcarrowline_radio_text_frm = tk1.Frame(eq3_show_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq3_arcarrowline_radio_text_frm.pack(fill=tk1.X)        eq3_arcarrowline_radio_text = tk1.Label(eq3_arcarrowline_radio_text_frm, text="Plot Arcs, Arrows, or Lines?")        eq3_arcarrowline_radio_text.pack(fill=tk1.X)        eqcont3.arcsarrowsorlines_var = tk1.StringVar()        eqcont3.arcsarrowsorlines_var.set(eqcont3.arcsarrowsorlines)        eq3_arcarrowline_radio_frm = tk1.Frame(eq3_arcarrowline_radio_text_frm,bd=2)        eq3_arcarrowline_radio_frm.pack(fill=tk1.X)        eq3_arc_radio = tk1.Radiobutton(eq3_arcarrowline_radio_frm, text="Plot Arcs",variable=eqcont3.arcsarrowsorlines_var,value="Arcs",command= lambda: disablewidgets(eqcont3.arcsarrowsorlines_var,"",                                                            [eq3_arc_density_label,eqcont3.arc_densityfactor_slider],[eq3_arc_density_label,eqcont3.arc_densityfactor_slider],[]))        eq3_arc_radio.pack(side=tk1.LEFT,padx=20)        eq3_arrow_radio = tk1.Radiobutton(eq3_arcarrowline_radio_frm, text="Plot Arrows",variable=eqcont3.arcsarrowsorlines_var,value="Arrows",command= lambda: disablewidgets(eqcont3.arcsarrowsorlines_var,"Arrows",                                                            [eq3_arc_density_label,eqcont3.arc_densityfactor_slider],[],[]))        eq3_arrow_radio.pack(side=tk1.LEFT,padx=20)        eq3_line_radio = tk1.Radiobutton(eq3_arcarrowline_radio_frm, text="Plot Lines",variable=eqcont3.arcsarrowsorlines_var,value="Lines",command= lambda: disablewidgets(eqcont3.arcsarrowsorlines_var,"Lines",                                                            [eq3_arc_density_label,eqcont3.arc_densityfactor_slider],[],[]))        eq3_line_radio.pack(side=tk1.LEFT,padx=20)        eq3_arcarrowline_color_frm = tk1.Frame(eq3_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq3_arcarrowline_color_frm.pack(fill=tk1.X)                eq3_arcarrowline_color_frm.grid_columnconfigure(0, weight=1)        eq3_arcarrowline_color_frm.grid_columnconfigure(3, weight=1)        eq3_arcarrowline_color_butt = tk1.Button(eq3_arcarrowline_color_frm,text="Select Arc/Arrow/Line Color", command= lambda: getcolor(eq3_master,"eqcont3.arcarrowline_color_temp","Equal Area Arc/Arrow/Line",                                                                                                                              eq3_arcarrowline_color_text,eq3_arcarrowline_color_frm,False))        eq3_arcarrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq3_arcarrowline_color_text = tk1.Label(eq3_arcarrowline_color_frm,text="Current\nColor:\n%s" % eqcont3.arcarrowline_color_temp,fg=getoppositecolor(eqcont3.arcarrowline_color_temp), bg=eqcont3.arcarrowline_color_temp,width=10)        eq3_arcarrowline_color_text.grid(row=0,column=2)        eq3_arcarrowline_width_frm = tk1.Frame(eq3_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq3_arcarrowline_width_frm.pack(fill=tk1.X)        eq3_arcarrowline_width_frm.grid_columnconfigure(0, weight=1)        eq3_arcarrowline_width_frm.grid_columnconfigure(3, weight=1)        eq3_arcarrowline_width_text = tk1.Label(eq3_arcarrowline_width_frm, text="Arc/Arrow/Line Width:")        eq3_arcarrowline_width_text.grid(row=0,column=1,sticky='NESW')                eqcont3.arcarrowline_width_var = tk1.IntVar(eq3_interior)        eqcont3.arcarrowline_width_var.set(eqcont3.arcarrowline_width)         eq3_arcarrowline_width_optionmenu = tk1.OptionMenu(eq3_arcarrowline_width_frm, eqcont3.arcarrowline_width_var, *eq_linewidthchoices_set)        eq3_arcarrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_arcarrowline_width_optionmenu.configure(font=('Consolas',10))        eq3_arc_densityfactor_frm = tk1.Frame(eq3_arcarrowline_frm,bd=2,relief=tk1.GROOVE)        eq3_arc_densityfactor_frm.pack(fill=tk1.X)        eq3_arc_density_label = tk1.Label(eq3_arc_densityfactor_frm, text="Point Density on Arcs\n(Higher densities take longer to plot):")        eq3_arc_density_label.pack(fill=tk1.X)        eqcont3.arc_densityfactor_slider = Scale(eq3_arc_densityfactor_frm, from_=1, to=300,orient=tk1.HORIZONTAL,resolution=1,length=150,width=15)        eqcont3.arc_densityfactor_slider.set(eqcont3.arc_densityfactor)        eqcont3.arc_densityfactor_slider.pack(fill=tk1.X)        if eqcont3.show_arcarrowline:            if eqcont3.arcsarrowsorlines_var.get() == "Arrows" or eqcont3.arcsarrowsorlines_var.get() == "Lines":                eq3_arc_density_label.config(state='disabled')                eqcont3.arc_densityfactor_slider.config(state='disabled')        else:            disablewidgets(eqcont3.show_arcarrowline_var,False,[eq3_arcarrowline_radio_text,eq3_arc_radio,eq3_line_radio,eq3_arrow_radio,eq3_arcarrowline_color_butt,eq3_arcarrowline_color_text,                                                               eq3_arcarrowline_width_text,eq3_arcarrowline_width_optionmenu,eq3_arc_density_label,eqcont3.arc_densityfactor_slider],[],[])        eq3_circlespecs_frm = tk1.Frame(eq3_col2_frm,bd=2,relief=tk1.SUNKEN)        eq3_circlespecs_frm.pack(fill=tk1.X)        eq3_circlespecs_label = tk1.Label(eq3_circlespecs_frm, text="Circle Settings:",font="Helvetica 12 bold")        eq3_circlespecs_label.pack(fill=tk1.X)        eq3_circle_thickness_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_circle_thickness_frm.pack(fill=tk1.X)        eq3_circle_thickness_frm.grid_columnconfigure(0, weight=1)        eq3_circle_thickness_frm.grid_columnconfigure(3, weight=1)        eq3_circle_thickness_label = tk1.Label(eq3_circle_thickness_frm, text="Circle Thickness:")        eq3_circle_thickness_label.grid(row=0, column=1, sticky='NSEW')        eqcont3.circle_thickness_var = tk1.IntVar(eq3_interior)        eqcont3.circle_thickness_var.set(eqcont3.circle_thickness)         eq3_circle_thickness_optionmenu = tk1.OptionMenu(eq3_circle_thickness_frm, eqcont3.circle_thickness_var, *linewidthchoices_set)        eq3_circle_thickness_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_circle_thickness_optionmenu.configure(font=('Consolas',10))        eq3_circleradius_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_circleradius_frm.pack(fill=tk1.X)        eq3_circleradius_label = tk1.Label(eq3_circleradius_frm, text="Equal Area Plot Circle Radius:")        eq3_circleradius_label.pack(fill=tk1.X)        eqcont3.circle_rad_slider = Scale(eq3_circleradius_frm, from_=100, to=500,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        eqcont3.circle_rad_slider.set(eqcont3.circle_rad)        eqcont3.circle_rad_slider.pack(fill=tk1.X)        eq3_circle_color_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_circle_color_frm.pack(fill=tk1.X)        eq3_circle_color_frm.grid_columnconfigure(0, weight=1)        eq3_circle_color_frm.grid_columnconfigure(3, weight=1)        eq3_circle_color_butt = tk1.Button(eq3_circle_color_frm,text="Select Circle Color", command= lambda: getcolor(eq3_master,"eqcont3.circle_color_temp","Equal Area Plot Circle",eq3_circle_color_label,eq3_circle_color_frm,False))        eq3_circle_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_circle_color_label = tk1.Label(eq3_circle_color_frm,text="Current\nColor:\n%s" % eqcont3.circle_color_temp,fg=getoppositecolor(eqcont3.circle_color_temp), bg=eqcont3.circle_color_temp,width=10)        eq3_circle_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_show_circleticks_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_show_circleticks_frm.pack(fill=tk1.X)        eqcont3.show_circleticks_var = tk1.BooleanVar(value=eqcont3.show_circleticks)        eq3_show_circleticks_chbutt = tk1.Checkbutton(eq3_show_circleticks_frm, text="Show Circle Ticks?", variable=eqcont3.show_circleticks_var,                                          command= lambda: disablewidgets(eqcont3.show_circleticks_var,False,                                                                          [eq3_circletick_width_label,eq3_circletick_width_optionmenu,eq3_circletick_length_label,eq3_circletick_length_optionmenu,eq3_circletick_color_butt,                                                                           eq3_circletick_color_label,eq3_circleticknum_label,eq3_circleticknum_optionmenu],[],[]))        eq3_show_circleticks_chbutt.pack(fill=tk1.X)        eq3_circletick_width_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_circletick_width_frm.pack(fill=tk1.X)        eq3_circletick_width_frm.grid_columnconfigure(0, weight=1)        eq3_circletick_width_frm.grid_columnconfigure(3, weight=1)        eq3_circletick_width_label = tk1.Label(eq3_circletick_width_frm, text="Circle Tick Width:")        eq3_circletick_width_label.grid(row=0, column=1, sticky='NSEW')        eqcont3.circletick_width_var = tk1.IntVar(eq3_interior)        eqcont3.circletick_width_var.set(eqcont3.circletick_width)         eq3_circletick_width_optionmenu = tk1.OptionMenu(eq3_circletick_width_frm, eqcont3.circletick_width_var, *linewidthchoices_set)        eq3_circletick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_circletick_width_optionmenu.configure(font=('Consolas',10))        eq3_circletick_length_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_circletick_length_frm.pack(fill=tk1.X)        eq3_circletick_length_frm.grid_columnconfigure(0, weight=1)        eq3_circletick_length_frm.grid_columnconfigure(3, weight=1)        eq3_circletick_length_label = tk1.Label(eq3_circletick_length_frm, text="Circle Tick Length:")        eq3_circletick_length_label.grid(row=0, column=1, sticky='NSEW')        eqcont3.circletick_length_var = tk1.StringVar(eq3_interior)        eqcont3.circletick_length_var.set(eqcont3.circletick_length_mod)         eq3_circletick_length_optionmenu = tk1.OptionMenu(eq3_circletick_length_frm, eqcont3.circletick_length_var, *fontsizes_set)        eq3_circletick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_circletick_length_optionmenu.configure(font=('Consolas',10))        eq3_circletick_color_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_circletick_color_frm.pack(fill=tk1.X)        eq3_circletick_color_frm.grid_columnconfigure(0, weight=1)        eq3_circletick_color_frm.grid_columnconfigure(3, weight=1)                        eq3_circletick_color_butt = tk1.Button(eq3_circletick_color_frm,text="Select Circle Tick Color", command= lambda: getcolor(eq3_master,"eqcont3.circletick_color_temp","Equal Area Circle Tick",                                                                                                                                 eq3_circletick_color_label,eq3_circletick_color_frm,False))        eq3_circletick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_circletick_color_label = tk1.Label(eq3_circletick_color_frm,text="Current\nColor:\n%s" % eqcont3.circletick_color_temp,fg=getoppositecolor(eqcont3.circletick_color_temp), bg=eqcont3.circletick_color_temp,width=10)        eq3_circletick_color_label.grid(row=0, column=2,sticky='NSEW')                eq3_circleticknum_frm = tk1.Frame(eq3_circlespecs_frm,bd=2,relief=tk1.GROOVE)        eq3_circleticknum_frm.pack(fill=tk1.X)        eq3_circleticknum_label = tk1.Label(eq3_circleticknum_frm, text="Number of Ticks on Circle:")        eq3_circleticknum_label.pack(fill=tk1.X)        eqcont3.numcircleticks_var = tk1.StringVar(eq3_interior)        eqcont3.numcircleticks_var.set(circleticknumchoices_dict_reverse[eqcont3.numcircleticks])         eq3_circleticknum_optionmenu = tk1.OptionMenu(eq3_circleticknum_frm, eqcont3.numcircleticks_var, *circleticknumchoices_set)        eq3_circleticknum_optionmenu.pack(fill=tk1.X)        eq3_circleticknum_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont3.show_circleticks_var,False,[eq3_circletick_width_label,eq3_circletick_width_optionmenu,eq3_circletick_length_label,eq3_circletick_length_optionmenu,                                                         eq3_circletick_color_butt,eq3_circletick_color_label,eq3_circleticknum_label,eq3_circleticknum_optionmenu],[],[])        eq3_col3_frm = tk1.Frame(eq3_interior,bd=2) # Column 3        eq3_col3_frm.grid(row=0,column=3,sticky='NSEW')        eq3_error_settings_frm = tk1.Frame(eq3_col3_frm,bd=2,relief=tk1.SUNKEN)        eq3_error_settings_frm.pack(fill=tk1.X)        eq3_error_settings_label = tk1.Label(eq3_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        eq3_error_settings_label.pack(fill=tk1.X)                eq3_error_radio_frm = tk1.Frame(eq3_error_settings_frm,bd=2,relief=tk1.GROOVE)        eq3_error_radio_frm.pack(fill=tk1.X)        eq3_error_settings_label = tk1.Label(eq3_error_radio_frm, text="Select Error-Scaling for Symbols:")        eq3_error_settings_label.pack(fill=tk1.X)        eqcont3.error_scaling_var = tk1.StringVar()        eqcont3.error_scaling_var.set(eqcont3.error_scaling)        eq3_errorscaling_radio_none = tk1.Radiobutton(eq3_error_radio_frm, text="No Error Scaling",variable=eqcont3.error_scaling_var,value="None",command = lambda:              disablewidgets(eqcont3.error_scaling_var,"None",[],[eq3_lowerhem_color_butt,eq3_lowerhem_color_label,eq3_upperhem_color_butt,eq3_upperhem_color_label,                                  eqcont3.lowerhem_symbol_size_slider,eqcont3.upperhem_symbol_size_slider,eq3_lowerhem_size_label,eq3_upperhem_size_label],[]))        eq3_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        eq3_errorscaling_radio_size = tk1.Radiobutton(eq3_error_radio_frm, text="Scale Symbol Size by Error",variable=eqcont3.error_scaling_var,value="Size",command = lambda:                  disablewidgets(eqcont3.error_scaling_var,"Size",[eqcont3.lowerhem_symbol_size_slider,eqcont3.upperhem_symbol_size_slider,eq3_lowerhem_size_label,eq3_upperhem_size_label],                                 [eq3_lowerhem_color_butt,eq3_lowerhem_color_label,eq3_upperhem_color_butt,eq3_upperhem_color_label],[]))        eq3_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        eq3_errorscaling_radio_color = tk1.Radiobutton(eq3_error_radio_frm, text="Scale Symbol Color By Error",variable=eqcont3.error_scaling_var,value="Color",command = lambda:                               disablewidgets(eqcont3.error_scaling_var,"Color",[eq3_lowerhem_color_butt,eq3_lowerhem_color_label,eq3_upperhem_color_butt,eq3_upperhem_color_label],                                              [eqcont3.lowerhem_symbol_size_slider,eqcont3.upperhem_symbol_size_slider,eq3_lowerhem_size_label,eq3_upperhem_size_label],[]))        eq3_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        eq3_lowerhem_frm = tk1.Frame(eq3_col3_frm,bd=2,relief=tk1.SUNKEN)        eq3_lowerhem_frm.pack(fill=tk1.X)        eq3_lowerhem_symbol_settings_label = tk1.Label(eq3_lowerhem_frm, text="Lower Hemisphere Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq3_lowerhem_symbol_settings_label.pack(fill=tk1.X)        eq3_lowerhem_symbol_frm = tk1.Frame(eq3_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq3_lowerhem_symbol_frm.pack(fill=tk1.X)        eq3_lowerhem_symbol_frm.grid_columnconfigure(0, weight=1)        eq3_lowerhem_symbol_frm.grid_columnconfigure(3, weight=1)                eq3_lowerhem_symbol_label = tk1.Label(eq3_lowerhem_symbol_frm, text="Lower Hemisphere Symbol:",bd=1)        eq3_lowerhem_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont3.lowerhem_symbol_var = tk1.StringVar(eq3_interior)        eqcont3.lowerhem_symbol_var.set(symbolchoices_dict_reverse[eqcont3.lowerhem_symbol])         eq3_lowerhem_symbolchoices_optionmenu = tk1.OptionMenu(eq3_lowerhem_symbol_frm, eqcont3.lowerhem_symbol_var, *symbolchoices_set)        eq3_lowerhem_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_lowerhem_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq3_lowerhem_symbol_size_frm = tk1.Frame(eq3_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq3_lowerhem_symbol_size_frm.pack(fill=tk1.X)        eq3_lowerhem_size_label = tk1.Label(eq3_lowerhem_symbol_size_frm, text="Lower Hemisphere Symbol Size:")        eq3_lowerhem_size_label.pack(fill=tk1.X)        eqcont3.lowerhem_symbol_size_slider = Scale(eq3_lowerhem_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont3.lowerhem_symbol_size_slider.set(eqcont3.lowerhem_size)        eqcont3.lowerhem_symbol_size_slider.pack(fill=tk1.X)        eq3_lowerhem_color_frm = tk1.Frame(eq3_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq3_lowerhem_color_frm.pack(fill=tk1.X)        eq3_lowerhem_color_frm.grid_columnconfigure(0, weight=1)        eq3_lowerhem_color_frm.grid_columnconfigure(3, weight=1)        eq3_lowerhem_color_butt = tk1.Button(eq3_lowerhem_color_frm,text="Select Lower Hemisphere\nSymbol Color", command= lambda: getcolor(eq3_master,"eqcont3.lowerhem_color_temp","Lower Hemisphere Symbol",                                                                                                                                          eq3_lowerhem_color_label,eq3_lowerhem_color_frm,False))        eq3_lowerhem_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_lowerhem_color_label = tk1.Label(eq3_lowerhem_color_frm,text="Current\nColor:\n%s" % eqcont3.lowerhem_color_temp,fg=getoppositecolor(eqcont3.lowerhem_color_temp), bg=eqcont3.lowerhem_color_temp,width=10)        eq3_lowerhem_color_label.grid(row=0, column=2,sticky='NSEW')                eq3_show_lowerhem_edge_frm = tk1.Frame(eq3_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq3_show_lowerhem_edge_frm.pack(fill=tk1.X)        eqcont3.show_lowerhem_edge_var = tk1.BooleanVar(value=eqcont3.show_lowerhem_edge)        eq3_show_lowerhem_edge_chbutt = tk1.Checkbutton(eq3_show_lowerhem_edge_frm, text="Show Lower Hemisphere Symbol Border?", variable=eqcont3.show_lowerhem_edge_var,command= lambda:                                              disablewidgets(eqcont3.show_lowerhem_edge_var,False,[eq3_lowerhem_edge_color_butt,eq3_lowerhem_edge_color_label,eq3_lowerhem_edge_width_label,eq3_lowerhem_edge_width_optionmenu],[],[]))        eq3_show_lowerhem_edge_chbutt.pack(fill=tk1.X)        eq3_lowerhem_edge_color_frm = tk1.Frame(eq3_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq3_lowerhem_edge_color_frm.pack(fill=tk1.X)        eq3_lowerhem_edge_color_frm.grid_columnconfigure(0, weight=1)        eq3_lowerhem_edge_color_frm.grid_columnconfigure(3, weight=1)        eq3_lowerhem_edge_color_butt = tk1.Button(eq3_lowerhem_edge_color_frm,text="Select Lower Hemisphere\nSymbol Border Color", command= lambda: getcolor(eq3_master,"eqcont3.lowerhem_edge_color_temp","Lower Hemisphere Symbol Edge",                                                                                                                                                           eq3_lowerhem_edge_color_label,eq3_lowerhem_edge_color_frm,False))        eq3_lowerhem_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_lowerhem_edge_color_label = tk1.Label(eq3_lowerhem_edge_color_frm,text="Current\nColor:\n%s" % eqcont3.lowerhem_edge_color_temp,fg=getoppositecolor(eqcont3.lowerhem_edge_color_temp), bg=eqcont3.lowerhem_edge_color_temp,width=10)        eq3_lowerhem_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_lowerhem_edge_width_frm = tk1.Frame(eq3_lowerhem_frm,bd=2,relief=tk1.GROOVE)        eq3_lowerhem_edge_width_frm.pack(fill=tk1.X)        eq3_lowerhem_edge_width_frm.grid_columnconfigure(0, weight=1)        eq3_lowerhem_edge_width_frm.grid_columnconfigure(3, weight=1)        eq3_lowerhem_edge_width_label = tk1.Label(eq3_lowerhem_edge_width_frm, text="Lower Hemisphere Symbol Border Width:")        eq3_lowerhem_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont3.lowerhem_edge_width_var = tk1.IntVar(eq3_interior)        eqcont3.lowerhem_edge_width_var.set(eqcont3.lowerhem_edge_width)         eq3_lowerhem_edge_width_optionmenu = tk1.OptionMenu(eq3_lowerhem_edge_width_frm, eqcont3.lowerhem_edge_width_var, *linewidthchoices_set)        eq3_lowerhem_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_lowerhem_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont3.show_lowerhem_edge_var,False,[eq3_lowerhem_edge_color_butt,eq3_lowerhem_edge_color_label,eq3_lowerhem_edge_width_label,eq3_lowerhem_edge_width_optionmenu],[],[])                eq3_upperhem_frm = tk1.Frame(eq3_col3_frm,bd=2,relief=tk1.SUNKEN)        eq3_upperhem_frm.pack(fill=tk1.X)        eq3_upperhem_symbol_settings_label = tk1.Label(eq3_upperhem_frm, text="Upper Hemisphere Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq3_upperhem_symbol_settings_label.pack(fill=tk1.X)        eq3_upperhem_symbol_frm = tk1.Frame(eq3_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq3_upperhem_symbol_frm.pack(fill=tk1.X)        eq3_upperhem_symbol_frm.grid_columnconfigure(0, weight=1)        eq3_upperhem_symbol_frm.grid_columnconfigure(3, weight=1)                  eq3_upperhem_symbol_label = tk1.Label(eq3_upperhem_symbol_frm, text="Upper Hemisphere Symbol:",bd=1)        eq3_upperhem_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont3.upperhem_symbol_var = tk1.StringVar(eq3_interior)        eqcont3.upperhem_symbol_var.set(symbolchoices_dict_reverse[eqcont3.upperhem_symbol])         eq3_upperhem_symbolchoices_optionmenu = tk1.OptionMenu(eq3_upperhem_symbol_frm, eqcont3.upperhem_symbol_var, *symbolchoices_set)        eq3_upperhem_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_upperhem_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq3_upperhem_symbol_size_frm = tk1.Frame(eq3_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq3_upperhem_symbol_size_frm.pack(fill=tk1.X)        eq3_upperhem_size_label = tk1.Label(eq3_upperhem_symbol_size_frm, text="Upper Hemisphere Symbol Size:")        eq3_upperhem_size_label.pack(fill=tk1.X)        eqcont3.upperhem_symbol_size_slider = Scale(eq3_upperhem_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont3.upperhem_symbol_size_slider.set(eqcont3.upperhem_size)        eqcont3.upperhem_symbol_size_slider.pack(fill=tk1.X)        eq3_upperhem_color_frm = tk1.Frame(eq3_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq3_upperhem_color_frm.pack(fill=tk1.X)        eq3_upperhem_color_frm.grid_columnconfigure(0, weight=1)        eq3_upperhem_color_frm.grid_columnconfigure(3, weight=1)        eq3_upperhem_color_butt = tk1.Button(eq3_upperhem_color_frm,text="Select Upper Hemisphere\nSymbol Color", command= lambda: getcolor(eq3_master,"eqcont3.upperhem_color_temp","Upper Hemisphere Symbol",                                                                                                                                          eq3_upperhem_color_label,eq3_upperhem_color_frm,False))        eq3_upperhem_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_upperhem_color_label = tk1.Label(eq3_upperhem_color_frm,text="Current\nColor:\n%s" % eqcont3.upperhem_color_temp,fg=getoppositecolor(eqcont3.upperhem_color_temp), bg=eqcont3.upperhem_color_temp,width=10)        eq3_upperhem_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_show_upperhem_edge_frm = tk1.Frame(eq3_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq3_show_upperhem_edge_frm.pack(fill=tk1.X)        eqcont3.show_upperhem_edge_var = tk1.BooleanVar(value=eqcont3.show_upperhem_edge)        eq3_show_upperhem_edge_chbutt = tk1.Checkbutton(eq3_show_upperhem_edge_frm, text="Show Upper Hemisphere Symbol Border?", variable=eqcont3.show_upperhem_edge_var,command= lambda:                                              disablewidgets(eqcont3.show_upperhem_edge_var,False,[eq3_upperhem_edge_color_butt,eq3_upperhem_edge_color_label,eq3_upperhem_edge_width_label,eq3_upperhem_edge_width_optionmenu],[],[]))        eq3_show_upperhem_edge_chbutt.pack(fill=tk1.X)        eq3_upperhem_edge_color_frm = tk1.Frame(eq3_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq3_upperhem_edge_color_frm.pack(fill=tk1.X)        eq3_upperhem_edge_color_frm.grid_columnconfigure(0, weight=1)        eq3_upperhem_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq3_upperhem_edge_color_butt = tk1.Button(eq3_upperhem_edge_color_frm,text="Select Upper Hemisphere\nSymbol Border Color", command= lambda: getcolor(eq3_master,"eqcont3.upperhem_edge_color_temp","Upper Hemisphere Symbol Edge",                                                                                                                                                           eq3_upperhem_edge_color_label,eq3_upperhem_edge_color_frm,False))        eq3_upperhem_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_upperhem_edge_color_label = tk1.Label(eq3_upperhem_edge_color_frm,text="Current\nColor:\n%s" % eqcont3.upperhem_edge_color_temp,fg=getoppositecolor(eqcont3.upperhem_edge_color_temp), bg=eqcont3.upperhem_edge_color_temp,width=10)        eq3_upperhem_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_upperhem_edge_width_frm = tk1.Frame(eq3_upperhem_frm,bd=2,relief=tk1.GROOVE)        eq3_upperhem_edge_width_frm.pack(fill=tk1.X)        eq3_upperhem_edge_width_frm.grid_columnconfigure(0, weight=1)        eq3_upperhem_edge_width_frm.grid_columnconfigure(3, weight=1)        eq3_upperhem_edge_width_label = tk1.Label(eq3_upperhem_edge_width_frm, text="Upper Hemisphere Symbol Border Width:")        eq3_upperhem_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont3.upperhem_edge_width_var = tk1.IntVar(eq3_interior)        eqcont3.upperhem_edge_width_var.set(eqcont3.upperhem_edge_width)         eq3_upperhem_edge_width_optionmenu = tk1.OptionMenu(eq3_upperhem_edge_width_frm, eqcont3.upperhem_edge_width_var, *linewidthchoices_set)        eq3_upperhem_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_upperhem_edge_width_optionmenu.configure(font=('Consolas',10))                disablewidgets(eqcont3.show_upperhem_edge_var,False,[eq3_upperhem_edge_color_butt,eq3_upperhem_edge_color_label,eq3_upperhem_edge_width_label,eq3_upperhem_edge_width_optionmenu],[],[])        disablewidgets(eqcont3.error_scaling_var,"None",[],[eq3_lowerhem_color_butt,eq3_lowerhem_color_label,eq3_upperhem_color_butt,eq3_upperhem_color_label,                eqcont3.lowerhem_symbol_size_slider,eqcont3.upperhem_symbol_size_slider,eq3_lowerhem_size_label,eq3_upperhem_size_label],[])        disablewidgets(eqcont3.error_scaling_var,"Size",[eqcont3.lowerhem_symbol_size_slider,eqcont3.upperhem_symbol_size_slider,eq3_lowerhem_size_label,eq3_upperhem_size_label],                [eq3_lowerhem_color_butt,eq3_lowerhem_color_label,eq3_upperhem_color_butt,eq3_upperhem_color_label],[])        disablewidgets(eqcont3.error_scaling_var,"Color",[eq3_lowerhem_color_butt,eq3_lowerhem_color_label,eq3_upperhem_color_butt,eq3_upperhem_color_label],                  [eqcont3.lowerhem_symbol_size_slider,eqcont3.upperhem_symbol_size_slider,eq3_lowerhem_size_label,eq3_upperhem_size_label],[])                eq3_col4_frm = tk1.Frame(eq3_interior,bd=2) # Column 4        eq3_col4_frm.grid(row=0,column=4,sticky='NSEW')        eq3_firststep_frm = tk1.Frame(eq3_col4_frm,bd=2,relief=tk1.SUNKEN)        eq3_firststep_frm.pack(fill=tk1.X)        eq3_firststep_symbol_settings_label = tk1.Label(eq3_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq3_firststep_symbol_settings_label.pack(fill=tk1.X)        eq3_show_firststep_frm = tk1.Frame(eq3_firststep_frm,bd=2,relief=tk1.GROOVE)        eq3_show_firststep_frm.pack(fill=tk1.X)        eqcont3.show_firststep_var = tk1.BooleanVar(value=eqcont3.show_firststep)        eq3_show_firststep_chbutt = tk1.Checkbutton(eq3_show_firststep_frm, text="Show First Step Special Symbol?", variable=eqcont3.show_firststep_var,command= lambda:                                              disablewidgets(eqcont3.show_firststep_var,False,[eq3_firststep_symbol_label,eq3_firststep_symbolchoices_optionmenu,eq3_firststep_size_label,eqcont3.firststep_symbol_size_slider,                                                                                             eq3_firststep_color_butt,eq3_firststep_color_label,eq3_show_firststep_edge_chbutt,eq3_firststep_edge_color_butt,eq3_firststep_edge_color_label,                                                                                             eq3_firststep_edge_width_label,eq3_firststep_edge_width_optionmenu],[],                                                             [[eqcont3.show_firststep_edge_var,[False],[eq3_firststep_edge_color_butt,eq3_firststep_edge_color_label,eq3_firststep_edge_width_label,eq3_firststep_edge_width_optionmenu]]]))        eq3_show_firststep_chbutt.pack(fill=tk1.X)        eq3_firststep_symbol_frm = tk1.Frame(eq3_firststep_frm,bd=2,relief=tk1.GROOVE)        eq3_firststep_symbol_frm.pack(fill=tk1.X)        eq3_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        eq3_firststep_symbol_frm.grid_columnconfigure(3, weight=1)                  eq3_firststep_symbol_label = tk1.Label(eq3_firststep_symbol_frm, text="First Step Symbol:",bd=1)        eq3_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont3.firststep_symbol_var = tk1.StringVar(eq3_interior)        eqcont3.firststep_symbol_var.set(symbolchoices_dict_reverse[eqcont3.firststep_symbol])         eq3_firststep_symbolchoices_optionmenu = tk1.OptionMenu(eq3_firststep_symbol_frm, eqcont3.firststep_symbol_var, *symbolchoices_set)        eq3_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq3_firststep_size_frm = tk1.Frame(eq3_firststep_frm,bd=2,relief=tk1.GROOVE)        eq3_firststep_size_frm.pack(fill=tk1.X)        eq3_firststep_size_label = tk1.Label(eq3_firststep_size_frm, text="First Step Symbol Size:")        eq3_firststep_size_label.pack(fill=tk1.X)        eqcont3.firststep_symbol_size_slider = Scale(eq3_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont3.firststep_symbol_size_slider.set(eqcont3.firststep_size)        eqcont3.firststep_symbol_size_slider.pack(fill=tk1.X)        eq3_firststep_color_frm = tk1.Frame(eq3_firststep_frm,bd=2,relief=tk1.GROOVE)        eq3_firststep_color_frm.pack(fill=tk1.X)        eq3_firststep_color_frm.grid_columnconfigure(0, weight=1)        eq3_firststep_color_frm.grid_columnconfigure(3, weight=1)        eq3_firststep_color_butt = tk1.Button(eq3_firststep_color_frm,text="Select First Step\nSymbol Color", command= lambda: getcolor(eq3_master,"eqcont3.firststep_color_temp","Equal Area First Step Symbol",                                                                                                                                      eq3_firststep_color_label,eq3_firststep_color_frm,False))        eq3_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_firststep_color_label = tk1.Label(eq3_firststep_color_frm,text="Current\nColor:\n%s" % eqcont3.firststep_color_temp,fg=getoppositecolor(eqcont3.firststep_color_temp), bg=eqcont3.firststep_color_temp,width=10)        eq3_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_show_firststep_edge_frm = tk1.Frame(eq3_firststep_frm,bd=2,relief=tk1.GROOVE)        eq3_show_firststep_edge_frm.pack(fill=tk1.X)        eqcont3.show_firststep_edge_var = tk1.BooleanVar(value=eqcont3.show_firststep_edge)        eq3_show_firststep_edge_chbutt = tk1.Checkbutton(eq3_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=eqcont3.show_firststep_edge_var,command= lambda:                                              disablewidgets(eqcont3.show_firststep_edge_var,False,[eq3_firststep_edge_color_butt,eq3_firststep_edge_color_label,eq3_firststep_edge_width_label,eq3_firststep_edge_width_optionmenu],[],[]))        eq3_show_firststep_edge_chbutt.pack(fill=tk1.X)                eq3_firststep_edge_color_frm = tk1.Frame(eq3_firststep_frm,bd=2,relief=tk1.GROOVE)        eq3_firststep_edge_color_frm.pack(fill=tk1.X)        eq3_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        eq3_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq3_firststep_edge_color_butt = tk1.Button(eq3_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color", command= lambda: getcolor(eq3_master,"eqcont3.firststep_edge_color_temp","Equal Area First Step Symbol Edge",                                                                                                                                                       eq3_firststep_edge_color_label,eq3_firststep_edge_color_frm,False))        eq3_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_firststep_edge_color_label = tk1.Label(eq3_firststep_edge_color_frm,text="Current\nColor:\n%s" % eqcont3.firststep_edge_color_temp,fg=getoppositecolor(eqcont3.firststep_edge_color_temp), bg=eqcont3.firststep_edge_color_temp,width=10)        eq3_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_firststep_edge_width_frm = tk1.Frame(eq3_firststep_frm,bd=2,relief=tk1.GROOVE)        eq3_firststep_edge_width_frm.pack(fill=tk1.X)        eq3_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        eq3_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        eq3_firststep_edge_width_label = tk1.Label(eq3_firststep_edge_width_frm, text="First Step Symbol Border Width:")        eq3_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont3.firststep_edge_width_var = tk1.IntVar(eq3_interior)        eqcont3.firststep_edge_width_var.set(eqcont3.firststep_edge_width)         eq3_firststep_edge_width_optionmenu = tk1.OptionMenu(eq3_firststep_edge_width_frm, eqcont3.firststep_edge_width_var, *linewidthchoices_set)        eq3_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont3.show_firststep_edge_var,False,[eq3_firststep_edge_color_butt,eq3_firststep_edge_color_label,eq3_firststep_edge_width_label,eq3_firststep_edge_width_optionmenu],[],                       [[eqcont3.show_firststep_edge_var,[False],[eq3_firststep_edge_color_butt,eq3_firststep_edge_color_label,eq3_firststep_edge_width_label,eq3_firststep_edge_width_optionmenu]]])        disablewidgets(eqcont3.show_firststep_var,False,[eq3_firststep_symbol_label,eq3_firststep_symbolchoices_optionmenu,eq3_firststep_size_label,eqcont3.firststep_symbol_size_slider,eq3_firststep_color_butt,eq3_firststep_color_label,                                                       eq3_show_firststep_edge_chbutt,eq3_firststep_edge_color_butt,eq3_firststep_edge_color_label,eq3_firststep_edge_width_label,eq3_firststep_edge_width_optionmenu],[],[])                eq3_laststep_frm = tk1.Frame(eq3_col4_frm,bd=2,relief=tk1.SUNKEN)        eq3_laststep_frm.pack(fill=tk1.X)        eq3_laststep_symbol_settings_label = tk1.Label(eq3_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq3_laststep_symbol_settings_label.pack(fill=tk1.X)        eq3_show_laststep_frm = tk1.Frame(eq3_laststep_frm,bd=2,relief=tk1.GROOVE)        eq3_show_laststep_frm.pack(fill=tk1.X)        eqcont3.show_laststep_var = tk1.BooleanVar(value=eqcont3.show_laststep)        eq3_show_laststep_chbutt = tk1.Checkbutton(eq3_show_laststep_frm, text="Show Last Step Special Symbol?", variable=eqcont3.show_laststep_var,command= lambda:                                              disablewidgets(eqcont3.show_laststep_var,False,[eq3_laststep_symbol_label,eq3_laststep_symbolchoices_optionmenu,eq3_laststep_size_label,eqcont3.laststep_symbol_size_slider,                                                                                             eq3_laststep_color_butt,eq3_laststep_color_label,eq3_show_laststep_edge_chbutt,eq3_laststep_edge_color_butt,eq3_laststep_edge_color_label,                                                                                             eq3_laststep_edge_width_label,eq3_laststep_edge_width_optionmenu],[],                                                             [[eqcont3.show_laststep_edge_var,[False],[eq3_laststep_edge_color_butt,eq3_laststep_edge_color_label,eq3_laststep_edge_width_label,eq3_laststep_edge_width_optionmenu]]]))        eq3_show_laststep_chbutt.pack(fill=tk1.X)        eq3_laststep_symbol_frm = tk1.Frame(eq3_laststep_frm,bd=2,relief=tk1.GROOVE)        eq3_laststep_symbol_frm.pack(fill=tk1.X)        eq3_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        eq3_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  eq3_laststep_symbol_label = tk1.Label(eq3_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        eq3_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont3.laststep_symbol_var = tk1.StringVar(eq3_interior)        eqcont3.laststep_symbol_var.set(symbolchoices_dict_reverse[eqcont3.laststep_symbol])         eq3_laststep_symbolchoices_optionmenu = tk1.OptionMenu(eq3_laststep_symbol_frm, eqcont3.laststep_symbol_var, *symbolchoices_set)        eq3_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq3_laststep_size_frm = tk1.Frame(eq3_laststep_frm,bd=2,relief=tk1.GROOVE)        eq3_laststep_size_frm.pack(fill=tk1.X)        eq3_laststep_size_label = tk1.Label(eq3_laststep_size_frm, text="Last Step Symbol Size:")        eq3_laststep_size_label.pack(fill=tk1.X)        eqcont3.laststep_symbol_size_slider = Scale(eq3_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont3.laststep_symbol_size_slider.set(eqcont3.laststep_size)        eqcont3.laststep_symbol_size_slider.pack(fill=tk1.X)        eq3_laststep_color_frm = tk1.Frame(eq3_laststep_frm,bd=2,relief=tk1.GROOVE)        eq3_laststep_color_frm.pack(fill=tk1.X)        eq3_laststep_color_frm.grid_columnconfigure(0, weight=1)        eq3_laststep_color_frm.grid_columnconfigure(3, weight=1)                        eq3_laststep_color_butt = tk1.Button(eq3_laststep_color_frm,text="Select Last Step\nSymbol Color", command= lambda: getcolor(eq3_master,"eqcont3.laststep_color_temp","Equal Area Last Step Symbol",                                                                                                                                   eq3_laststep_color_label,eq3_laststep_color_frm,False))        eq3_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_laststep_color_label = tk1.Label(eq3_laststep_color_frm,text="Current\nColor:\n%s" % eqcont3.laststep_color_temp,fg=getoppositecolor(eqcont3.laststep_color_temp), bg=eqcont3.laststep_color_temp,width=10)        eq3_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_show_laststep_edge_frm = tk1.Frame(eq3_laststep_frm,bd=2,relief=tk1.GROOVE)        eq3_show_laststep_edge_frm.pack(fill=tk1.X)        eqcont3.show_laststep_edge_var = tk1.BooleanVar(value=eqcont3.show_laststep_edge)        eq3_show_laststep_edge_chbutt = tk1.Checkbutton(eq3_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=eqcont3.show_laststep_edge_var,command= lambda:                                              disablewidgets(eqcont3.show_laststep_edge_var,False,[eq3_laststep_edge_color_butt,eq3_laststep_edge_color_label,eq3_laststep_edge_width_label,eq3_laststep_edge_width_optionmenu],[],[]))        eq3_show_laststep_edge_chbutt.pack(fill=tk1.X)        eq3_laststep_edge_color_frm = tk1.Frame(eq3_laststep_frm,bd=2,relief=tk1.GROOVE)        eq3_laststep_edge_color_frm.pack(fill=tk1.X)        eq3_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        eq3_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)        eq3_laststep_edge_color_butt = tk1.Button(eq3_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color", command= lambda: getcolor(eq3_master,"eqcont3.laststep_edge_color_temp","Equal Area Last Step Symbol Edge",                                                                                                                                                    eq3_laststep_edge_color_label,eq3_laststep_edge_color_frm,False))        eq3_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_laststep_edge_color_label = tk1.Label(eq3_laststep_edge_color_frm,text="Current\nColor:\n%s" % eqcont3.laststep_edge_color_temp,fg=getoppositecolor(eqcont3.laststep_edge_color_temp), bg=eqcont3.laststep_edge_color_temp,width=10)        eq3_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_laststep_edge_width_frm = tk1.Frame(eq3_laststep_frm,bd=2,relief=tk1.GROOVE)        eq3_laststep_edge_width_frm.pack(fill=tk1.X)        eq3_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        eq3_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        eq3_laststep_edge_width_label = tk1.Label(eq3_laststep_edge_width_frm, text="Last Step Symbol Border Width:")        eq3_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        eqcont3.laststep_edge_width_var = tk1.IntVar(eq3_interior)        eqcont3.laststep_edge_width_var.set(eqcont3.laststep_edge_width)         eq3_laststep_edge_width_optionmenu = tk1.OptionMenu(eq3_laststep_edge_width_frm, eqcont3.laststep_edge_width_var, *linewidthchoices_set)        eq3_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont3.show_laststep_edge_var,False,[eq3_laststep_edge_color_butt,eq3_laststep_edge_color_label,eq3_laststep_edge_width_label,eq3_laststep_edge_width_optionmenu],[],[])        disablewidgets(eqcont3.show_laststep_var,False,[eq3_laststep_symbol_label,eq3_laststep_symbolchoices_optionmenu,eq3_laststep_size_label,eqcont3.laststep_symbol_size_slider,                                                      eq3_laststep_color_butt,eq3_laststep_color_label,eq3_show_laststep_edge_chbutt,eq3_laststep_edge_color_butt,eq3_laststep_edge_color_label,                                                       eq3_laststep_edge_width_label,eq3_laststep_edge_width_optionmenu],[],                       [[eqcont3.show_laststep_edge_var,[False],[eq3_laststep_edge_color_butt,eq3_laststep_edge_color_label,eq3_laststep_edge_width_label,eq3_laststep_edge_width_optionmenu]]])                eq3_col5_frm = tk1.Frame(eq3_interior,bd=2) # Column 5        eq3_col5_frm.grid(row=0,column=5,sticky='NSEW')        eq3_axesspecs_frm = tk1.Frame(eq3_col5_frm,bd=2,relief=tk1.SUNKEN)        eq3_axesspecs_frm.pack(fill=tk1.X)        eq3_axesspecs_label = tk1.Label(eq3_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        eq3_axesspecs_label.pack(fill=tk1.X)        eq3_show_cross_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_show_cross_frm.pack(fill=tk1.X)        eqcont3.show_cross_var = tk1.BooleanVar(value=eqcont3.show_cross)        eq3_show_cross_chbutton = tk1.Checkbutton(eq3_show_cross_frm, text="Show Cross at Plot Center?", variable=eqcont3.show_cross_var)        eq3_show_cross_chbutton.pack(fill=tk1.X)        eq3_show_axesticks_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_show_axesticks_frm.pack(fill=tk1.X)        eqcont3.show_axesticks_var = tk1.BooleanVar(value=eqcont3.show_axesticks)        eq3_show_axes_chbutt = tk1.Checkbutton(eq3_show_axesticks_frm, text="Show Axes Ticks?", variable=eqcont3.show_axesticks_var,command= lambda:                                            disablewidgets(eqcont3.show_axesticks_var,False,[eq3_show_posxaxis_ticks_chbutt,eq3_show_posyaxis_ticks_chbutt,eq3_show_negxaxis_ticks_chbutt,eq3_show_negyaxis_ticks_chbutt,eq3_axisticknum_label,                                                                                          eq3_axesticknum_optionmenu,eq3_axestick_color_butt,eq3_axestick_color_label,eq3_axestick_width_label,eq3_axestick_width_optionmenu,                                                                                          eq3_axestick_length_label,eq3_axestick_length_optionmenu],[],[]))        eq3_show_axes_chbutt.pack(fill=tk1.X)        eqcont3.show_posxaxis_ticks_var = tk1.BooleanVar(value=eqcont3.show_posxaxis_ticks)        eq3_show_posxaxis_ticks_chbutt = tk1.Checkbutton(eq3_show_axesticks_frm, text="Show Positive X Axis Ticks?", variable=eqcont3.show_posxaxis_ticks_var)        eq3_show_posxaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont3.show_posyaxis_ticks_var = tk1.BooleanVar(value=eqcont3.show_posyaxis_ticks)        eq3_show_posyaxis_ticks_chbutt = tk1.Checkbutton(eq3_show_axesticks_frm, text="Show Positive Y Axis Ticks?", variable=eqcont3.show_posyaxis_ticks_var)        eq3_show_posyaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont3.show_negxaxis_ticks_var = tk1.BooleanVar(value=eqcont3.show_negxaxis_ticks)        eq3_show_negxaxis_ticks_chbutt = tk1.Checkbutton(eq3_show_axesticks_frm, text="Show Negative X Axis Ticks?", variable=eqcont3.show_negxaxis_ticks_var)        eq3_show_negxaxis_ticks_chbutt.pack(fill=tk1.X)        eqcont3.show_negyaxis_ticks_var = tk1.BooleanVar(value=eqcont3.show_negyaxis_ticks)        eq3_show_negyaxis_ticks_chbutt = tk1.Checkbutton(eq3_show_axesticks_frm, text="Show Negative Y Axis Ticks?", variable=eqcont3.show_negyaxis_ticks_var)        eq3_show_negyaxis_ticks_chbutt.pack(fill=tk1.X)        eq3_axisticknum_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_axisticknum_frm.pack(fill=tk1.X)        eq3_axisticknum_label = tk1.Label(eq3_axisticknum_frm, text="Number of Ticks Per Axis:")        eq3_axisticknum_label.pack(fill=tk1.X)        eqcont3.numaxesticks_var = tk1.StringVar(eq3_interior)        eqcont3.numaxesticks_var.set(axisticknumchoices_dict_reverse[eqcont3.numaxesticks])         eq3_axesticknum_optionmenu = tk1.OptionMenu(eq3_axisticknum_frm, eqcont3.numaxesticks_var, *axisticknumchoices_set)        eq3_axesticknum_optionmenu.pack(fill=tk1.X)        eq3_axesticknum_optionmenu.configure(font=('Consolas',10))                eq3_axestick_color_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_axestick_color_frm.pack(fill=tk1.X)        eq3_axestick_color_frm.grid_columnconfigure(0, weight=1)        eq3_axestick_color_frm.grid_columnconfigure(3, weight=1)        eq3_axestick_color_butt = tk1.Button(eq3_axestick_color_frm,text="Select Axes Tick Color", command= lambda: getcolor(eq3_master,"eqcont3.axestick_color_temp","Equal Area Plot Axes Ticks",                                                                                                                           eq3_axestick_color_label,eq3_axestick_color_frm,False))        eq3_axestick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_axestick_color_label = tk1.Label(eq3_axestick_color_frm,text="Current\nColor:\n%s" % eqcont3.axestick_color_temp,fg=getoppositecolor(eqcont3.axestick_color_temp), bg=eqcont3.axestick_color_temp,width=10)        eq3_axestick_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_axestick_width_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_axestick_width_frm.pack(fill=tk1.X)        eq3_axestick_width_frm.grid_columnconfigure(0, weight=1)        eq3_axestick_width_frm.grid_columnconfigure(3, weight=1)        eq3_axestick_width_label = tk1.Label(eq3_axestick_width_frm, text="Axes Tick Width:")        eq3_axestick_width_label.grid(row=0,column=1,sticky='NESW')                eqcont3.axestick_width_var = tk1.IntVar(eq3_interior)        eqcont3.axestick_width_var.set(eqcont3.axestick_width)         eq3_axestick_width_optionmenu = tk1.OptionMenu(eq3_axestick_width_frm, eqcont3.axestick_width_var, *linewidthchoices_set)        eq3_axestick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_axestick_width_optionmenu.configure(font=('Consolas',10))        eq3_axestick_length_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_axestick_length_frm.pack(fill=tk1.X)        eq3_axestick_length_frm.grid_columnconfigure(0, weight=1)        eq3_axestick_length_frm.grid_columnconfigure(3, weight=1)        eq3_axestick_length_label = tk1.Label(eq3_axestick_length_frm, text="Axes Tick Length:")        eq3_axestick_length_label.grid(row=0, column=1, sticky='NSEW')        eqcont3.axestick_length_mod_var = tk1.StringVar(eq3_interior)        eqcont3.axestick_length_mod_var.set(eqcont3.axestick_length_mod)         eq3_axestick_length_optionmenu = tk1.OptionMenu(eq3_axestick_length_frm, eqcont3.axestick_length_mod_var, *fontsizes_set)        eq3_axestick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_axestick_length_optionmenu.configure(font=('Consolas',10))        disablewidgets(eqcont3.show_axesticks_var,False,[eq3_show_posxaxis_ticks_chbutt,eq3_show_posyaxis_ticks_chbutt,eq3_show_negxaxis_ticks_chbutt,eq3_show_negyaxis_ticks_chbutt,eq3_axisticknum_label,eq3_axesticknum_optionmenu,                                                      eq3_axestick_color_butt,eq3_axestick_color_label,eq3_axestick_width_label,eq3_axestick_width_optionmenu,eq3_axestick_length_label,eq3_axestick_length_optionmenu],[],[])        eq3_show_labels_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_show_labels_frm.pack(fill=tk1.X)        eqcont3.show_labels_var = tk1.BooleanVar(value=eqcont3.show_labels)        eq3_show_label_chbutt = tk1.Checkbutton(eq3_show_labels_frm, text="Show Cardinal Directions or Degrees?", variable=eqcont3.show_labels_var,                                         command= lambda: disablewidgets(eqcont3.show_labels_var,False,                                                                         [eq3_numdirradio_dirs,eq3_numdirradio_nums,eq3_show_north_chbutt,eq3_show_east_chbutt,eq3_show_south_chbutt,eq3_show_west_chbutt,                                                                          eq3_show_0_chbutt,eq3_show_90_chbutt,eq3_show_180_chbutt,eq3_show_270_chbutt,eq3_label_color_butt,eq3_label_color_label,eq3_label_fontsize_label,                                                                          eq3_label_fontsize_optionmenu],[],                                                                         [[eqcont3.numsordirs_var,["Nums"],[eq3_show_north_chbutt,eq3_show_east_chbutt,eq3_show_south_chbutt,eq3_show_west_chbutt]],                                                                          [eqcont3.numsordirs_var,["Dirs"],[eq3_show_0_chbutt,eq3_show_90_chbutt,eq3_show_180_chbutt,eq3_show_270_chbutt]]]))        eq3_show_label_chbutt.pack(fill=tk1.X)        eq3_numsordirs_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_numsordirs_frm.pack(fill=tk1.X)        eqcont3.numsordirs_var = tk1.StringVar()        eqcont3.numsordirs_var.set(eqcont3.numsordirs)        eq3_numdircheckbutts_frm = tk1.Frame(eq3_numsordirs_frm,bd=2)        eq3_numdircheckbutts_frm.pack(fill=tk1.X)        eq3_dircheck_butt_frm = tk1.Frame(eq3_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        eq3_dircheck_butt_frm.grid(row=0,column=0,sticky='NSEW')        eq3_numcheck_butt_frm = tk1.Frame(eq3_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        eq3_numcheck_butt_frm.grid(row=0,column=1,sticky='NSEW')        eq3_numdirradio_dirs = tk1.Radiobutton(eq3_dircheck_butt_frm, text="Cardinal Directions",variable=eqcont3.numsordirs_var,value="Dirs",command= lambda: disablewidgets(eqcont3.numsordirs_var,"Dirs",                                                                         [eq3_show_0_chbutt,eq3_show_90_chbutt,eq3_show_180_chbutt,eq3_show_270_chbutt],[eq3_show_north_chbutt,eq3_show_east_chbutt,eq3_show_south_chbutt,eq3_show_west_chbutt],[]))        eq3_numdirradio_dirs.pack(fill=tk1.X)        eq3_numdirradio_nums = tk1.Radiobutton(eq3_numcheck_butt_frm, text="Degrees",variable=eqcont3.numsordirs_var,value="Nums",command= lambda: disablewidgets(eqcont3.numsordirs_var,"Nums",                                                                         [eq3_show_north_chbutt,eq3_show_east_chbutt,eq3_show_south_chbutt,eq3_show_west_chbutt],[eq3_show_0_chbutt,eq3_show_90_chbutt,eq3_show_180_chbutt,eq3_show_270_chbutt],[]))        eq3_numdirradio_nums.pack(fill=tk1.X)        eqcont3.show_north_var = tk1.BooleanVar(value=eqcont3.show_north)        eq3_show_north_chbutt = tk1.Checkbutton(eq3_dircheck_butt_frm, text="Show North (\"N\")?", variable=eqcont3.show_north_var)        eq3_show_north_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont3.show_east_var = tk1.BooleanVar(value=eqcont3.show_east)        eq3_show_east_chbutt = tk1.Checkbutton(eq3_dircheck_butt_frm, text="Show East (\"E\")?", variable=eqcont3.show_east_var)        eq3_show_east_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont3.show_south_var = tk1.BooleanVar(value=eqcont3.show_south)        eq3_show_south_chbutt = tk1.Checkbutton(eq3_dircheck_butt_frm, text="Show South (\"S\")?", variable=eqcont3.show_south_var)        eq3_show_south_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont3.show_west_var = tk1.BooleanVar(value=eqcont3.show_west)        eq3_show_west_chbutt = tk1.Checkbutton(eq3_dircheck_butt_frm, text="Show West (\"W\")?", variable=eqcont3.show_west_var)        eq3_show_west_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont3.show_0_var = tk1.BooleanVar(value=eqcont3.show_0)        eq3_show_0_chbutt = tk1.Checkbutton(eq3_numcheck_butt_frm, text="Show 0%s?" % degree_sign, variable=eqcont3.show_0_var)        eq3_show_0_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont3.show_90_var = tk1.BooleanVar(value=eqcont3.show_90)        eq3_show_90_chbutt = tk1.Checkbutton(eq3_numcheck_butt_frm, text="Show 90%s?" % degree_sign, variable=eqcont3.show_90_var)        eq3_show_90_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont3.show_180_var = tk1.BooleanVar(value=eqcont3.show_180)        eq3_show_180_chbutt = tk1.Checkbutton(eq3_numcheck_butt_frm, text="Show 180%s?" % degree_sign, variable=eqcont3.show_180_var)        eq3_show_180_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eqcont3.show_270_var = tk1.BooleanVar(value=eqcont3.show_270)        eq3_show_270_chbutt = tk1.Checkbutton(eq3_numcheck_butt_frm, text="Show 270%s?" % degree_sign, variable=eqcont3.show_270_var)        eq3_show_270_chbutt.pack(fill=tk1.X,anchor=tk1.W)        eq3_label_color_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_label_color_frm.pack(fill=tk1.X)        eq3_label_color_frm.grid_columnconfigure(0, weight=1)        eq3_label_color_frm.grid_columnconfigure(3, weight=1)                        eq3_label_color_butt = tk1.Button(eq3_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(eq3_master,"eqcont3.label_color_temp","Equal Area Axes Labels",                                                                                                                      eq3_label_color_label,eq3_label_color_frm,False))        eq3_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_label_color_label = tk1.Label(eq3_label_color_frm,text="Current\nColor:\n%s" % eqcont3.label_color_temp,fg=getoppositecolor(eqcont3.label_color_temp), bg=eqcont3.label_color_temp,width=10)        eq3_label_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_label_fontsize_frm = tk1.Frame(eq3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        eq3_label_fontsize_frm.pack(fill=tk1.X)        eq3_label_fontsize_frm.grid_columnconfigure(0, weight=1)        eq3_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    eq3_label_fontsize_label = tk1.Label(eq3_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        eq3_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        eqcont3.label_fontsize_var = tk1.StringVar(eq3_interior)        eqcont3.label_fontsize_var.set(eqcont3.label_fontsize_mod)         eq3_label_fontsize_optionmenu = tk1.OptionMenu(eq3_label_fontsize_frm, eqcont3.label_fontsize_var, *fontsizes_set)        eq3_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        eq3_label_fontsize_optionmenu.configure(font=('Consolas',10))        if eqcont3.show_labels:            if eqcont3.numsordirs_var.get() == "Dirs":                eq3_show_0_chbutt.config(state='disabled')                eq3_show_90_chbutt.config(state='disabled')                eq3_show_180_chbutt.config(state='disabled')                eq3_show_270_chbutt.config(state='disabled')            elif eqcont3.numsordirs_var.get() == "Nums":                eq3_show_north_chbutt.config(state='disabled')                eq3_show_east_chbutt.config(state='disabled')                eq3_show_south_chbutt.config(state='disabled')                eq3_show_west_chbutt.config(state='disabled')        else:            disablewidgets(eqcont3.show_labels_var,False,[eq3_numdirradio_dirs,eq3_numdirradio_nums,eq3_show_north_chbutt,eq3_show_east_chbutt,eq3_show_south_chbutt,eq3_show_west_chbutt,eq3_show_0_chbutt,eq3_show_90_chbutt,                                                    eq3_show_180_chbutt,eq3_show_270_chbutt,eq3_label_color_butt,eq3_label_color_label,eq3_label_fontsize_label,eq3_label_fontsize_optionmenu],[],[])        eq3_col6_frm = tk1.Frame(eq3_interior,bd=2) # Column 6        eq3_col6_frm.grid(row=0,column=6,sticky='NSEW')        eq3_legend_settings_frm = tk1.Frame(eq3_col6_frm,bd=2,relief=tk1.SUNKEN)        eq3_legend_settings_frm.pack(fill=tk1.X)        eq3_legend_settings_label = tk1.Label(eq3_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        eq3_legend_settings_label.pack(fill=tk1.X)                eq3_show_title_frm = tk1.Frame(eq3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        eq3_show_title_frm.pack(fill=tk1.X)        eqcont3.show_title_var = tk1.BooleanVar(value=eqcont3.show_title)        eq3_show_title_chbutt = tk1.Checkbutton(eq3_show_title_frm, text="Show Title?", variable=eqcont3.show_title_var,command= lambda:                                              disablewidgets(eqcont3.show_title_var,False,[eq3_title_color_butt,eq3_title_color_color],[],[]))        eq3_show_title_chbutt.pack(fill=tk1.X)        eq3_title_color_frm = tk1.Frame(eq3_show_title_frm,bd=2,relief=tk1.GROOVE)        eq3_title_color_frm.pack(fill=tk1.X)        eq3_title_color_frm.grid_columnconfigure(0, weight=1)        eq3_title_color_frm.grid_columnconfigure(3, weight=1)        eq3_title_color_butt = tk1.Button(eq3_title_color_frm,text="Select Title Color", command= lambda: getcolor(eq3_master,"eqcont3.title_color_temp","Equal Area Title",eq3_title_color_color,eq3_title_color_frm,False))        eq3_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq3_title_color_color = tk1.Label(eq3_title_color_frm,text="Current\nColor:\n%s" % eqcont3.title_color_temp,fg=getoppositecolor(eqcont3.title_color_temp), bg=eqcont3.title_color_temp,width=10)        eq3_title_color_color.grid(row=0,column=2)        disablewidgets(eqcont3.show_title_var,False,[eq3_title_color_butt,eq3_title_color_color],[],[])        eq3_show_legend_frm = tk1.Frame(eq3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        eq3_show_legend_frm.pack(fill=tk1.X)        eqcont3.show_legend_var = tk1.BooleanVar(value=eqcont3.show_legend)        eq3_show_legend_chbutt = tk1.Checkbutton(eq3_show_legend_frm, text="Show Legend?", variable=eqcont3.show_legend_var,command= lambda:                                              disablewidgets(eqcont3.show_legend_var,False,[eq3_legend_color_butt,eq3_legend_color_label],[],[]))        eq3_show_legend_chbutt.pack(fill=tk1.X)        eq3_legend_color_frm = tk1.Frame(eq3_show_legend_frm,bd=2,relief=tk1.GROOVE)        eq3_legend_color_frm.pack(fill=tk1.X)        eq3_legend_color_frm.grid_columnconfigure(0, weight=1)        eq3_legend_color_frm.grid_columnconfigure(3, weight=1)        eq3_legend_color_butt = tk1.Button(eq3_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(eq3_master,"eqcont3.legend_color_temp","Equal Area Legend",eq3_legend_color_label,eq3_legend_color_frm,False))        eq3_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        eq3_legend_color_label = tk1.Label(eq3_legend_color_frm,text="Current\nColor:\n%s" % eqcont3.legend_color_temp,fg=getoppositecolor(eqcont3.legend_color_temp), bg=eqcont3.legend_color_temp,width=10)        eq3_legend_color_label.grid(row=0,column=2)        disablewidgets(eqcont3.show_legend_var,False,[eq3_legend_color_butt,eq3_legend_color_label],[],[])        eq3_field_frm = tk1.Frame(eq3_col6_frm,bd=2,relief=tk1.SUNKEN)        eq3_field_frm.pack(fill=tk1.X)        eq3_field_symbol_settings_label = tk1.Label(eq3_field_frm, text="Local Field Symbol Settings:",bd=1,font="Helvetica 12 bold")        eq3_field_symbol_settings_label.pack(fill=tk1.X)        eq3_show_gadfield_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_show_gadfield_frm.pack(fill=tk1.X)        eqcont3.show_gadfield_var = tk1.BooleanVar(value=eqcont3.show_gadfield)        eq3_show_gadfield_chbutt = tk1.Checkbutton(eq3_show_gadfield_frm, text="Show Symbol for Field?", variable=eqcont3.show_gadfield_var,command= lambda: disablewidgets(eqcont3.show_gadfield_var,False,                                                                [eq3_field_lat_label,eqcont3.sitelat_slider,eq3_field_symbol_label,eq3_field_symbolchoices_optionmenu,eq3_field_size_label,                                                                 eqcont3.field_symbol_size_slider,eq3_field_color_butt,eq3_field_color_label,                                                                 eq3_field_edge_color_butt,eq3_field_edge_color_label,eq3_show_gadfield_edge_chbutt,eq3_show_gadfield_label_chbutt],[],                                                                [[eqcont3.show_gadfield_edge_var,[False],[eq3_field_edge_color_butt,eq3_field_edge_color_label]]]))        eq3_show_gadfield_chbutt.pack(fill=tk1.X)        eq3_field_lat_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_field_lat_frm.pack(fill=tk1.X)        eq3_field_lat_label = tk1.Label(eq3_field_lat_frm, text="Site Latitude:")        eq3_field_lat_label.pack(fill=tk1.X)        eqcont3.sitelat_slider = Scale(eq3_field_lat_frm, from_=-90, to=90,orient=tk1.HORIZONTAL,resolution=1,length=180,width=15)        eqcont3.sitelat_slider.set(eqcont3.sitelat)        eqcont3.sitelat_slider.pack(fill=tk1.X)        eq3_field_symbol_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_field_symbol_frm.pack(fill=tk1.X)        eq3_field_symbol_frm.grid_columnconfigure(0, weight=1)        eq3_field_symbol_frm.grid_columnconfigure(3, weight=1)                  eq3_field_symbol_label = tk1.Label(eq3_field_symbol_frm, text="Field Symbol:",bd=1)        eq3_field_symbol_label.grid(row=0, column=1,sticky='NSEW')        eqcont3.field_symbol_var = tk1.StringVar(eq3_interior)        eqcont3.field_symbol_var.set(symbolchoices_dict_reverse[eqcont3.field_symbol])         eq3_field_symbolchoices_optionmenu = tk1.OptionMenu(eq3_field_symbol_frm, eqcont3.field_symbol_var, *symbolchoices_set)        eq3_field_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        eq3_field_symbolchoices_optionmenu.configure(font=('Consolas',12))        eq3_field_size_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_field_size_frm.pack(fill=tk1.X)        eq3_field_size_label = tk1.Label(eq3_field_size_frm, text="Field Symbol Size:")        eq3_field_size_label.pack(fill=tk1.X)        eqcont3.field_symbol_size_slider = Scale(eq3_field_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        eqcont3.field_symbol_size_slider.set(eqcont3.field_size)        eqcont3.field_symbol_size_slider.pack(fill=tk1.X)        eq3_field_color_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_field_color_frm.pack(fill=tk1.X)        eq3_field_color_frm.grid_columnconfigure(0, weight=1)        eq3_field_color_frm.grid_columnconfigure(3, weight=1)                        eq3_field_color_butt = tk1.Button(eq3_field_color_frm,text="Select Field\nSymbol Color", command= lambda: getcolor(eq3_master,"eqcont3.field_color_temp","Equal Area Field Symbol",                                                                                                                                      eq3_field_color_label,eq3_field_color_frm,False))        eq3_field_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_field_color_label = tk1.Label(eq3_field_color_frm,text="Current\nColor:\n%s" % eqcont3.field_color_temp,fg=getoppositecolor(eqcont3.field_color_temp), bg=eqcont3.field_color_temp,width=10)        eq3_field_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_show_gadfield_edge_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_show_gadfield_edge_frm.pack(fill=tk1.X)        eqcont3.show_gadfield_edge_var = tk1.BooleanVar(value=eqcont3.show_gadfield_edge)        eq3_show_gadfield_edge_chbutt = tk1.Checkbutton(eq3_show_gadfield_edge_frm, text="Show Field Symbol Border?", variable=eqcont3.show_gadfield_edge_var,command= lambda:                                              disablewidgets(eqcont3.show_gadfield_edge_var,False,[eq3_field_edge_color_butt,eq3_field_edge_color_label],[],[]))        eq3_show_gadfield_edge_chbutt.pack(fill=tk1.X)                eq3_field_edge_color_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_field_edge_color_frm.pack(fill=tk1.X)        eq3_field_edge_color_frm.grid_columnconfigure(0, weight=1)        eq3_field_edge_color_frm.grid_columnconfigure(3, weight=1)                        eq3_field_edge_color_butt = tk1.Button(eq3_field_edge_color_frm,text="Select Field\nSymbol Border Color", command= lambda: getcolor(eq3_master,"eqcont3.field_edge_color_temp","Equal Area Field Symbol Edge",                                                                                                                                                       eq3_field_edge_color_label,eq3_field_edge_color_frm,False))        eq3_field_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        eq3_field_edge_color_label = tk1.Label(eq3_field_edge_color_frm,text="Current\nColor:\n%s" % eqcont3.field_edge_color_temp,fg=getoppositecolor(eqcont3.field_edge_color_temp), bg=eqcont3.field_edge_color_temp,width=10)        eq3_field_edge_color_label.grid(row=0, column=2,sticky='NSEW')        eq3_show_gadfield_label_frm = tk1.Frame(eq3_field_frm,bd=2,relief=tk1.GROOVE)        eq3_show_gadfield_label_frm.pack(fill=tk1.X)        eqcont3.show_gadfield_label_var = tk1.BooleanVar(value=eqcont3.show_gadfield_label)        eq3_show_gadfield_label_chbutt = tk1.Checkbutton(eq3_show_gadfield_label_frm, text="Show Field Label?", variable=eqcont3.show_gadfield_label_var)        eq3_show_gadfield_label_chbutt.pack(fill=tk1.X)        disablewidgets(eqcont3.show_gadfield_edge_var,False,[eq3_field_edge_color_butt,eq3_field_edge_color_label],[],[])        disablewidgets(eqcont3.show_gadfield_var,False,[eq3_field_lat_label,eqcont3.sitelat_slider,eq3_field_symbol_label,eq3_field_symbolchoices_optionmenu,eq3_field_size_label,                                                    eqcont3.field_symbol_size_slider,eq3_field_color_butt,eq3_field_color_label,eq3_field_edge_color_butt,eq3_field_edge_color_label,                                                    eq3_show_gadfield_edge_chbutt,eq3_show_gadfield_label_chbutt],[],[[eqcont3.show_gadfield_edge_var,[False],[eq3_field_edge_color_butt,eq3_field_edge_color_label]]])            eq3_submit_butt_frm = tk1.Frame(eq3_interior,bd=2,relief=tk1.RIDGE)        eq3_submit_butt_frm.grid(row=2,column=0, columnspan=7, sticky='NSEW')        eq3_submit_butt = tk1.Button(eq3_submit_butt_frm, text="Submit and Save Changes and Update Equal Area Multiple Plot", command= lambda: submiteq3controls(self,eqcont3,eq3_master))        eq3_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq3_submit_butt.configure(font=('Consolas bold',12))        eq3_reset_butt = tk1.Button(eq3_submit_butt_frm, text="Reset Equal Area Multiple Plot to Defaults", command= lambda: eq3_resetdefaults(self,eq3_master))        eq3_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq3_reset_butt.configure(font=('Consolas',10))        eq3_cancel_butt = tk1.Button(eq3_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(eq3_master))        eq3_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        eq3_cancel_butt.configure(font=('Consolas',10))                tk1.mainloop()    return################ J/Jo Plot Controls ################class jjo_setdefaults:    def __init__(self,plottype):                self.printstep_color= "PURPLE"        self.step_fontsize_mod = "Normal"        self.show_popupannotations = True        self.samp_fontsize_mod = "Normal"        self.printsamp_color = "GREEN"        self.show_arrowlines = True        self.arrowsorlines = "Lines"        self.arrowline_color = "GREEN"        self.arrowline_width = 1        self.arrowhead_width = 3        self.arrowhead_length = 5        self.jdecrease_size = 80        self.jdecrease_symbol = "s"        self.jdecrease_color = "RED"        self.show_jdecrease_edge = True        self.jdecrease_edge_color = "BLACK"        self.jdecrease_edge_width = 1        self.jincrease_size = 80        self.jincrease_symbol = "s"        self.jincrease_color = "BLUE"        self.show_jincrease_edge = True        self.jincrease_edge_color = "BLACK"        self.jincrease_edge_width = 1        self.show_firststep = True        self.firststep_symbol = "s"        self.firststep_size = 40        self.firststep_color = "YELLOW"        self.show_firststep_edge = True        self.firststep_edge_color = "BLACK"        self.firststep_edge_width = 1        self.show_laststep = True        self.laststep_symbol = "^"        self.laststep_size = 80        self.laststep_color = "YELLOW"        self.show_laststep_edge = True        self.laststep_edge_color = "BLACK"        self.laststep_edge_width = 1        self.axes_color = "BLACK"        self.axes_width = 1        self.show_xaxis_ticks = True        self.show_xaxis_steplabels = True        self.xaxis_steplabels_tick_color = "BLACK"        self.xaxis_steplabel_fontsize_mod = "Normal"        self.xaxis_tick_length = 3        self.xaxis_tick_width = 1        self.show_xaxis_stepboundaries = True        self.xaxis_stepboundaries_color = "BLACK"        self.xaxis_stepboundaries_fontsize_mod = "Normal"        self.show_yaxis_ticks = True        self.yaxis_labels_tick_color = "BLACK"        self.yaxis_label_fontsize_mod = "Normal"        self.yaxis_tick_length = 3        self.yaxis_tick_width = 1        self.show_yaxis_percentlabel = True        self.show_yaxis_abslabel = True        self.show_yunits = True        self.yunits_mod = 'A/m'        self.yunits = jjoyunits_dict[self.yunits_mod]        if plottype == "samples":            self.show_jdecrease_absrect = True            self.show_jdecrease_relrect = True            self.show_jincrease_absrect = True            self.show_jincrease_relrect = True        else:            self.show_jdecrease_absrect = False            self.show_jdecrease_relrect = False            self.show_jincrease_absrect = False            self.show_jincrease_relrect = False                    self.jdecrease_absrect_color = "#33a5df"        self.show_jdecrease_absrect_edge = True        self.jdecrease_absrect_edge_color = "#33c444"        self.jdecrease_relrect_color = "#33edf9"        self.show_jdecrease_relrect_edge = True        self.jdecrease_relrect_edge_color = "#33c444"        self.jincrease_absrect_color = "#ff4d4d"        self.show_jincrease_absrect_edge = True        self.jincrease_absrect_edge_color = "#800000"        self.jincrease_relrect_color = "#ff794d"        self.show_jincrease_relrect_edge = True        self.jincrease_relrect_edge_color = "#992600"        self.show_joline = True        self.joline_color = "ORANGE"        self.joline_style = ":"        self.joline_width = 3        self.show_vertstepboundline = True        self.vertstepboundline_color = "GREEN"        self.vertstepboundline_style = ":"        self.vertstepboundline_width = 1        self.show_title = True        self.title_color = "BLACK"        self.show_legend = True        self.legend_color = "BLACK"        self.show_magmin = False        self.mainmagmin = "Temp"        self.showminlist = []        for index in range(0,len(magmin_list)):            self.showminlist.append(True)        self.magmin_color = "YELLOW"        self.magmin_text_color = "BLACK"        self.magmin_fontsize_mod = "Normal"        self.error_scaling = "None"        returndef jjo_resetdefaults(self,window):    global jjocont    jjocont = jjo_setdefaults(self.plottype)    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef jjo2_resetdefaults(self,window):    global jjocont2    jjocont2 = jjo_setdefaults(self.plottype)    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef jjo3_resetdefaults(self,window):    global jjocont3    jjocont3 = jjo_setdefaults(self.plottype)    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submitjjocontrols(self,jjocont,window):    jjoprintstep_index_list = jjocont.printsteplist_box.curselection()    for showindex, step in enumerate(self.sample.data):        step.jjo_printlabel = not(showindex in jjoprintstep_index_list)    jjocont.show_arrowlines = jjocont.show_arrowline_var.get()    jjocont.arrowsorlines = jjocont.arrowsorlines_var.get()    jjocont.arrowline_color = jjocont.arrowline_color_temp    jjocont.arrowline_width = jjocont.arrowline_width_var.get()    jjocont.jincrease_size = jjocont.jincrease_symbol_size_slider.get()    jjocont.jincrease_symbol = symbolchoices_dict[jjocont.jincrease_symbol_var.get()]    jjocont.jincrease_color = jjocont.jincrease_color_temp    jjocont.show_jincrease_edge = jjocont.show_jincrease_edge_var.get()    jjocont.jincrease_edge_color = jjocont.jincrease_edge_color_temp    jjocont.jincrease_edge_width = jjocont.jincrease_edge_width_var.get()    jjocont.show_firststep = jjocont.show_firststep_var.get()    jjocont.firststep_symbol = symbolchoices_dict[jjocont.firststep_symbol_var.get()]    jjocont.firststep_size = jjocont.firststep_symbol_size_slider.get()    jjocont.firststep_color = jjocont.firststep_color_temp    jjocont.show_firststep_edge = jjocont.show_firststep_edge_var.get()    jjocont.firststep_edge_color = jjocont.firststep_edge_color_temp    jjocont.firststep_edge_width = jjocont.firststep_edge_width_var.get()    jjocont.show_laststep = jjocont.show_laststep_var.get()    jjocont.laststep_symbol = symbolchoices_dict[jjocont.laststep_symbol_var.get()]    jjocont.laststep_size = jjocont.laststep_symbol_size_slider.get()    jjocont.laststep_color = jjocont.laststep_color_temp    jjocont.show_laststep_edge = jjocont.show_laststep_edge_var.get()    jjocont.laststep_edge_color = jjocont.laststep_edge_color_temp    jjocont.laststep_edge_width = jjocont.laststep_edge_width_var.get()    jjocont.show_xaxis_ticks = jjocont.show_xaxis_ticks_var.get()    jjocont.show_xaxis_steplabels = jjocont.show_xaxis_steplabels_var.get()    jjocont.xaxis_tick_length = jjocont.xaxis_tick_length_var.get()    jjocont.xaxis_tick_width = jjocont.xaxis_tick_width_var.get()    jjocont.xaxis_steplabels_tick_color = jjocont.xaxis_steplabels_tick_color_temp    jjocont.xaxis_steplabel_fontsize_mod = jjocont.xaxis_steplabel_fontsize_mod_var.get()    jjocont.show_xaxis_stepboundaries = jjocont.show_xaxis_stepboundaries_var.get()    jjocont.xaxis_stepboundaries_color = jjocont.xaxis_stepboundaries_color_temp    jjocont.xaxis_stepboundaries_fontsize_mod = jjocont.xaxis_stepboundaries_fontsize_mod_var.get()    jjocont.show_jdecrease_absrect = jjocont.show_jdecrease_absrect_var.get()    jjocont.jdecrease_absrect_color = jjocont.jdecrease_absrect_color_temp    jjocont.show_jdecrease_absrect_edge = jjocont.show_jdecrease_absrect_edge_var.get()    jjocont.jdecrease_absrect_edge_color = jjocont.jdecrease_absrect_edge_color_temp    jjocont.show_jdecrease_relrect = jjocont.show_jdecrease_relrect_var.get()    jjocont.jdecrease_relrect_color = jjocont.jdecrease_relrect_color_temp    jjocont.show_jdecrease_relrect_edge = jjocont.show_jdecrease_relrect_edge_var.get()    jjocont.jdecrease_relrect_edge_color = jjocont.jdecrease_relrect_edge_color_temp    jjocont.show_jincrease_absrect = jjocont.show_jincrease_absrect_var.get()    jjocont.jincrease_absrect_color = jjocont.jincrease_absrect_color_temp    jjocont.show_jincrease_absrect_edge = jjocont.show_jincrease_absrect_edge_var.get()    jjocont.jincrease_absrect_edge_color = jjocont.jincrease_absrect_edge_color_temp    jjocont.show_jincrease_relrect = jjocont.show_jincrease_relrect_var.get()    jjocont.jincrease_relrect_color = jjocont.jincrease_relrect_color_temp    jjocont.show_jincrease_relrect_edge = jjocont.show_jincrease_relrect_edge_var.get()    jjocont.jincrease_relrect_edge_color = jjocont.jincrease_relrect_edge_color_temp    jjocont.show_joline = jjocont.show_joline_var.get()    jjocont.joline_color = jjocont.joline_color_temp    jjocont.joline_width = jjocont.joline_width_var.get()    jjocont.show_vertstepboundline = jjocont.show_vertstepboundline_var.get()    jjocont.vertstepboundline_color = jjocont.vertstepboundline_color_temp    jjocont.vertstepboundline_width = jjocont.vertstepboundline_width_var.get()    jjocont.printstep_color = jjocont.printstep_color_temp    jjocont.step_fontsize_mod = jjocont.step_fontsize_mod_var.get()    jjocont.show_popupannotations = jjocont.show_popupannotations_var.get()    jjocont.jdecrease_size = jjocont.jdecrease_symbol_size_slider.get()    jjocont.jdecrease_symbol = symbolchoices_dict[jjocont.jdecrease_symbol_var.get()]    jjocont.jdecrease_color = jjocont.jdecrease_color_temp    jjocont.show_jdecrease_edge = jjocont.show_jdecrease_edge_var.get()    jjocont.jdecrease_edge_color = jjocont.jdecrease_edge_color_temp    jjocont.jdecrease_edge_width = jjocont.jdecrease_edge_width_var.get()    jjocont.axes_color = jjocont.axes_color_temp    jjocont.axes_width = jjocont.axes_width_var.get()    jjocont.show_yaxis_ticks = jjocont.show_yaxis_ticks_var.get()    jjocont.yaxis_labels_tick_color = jjocont.yaxis_labels_tick_color_temp    jjocont.yaxis_tick_length = jjocont.yaxis_tick_length_var.get()    jjocont.yaxis_tick_width = jjocont.yaxis_tick_width_var.get()    jjocont.yaxis_label_fontsize_mod = jjocont.yaxis_label_fontsize_mod_var.get()    jjocont.show_yaxis_percentlabel = jjocont.show_yaxis_percentlabel_var.get()    jjocont.show_yaxis_abslabel = jjocont.show_yaxis_abslabel_var.get()    jjocont.show_yunits = jjocont.show_yunits_var.get()    jjocont.yunits_mod = jjocont.yunits_mod_var.get()    jjocont.yunits = jjoyunits_dict[jjocont.yunits_mod]    jjocont.show_title = jjocont.show_title_var.get()    jjocont.title_color = jjocont.title_color_temp    jjocont.show_legend = jjocont.show_legend_var.get()    jjocont.legend_color = jjocont.legend_color_temp    jjocont.show_magmin = jjocont.show_magmin_var.get()    jjocont.mainmagmin = jjocont.mainmagmin_var.get()    jjocont.showminlist[0] = jjocont.show_goethite_var.get()    jjocont.showminlist[1] = jjocont.show_pyrrhotite_var.get()    jjocont.showminlist[2] = jjocont.show_greigite_var.get()    jjocont.showminlist[3] = jjocont.show_titanomaghemite_var.get()    jjocont.showminlist[4] = jjocont.show_titanomagnetite_var.get()    jjocont.showminlist[5] = jjocont.show_magnetite_var.get()    jjocont.showminlist[6] = jjocont.show_hematite_var.get()    jjocont.magmin_color = jjocont.magmin_color_temp    jjocont.magmin_text_color = jjocont.magmin_text_color_temp    jjocont.magmin_fontsize_mod = jjocont.magmin_fontsize_mod_var.get()    jjocont.error_scaling = jjocont.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submitjjo2controls(self,jjocont2,window):    jjo2_printstep_index_list = jjocont2.printsteplist_box.curselection()    for showindex, sample in enumerate(self.sitesteptext):        sample.jjo2_printlabel = not(showindex in jjo2_printstep_index_list)    jjocont2.printstep_color = jjocont2.printstep_color_temp    jjocont2.step_fontsize_mod = jjocont2.step_fontsize_mod_var.get()    jjocont2.show_popupannotations = jjocont2.show_popupannotations_var.get()            jjocont2.jdecrease_size = jjocont2.jdecrease_symbol_size_slider.get()    jjocont2.jdecrease_symbol = symbolchoices_dict[jjocont2.jdecrease_symbol_var.get()]    jjocont2.jdecrease_color = jjocont2.jdecrease_color_temp    jjocont2.show_jdecrease_edge = jjocont2.show_jdecrease_edge_var.get()    jjocont2.jdecrease_edge_color = jjocont2.jdecrease_edge_color_temp    jjocont2.jdecrease_edge_width = jjocont2.jdecrease_edge_width_var.get()    jjocont2.axes_color = jjocont2.axes_color_temp    jjocont2.axes_width = jjocont2.axes_width_var.get()    jjocont2.show_yaxis_ticks = jjocont2.show_yaxis_ticks_var.get()    jjocont2.yaxis_labels_tick_color = jjocont2.yaxis_labels_tick_color_temp    jjocont2.yaxis_tick_length = jjocont2.yaxis_tick_length_var.get()    jjocont2.yaxis_tick_width = jjocont2.yaxis_tick_width_var.get()    jjocont2.yaxis_label_fontsize_mod = jjocont2.yaxis_label_fontsize_mod_var.get()    jjocont2.show_yaxis_percentlabel = jjocont2.show_yaxis_percentlabel_var.get()    jjocont2.show_yaxis_abslabel = jjocont2.show_yaxis_abslabel_var.get()    jjocont2.show_title = jjocont2.show_title_var.get()    jjocont2.title_color = jjocont2.title_color_temp    jjocont2.show_legend = jjocont2.show_legend_var.get()    jjocont2.legend_color = jjocont2.legend_color_temp    jjocont2.error_scaling = jjocont2.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef submitjjo3controls(self,jjocont3,window):        jjoprintsamp_index_list = jjocont3.printsamplabel_box.curselection()    for showindex, sample in enumerate(self.sitedata):        sample.jjo_printname = not(showindex in jjoprintsamp_index_list)    stepselection = jjocont3.printsteplist_box.curselection()    for sample in jjocont3.sitedata:        if sample.name == jjocont3.prevsamp:            for showstepindex, step in enumerate(sample.data):                step.jjo_printlabel = not(showstepindex in stepselection)    for sampindex, sample in enumerate(jjocont3.sitedata):        for stepindex, step in enumerate(sample.data):            self.sitedata[sampindex].data[stepindex].jjo_printlabel = step.jjo_printlabel    jjocont3.show_arrowlines = jjocont3.show_arrowline_var.get()    jjocont3.arrowsorlines = jjocont3.arrowsorlines_var.get()    jjocont3.arrowline_color = jjocont3.arrowline_color_temp    jjocont3.arrowline_width = jjocont3.arrowline_width_var.get()    jjocont3.jincrease_size = jjocont3.jincrease_symbol_size_slider.get()    jjocont3.jincrease_symbol = symbolchoices_dict[jjocont3.jincrease_symbol_var.get()]    jjocont3.jincrease_color = jjocont3.jincrease_color_temp    jjocont3.show_jincrease_edge = jjocont3.show_jincrease_edge_var.get()    jjocont3.jincrease_edge_color = jjocont3.jincrease_edge_color_temp    jjocont3.jincrease_edge_width = jjocont3.jincrease_edge_width_var.get()    jjocont3.show_firststep = jjocont3.show_firststep_var.get()    jjocont3.firststep_symbol = symbolchoices_dict[jjocont3.firststep_symbol_var.get()]    jjocont3.firststep_size = jjocont3.firststep_symbol_size_slider.get()    jjocont3.firststep_color = jjocont3.firststep_color_temp    jjocont3.show_firststep_edge = jjocont3.show_firststep_edge_var.get()    jjocont3.firststep_edge_color = jjocont3.firststep_edge_color_temp    jjocont3.firststep_edge_width = jjocont3.firststep_edge_width_var.get()    jjocont3.show_laststep = jjocont3.show_laststep_var.get()    jjocont3.laststep_symbol = symbolchoices_dict[jjocont3.laststep_symbol_var.get()]    jjocont3.laststep_size = jjocont3.laststep_symbol_size_slider.get()    jjocont3.laststep_color = jjocont3.laststep_color_temp    jjocont3.show_laststep_edge = jjocont3.show_laststep_edge_var.get()    jjocont3.laststep_edge_color = jjocont3.laststep_edge_color_temp    jjocont3.laststep_edge_width = jjocont3.laststep_edge_width_var.get()    jjocont3.show_xaxis_ticks = jjocont3.show_xaxis_ticks_var.get()    jjocont3.show_xaxis_steplabels = jjocont3.show_xaxis_steplabels_var.get()    jjocont3.xaxis_tick_length = jjocont3.xaxis_tick_length_var.get()    jjocont3.xaxis_tick_width = jjocont3.xaxis_tick_width_var.get()    jjocont3.xaxis_steplabels_tick_color = jjocont3.xaxis_steplabels_tick_color_temp    jjocont3.xaxis_steplabel_fontsize_mod = jjocont3.xaxis_steplabel_fontsize_mod_var.get()    jjocont3.show_xaxis_stepboundaries = jjocont3.show_xaxis_stepboundaries_var.get()    jjocont3.xaxis_stepboundaries_color = jjocont3.xaxis_stepboundaries_color_temp    jjocont3.xaxis_stepboundaries_fontsize_mod = jjocont3.xaxis_stepboundaries_fontsize_mod_var.get()    jjocont3.show_jdecrease_absrect = jjocont3.show_jdecrease_absrect_var.get()    jjocont3.jdecrease_absrect_color = jjocont3.jdecrease_absrect_color_temp    jjocont3.show_jdecrease_absrect_edge = jjocont3.show_jdecrease_absrect_edge_var.get()    jjocont3.jdecrease_absrect_edge_color = jjocont3.jdecrease_absrect_edge_color_temp    jjocont3.show_jdecrease_relrect = jjocont3.show_jdecrease_relrect_var.get()    jjocont3.jdecrease_relrect_color = jjocont3.jdecrease_relrect_color_temp    jjocont3.show_jdecrease_relrect_edge = jjocont3.show_jdecrease_relrect_edge_var.get()    jjocont3.jdecrease_relrect_edge_color = jjocont3.jdecrease_relrect_edge_color_temp    jjocont3.show_jincrease_absrect = jjocont3.show_jincrease_absrect_var.get()    jjocont3.jincrease_absrect_color = jjocont3.jincrease_absrect_color_temp    jjocont3.show_jincrease_absrect_edge = jjocont3.show_jincrease_absrect_edge_var.get()    jjocont3.jincrease_absrect_edge_color = jjocont3.jincrease_absrect_edge_color_temp    jjocont3.show_jincrease_relrect = jjocont3.show_jincrease_relrect_var.get()    jjocont3.jincrease_relrect_color = jjocont3.jincrease_relrect_color_temp    jjocont3.show_jincrease_relrect_edge = jjocont3.show_jincrease_relrect_edge_var.get()    jjocont3.jincrease_relrect_edge_color = jjocont3.jincrease_relrect_edge_color_temp    jjocont3.show_vertstepboundline = jjocont3.show_vertstepboundline_var.get()    jjocont3.vertstepboundline_color = jjocont3.vertstepboundline_color_temp    jjocont3.vertstepboundline_width = jjocont3.vertstepboundline_width_var.get()    jjocont3.printsamp_color = jjocont3.printsamp_color_temp    jjocont3.samp_fontsize_mod = jjocont3.samp_fontsize_mod_var.get()    jjocont3.printstep_color = jjocont3.printstep_color_temp    jjocont3.step_fontsize_mod = jjocont3.step_fontsize_mod_var.get()    jjocont3.show_popupannotations = jjocont3.show_popupannotations_var.get()    jjocont3.jdecrease_size = jjocont3.jdecrease_symbol_size_slider.get()    jjocont3.jdecrease_symbol = symbolchoices_dict[jjocont3.jdecrease_symbol_var.get()]    jjocont3.jdecrease_color = jjocont3.jdecrease_color_temp    jjocont3.show_jdecrease_edge = jjocont3.show_jdecrease_edge_var.get()    jjocont3.jdecrease_edge_color = jjocont3.jdecrease_edge_color_temp    jjocont3.jdecrease_edge_width = jjocont3.jdecrease_edge_width_var.get()    jjocont3.axes_color = jjocont3.axes_color_temp    jjocont3.axes_width = jjocont3.axes_width_var.get()    jjocont3.show_yaxis_ticks = jjocont3.show_yaxis_ticks_var.get()    jjocont3.yaxis_labels_tick_color = jjocont3.yaxis_labels_tick_color_temp    jjocont3.yaxis_tick_length = jjocont3.yaxis_tick_length_var.get()    jjocont3.yaxis_tick_width = jjocont3.yaxis_tick_width_var.get()    jjocont3.yaxis_label_fontsize_mod = jjocont3.yaxis_label_fontsize_mod_var.get()    jjocont3.show_yaxis_percentlabel = jjocont3.show_yaxis_percentlabel_var.get()    jjocont3.show_yaxis_abslabel = jjocont3.show_yaxis_abslabel_var.get()    jjocont3.show_yunits = jjocont3.show_yunits_var.get()    jjocont3.yunits_mod = jjocont3.yunits_mod_var.get()    jjocont3.yunits = jjoyunits_dict[jjocont3.yunits_mod]    jjocont3.show_title = jjocont3.show_title_var.get()    jjocont3.title_color = jjocont3.title_color_temp    jjocont3.show_legend = jjocont3.show_legend_var.get()    jjocont3.legend_color = jjocont3.legend_color_temp    jjocont3.show_magmin = jjocont3.show_magmin_var.get()    jjocont3.mainmagmin = jjocont3.mainmagmin_var.get()    jjocont3.showminlist[0] = jjocont3.show_goethite_var.get()    jjocont3.showminlist[1] = jjocont3.show_pyrrhotite_var.get()    jjocont3.showminlist[2] = jjocont3.show_greigite_var.get()    jjocont3.showminlist[3] = jjocont3.show_titanomaghemite_var.get()    jjocont3.showminlist[4] = jjocont3.show_titanomagnetite_var.get()    jjocont3.showminlist[5] = jjocont3.show_magnetite_var.get()    jjocont3.showminlist[6] = jjocont3.show_hematite_var.get()    jjocont3.magmin_color = jjocont3.magmin_color_temp    jjocont3.magmin_text_color = jjocont3.magmin_text_color_temp    jjocont3.magmin_fontsize_mod = jjocont3.magmin_fontsize_mod_var.get()    jjocont3.error_scaling = jjocont3.error_scaling_var.get()    window.destroy()    window.quit()    self.domultiplot(False,False,False,False)    returndef enterjjo_printsteplistbox(self):    self.injjo_printsteplistbox = True    returndef leavejjo_printsteplistbox(self):    self.injjo_printsteplistbox = False    self.focustopwin()    returndef enterjjo2_printsteplistbox(self):    self.injjo2_printsteplistbox = True    returndef leavejjo2_printsteplistbox(self):    self.injjo2_printsteplistbox = False    self.focustopwin()    returndef enterjjo3_printsamplabelbox(self):    self.injjo3_printsamplabelbox = True    returndef leavejjo3_printsamplabelbox(self):    self.injjo3_printsamplabelbox = False    self.focustopwin()    returndef enterjjo3_printsamplistbox(self):    self.injjo3_printsamplistbox = True    returndef leavejjo3_printsamplistbox(self):    self.injjo3_printsamplistbox = False    self.focustopwin()    returndef enterjjo3_printsteplistbox(self):    self.injjo3_printsteplistbox = True    returndef leavejjo3_printsteplistbox(self):    self.injjo3_printsteplistbox = False    self.focustopwin()    returndef updatejjo3steps(self):    global jjocont3    stepselection = jjocont3.printsteplist_box.curselection()    for sample in jjocont3.sitedata:        if sample.name == jjocont3.prevsamp:            for showstepindex, step in enumerate(sample.data):                step.jjo_printlabel = not(showstepindex in stepselection)    newsampleselection = self.samplelist[jjocont3.printsamplist_box.curselection()[0]]    jjocont3.printsteplist_box.delete(0,tk1.END)    for sample in jjocont3.sitedata:        if sample.name == newsampleselection:            for showstepindex, step in enumerate(sample.data):                jjocont3.printsteplist_box.insert(tk1.END,step.dmagstep)                jjocont3.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")                if not(step.jjo_printlabel):                    jjocont3.printsteplist_box.select_set(showstepindex)    jjocont3.prevsamp = newsampleselection    returndef jjocontrols_sample(self):    global jjo_master, jjocont##    if jjo_master != None and jjo_master.winfo_exists():##    else: # Create jjo_master control window    try:        'normal' == jjo_master.state()        jjo_master.lift()        jjo_master.attributes('-topmost',True)        jjo_master.after_idle(jjo_master.attributes,'-topmost',False)        except:        jjo_master = tk1.Toplevel(root)        jjo_master.focus_set()        jjo_master.title("J/Jo Plot Controls (Sample Data)")        jjo_master.geometry("+40+40")        jjocont.printstep_color_temp = jjocont.printstep_color # set color temps        jjocont.arrowline_color_temp = jjocont.arrowline_color        jjocont.jincrease_color_temp = jjocont.jincrease_color        jjocont.jincrease_edge_color_temp = jjocont.jincrease_edge_color        jjocont.jdecrease_color_temp = jjocont.jdecrease_color        jjocont.jdecrease_edge_color_temp = jjocont.jdecrease_edge_color        jjocont.firststep_color_temp = jjocont.firststep_color        jjocont.firststep_edge_color_temp = jjocont.firststep_edge_color        jjocont.laststep_color_temp = jjocont.laststep_color        jjocont.laststep_edge_color_temp = jjocont.laststep_edge_color        jjocont.axes_color_temp = jjocont.axes_color        jjocont.xaxis_steplabels_tick_color_temp = jjocont.xaxis_steplabels_tick_color        jjocont.xaxis_stepboundaries_color_temp = jjocont.xaxis_stepboundaries_color        jjocont.yaxis_labels_tick_color_temp = jjocont.yaxis_labels_tick_color        jjocont.jdecrease_absrect_color_temp = jjocont.jdecrease_absrect_color        jjocont.jdecrease_absrect_edge_color_temp = jjocont.jdecrease_absrect_edge_color        jjocont.jdecrease_relrect_color_temp = jjocont.jdecrease_relrect_color        jjocont.jdecrease_relrect_edge_color_temp = jjocont.jdecrease_relrect_edge_color        jjocont.jincrease_absrect_color_temp = jjocont.jincrease_absrect_color        jjocont.jincrease_absrect_edge_color_temp = jjocont.jincrease_absrect_edge_color        jjocont.jincrease_relrect_color_temp = jjocont.jincrease_relrect_color        jjocont.jincrease_relrect_edge_color_temp = jjocont.jincrease_relrect_edge_color        jjocont.magmin_color_temp = jjocont.magmin_color        jjocont.magmin_text_color_temp = jjocont.magmin_text_color        jjocont.joline_color_temp = jjocont.joline_color        jjocont.vertstepboundline_color_temp = jjocont.vertstepboundline_color        jjocont.title_color_temp = jjocont.title_color        jjocont.legend_color_temp = jjocont.legend_color           jjo_vertical_scrollbar = tk1.Scrollbar(jjo_master,orient=tk1.VERTICAL)        jjo_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        jjo_horizontal_scrollbar = tk1.Scrollbar(jjo_master,orient=tk1.HORIZONTAL)        jjo_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)               self.jjo_canvas = tk1.Canvas(jjo_master, bd=0, highlightthickness=0,yscrollcommand=jjo_vertical_scrollbar.set,xscrollcommand=jjo_horizontal_scrollbar.set,width=1820,height=870,scrollregion=(0,0,1820,870))        self.jjo_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        jjo_vertical_scrollbar.config(command=self.jjo_canvas.yview)        jjo_horizontal_scrollbar.config(command=self.jjo_canvas.xview)        self.jjo_canvas.xview_moveto(0)        self.jjo_canvas.yview_moveto(0)        jjo_interior = tk1.Frame(self.jjo_canvas,width=500,height=500)        jjo_interior_id = self.jjo_canvas.create_window(0, 0, window=jjo_interior,anchor=tk1.NW)        jjo_col0_frm = tk1.Frame(jjo_interior,bd=2) # Column 0        jjo_col0_frm.grid(row=0,column=0,sticky='NSEW')              jjo_printsteps_frm = tk1.Frame(jjo_col0_frm,bd=2,relief=tk1.SUNKEN)        jjo_printsteps_frm.pack(fill=tk1.X)        step_settings_label = tk1.Label(jjo_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        step_settings_label.grid(row=0, column=0, sticky='NSEW')        jjo_selectprintsteps_frm = tk1.Frame(jjo_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        selectsteps_label = tk1.Label(jjo_selectprintsteps_frm, text="Select which Step\nLabels to NOT Print:")        selectsteps_label.grid(row=0, column=0, sticky='NSEW')        jjocont.printsteplist_box = tk1.Listbox(jjo_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sample.data):            jjocont.printsteplist_box.insert(tk1.END,step.dmagstep)            jjocont.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.jjo_printlabel):                jjocont.printsteplist_box.select_set(stepoffindex)        jjocont.printsteplist_box.grid(row=1,column=0,sticky='NSEW')        jjocont.printsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("jjocont.printsteplist_box"))        jjocont.printsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("jjocont.printsteplist_box"))        jjocont.print_scrollbar = tk1.Scrollbar(jjocont.printsteplist_box,orient=tk1.VERTICAL)        jjocont.print_scrollbar.config(command=jjocont.printsteplist_box.yview)        jjocont.printsteplist_box.config(yscrollcommand=jjocont.print_scrollbar.set)        jjocont.print_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        jjocont.printsteplist_box.bind("<Enter>", lambda x: enterjjo_printsteplistbox(self))        jjocont.printsteplist_box.bind("<Leave>", lambda x: leavejjo_printsteplistbox(self))        jjo_show_allsteps_butt = tk1.Button(jjo_printsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: jjocont.printsteplist_box.selection_clear)        jjo_show_allsteps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        jjo_show_nosteps_butt = tk1.Button(jjo_printsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: jjocont.printsteplist_box.selection_set(0, tk1.END))        jjo_show_nosteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        jjo_printstep_color_frm = tk1.Frame(jjo_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        jjo_printstep_color_frm.grid_columnconfigure(0, weight=1)        jjo_printstep_color_frm.grid_columnconfigure(3, weight=1)        jjo_printstep_color_butt = tk1.Button(jjo_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(jjo_master,"jjocont.printstep_color_temp","J/Jo Step Labels",                                                                                                                                jjo_printstep_color_label,jjo_printstep_color_frm,False))        jjo_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_printstep_color_label = tk1.Label(jjo_printstep_color_frm,text="Current\nColor:\n%s" % jjocont.printstep_color_temp,fg=getoppositecolor(jjocont.printstep_color_temp), bg=jjocont.printstep_color_temp,width=10)        jjo_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_step_fontsize_frm = tk1.Frame(jjo_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        jjo_step_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo_step_fontsize_frm.grid_columnconfigure(3, weight=1)        jjo_step_fontsize_label = tk1.Label(jjo_step_fontsize_frm, text="Step Font Size:",bd=1)        jjo_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont.step_fontsize_mod_var = tk1.StringVar(jjo_interior)        jjocont.step_fontsize_mod_var.set(jjocont.step_fontsize_mod)         jjo_step_fontsize_optionmenu = tk1.OptionMenu(jjo_step_fontsize_frm, jjocont.step_fontsize_mod_var, *fontsizes_set)        jjo_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo_step_fontsize_optionmenu.configure(font=('Consolas',10))        jjo_showannot_frm = tk1.Frame(jjo_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo_showannot_frm.grid(row=6, column=0,sticky='NSEW')        jjocont.show_popupannotations_var = tk1.BooleanVar(value=jjocont.show_popupannotations)        jjo_show_popupannotations_chbutt = tk1.Checkbutton(jjo_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=jjocont.show_popupannotations_var)        jjo_show_popupannotations_chbutt.pack(fill=tk1.X)        jjo_col1_frm = tk1.Frame(jjo_interior,bd=2) # Column 1        jjo_col1_frm.grid(row=0,column=1,sticky='NSEW')        jjo_arrowline_frm = tk1.Frame(jjo_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo_arrowline_frm.pack(fill=tk1.X)              jjo_arrowline_title_label = tk1.Label(jjo_arrowline_frm, text="Arrows & Lines Settings:",font="Helvetica 12 bold")        jjo_arrowline_title_label.pack(fill=tk1.X)        jjo_plotarrow_frm = tk1.Frame(jjo_arrowline_frm,bd=2,relief=tk1.GROOVE)        jjo_plotarrow_frm.pack(fill=tk1.X)        jjocont.show_arrowline_var = tk1.BooleanVar(value=jjocont.show_arrowlines)        jjo_show_arrowline_chbutt = tk1.Checkbutton(jjo_plotarrow_frm, text="Show Arrows and Lines?", variable=jjocont.show_arrowline_var,command= lambda:                                              disablewidgets(jjocont.show_arrowline_var,False,[jjo_arrowline_label,jjo_arrowline_radio_arrow,jjo_arrowline_radio_line,jjo_arrowline_color_butt,jjo_arrowline_color_label,                                                                                             jjo_arrowline_width_label,jjo_arrowline_width_optionmenu],[],[]))        jjo_show_arrowline_chbutt.pack(fill=tk1.X)        jjo_arrowline_radio_text_frm = tk1.Frame(jjo_plotarrow_frm,bd=2,relief=tk1.GROOVE)        jjo_arrowline_radio_text_frm.pack(fill=tk1.X)        jjo_arrowline_label = tk1.Label(jjo_arrowline_radio_text_frm, text="Plot Arrows or Lines?")        jjo_arrowline_label.pack(fill=tk1.X)        jjocont.arrowsorlines_var = tk1.StringVar()        jjocont.arrowsorlines_var.set(jjocont.arrowsorlines)        jjo_arrowline_radio_frm = tk1.Frame(jjo_arrowline_radio_text_frm,bd=2)        jjo_arrowline_radio_frm.pack(fill=tk1.X)        jjo_arrowline_radio_arrow = tk1.Radiobutton(jjo_arrowline_radio_frm, text="Plot Arrows",variable=jjocont.arrowsorlines_var,value="Arrows")        jjo_arrowline_radio_arrow.pack(side=tk1.LEFT,padx=20)        jjo_arrowline_radio_line = tk1.Radiobutton(jjo_arrowline_radio_frm, text="Plot Lines",variable=jjocont.arrowsorlines_var,value="Lines")        jjo_arrowline_radio_line.pack(side=tk1.LEFT,padx=20)        jjo_arrowline_color_frm = tk1.Frame(jjo_arrowline_frm,bd=2,relief=tk1.GROOVE)        jjo_arrowline_color_frm.pack(fill=tk1.X)        jjo_arrowline_color_frm.grid_columnconfigure(0, weight=1)        jjo_arrowline_color_frm.grid_columnconfigure(3, weight=1)        jjo_arrowline_color_butt = tk1.Button(jjo_arrowline_color_frm,text="Select Arrow/Line Color", command= lambda: getcolor(jjo_master,"jjocont.arrowline_color_temp","J/Jo Arrow/Line",                                                                                                                                jjo_arrowline_color_label,jjo_arrowline_color_frm,False))        jjo_arrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_arrowline_color_label = tk1.Label(jjo_arrowline_color_frm,text="Current\nColor:\n%s" % jjocont.arrowline_color_temp,fg=getoppositecolor(jjocont.arrowline_color_temp), bg=jjocont.arrowline_color_temp,width=10)        jjo_arrowline_color_label.grid(row=0,column=2)        jjo_arrowline_width_frm = tk1.Frame(jjo_arrowline_frm,bd=2,relief=tk1.GROOVE)        jjo_arrowline_width_frm.pack(fill=tk1.X)        jjo_arrowline_width_frm.grid_columnconfigure(0, weight=1)        jjo_arrowline_width_frm.grid_columnconfigure(3, weight=1)        jjo_arrowline_width_label = tk1.Label(jjo_arrowline_width_frm, text="Arrow/Line Width:")        jjo_arrowline_width_label.grid(row=0,column=1,sticky='NESW')        jjocont.arrowline_width_var = tk1.IntVar(jjo_interior)        jjocont.arrowline_width_var.set(jjocont.arrowline_width)         jjo_arrowline_width_optionmenu = tk1.OptionMenu(jjo_arrowline_width_frm, jjocont.arrowline_width_var, *linewidthchoices_set)        jjo_arrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_arrowline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_arrowline_var,False,[jjo_arrowline_label,jjo_arrowline_radio_arrow,jjo_arrowline_radio_line,jjo_arrowline_color_butt,jjo_arrowline_color_label,jjo_arrowline_width_label,jjo_arrowline_width_optionmenu],[],[])        jjo_legend_settings_frm = tk1.Frame(jjo_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo_legend_settings_frm.pack(fill=tk1.X)        jjo_legend_settings_label = tk1.Label(jjo_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        jjo_legend_settings_label.pack(fill=tk1.X)        jjo_show_title_frm = tk1.Frame(jjo_legend_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_title_frm.pack(fill=tk1.X)        jjocont.show_title_var = tk1.BooleanVar(value=jjocont.show_title)        jjo_show_title_chbutt = tk1.Checkbutton(jjo_show_title_frm, text="Show Title?", variable=jjocont.show_title_var,command= lambda:                                              disablewidgets(jjocont.show_title_var,False,[jjo_title_color_butt,jjo_title_color_label],[],[]))        jjo_show_title_chbutt.pack(fill=tk1.X)        jjo_title_color_frm = tk1.Frame(jjo_show_title_frm,bd=2,relief=tk1.GROOVE)        jjo_title_color_frm.pack(fill=tk1.X)        jjo_title_color_frm.grid_columnconfigure(0, weight=1)        jjo_title_color_frm.grid_columnconfigure(3, weight=1)        jjo_title_color_butt = tk1.Button(jjo_title_color_frm,text="Select Title Color", command= lambda: getcolor(jjo_master,"jjocont.title_color_temp","J/Jo Title",                                                                                                                   jjo_title_color_label,jjo_title_color_frm,False))        jjo_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_title_color_label = tk1.Label(jjo_title_color_frm,text="Current\nColor:\n%s" % jjocont.title_color_temp,fg=getoppositecolor(jjocont.title_color_temp), bg=jjocont.title_color_temp,width=10)        jjo_title_color_label.grid(row=0,column=2)        disablewidgets(jjocont.show_title_var,False,[jjo_title_color_butt,jjo_title_color_label],[],[])        jjo_show_legend_frm = tk1.Frame(jjo_legend_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_legend_frm.pack(fill=tk1.X)        jjocont.show_legend_var = tk1.BooleanVar(value=jjocont.show_legend)        jjo_show_legend_chbutt = tk1.Checkbutton(jjo_show_legend_frm, text="Show Legend?", variable=jjocont.show_legend_var,command= lambda:                                              disablewidgets(jjocont.show_legend_var,False,[jjo_legend_color_butt,jjo_legend_color_label],[],[]))        jjo_show_legend_chbutt.pack(fill=tk1.X)        jjo_legend_color_frm = tk1.Frame(jjo_show_legend_frm,bd=2,relief=tk1.GROOVE)        jjo_legend_color_frm.pack(fill=tk1.X)                       jjo_legend_color_frm.grid_columnconfigure(0, weight=1)        jjo_legend_color_frm.grid_columnconfigure(3, weight=1)        jjo_legend_color_butt = tk1.Button(jjo_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(jjo_master,"jjocont.legend_color_temp","J/Jo Legend",jjo_legend_color_label,jjo_legend_color_frm,False))        jjo_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_legend_color_label = tk1.Label(jjo_legend_color_frm,text="Current\nColor:\n%s" % jjocont.legend_color_temp,fg=getoppositecolor(jjocont.legend_color_temp), bg=jjocont.legend_color_temp,width=10)        jjo_legend_color_label.grid(row=0,column=2)        disablewidgets(jjocont.show_legend_var,False,[jjo_legend_color_butt,jjo_legend_color_label],[],[])        jjo_error_settings_frm = tk1.Frame(jjo_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo_error_settings_frm.pack(fill=tk1.X)        jjo_error_settings_label = tk1.Label(jjo_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        jjo_error_settings_label.pack(fill=tk1.X)                jjo_error_radio_frm = tk1.Frame(jjo_error_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_error_radio_frm.pack(fill=tk1.X)        jjo_error_settings_label = tk1.Label(jjo_error_radio_frm, text="Select Error-Scaling for Symbols:")        jjo_error_settings_label.pack(fill=tk1.X)        jjocont.error_scaling_var = tk1.StringVar()        jjocont.error_scaling_var.set(jjocont.error_scaling)        jjo_errorscaling_radio_none = tk1.Radiobutton(jjo_error_radio_frm, text="No Error Scaling",variable=jjocont.error_scaling_var,value="None",command = lambda:              disablewidgets(jjocont.error_scaling_var,"None",[],[jjo_jdecrease_color_butt,jjo_jdecrease_color_label,jjo_jincrease_color_butt,jjo_jincrease_color_label,                                  jjocont.jdecrease_symbol_size_slider,jjocont.jincrease_symbol_size_slider,jjo_jdecrease_size_label,jjo_jincrease_size_label],[]))        jjo_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        jjo_errorscaling_radio_size = tk1.Radiobutton(jjo_error_radio_frm, text="Scale Symbol Size by Error",variable=jjocont.error_scaling_var,value="Size",command = lambda:                  disablewidgets(jjocont.error_scaling_var,"Size",[jjocont.jdecrease_symbol_size_slider,jjocont.jincrease_symbol_size_slider,jjo_jdecrease_size_label,jjo_jincrease_size_label],                                 [jjo_jdecrease_color_butt,jjo_jdecrease_color_label,jjo_jincrease_color_butt,jjo_jincrease_color_label],[]))        jjo_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        jjo_errorscaling_radio_color = tk1.Radiobutton(jjo_error_radio_frm, text="Scale Symbol Color By Error",variable=jjocont.error_scaling_var,value="Color",command = lambda:                               disablewidgets(jjocont.error_scaling_var,"Color",[jjo_jdecrease_color_butt,jjo_jdecrease_color_label,jjo_jincrease_color_butt,jjo_jincrease_color_label],                                              [jjocont.jdecrease_symbol_size_slider,jjocont.jincrease_symbol_size_slider,jjo_jdecrease_size_label,jjo_jincrease_size_label],[]))        jjo_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        jjo_col2_frm = tk1.Frame(jjo_interior,bd=2) # Column 2        jjo_col2_frm.grid(row=0,column=2,sticky='NSEW')        jjo_jdecrease_frm = tk1.Frame(jjo_col2_frm,bd=2,relief=tk1.SUNKEN)        jjo_jdecrease_frm.pack(fill=tk1.X)        jjo_jdecrease_symbol_settings_label = tk1.Label(jjo_jdecrease_frm, text="J Decrease Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo_jdecrease_symbol_settings_label.pack(fill=tk1.X)        jjo_jdecrease_symbol_frm = tk1.Frame(jjo_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jdecrease_symbol_frm.pack(fill=tk1.X)        jjo_jdecrease_symbol_frm.grid_columnconfigure(0, weight=1)        jjo_jdecrease_symbol_frm.grid_columnconfigure(3, weight=1)                  jjo_jdecrease_symbol_label = tk1.Label(jjo_jdecrease_symbol_frm, text="J Decrease Symbol:",bd=1)        jjo_jdecrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont.jdecrease_symbol_var = tk1.StringVar(jjo_interior)        jjocont.jdecrease_symbol_var.set(symbolchoices_dict_reverse[jjocont.jdecrease_symbol])         jjo_jdecrease_symbolchoices_optionmenu = tk1.OptionMenu(jjo_jdecrease_symbol_frm, jjocont.jdecrease_symbol_var, *symbolchoices_set)        jjo_jdecrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_jdecrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo_jdecrease_symbol_size_frm = tk1.Frame(jjo_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jdecrease_symbol_size_frm.pack(fill=tk1.X)        jjo_jdecrease_size_label = tk1.Label(jjo_jdecrease_symbol_size_frm, text="J Decrease Symbol Size:")        jjo_jdecrease_size_label.pack(fill=tk1.X)        jjocont.jdecrease_symbol_size_slider = Scale(jjo_jdecrease_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont.jdecrease_symbol_size_slider.set(jjocont.jdecrease_size)        jjocont.jdecrease_symbol_size_slider.pack(fill=tk1.X)        jjo_jdecrease_color_frm = tk1.Frame(jjo_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jdecrease_color_frm.pack(fill=tk1.X)        jjo_jdecrease_color_frm.grid_columnconfigure(0, weight=1)        jjo_jdecrease_color_frm.grid_columnconfigure(3, weight=1)        jjo_jdecrease_color_butt = tk1.Button(jjo_jdecrease_color_frm,text="Select J Decrease\nSymbol Color",                                              command= lambda: getcolor(jjo_master,"jjocont.jdecrease_color_temp","J Decrease Symbol",jjo_jdecrease_color_label,jjo_jdecrease_color_frm,False))        jjo_jdecrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_jdecrease_color_label = tk1.Label(jjo_jdecrease_color_frm,text="Current\nColor:\n%s" % jjocont.jdecrease_color_temp,fg=getoppositecolor(jjocont.jdecrease_color_temp), bg=jjocont.jdecrease_color_temp,width=10)        jjo_jdecrease_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_show_jdecrease_edge_frm = tk1.Frame(jjo_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo_show_jdecrease_edge_frm.pack(fill=tk1.X)        jjocont.show_jdecrease_edge_var = tk1.BooleanVar(value=jjocont.show_jdecrease_edge)        jjo_show_jdecrease_edge_chbutt = tk1.Checkbutton(jjo_show_jdecrease_edge_frm, text="Show J Decrease Symbol Border?", variable=jjocont.show_jdecrease_edge_var,command= lambda:                                              disablewidgets(jjocont.show_jdecrease_edge_var,False,[jjo_jdecrease_edge_color_butt,jjo_jdecrease_edge_color_label,jjo_jdecrease_edge_width_label,jjo_jdecrease_edge_width_optionmenu],[],[]))        jjo_show_jdecrease_edge_chbutt.pack(fill=tk1.X)        jjo_jdecrease_edge_color_frm = tk1.Frame(jjo_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jdecrease_edge_color_frm.pack(fill=tk1.X)        jjo_jdecrease_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo_jdecrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo_jdecrease_edge_color_butt = tk1.Button(jjo_jdecrease_edge_color_frm,text="Select J Decrease\nSymbol Border Color",                                                   command= lambda: getcolor(jjo_master,"jjocont.jdecrease_edge_color_temp","J Decrease Symbol Edge",jjo_jdecrease_edge_color_label,jjo_jdecrease_edge_color_frm,False))        jjo_jdecrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_jdecrease_edge_color_label = tk1.Label(jjo_jdecrease_edge_color_frm,text="Current\nColor:\n%s" % jjocont.jdecrease_edge_color_temp,fg=getoppositecolor(jjocont.jdecrease_edge_color_temp),                                                  bg=jjocont.jdecrease_edge_color_temp,width=10)        jjo_jdecrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_jdecrease_edge_width_frm = tk1.Frame(jjo_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jdecrease_edge_width_frm.pack(fill=tk1.X)        jjo_jdecrease_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo_jdecrease_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo_jdecrease_edge_width_label = tk1.Label(jjo_jdecrease_edge_width_frm, text="Intensity Decrease Symbol\nBorder Width:")        jjo_jdecrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont.jdecrease_edge_width_var = tk1.IntVar(jjo_interior)        jjocont.jdecrease_edge_width_var.set(jjocont.jdecrease_edge_width)         jjo_jdecrease_edge_width_optionmenu = tk1.OptionMenu(jjo_jdecrease_edge_width_frm, jjocont.jdecrease_edge_width_var, *linewidthchoices_set)        jjo_jdecrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_jdecrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_jdecrease_edge_var,False,[jjo_jdecrease_edge_color_butt,jjo_jdecrease_edge_color_label,jjo_jdecrease_edge_width_label,jjo_jdecrease_edge_width_optionmenu],[],[])        jjo_jincrease_frm = tk1.Frame(jjo_col2_frm,bd=2,relief=tk1.SUNKEN)        jjo_jincrease_frm.pack(fill=tk1.X)        jjo_jincrease_symbol_settings_label = tk1.Label(jjo_jincrease_frm, text="J Increase Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo_jincrease_symbol_settings_label.pack(fill=tk1.X)        jjo_jincrease_symbol_frm = tk1.Frame(jjo_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jincrease_symbol_frm.pack(fill=tk1.X)        jjo_jincrease_symbol_frm.grid_columnconfigure(0, weight=1)        jjo_jincrease_symbol_frm.grid_columnconfigure(3, weight=1)                jjo_jincrease_symbol_label = tk1.Label(jjo_jincrease_symbol_frm, text="J Increase Symbol:",bd=1)        jjo_jincrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont.jincrease_symbol_var = tk1.StringVar(jjo_interior)        jjocont.jincrease_symbol_var.set(symbolchoices_dict_reverse[jjocont.jincrease_symbol])         jjo_jincrease_symbolchoices_optionmenu = tk1.OptionMenu(jjo_jincrease_symbol_frm, jjocont.jincrease_symbol_var, *symbolchoices_set)        jjo_jincrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_jincrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo_jincrease_symbol_size_frm = tk1.Frame(jjo_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jincrease_symbol_size_frm.pack(fill=tk1.X)        jjo_jincrease_size_label = tk1.Label(jjo_jincrease_symbol_size_frm, text="J Increase Symbol Size:")        jjo_jincrease_size_label.pack(fill=tk1.X)        jjocont.jincrease_symbol_size_slider = Scale(jjo_jincrease_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont.jincrease_symbol_size_slider.set(jjocont.jincrease_size)        jjocont.jincrease_symbol_size_slider.pack(fill=tk1.X)        jjo_jincrease_color_frm = tk1.Frame(jjo_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jincrease_color_frm.pack(fill=tk1.X)        jjo_jincrease_color_frm.grid_columnconfigure(0, weight=1)        jjo_jincrease_color_frm.grid_columnconfigure(3, weight=1)        jjo_jincrease_color_butt = tk1.Button(jjo_jincrease_color_frm,text="Select J Increase\nSymbol Color",                                              command= lambda: getcolor(jjo_master,"jjocont.jincrease_color_temp","J Increase Symbol",jjo_jincrease_color_label,jjo_jincrease_color_frm,False))        jjo_jincrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_jincrease_color_label = tk1.Label(jjo_jincrease_color_frm,text="Current\nColor:\n%s" % jjocont.jincrease_color_temp,fg=getoppositecolor(jjocont.jincrease_color_temp), bg=jjocont.jincrease_color_temp,width=10)        jjo_jincrease_color_label.grid(row=0, column=2,sticky='NSEW')                jjo_show_jincrease_edge_frm = tk1.Frame(jjo_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo_show_jincrease_edge_frm.pack(fill=tk1.X)        jjocont.show_jincrease_edge_var = tk1.BooleanVar(value=jjocont.show_jincrease_edge)        jjo_show_jincrease_edge_chbutt = tk1.Checkbutton(jjo_show_jincrease_edge_frm, text="Show J Increase Symbol Border?", variable=jjocont.show_jincrease_edge_var,command= lambda:                                              disablewidgets(jjocont.show_jincrease_edge_var,False,[jjo_jincrease_edge_color_butt,jjo_jincrease_edge_color_label,jjo_jincrease_edge_width_label,jjo_jincrease_edge_width_optionmenu],[],[]))        jjo_show_jincrease_edge_chbutt.pack(fill=tk1.X)        jjo_jincrease_edge_color_frm = tk1.Frame(jjo_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jincrease_edge_color_frm.pack(fill=tk1.X)        jjo_jincrease_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo_jincrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo_jincrease_edge_color_butt = tk1.Button(jjo_jincrease_edge_color_frm,text="Select J Increase\nSymbol Border Color",                                                   command= lambda: getcolor(jjo_master,"jjocont.jincrease_edge_color_temp","J Increase Symbol Edge",jjo_jincrease_edge_color_label,jjo_jincrease_edge_color_frm,False))        jjo_jincrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_jincrease_edge_color_label = tk1.Label(jjo_jincrease_edge_color_frm,text="Current\nColor:\n%s" % jjocont.jincrease_edge_color_temp,fg=getoppositecolor(jjocont.jincrease_edge_color_temp), bg=jjocont.jincrease_edge_color_temp,width=10)        jjo_jincrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_jincrease_edge_width_frm = tk1.Frame(jjo_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo_jincrease_edge_width_frm.pack(fill=tk1.X)        jjo_jincrease_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo_jincrease_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo_jincrease_edge_width_label = tk1.Label(jjo_jincrease_edge_width_frm, text="Intensity Increase Symbol\nBorder Width:")        jjo_jincrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont.jincrease_edge_width_var = tk1.IntVar(jjo_interior)        jjocont.jincrease_edge_width_var.set(jjocont.jincrease_edge_width)         jjo_jincrease_edge_width_optionmenu = tk1.OptionMenu(jjo_jincrease_edge_width_frm, jjocont.jincrease_edge_width_var, *linewidthchoices_set)        jjo_jincrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_jincrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_jincrease_edge_var,False,[jjo_jincrease_edge_color_butt,jjo_jincrease_edge_color_label,jjo_jincrease_edge_width_label,jjo_jincrease_edge_width_optionmenu],[],[])         disablewidgets(jjocont.error_scaling_var,"None",[],[jjo_jdecrease_color_butt,jjo_jdecrease_color_label,jjo_jincrease_color_butt,jjo_jincrease_color_label,                        jjocont.jdecrease_symbol_size_slider,jjocont.jincrease_symbol_size_slider,jjo_jdecrease_size_label,jjo_jincrease_size_label],[])        disablewidgets(jjocont.error_scaling_var,"Size",[jjocont.jdecrease_symbol_size_slider,jjocont.jincrease_symbol_size_slider,jjo_jdecrease_size_label,jjo_jincrease_size_label],                       [jjo_jdecrease_color_butt,jjo_jdecrease_color_label,jjo_jincrease_color_butt,jjo_jincrease_color_label],[])        disablewidgets(jjocont.error_scaling_var,"Color",[jjo_jdecrease_color_butt,jjo_jdecrease_color_label,jjo_jincrease_color_butt,jjo_jincrease_color_label],                       [jjocont.jdecrease_symbol_size_slider,jjocont.jincrease_symbol_size_slider,jjo_jdecrease_size_label,jjo_jincrease_size_label],[])        jjo_col3_frm = tk1.Frame(jjo_interior,bd=2) # Column 3        jjo_col3_frm.grid(row=0,column=3,sticky='NSEW')        jjo_firststep_frm = tk1.Frame(jjo_col3_frm,bd=2,relief=tk1.SUNKEN)        jjo_firststep_frm.pack(fill=tk1.X)        jjo_firststep_symbol_settings_label = tk1.Label(jjo_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo_firststep_symbol_settings_label.pack(fill=tk1.X)        jjo_show_firststep_frm = tk1.Frame(jjo_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo_show_firststep_frm.pack(fill=tk1.X)        jjocont.show_firststep_var = tk1.BooleanVar(value=jjocont.show_firststep)        jjo_show_firststep_chbutt = tk1.Checkbutton(jjo_show_firststep_frm, text="Show First Step Special Symbol?", variable=jjocont.show_firststep_var,command= lambda:                                              disablewidgets(jjocont.show_firststep_var,False,[jjo_firststep_symbol_label,jjo_firststep_symbolchoices_optionmenu,jjo_firststep_size_label,jjocont.firststep_symbol_size_slider,                                                                                             jjo_firststep_color_butt,jjo_firststep_color_label,jjo_show_firststep_edge_chbutt,jjo_firststep_edge_color_butt,jjo_firststep_edge_color_label,                                                                                             jjo_firststep_edge_width_label,jjo_firststep_edge_width_optionmenu],[],                                                             [[jjocont.show_firststep_edge_var,[False],[jjo_firststep_edge_color_butt,jjo_firststep_edge_color_label,jjo_firststep_edge_width_label,jjo_firststep_edge_width_optionmenu]]]))        jjo_show_firststep_chbutt.pack(fill=tk1.X)        jjo_firststep_symbol_frm = tk1.Frame(jjo_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo_firststep_symbol_frm.pack(fill=tk1.X)        jjo_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        jjo_firststep_symbol_frm.grid_columnconfigure(3, weight=1)                  jjo_firststep_symbol_label = tk1.Label(jjo_firststep_symbol_frm, text="First Step Symbol:",bd=1)        jjo_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont.firststep_symbol_var = tk1.StringVar(jjo_interior)        jjocont.firststep_symbol_var.set(symbolchoices_dict_reverse[jjocont.firststep_symbol])         jjo_firststep_symbolchoices_optionmenu = tk1.OptionMenu(jjo_firststep_symbol_frm, jjocont.firststep_symbol_var, *symbolchoices_set)        jjo_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo_firststep_size_frm = tk1.Frame(jjo_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo_firststep_size_frm.pack(fill=tk1.X)        jjo_firststep_size_label = tk1.Label(jjo_firststep_size_frm, text="First Step Symbol Size:")        jjo_firststep_size_label.pack(fill=tk1.X)        jjocont.firststep_symbol_size_slider = Scale(jjo_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont.firststep_symbol_size_slider.set(jjocont.firststep_size)        jjocont.firststep_symbol_size_slider.pack(fill=tk1.X)        jjo_firststep_color_frm = tk1.Frame(jjo_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo_firststep_color_frm.pack(fill=tk1.X)        jjo_firststep_color_frm.grid_columnconfigure(0, weight=1)        jjo_firststep_color_frm.grid_columnconfigure(3, weight=1)                        jjo_firststep_color_butt = tk1.Button(jjo_firststep_color_frm,text="Select First Step\nSymbol Color",                                              command= lambda: getcolor(jjo_master,"jjocont.firststep_color_temp","J/Jo First Step Symbol",jjo_firststep_color_label,jjo_firststep_color_frm,False))        jjo_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_firststep_color_label = tk1.Label(jjo_firststep_color_frm,text="Current\nColor:\n%s" % jjocont.firststep_color_temp,fg=getoppositecolor(jjocont.firststep_color_temp), bg=jjocont.firststep_color_temp,width=10)        jjo_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_show_firststep_edge_frm = tk1.Frame(jjo_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo_show_firststep_edge_frm.pack(fill=tk1.X)        jjocont.show_firststep_edge_var = tk1.BooleanVar(value=jjocont.show_firststep_edge)        jjo_show_firststep_edge_chbutt = tk1.Checkbutton(jjo_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=jjocont.show_firststep_edge_var,command= lambda:                                              disablewidgets(jjocont.show_firststep_edge_var,False,[jjo_firststep_edge_color_butt,jjo_firststep_edge_color_label,jjo_firststep_edge_width_label,jjo_firststep_edge_width_optionmenu],[],[]))        jjo_show_firststep_edge_chbutt.pack(fill=tk1.X)                jjo_firststep_edge_color_frm = tk1.Frame(jjo_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo_firststep_edge_color_frm.pack(fill=tk1.X)        jjo_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo_firststep_edge_color_butt = tk1.Button(jjo_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color",                                                   command= lambda: getcolor(jjo_master,"jjocont.firststep_edge_color_temp","J/Jo First Step Symbol Edge",jjo_firststep_edge_color_label,jjo_firststep_edge_color_frm,False))        jjo_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_firststep_edge_color_label = tk1.Label(jjo_firststep_edge_color_frm,text="Current\nColor:\n%s" % jjocont.firststep_edge_color_temp,fg=getoppositecolor(jjocont.firststep_edge_color_temp), bg=jjocont.firststep_edge_color_temp,width=10)        jjo_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_firststep_edge_width_frm = tk1.Frame(jjo_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo_firststep_edge_width_frm.pack(fill=tk1.X)        jjo_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo_firststep_edge_width_label = tk1.Label(jjo_firststep_edge_width_frm, text="First Step Symbol\nBorder Width:")        jjo_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont.firststep_edge_width_var = tk1.IntVar(jjo_interior)        jjocont.firststep_edge_width_var.set(jjocont.firststep_edge_width)         jjo_firststep_edge_width_optionmenu = tk1.OptionMenu(jjo_firststep_edge_width_frm, jjocont.firststep_edge_width_var, *linewidthchoices_set)        jjo_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_firststep_edge_var,False,[jjo_firststep_edge_color_butt,jjo_firststep_edge_color_label,jjo_firststep_edge_width_label,jjo_firststep_edge_width_optionmenu],[],[])        disablewidgets(jjocont.show_firststep_var,False,[jjo_firststep_symbol_label,jjo_firststep_symbolchoices_optionmenu,jjo_firststep_size_label,jjocont.firststep_symbol_size_slider,jjo_firststep_color_butt,jjo_firststep_color_label,                                                       jjo_show_firststep_edge_chbutt,jjo_firststep_edge_color_butt,jjo_firststep_edge_color_label,jjo_firststep_edge_width_label,jjo_firststep_edge_width_optionmenu],[],                                                   [[jjocont.show_firststep_edge_var,[False],[jjo_firststep_edge_color_butt,jjo_firststep_edge_color_label,jjo_firststep_edge_width_label,jjo_firststep_edge_width_optionmenu]]])        jjo_laststep_frm = tk1.Frame(jjo_col3_frm,bd=2,relief=tk1.SUNKEN)        jjo_laststep_frm.pack(fill=tk1.X)        jjo_laststep_symbol_settings_label = tk1.Label(jjo_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo_laststep_symbol_settings_label.pack(fill=tk1.X)        jjo_show_laststep_frm = tk1.Frame(jjo_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo_show_laststep_frm.pack(fill=tk1.X)        jjocont.show_laststep_var = tk1.BooleanVar(value=jjocont.show_laststep)        jjo_show_laststep_chbutt = tk1.Checkbutton(jjo_show_laststep_frm, text="Show Last Step Special Symbol?", variable=jjocont.show_laststep_var,command= lambda:                                              disablewidgets(jjocont.show_laststep_var,False,[jjo_laststep_symbol_label,jjo_laststep_symbolchoices_optionmenu,jjo_laststep_size_label,jjocont.laststep_symbol_size_slider,                                                                                             jjo_laststep_color_butt,jjo_laststep_color_label,jjo_show_laststep_edge_chbutt,jjo_laststep_edge_color_butt,jjo_laststep_edge_color_label,                                                                                             jjo_laststep_edge_width_label,jjo_laststep_edge_width_optionmenu],[],                                                             [[jjocont.show_laststep_edge_var,[False],[jjo_laststep_edge_color_butt,jjo_laststep_edge_color_label,jjo_laststep_edge_width_label,jjo_laststep_edge_width_optionmenu]]]))        jjo_show_laststep_chbutt.pack(fill=tk1.X)        jjo_laststep_symbol_frm = tk1.Frame(jjo_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo_laststep_symbol_frm.pack(fill=tk1.X)        jjo_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        jjo_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  jjo_laststep_symbol_label = tk1.Label(jjo_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        jjo_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont.laststep_symbol_var = tk1.StringVar(jjo_interior)        jjocont.laststep_symbol_var.set(symbolchoices_dict_reverse[jjocont.laststep_symbol])         jjo_laststep_symbolchoices_optionmenu = tk1.OptionMenu(jjo_laststep_symbol_frm, jjocont.laststep_symbol_var, *symbolchoices_set)        jjo_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo_laststep_size_frm = tk1.Frame(jjo_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo_laststep_size_frm.pack(fill=tk1.X)        jjo_laststep_size_label = tk1.Label(jjo_laststep_size_frm, text="Last Step Symbol Size:")        jjo_laststep_size_label.pack(fill=tk1.X)        jjocont.laststep_symbol_size_slider = Scale(jjo_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont.laststep_symbol_size_slider.set(jjocont.laststep_size)        jjocont.laststep_symbol_size_slider.pack(fill=tk1.X)        jjo_laststep_color_frm = tk1.Frame(jjo_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo_laststep_color_frm.pack(fill=tk1.X)        jjo_laststep_color_frm.grid_columnconfigure(0, weight=1)        jjo_laststep_color_frm.grid_columnconfigure(3, weight=1)                        jjo_laststep_color_butt = tk1.Button(jjo_laststep_color_frm,text="Select Last Step\nSymbol Color",                                             command= lambda: getcolor(jjo_master,"jjocont.laststep_color_temp","J/Jo Last Step Symbol",jjo_laststep_color_label,jjo_laststep_color_frm,False))        jjo_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_laststep_color_label = tk1.Label(jjo_laststep_color_frm,text="Current\nColor:\n%s" % jjocont.laststep_color_temp,fg=getoppositecolor(jjocont.laststep_color_temp), bg=jjocont.laststep_color_temp,width=10)        jjo_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_show_laststep_edge_frm = tk1.Frame(jjo_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo_show_laststep_edge_frm.pack(fill=tk1.X)        jjocont.show_laststep_edge_var = tk1.BooleanVar(value=jjocont.show_laststep_edge)        jjo_show_laststep_edge_chbutt = tk1.Checkbutton(jjo_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=jjocont.show_laststep_edge_var,command= lambda:                                              disablewidgets(jjocont.show_laststep_edge_var,False,[jjo_laststep_edge_color_butt,jjo_laststep_edge_color_label,jjo_laststep_edge_width_label,jjo_laststep_edge_width_optionmenu],[],[]))        jjo_show_laststep_edge_chbutt.pack(fill=tk1.X)        jjo_laststep_edge_color_frm = tk1.Frame(jjo_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo_laststep_edge_color_frm.pack(fill=tk1.X)        jjo_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)                       jjo_laststep_edge_color_butt = tk1.Button(jjo_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color",                                                  command= lambda: getcolor(jjo_master,"jjocont.laststep_edge_color_temp","J/Jo Last Step Symbol Edge",jjo_laststep_edge_color_label,jjo_laststep_edge_color_frm,False))        jjo_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_laststep_edge_color_label = tk1.Label(jjo_laststep_edge_color_frm,text="Current\nColor:\n%s" % jjocont.laststep_edge_color_temp,fg=getoppositecolor(jjocont.laststep_edge_color_temp), bg=jjocont.laststep_edge_color_temp,width=10)        jjo_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_laststep_edge_width_frm = tk1.Frame(jjo_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo_laststep_edge_width_frm.pack(fill=tk1.X)        jjo_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo_laststep_edge_width_label = tk1.Label(jjo_laststep_edge_width_frm, text="Last Step Symbol\nBorder Width:")        jjo_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont.laststep_edge_width_var = tk1.IntVar(jjo_interior)        jjocont.laststep_edge_width_var.set(jjocont.laststep_edge_width)         jjo_laststep_edge_width_optionmenu = tk1.OptionMenu(jjo_laststep_edge_width_frm, jjocont.laststep_edge_width_var, *linewidthchoices_set)        jjo_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_laststep_edge_var,False,[jjo_laststep_edge_color_butt,jjo_laststep_edge_color_label,jjo_laststep_edge_width_label,jjo_laststep_edge_width_optionmenu],[],[])        disablewidgets(jjocont.show_laststep_var,False,[jjo_laststep_symbol_label,jjo_laststep_symbolchoices_optionmenu,jjo_laststep_size_label,jjocont.laststep_symbol_size_slider,                                                      jjo_laststep_color_butt,jjo_laststep_color_label,jjo_show_laststep_edge_chbutt,jjo_laststep_edge_color_butt,jjo_laststep_edge_color_label,                                                        jjo_laststep_edge_width_label,jjo_laststep_edge_width_optionmenu],[],                       [[jjocont.show_laststep_edge_var,[False],[jjo_laststep_edge_color_butt,jjo_laststep_edge_color_label,jjo_laststep_edge_width_label,jjo_laststep_edge_width_optionmenu]]])                jjo_col4_frm = tk1.Frame(jjo_interior,bd=2) # Column 4        jjo_col4_frm.grid(row=0,column=4,sticky='NSEW')        jjo_axesspecs_frm = tk1.Frame(jjo_col4_frm,bd=2,relief=tk1.SUNKEN)        jjo_axesspecs_frm.pack(fill=tk1.X)        jjo_axesspecs_label = tk1.Label(jjo_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        jjo_axesspecs_label.pack(fill=tk1.X)        jjo_axes_color_frm = tk1.Frame(jjo_axesspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_axes_color_frm.pack(fill=tk1.X)        jjo_axes_color_frm.grid_columnconfigure(0, weight=1)        jjo_axes_color_frm.grid_columnconfigure(3, weight=1)                        jjo_axes_color_butt = tk1.Button(jjo_axes_color_frm,text="Select Axes Color",                                         command= lambda: getcolor(jjo_master,"jjocont.axes_color_temp","J/Jo Axes",jjo_axes_color_label,jjo_axes_color_frm,False))        jjo_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_axes_color_label = tk1.Label(jjo_axes_color_frm,text="Current\nColor:\n%s" % jjocont.axes_color_temp,fg=getoppositecolor(jjocont.axes_color_temp), bg=jjocont.axes_color_temp,width=10)        jjo_axes_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_axes_width_frm = tk1.Frame(jjo_axesspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_axes_width_frm.pack(fill=tk1.X)        jjo_axes_width_frm.grid_columnconfigure(0, weight=1)        jjo_axes_width_frm.grid_columnconfigure(3, weight=1)        jjo_axes_width_label = tk1.Label(jjo_axes_width_frm, text="Axes Width:")        jjo_axes_width_label.grid(row=0,column=1,sticky='NESW')                jjocont.axes_width_var = tk1.IntVar(jjo_interior)        jjocont.axes_width_var.set(jjocont.axes_width)         jjo_axes_width_optionmenu = tk1.OptionMenu(jjo_axes_width_frm, jjocont.axes_width_var, *linewidthchoices_set)        jjo_axes_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_axes_width_optionmenu.configure(font=('Consolas',10))        jjo_x_axisspecs_frm = tk1.Frame(jjo_col4_frm,bd=2,relief=tk1.SUNKEN)        jjo_x_axisspecs_frm.pack(fill=tk1.X)        jjo_x_axisspecs_label = tk1.Label(jjo_x_axisspecs_frm, text="X Axis Settings:",font="Helvetica 10 bold")        jjo_x_axisspecs_label.pack(fill=tk1.X)        jjo_show_xticks_labels_frm = tk1.Frame(jjo_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_show_xticks_labels_frm.pack(fill=tk1.X)        jjocont.show_xaxis_ticks_var = tk1.BooleanVar(value=jjocont.show_xaxis_ticks)        jjo_show_xaxis_ticks_chbutt = tk1.Checkbutton(jjo_show_xticks_labels_frm, text="Show X Axis Ticks / Step Labels?", variable=jjocont.show_xaxis_ticks_var,command= lambda:                                              disablewidgets(jjocont.show_xaxis_ticks_var,False,[jjo_xaxis_steplabels_tick_color_butt,jjo_xaxis_steplabels_tick_color_label,jjo_show_xaxis_labels_chbutt,jjo_xaxis_steplabel_fontsize_label,                                                                                                  jjo_xaxis_steplabel_fontsize_optionmenu,jjo_xaxis_tick_width_label,jjo_xaxis_tick_width_optionmenu,jjo_xaxis_tick_length_label,                                                                                                 jjo_xaxis_tick_length_optionmenu],[],                                                             [[jjocont.show_xaxis_steplabels_var,[False],[jjo_xaxis_steplabel_fontsize_label,jjo_xaxis_steplabel_fontsize_optionmenu]]]))        jjo_show_xaxis_ticks_chbutt.pack(fill=tk1.X)        jjo_xaxis_steplabels_tick_color_frm = tk1.Frame(jjo_show_xticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo_xaxis_steplabels_tick_color_frm.pack(fill=tk1.X)        jjo_xaxis_steplabels_tick_color_frm.grid_columnconfigure(0, weight=1)        jjo_xaxis_steplabels_tick_color_frm.grid_columnconfigure(3, weight=1)                        jjo_xaxis_steplabels_tick_color_butt = tk1.Button(jjo_xaxis_steplabels_tick_color_frm,text="Select X Axis Tick\n(& Step Label) Color",                                                          command=lambda: getcolor(jjo_master,"jjocont.xaxis_steplabels_tick_color_temp","J/Jo X Axis Tick & Label",                                                                                   jjo_xaxis_steplabels_tick_color_label,jjo_xaxis_steplabels_tick_color_frm,False))        jjo_xaxis_steplabels_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_xaxis_steplabels_tick_color_label = tk1.Label(jjo_xaxis_steplabels_tick_color_frm,text="Current\nColor:\n%s" % jjocont.xaxis_steplabels_tick_color_temp,                                                         fg=getoppositecolor(jjocont.xaxis_steplabels_tick_color_temp), bg=jjocont.xaxis_steplabels_tick_color_temp,width=10)        jjo_xaxis_steplabels_tick_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_xaxis_tick_width_frm = tk1.Frame(jjo_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_xaxis_tick_width_frm.pack(fill=tk1.X)        jjo_xaxis_tick_width_frm.grid_columnconfigure(0, weight=1)        jjo_xaxis_tick_width_frm.grid_columnconfigure(3, weight=1)        jjo_xaxis_tick_width_label = tk1.Label(jjo_xaxis_tick_width_frm, text="X Axis Tick Width:")        jjo_xaxis_tick_width_label.grid(row=0,column=1,sticky='NESW')                jjocont.xaxis_tick_width_var = tk1.IntVar(jjo_interior)        jjocont.xaxis_tick_width_var.set(jjocont.xaxis_tick_width)         jjo_xaxis_tick_width_optionmenu = tk1.OptionMenu(jjo_xaxis_tick_width_frm, jjocont.xaxis_tick_width_var, *linewidthchoices_set)        jjo_xaxis_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_xaxis_tick_width_optionmenu.configure(font=('Consolas',10))        jjo_xaxis_tick_length_frm = tk1.Frame(jjo_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_xaxis_tick_length_frm.pack(fill=tk1.X)        jjo_xaxis_tick_length_frm.grid_columnconfigure(0, weight=1)        jjo_xaxis_tick_length_frm.grid_columnconfigure(3, weight=1)        jjo_xaxis_tick_length_label = tk1.Label(jjo_xaxis_tick_length_frm, text="X Axis Tick Length:")        jjo_xaxis_tick_length_label.grid(row=0,column=1,sticky='NESW')                jjocont.xaxis_tick_length_var = tk1.IntVar(jjo_interior)        jjocont.xaxis_tick_length_var.set(jjocont.xaxis_tick_length)         jjo_xaxis_tick_length_optionmenu = tk1.OptionMenu(jjo_xaxis_tick_length_frm, jjocont.xaxis_tick_length_var, *linelengthchoices_set)        jjo_xaxis_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_xaxis_tick_length_optionmenu.configure(font=('Consolas',10))        jjo_xaxis_steplabel_settings_frm = tk1.Frame(jjo_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_xaxis_steplabel_settings_frm.pack(fill=tk1.X)        jjocont.show_xaxis_steplabels_var = tk1.BooleanVar(value=jjocont.show_xaxis_steplabels)        jjo_show_xaxis_labels_chbutt = tk1.Checkbutton(jjo_xaxis_steplabel_settings_frm, text="Show X Axis Step Labels?", variable=jjocont.show_xaxis_steplabels_var,command= lambda:                                              disablewidgets(jjocont.show_xaxis_steplabels_var,False,[jjo_xaxis_steplabel_fontsize_label,jjo_xaxis_steplabel_fontsize_optionmenu],[],[]))        jjo_show_xaxis_labels_chbutt.pack(fill=tk1.X)        jjo_xaxis_steplabel_fontsize_frm = tk1.Frame(jjo_xaxis_steplabel_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_xaxis_steplabel_fontsize_frm.pack(fill=tk1.X)        jjo_xaxis_steplabel_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo_xaxis_steplabel_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo_xaxis_steplabel_fontsize_label = tk1.Label(jjo_xaxis_steplabel_fontsize_frm, text="X Axis Step Label Font Size:",bd=1)        jjo_xaxis_steplabel_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont.xaxis_steplabel_fontsize_mod_var = tk1.StringVar(jjo_interior)        jjocont.xaxis_steplabel_fontsize_mod_var.set(jjocont.xaxis_steplabel_fontsize_mod)         jjo_xaxis_steplabel_fontsize_optionmenu = tk1.OptionMenu(jjo_xaxis_steplabel_fontsize_frm, jjocont.xaxis_steplabel_fontsize_mod_var, *fontsizes_set)        jjo_xaxis_steplabel_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo_xaxis_steplabel_fontsize_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_xaxis_ticks_var,False,[jjo_xaxis_steplabels_tick_color_butt,jjo_xaxis_steplabels_tick_color_label,jjo_show_xaxis_labels_chbutt,jjo_xaxis_steplabel_fontsize_label,jjo_xaxis_steplabel_fontsize_optionmenu,                                                         jjo_xaxis_tick_width_label,jjo_xaxis_tick_width_optionmenu,jjo_xaxis_tick_length_label,jjo_xaxis_tick_length_optionmenu],[],                       [[jjocont.show_xaxis_steplabels_var,[False],[jjo_xaxis_steplabel_fontsize_label,jjo_xaxis_steplabel_fontsize_optionmenu]]])        disablewidgets(jjocont.show_xaxis_steplabels_var,False,[jjo_xaxis_steplabel_fontsize_label,jjo_xaxis_steplabel_fontsize_optionmenu],[],[])        jjo_show_xaxis_stepboundaries_frm = tk1.Frame(jjo_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_show_xaxis_stepboundaries_frm.pack(fill=tk1.X)        jjocont.show_xaxis_stepboundaries_var = tk1.BooleanVar(value=jjocont.show_xaxis_stepboundaries)        jjo_show_xaxis_stepboundaries_chbutt = tk1.Checkbutton(jjo_show_xaxis_stepboundaries_frm, text="Show X Axis Boundary Labels?", variable=jjocont.show_xaxis_stepboundaries_var,command= lambda:                                              disablewidgets(jjocont.show_xaxis_stepboundaries_var,False,[jjo_xaxis_stepboundaries_color_butt,                                                                                                          jjo_xaxis_stepboundaries_color_label, jjo_xaxis_stepboundaries_fontsize_label, jjo_xaxis_stepboundaries_fontsize_optionmenu],[],[]))        jjo_show_xaxis_stepboundaries_chbutt.pack(fill=tk1.X)        jjo_xaxis_stepboundaries_color_frm = tk1.Frame(jjo_show_xaxis_stepboundaries_frm,bd=2,relief=tk1.GROOVE)        jjo_xaxis_stepboundaries_color_frm.pack(fill=tk1.X)        jjo_xaxis_stepboundaries_color_frm.grid_columnconfigure(0, weight=1)        jjo_xaxis_stepboundaries_color_frm.grid_columnconfigure(3, weight=1)                        jjo_xaxis_stepboundaries_color_butt = tk1.Button(jjo_xaxis_stepboundaries_color_frm,text="Select X Axis Step Type\nBoundary Labels Color",                                                         command=lambda: getcolor(jjo_master,"jjocont.xaxis_stepboundaries_color_temp","J/Jo X Axis Step Type Boundary Labels",                                                                                  jjo_xaxis_stepboundaries_color_label, jjo_xaxis_stepboundaries_color_frm,False))        jjo_xaxis_stepboundaries_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_xaxis_stepboundaries_color_label = tk1.Label(jjo_xaxis_stepboundaries_color_frm,text="Current\nColor:\n%s" % jjocont.xaxis_steplabels_tick_color_temp,                                                         fg=getoppositecolor(jjocont.xaxis_stepboundaries_color_temp), bg= jjocont.xaxis_stepboundaries_color_temp,width=10)        jjo_xaxis_stepboundaries_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_xaxis_stepboundaries_fontsize_frm = tk1.Frame(jjo_show_xaxis_stepboundaries_frm,bd=2,relief=tk1.GROOVE)        jjo_xaxis_stepboundaries_fontsize_frm.pack(fill=tk1.X)        jjo_xaxis_stepboundaries_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo_xaxis_stepboundaries_fontsize_frm.grid_columnconfigure(3, weight=1)                   jjo_xaxis_stepboundaries_fontsize_label = tk1.Label(jjo_xaxis_stepboundaries_fontsize_frm, text="X Axis Step Boundary Labels\nFont Size:",bd=1)        jjo_xaxis_stepboundaries_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont.xaxis_stepboundaries_fontsize_mod_var = tk1.StringVar(jjo_interior)        jjocont.xaxis_stepboundaries_fontsize_mod_var.set(jjocont.xaxis_stepboundaries_fontsize_mod)         jjo_xaxis_stepboundaries_fontsize_optionmenu = tk1.OptionMenu(jjo_xaxis_stepboundaries_fontsize_frm, jjocont.xaxis_stepboundaries_fontsize_mod_var, *fontsizes_set)        jjo_xaxis_stepboundaries_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo_xaxis_stepboundaries_fontsize_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_xaxis_stepboundaries_var,False,[jjo_xaxis_stepboundaries_color_butt, jjo_xaxis_stepboundaries_color_label, jjo_xaxis_stepboundaries_fontsize_optionmenu],[],[])        disablewidgets(jjocont.show_xaxis_stepboundaries_var,False,[jjo_xaxis_stepboundaries_color_butt,jjo_xaxis_stepboundaries_color_label, jjo_xaxis_stepboundaries_fontsize_label, jjo_xaxis_stepboundaries_fontsize_optionmenu],[],[])        jjo_y_axisspecs_frm = tk1.Frame(jjo_col4_frm,bd=2,relief=tk1.SUNKEN)        jjo_y_axisspecs_frm.pack(fill=tk1.X)        jjo_y_axisspecs_label = tk1.Label(jjo_y_axisspecs_frm, text="Y Axis Settings:",font="Helvetica 10 bold")        jjo_y_axisspecs_label.pack(fill=tk1.X)        jjo_show_yticks_labels_frm = tk1.Frame(jjo_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_show_yticks_labels_frm.pack(fill=tk1.X)        jjocont.show_yaxis_ticks_var = tk1.BooleanVar(value=jjocont.show_yaxis_ticks)        jjo_show_yaxis_ticks_chbutt = tk1.Checkbutton(jjo_show_yticks_labels_frm, text="Show Y Axis Ticks / Labels?", variable=jjocont.show_yaxis_ticks_var,command= lambda:                                                      disablewidgets(jjocont.show_yaxis_ticks_var,False,[jjo_yaxis_labels_tick_color_butt,jjo_yaxis_labels_tick_color_label,jjo_yaxis_label_fontsize_label,jjo_yaxis_label_fontsize_optionmenu,jjo_show_yaxis_percentlabel_chbutt,                                                                   jjo_show_yaxis_abslabel_chbutt,jjo_yaxis_tick_width_label,jjo_yaxis_tick_width_optionmenu,jjo_yaxis_tick_length_label,jjo_yaxis_tick_length_optionmenu,jjo_show_yunits_chbutt,jjo_yunits_label,jjo_yunits_optionmenu],[],                                                               [[jjocont.show_yaxis_abslabel_var,[False],[jjo_show_yunits_chbutt,jjo_yunits_label,jjo_yunits_optionmenu]],[jjocont.show_yunits_var,[False],[jjo_yunits_label,jjo_yunits_optionmenu]]]))        jjo_show_yaxis_ticks_chbutt.pack(fill=tk1.X)        jjo_yaxis_labels_tick_color_frm = tk1.Frame(jjo_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo_yaxis_labels_tick_color_frm.pack(fill=tk1.X)        jjo_yaxis_labels_tick_color_frm.grid_columnconfigure(0, weight=1)        jjo_yaxis_labels_tick_color_frm.grid_columnconfigure(3, weight=1)                        jjo_yaxis_labels_tick_color_butt = tk1.Button(jjo_yaxis_labels_tick_color_frm,text="Select Y Axis Tick\n(& Step Label) Color",                                                      command=lambda: getcolor(jjo_master,"jjocont.yaxis_labels_tick_color_temp","J/Jo Y Axis Tick & Label",jjo_yaxis_labels_tick_color_label,jjo_yaxis_labels_tick_color_frm,False))        jjo_yaxis_labels_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_yaxis_labels_tick_color_label = tk1.Label(jjo_yaxis_labels_tick_color_frm,text="Current\nColor:\n%s" % jjocont.yaxis_labels_tick_color_temp,                                                         fg=getoppositecolor(jjocont.yaxis_labels_tick_color_temp), bg=jjocont.yaxis_labels_tick_color_temp,width=10)        jjo_yaxis_labels_tick_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_yaxis_tick_width_frm = tk1.Frame(jjo_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo_yaxis_tick_width_frm.pack(fill=tk1.X)        jjo_yaxis_tick_width_frm.grid_columnconfigure(0, weight=1)        jjo_yaxis_tick_width_frm.grid_columnconfigure(3, weight=1)        jjo_yaxis_tick_width_label = tk1.Label(jjo_yaxis_tick_width_frm, text="Y Axis Tick Width:")        jjo_yaxis_tick_width_label.grid(row=0,column=1,sticky='NESW')                jjocont.yaxis_tick_width_var = tk1.IntVar(jjo_interior)        jjocont.yaxis_tick_width_var.set(jjocont.yaxis_tick_width)                jjo_yaxis_tick_width_optionmenu = tk1.OptionMenu(jjo_yaxis_tick_width_frm, jjocont.yaxis_tick_width_var, *linewidthchoices_set)        jjo_yaxis_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_yaxis_tick_width_optionmenu.configure(font=('Consolas',10))        jjo_yaxis_tick_length_frm = tk1.Frame(jjo_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo_yaxis_tick_length_frm.pack(fill=tk1.X)        jjo_yaxis_tick_length_frm.grid_columnconfigure(0, weight=1)        jjo_yaxis_tick_length_frm.grid_columnconfigure(3, weight=1)        jjo_yaxis_tick_length_label = tk1.Label(jjo_yaxis_tick_length_frm, text="Y Axis Tick Length:")        jjo_yaxis_tick_length_label.grid(row=0,column=1,sticky='NESW')                jjocont.yaxis_tick_length_var = tk1.IntVar(jjo_interior)        jjocont.yaxis_tick_length_var.set(jjocont.yaxis_tick_length)         jjo_yaxis_tick_length_optionmenu = tk1.OptionMenu(jjo_yaxis_tick_length_frm, jjocont.yaxis_tick_length_var, *linelengthchoices_set)        jjo_yaxis_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_yaxis_tick_length_optionmenu.configure(font=('Consolas',10))        jjo_yaxis_label_fontsize_frm = tk1.Frame(jjo_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo_yaxis_label_fontsize_frm.pack(fill=tk1.X)        jjo_yaxis_label_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo_yaxis_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo_yaxis_label_fontsize_label = tk1.Label(jjo_yaxis_label_fontsize_frm, text="Y Axis Label Font Size:",bd=1)        jjo_yaxis_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont.yaxis_label_fontsize_mod_var = tk1.StringVar(jjo_interior)        jjocont.yaxis_label_fontsize_mod_var.set(jjocont.yaxis_label_fontsize_mod)         jjo_yaxis_label_fontsize_optionmenu = tk1.OptionMenu(jjo_yaxis_label_fontsize_frm, jjocont.yaxis_label_fontsize_mod_var, *fontsizes_set)        jjo_yaxis_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo_yaxis_label_fontsize_optionmenu.configure(font=('Consolas',10))                jjo_show_yaxis_percentlabel_frm = tk1.Frame(jjo_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_show_yaxis_percentlabel_frm.pack(fill=tk1.X)        jjocont.show_yaxis_percentlabel_var = tk1.BooleanVar(value=jjocont.show_yaxis_percentlabel)        jjo_show_yaxis_percentlabel_chbutt = tk1.Checkbutton(jjo_show_yaxis_percentlabel_frm, text="Show Y Axis Percent Labels?", variable=jjocont.show_yaxis_percentlabel_var)        jjo_show_yaxis_percentlabel_chbutt.pack(fill=tk1.X)        jjo_show_yaxis_abslabel_frm = tk1.Frame(jjo_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_show_yaxis_abslabel_frm.pack(fill=tk1.X)        jjocont.show_yaxis_abslabel_var = tk1.BooleanVar(value=jjocont.show_yaxis_abslabel)        jjo_show_yaxis_abslabel_chbutt = tk1.Checkbutton(jjo_show_yaxis_abslabel_frm, text="Show Y Axis Absolute J Values?", variable=jjocont.show_yaxis_abslabel_var,command= lambda:                                              disablewidgets(jjocont.show_yaxis_abslabel_var,False,[jjo_show_yunits_chbutt,jjo_yunits_label,jjo_yunits_optionmenu],[],                                                             [[jjocont.show_yunits_var,[False],[jjo_yunits_label,jjo_yunits_optionmenu]]]))        jjo_show_yaxis_abslabel_chbutt.pack(fill=tk1.X)        jjo_yaxis_units_frm = tk1.Frame(jjo_show_yaxis_abslabel_frm,bd=2,relief=tk1.GROOVE)        jjo_yaxis_units_frm.pack(fill=tk1.X)        jjocont.show_yunits_var = tk1.BooleanVar(value=jjocont.show_yunits)        jjo_show_yunits_chbutt = tk1.Checkbutton(jjo_yaxis_units_frm, text="Show Y Axis J Value Units?", variable=jjocont.show_yunits_var,command= lambda:                                              disablewidgets(jjocont.show_yunits_var,False,[jjo_yunits_label,jjo_yunits_optionmenu],[],[]))        jjo_show_yunits_chbutt.grid(row=0, column=1,columnspan=2,sticky='NSEW')        jjo_yaxis_units_frm.grid_columnconfigure(0, weight=1)        jjo_yaxis_units_frm.grid_columnconfigure(3, weight=1)                    jjo_yunits_label = tk1.Label(jjo_yaxis_units_frm, text="Y Axis J Value Units:",bd=1)        jjo_yunits_label.grid(row=1, column=1,sticky='NSEW')        jjocont.yunits_mod_var = tk1.StringVar(jjo_interior)        jjocont.yunits_mod_var.set(jjocont.yunits_mod)        jjo_yunits_optionmenu = tk1.OptionMenu(jjo_yaxis_units_frm, jjocont.yunits_mod_var, *jjoyunits_set)        jjo_yunits_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo_yunits_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_yunits_var,False,[jjo_yunits_label,jjo_yunits_optionmenu],[],[])        disablewidgets(jjocont.show_yaxis_abslabel_var,False,[jjo_show_yunits_chbutt,jjo_yunits_label,jjo_yunits_optionmenu],[],[[jjocont.show_yunits_var,[False],[jjo_yunits_label,jjo_yunits_optionmenu]]])        disablewidgets(jjocont.show_yaxis_ticks_var,False,[jjo_yaxis_labels_tick_color_butt,jjo_yaxis_labels_tick_color_label,jjo_yaxis_label_fontsize_label,jjo_yaxis_label_fontsize_optionmenu,jjo_show_yaxis_percentlabel_chbutt,                       jjo_show_yaxis_abslabel_chbutt,jjo_yaxis_tick_width_label,jjo_yaxis_tick_width_optionmenu,jjo_yaxis_tick_length_label,jjo_yaxis_tick_length_optionmenu,jjo_show_yunits_chbutt,jjo_yunits_label,jjo_yunits_optionmenu],[],                   [[jjocont.show_yaxis_abslabel_var,[False],[jjo_show_yunits_chbutt,jjo_yunits_label,jjo_yunits_optionmenu]],[jjocont.show_yunits_var,[False],[jjo_yunits_label,jjo_yunits_optionmenu]]])        jjo_col5_frm = tk1.Frame(jjo_interior,bd=2) # Column 5        jjo_col5_frm.grid(row=0,column=5,sticky='NSEW')        jjo_speciallinespecs_frm = tk1.Frame(jjo_col5_frm,bd=2,relief=tk1.SUNKEN)        jjo_speciallinespecs_frm.pack(fill=tk1.X)        jjo_speciallinespecs_label = tk1.Label(jjo_speciallinespecs_frm, text="Special Line Settings:",font="Helvetica 12 bold")        jjo_speciallinespecs_label.pack(fill=tk1.X)        jjo_jjolinesettings_frm = tk1.Frame(jjo_speciallinespecs_frm,bd=2,relief=tk1.GROOVE)        jjo_jjolinesettings_frm.pack(fill=tk1.X)        jjo_jjolinesettings_label = tk1.Label(jjo_jjolinesettings_frm, text="Jo Line Settings:",font="Helvetica 10 bold")        jjo_jjolinesettings_label.pack(fill=tk1.X)        jjo_show_joline_frm = tk1.Frame(jjo_jjolinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_joline_frm.pack(fill=tk1.X)        jjocont.show_joline_var = tk1.BooleanVar(value=jjocont.show_joline)        jjo_show_joline_chbutt = tk1.Checkbutton(jjo_show_joline_frm, text="Show Jo Line?", variable=jjocont.show_joline_var,command= lambda:                                              disablewidgets(jjocont.show_joline_var,False,[jjo_joline_color_butt,jjo_joline_color_label,jjo_joline_width_label,jjo_joline_width_optionmenu],[],[]))        jjo_show_joline_chbutt.pack(fill=tk1.X)        jjo_joline_color_frm = tk1.Frame(jjo_jjolinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo_joline_color_frm.pack(fill=tk1.X)        jjo_joline_color_frm.grid_columnconfigure(0, weight=1)        jjo_joline_color_frm.grid_columnconfigure(3, weight=1)                        jjo_joline_color_butt = tk1.Button(jjo_joline_color_frm,text="Select Jo Line Color",                                           command=lambda: getcolor(jjo_master,"jjocont.joline_color_temp","Jo Line",jjo_joline_color_label,jjo_joline_color_frm,False))        jjo_joline_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_joline_color_label = tk1.Label(jjo_joline_color_frm,text="Current\nColor:\n%s" % jjocont.joline_color_temp,                                                         fg=getoppositecolor(jjocont.joline_color_temp), bg=jjocont.joline_color_temp,width=10)        jjo_joline_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_joline_width_frm = tk1.Frame(jjo_jjolinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo_joline_width_frm.pack(fill=tk1.X)        jjo_joline_width_frm.grid_columnconfigure(0, weight=1)        jjo_joline_width_frm.grid_columnconfigure(3, weight=1)        jjo_joline_width_label = tk1.Label(jjo_joline_width_frm, text="Jo Line Width:")        jjo_joline_width_label.grid(row=0,column=1,sticky='NESW')        jjocont.joline_width_var = tk1.IntVar(jjo_interior)        jjocont.joline_width_var.set(jjocont.joline_width)        jjo_joline_width_optionmenu = tk1.OptionMenu(jjo_joline_width_frm, jjocont.joline_width_var, *linewidthchoices_set)        jjo_joline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_joline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_joline_var,False,[jjo_joline_color_butt,jjo_joline_color_label,jjo_joline_width_label,jjo_joline_width_optionmenu],[],[])        jjo_jvertstepboundlinesettings_frm = tk1.Frame(jjo_speciallinespecs_frm,bd=2,relief=tk1.GROOVE)        jjo_jvertstepboundlinesettings_frm.pack(fill=tk1.X)        jjo_jvertstepboundlinesettings_label = tk1.Label(jjo_jvertstepboundlinesettings_frm, text="Vertical Step Type Boundary Line Settings:",font="Helvetica 10 bold")        jjo_jvertstepboundlinesettings_label.pack(fill=tk1.X)        jjo_show_vertstepboundline_frm = tk1.Frame(jjo_jvertstepboundlinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_vertstepboundline_frm.pack(fill=tk1.X)        jjocont.show_vertstepboundline_var = tk1.BooleanVar(value=jjocont.show_vertstepboundline)        jjo_show_vertstepboundline_chbutt = tk1.Checkbutton(jjo_show_vertstepboundline_frm, text="Show Vertical Step Type Boundary Line?", variable=jjocont.show_vertstepboundline_var,command= lambda:                                              disablewidgets(jjocont.show_vertstepboundline_var,False,[jjo_vertstepboundline_color_butt,jjo_vertstepboundline_color_label,jjo_vertstepboundline_width_label,jjo_vertstepboundline_width_optionmenu],[],[]))        jjo_show_vertstepboundline_chbutt.pack(fill=tk1.X)        jjo_vertstepboundline_color_frm = tk1.Frame(jjo_jvertstepboundlinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo_vertstepboundline_color_frm.pack(fill=tk1.X)        jjo_vertstepboundline_color_frm.grid_columnconfigure(0, weight=1)        jjo_vertstepboundline_color_frm.grid_columnconfigure(3, weight=1)                        jjo_vertstepboundline_color_butt = tk1.Button(jjo_vertstepboundline_color_frm,text="Select Vertical Step Type\nBoundary Line Color",                                                      command=lambda: getcolor(jjo_master,"jjocont.vertstepboundline_color_temp","Vertical Step Type Boundary Line",jjo_vertstepboundline_color_label,jjo_vertstepboundline_color_frm,False))        jjo_vertstepboundline_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_vertstepboundline_color_label = tk1.Label(jjo_vertstepboundline_color_frm,text="Current\nColor:\n%s" % jjocont.vertstepboundline_color_temp,                                                         fg=getoppositecolor(jjocont.vertstepboundline_color_temp), bg=jjocont.vertstepboundline_color_temp,width=10)        jjo_vertstepboundline_color_label.grid(row=0, column=2,sticky='NSEW')        jjo_vertstepboundline_width_frm = tk1.Frame(jjo_jvertstepboundlinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo_vertstepboundline_width_frm.pack(fill=tk1.X)        jjo_vertstepboundline_width_frm.grid_columnconfigure(0, weight=1)        jjo_vertstepboundline_width_frm.grid_columnconfigure(3, weight=1)        jjo_vertstepboundline_width_label = tk1.Label(jjo_vertstepboundline_width_frm, text="Vertical Step Type\nBoundary Line Width:")        jjo_vertstepboundline_width_label.grid(row=0,column=1,sticky='NESW')        jjocont.vertstepboundline_width_var = tk1.IntVar(jjo_interior)        jjocont.vertstepboundline_width_var.set(jjocont.vertstepboundline_width)        jjo_vertstepboundline_width_optionmenu = tk1.OptionMenu(jjo_vertstepboundline_width_frm, jjocont.vertstepboundline_width_var, *linewidthchoices_set)        jjo_vertstepboundline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo_vertstepboundline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_vertstepboundline_var,False,[jjo_vertstepboundline_color_butt,jjo_vertstepboundline_color_label,jjo_vertstepboundline_width_label,jjo_vertstepboundline_width_optionmenu],[],[])        jjo_magminspecs_frm = tk1.Frame(jjo_col5_frm,bd=2,relief=tk1.SUNKEN)        jjo_magminspecs_frm.pack(fill=tk1.X)        jjo_magminspecs_label = tk1.Label(jjo_magminspecs_frm, text="Magnetic Mineral Settings:",font="Helvetica 12 bold")        jjo_magminspecs_label.pack(fill=tk1.X)        jjo_show_magmins_frm = tk1.Frame(jjo_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_show_magmins_frm.pack(fill=tk1.X)        jjocont.show_magmin_var = tk1.BooleanVar(value=jjocont.show_magmin)        jjo_show_magmin_chbutt = tk1.Checkbutton(jjo_show_magmins_frm, text="Show Curie Temps for Magnetic Minerals?", variable=jjocont.show_magmin_var,command= lambda:                                              disablewidgets(jjocont.show_magmin_var,False,[jjo_magmin_radio_text,jjo_magmin_temp_radio,jjo_magmin_all_radio,jjo_magmin_selected_radio,jjo_show_goethite_chbutt,                                                                                            jjo_show_pyrrhotite_chbutt,jjo_show_greigite_chbutt,jjo_show_titanomaghemite_chbutt,jjo_show_titanomagnetite_chbutt,                                                                                            jjo_show_magnetite_chbutt,jjo_show_hematite_chbutt,jjo_magmin_color_butt,jjo_magmin_color_text,jjo_magmin_text_color_butt,                                                                                            jjo_magmin_text_color_text,jjo_magmin_fontsize_label,jjo_magmin_fontsize_optionmenu],[],                                                             [[jjocont.mainmagmin_var,["Temp","All"],[jjo_show_goethite_chbutt,jjo_show_pyrrhotite_chbutt,jjo_show_greigite_chbutt,jjo_show_titanomaghemite_chbutt,                                                                jjo_show_titanomagnetite_chbutt,jjo_show_magnetite_chbutt,jjo_show_hematite_chbutt]]]))        jjo_show_magmin_chbutt.pack(fill=tk1.X)        jjo_magmin_radio_text_frm = tk1.Frame(jjo_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_magmin_radio_text_frm.pack(fill=tk1.X)        jjo_magmin_radio_text = tk1.Label(jjo_magmin_radio_text_frm, text="Which magnetic minerals should be shown?")        jjo_magmin_radio_text.pack(fill=tk1.X)        jjocont.mainmagmin_var = tk1.StringVar()        jjocont.mainmagmin_var.set(jjocont.mainmagmin)        jjo_magmin_radio_frm = tk1.Frame(jjo_magmin_radio_text_frm,bd=2)        jjo_magmin_radio_frm.pack(fill=tk1.X)        jjo_magmin_temp_radio = tk1.Radiobutton(jjo_magmin_radio_frm, text="Curie Temps\n< Max Thermal Step",variable=jjocont.mainmagmin_var,value="Temp",                                         command= lambda: disablewidgets(jjocont.mainmagmin_var,"Temp",[jjo_show_goethite_chbutt,jjo_show_pyrrhotite_chbutt,jjo_show_greigite_chbutt,jjo_show_titanomaghemite_chbutt,                                                                                                        jjo_show_titanomagnetite_chbutt,jjo_show_magnetite_chbutt,jjo_show_hematite_chbutt],[],[]))        jjo_magmin_temp_radio.pack(side=tk1.LEFT,padx=5)        jjo_magmin_all_radio = tk1.Radiobutton(jjo_magmin_radio_frm, text="All",variable=jjocont.mainmagmin_var,value="All",                                               command= lambda: disablewidgets(jjocont.mainmagmin_var,"All",[jjo_show_goethite_chbutt,jjo_show_pyrrhotite_chbutt,jjo_show_greigite_chbutt,jjo_show_titanomaghemite_chbutt,                                                                                                        jjo_show_titanomagnetite_chbutt,jjo_show_magnetite_chbutt,jjo_show_hematite_chbutt],[],[]))        jjo_magmin_all_radio.pack(side=tk1.LEFT,padx=5)        jjo_magmin_selected_radio = tk1.Radiobutton(jjo_magmin_radio_frm, text="Selected",variable=jjocont.mainmagmin_var,value="Select",                                                    command= lambda: disablewidgets(jjocont.mainmagmin_var,"",[jjo_show_goethite_chbutt,jjo_show_pyrrhotite_chbutt,jjo_show_greigite_chbutt,jjo_show_titanomaghemite_chbutt,                                                                                                        jjo_show_titanomagnetite_chbutt,jjo_show_magnetite_chbutt,jjo_show_hematite_chbutt],[],[]))        jjo_magmin_selected_radio.pack(side=tk1.LEFT,padx=5)        jjo_magmin_showselected_frm = tk1.Frame(jjo_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_magmin_showselected_frm.pack(fill=tk1.X)        jjocont.show_goethite_var = tk1.BooleanVar(value=jjocont.showminlist[0])        jjo_show_goethite_chbutt = tk1.Checkbutton(jjo_magmin_showselected_frm, text="Show Goethite? (120%s)" % degree_sign, variable=jjocont.show_goethite_var)        jjo_show_goethite_chbutt.pack(fill=tk1.X)        jjocont.show_pyrrhotite_var = tk1.BooleanVar(value=jjocont.showminlist[1])        jjo_show_pyrrhotite_chbutt = tk1.Checkbutton(jjo_magmin_showselected_frm, text="Show Pyrrhotite? (320%s)" % degree_sign, variable=jjocont.show_pyrrhotite_var)        jjo_show_pyrrhotite_chbutt.pack(fill=tk1.X)        jjocont.show_greigite_var = tk1.BooleanVar(value=jjocont.showminlist[2])        jjo_show_greigite_chbutt = tk1.Checkbutton(jjo_magmin_showselected_frm, text="Show Greigite? (270%s-340%s)" % (degree_sign,degree_sign), variable=jjocont.show_greigite_var)        jjo_show_greigite_chbutt.pack(fill=tk1.X)        jjocont.show_titanomaghemite_var = tk1.BooleanVar(value=jjocont.showminlist[3])        jjo_show_titanomaghemite_chbutt = tk1.Checkbutton(jjo_magmin_showselected_frm, text="Show Titanomaghemite? (300%s-400%s)" % (degree_sign,degree_sign), variable=jjocont.show_titanomaghemite_var)        jjo_show_titanomaghemite_chbutt.pack(fill=tk1.X)        jjocont.show_titanomagnetite_var = tk1.BooleanVar(value=jjocont.showminlist[4])        jjo_show_titanomagnetite_chbutt = tk1.Checkbutton(jjo_magmin_showselected_frm, text="Show Titanomagnetite? (300%s-500%s)" % (degree_sign,degree_sign), variable=jjocont.show_titanomagnetite_var)        jjo_show_titanomagnetite_chbutt.pack(fill=tk1.X)        jjocont.show_magnetite_var = tk1.BooleanVar(value=jjocont.showminlist[5])        jjo_show_magnetite_chbutt = tk1.Checkbutton(jjo_magmin_showselected_frm, text="Show Magnetite? (580%s)" % degree_sign, variable=jjocont.show_magnetite_var)        jjo_show_magnetite_chbutt.pack(fill=tk1.X)        jjocont.show_hematite_var = tk1.BooleanVar(value=jjocont.showminlist[6])        jjo_show_hematite_chbutt = tk1.Checkbutton(jjo_magmin_showselected_frm, text="Show Hematite? (680%s)" % degree_sign, variable=jjocont.show_hematite_var)        jjo_show_hematite_chbutt.pack(fill=tk1.X)                jjo_magmin_color_frm = tk1.Frame(jjo_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_magmin_color_frm.pack(fill=tk1.X)        jjo_magmin_color_frm.grid_columnconfigure(0, weight=1)        jjo_magmin_color_frm.grid_columnconfigure(3, weight=1)        jjo_magmin_color_butt = tk1.Button(jjo_magmin_color_frm,text="Select Magnetic Mineral\nRectangle/Line Color", command= lambda: getcolor(jjo_master,"jjocont.magmin_color_temp","Magnetic Mineral Rectangles",                                                                                                                              jjo_magmin_color_text,jjo_magmin_color_frm,False))        jjo_magmin_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_magmin_color_text = tk1.Label(jjo_magmin_color_frm,text="Current\nColor:\n%s" % jjocont.magmin_color_temp,fg=getoppositecolor(jjocont.magmin_color_temp), bg=jjocont.magmin_color_temp,width=10)        jjo_magmin_color_text.grid(row=0,column=2)        jjo_magmin_text_color_frm = tk1.Frame(jjo_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_magmin_text_color_frm.pack(fill=tk1.X)        jjo_magmin_text_color_frm.grid_columnconfigure(0, weight=1)        jjo_magmin_text_color_frm.grid_columnconfigure(3, weight=1)        jjo_magmin_text_color_butt = tk1.Button(jjo_magmin_text_color_frm,text="Select Magnetic Mineral\nText Color", command= lambda: getcolor(jjo_master,"jjocont.magmin_text_color_temp","Magnetic Mineral Text",                                                                                                                              jjo_magmin_text_color_text,jjo_magmin_text_color_frm,False))        jjo_magmin_text_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_magmin_text_color_text = tk1.Label(jjo_magmin_text_color_frm,text="Current\nColor:\n%s" % jjocont.magmin_text_color_temp,fg=getoppositecolor(jjocont.magmin_text_color_temp), bg=jjocont.magmin_text_color_temp,width=10)        jjo_magmin_text_color_text.grid(row=0,column=2)        jjo_magmin_fontsize_frm = tk1.Frame(jjo_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo_magmin_fontsize_frm.pack(fill=tk1.X)        jjo_magmin_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo_magmin_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo_magmin_fontsize_label = tk1.Label(jjo_magmin_fontsize_frm, text="Magnetic Mineral Font Size:",bd=1)        jjo_magmin_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont.magmin_fontsize_mod_var = tk1.StringVar(jjo_interior)        jjocont.magmin_fontsize_mod_var.set(jjocont.magmin_fontsize_mod)         jjo_magmin_fontsize_optionmenu = tk1.OptionMenu(jjo_magmin_fontsize_frm, jjocont.magmin_fontsize_mod_var, *fontsizes_set)        jjo_magmin_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo_magmin_fontsize_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont.show_magmin_var,False,[jjo_magmin_radio_text,jjo_magmin_temp_radio,jjo_magmin_all_radio,jjo_magmin_selected_radio,jjo_show_goethite_chbutt,                                                jjo_show_pyrrhotite_chbutt,jjo_show_greigite_chbutt,jjo_show_titanomaghemite_chbutt,jjo_show_titanomagnetite_chbutt,                                                jjo_show_magnetite_chbutt,jjo_show_hematite_chbutt,jjo_magmin_color_butt,jjo_magmin_color_text,jjo_magmin_text_color_butt,                                                jjo_magmin_text_color_text,jjo_magmin_fontsize_label,jjo_magmin_fontsize_optionmenu],[],[])        if jjocont.mainmagmin_var.get() == "Temp" or jjocont.mainmagmin_var.get() == "All":            jjo_show_goethite_chbutt.config(state='disabled')            jjo_show_pyrrhotite_chbutt.config(state='disabled')            jjo_show_greigite_chbutt.config(state='disabled')            jjo_show_titanomaghemite_chbutt.config(state='disabled')            jjo_show_titanomagnetite_chbutt.config(state='disabled')            jjo_show_magnetite_chbutt.config(state='disabled')            jjo_show_hematite_chbutt.config(state='disabled')        jjo_col6_frm = tk1.Frame(jjo_interior,bd=2) # Column 6        jjo_col6_frm.grid(row=0,column=6,sticky='NSEW')        jjo_rect_loss_settings_frm = tk1.Frame(jjo_col6_frm,bd=2,relief=tk1.SUNKEN)        jjo_rect_loss_settings_frm.pack(fill=tk1.X)        jjo_rect_loss_settings_label = tk1.Label(jjo_rect_loss_settings_frm, text="Intensity Loss Rectangle Settings:",bd=1,font="Helvetica 12 bold")        jjo_rect_loss_settings_label.pack(fill=tk1.X)                jjo_show_jdecrease_absrect_frm = tk1.Frame(jjo_rect_loss_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_jdecrease_absrect_frm.pack(fill=tk1.X)        jjocont.show_jdecrease_absrect_var = tk1.BooleanVar(value=jjocont.show_jdecrease_absrect)        jjo_show_jdecrease_absrect_chbutt = tk1.Checkbutton(jjo_show_jdecrease_absrect_frm, text="Show Absolute Intensity Loss Rectangles?", variable=jjocont.show_jdecrease_absrect_var,command= lambda:                                              disablewidgets(jjocont.show_jdecrease_absrect_var,False,[jjo_absrect_loss_color_butt,jjo_absrect_loss_color_label,jjo_show_jdecrease_absrect_edge_chbutt,jjo_absrect_edge_loss_color_butt,jjo_absrect_edge_loss_color_label],[],                                                             [[jjocont.show_jdecrease_absrect_edge_var,[False],[jjo_absrect_edge_loss_color_butt,jjo_absrect_edge_loss_color_label]]]))        jjo_show_jdecrease_absrect_chbutt.pack(fill=tk1.X)        jjo_absrect_loss_color_frm = tk1.Frame(jjo_show_jdecrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo_absrect_loss_color_frm.pack(fill=tk1.X)                     jjo_absrect_loss_color_frm.grid_columnconfigure(0, weight=1)        jjo_absrect_loss_color_frm.grid_columnconfigure(3, weight=1)        jjo_absrect_loss_color_butt = tk1.Button(jjo_absrect_loss_color_frm,text="Select Absolute Intensity Loss\nRectangle Color", command= lambda: getcolor(jjo_master,"jjocont.jdecrease_absrect_color_temp","J/Jo Absolute Intensity Loss Rectangle",                                                                                                                                                    jjo_absrect_loss_color_label,jjo_absrect_loss_color_frm,False))        jjo_absrect_loss_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_absrect_loss_color_label = tk1.Label(jjo_absrect_loss_color_frm,text="Current\nColor:\n%s" % jjocont.jdecrease_absrect_color_temp,fg=getoppositecolor(jjocont.jdecrease_absrect_color_temp), bg=jjocont.jdecrease_absrect_color_temp,width=10)        jjo_absrect_loss_color_label.grid(row=0,column=2)        jjo_show_jdecrease_absrect_edge_frm = tk1.Frame(jjo_show_jdecrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo_show_jdecrease_absrect_edge_frm.pack(fill=tk1.X)        jjocont.show_jdecrease_absrect_edge_var = tk1.BooleanVar(value=jjocont.show_jdecrease_absrect_edge)        jjo_show_jdecrease_absrect_edge_chbutt = tk1.Checkbutton(jjo_show_jdecrease_absrect_edge_frm, text="Show Absolute Intensity Loss Rectangle Border?", variable=jjocont.show_jdecrease_absrect_edge_var,command= lambda:                                              disablewidgets(jjocont.show_jdecrease_absrect_edge_var,False,[jjo_absrect_edge_loss_color_butt,jjo_absrect_edge_loss_color_label],[],[]))        jjo_show_jdecrease_absrect_edge_chbutt.pack(fill=tk1.X)        jjo_absrect_edge_loss_color_frm = tk1.Frame(jjo_show_jdecrease_absrect_edge_frm,bd=2,relief=tk1.GROOVE)        jjo_absrect_edge_loss_color_frm.pack(fill=tk1.X)        jjo_absrect_edge_loss_color_frm.grid_columnconfigure(0, weight=1)        jjo_absrect_edge_loss_color_frm.grid_columnconfigure(3, weight=1)                        jjo_absrect_edge_loss_color_butt = tk1.Button(jjo_absrect_edge_loss_color_frm,text="Select Absolute Intensity Loss\nRectangle Border Color",                                                 command= lambda: getcolor(jjo_master,"jjocont.jdecrease_absrect_edge_color_temp","Absolute Intensity Loss Rectangle",jjo_absrect_edge_loss_color_label,jjo_absrect_edge_loss_color_frm,False))        jjo_absrect_edge_loss_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_absrect_edge_loss_color_label = tk1.Label(jjo_absrect_edge_loss_color_frm,text="Current\nColor:\n%s" % jjocont.jdecrease_absrect_edge_color_temp,fg=getoppositecolor(jjocont.jdecrease_absrect_edge_color_temp), bg=jjocont.jdecrease_absrect_edge_color_temp,width=10)        jjo_absrect_edge_loss_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont.show_jdecrease_absrect_edge_var,False,[jjo_absrect_edge_loss_color_butt,jjo_absrect_edge_loss_color_label],[],[])         disablewidgets(jjocont.show_jdecrease_absrect_var,False,[jjo_absrect_loss_color_butt,jjo_absrect_loss_color_label,jjo_show_jdecrease_absrect_edge_chbutt,jjo_absrect_edge_loss_color_butt,jjo_absrect_edge_loss_color_label],[],                       [[jjocont.show_jdecrease_absrect_edge_var,[False],[jjo_absrect_edge_loss_color_butt,jjo_absrect_edge_loss_color_label]]])        jjo_show_relrect_loss_frm = tk1.Frame(jjo_rect_loss_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_relrect_loss_frm.pack(fill=tk1.X)        jjocont.show_jdecrease_relrect_var = tk1.BooleanVar(value=jjocont.show_jdecrease_relrect)        jjo_show_relrect_loss_chbutt = tk1.Checkbutton(jjo_show_relrect_loss_frm, text="Show Relative Intensity Loss Rectangles?", variable=jjocont.show_jdecrease_relrect_var,command= lambda:                                              disablewidgets(jjocont.show_jdecrease_relrect_var,False,[jjo_relrect_loss_color_butt,jjo_relrect_loss_color_label,jjo_show_relrect_loss_edge_chbutt,jjo_relrect_loss_edge_color_butt,jjo_relrect_loss_edge_color_label],[],                                                             [[jjocont.show_jdecrease_relrect_edge_var,[False],[jjo_relrect_loss_edge_color_butt,jjo_relrect_loss_edge_color_label]]]))        jjo_show_relrect_loss_chbutt.pack(fill=tk1.X)        jjo_relrect_loss_color_frm = tk1.Frame(jjo_show_relrect_loss_frm,bd=2,relief=tk1.GROOVE)        jjo_relrect_loss_color_frm.pack(fill=tk1.X)                      jjo_relrect_loss_color_frm.grid_columnconfigure(0, weight=1)        jjo_relrect_loss_color_frm.grid_columnconfigure(3, weight=1)        jjo_relrect_loss_color_butt = tk1.Button(jjo_relrect_loss_color_frm,text="Select Relative Intensity Loss\nRectangle Color",                                            command= lambda: getcolor(jjo_master,"jjocont.jdecrease_relrect_color_temp","J/Jo Relative Intensity Loss Rectangle",jjo_relrect_loss_color_label,jjo_relrect_loss_color_frm,False))        jjo_relrect_loss_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_relrect_loss_color_label = tk1.Label(jjo_relrect_loss_color_frm,text="Current\nColor:\n%s" % jjocont.jdecrease_relrect_color_temp,fg=getoppositecolor(jjocont.jdecrease_relrect_color_temp), bg=jjocont.jdecrease_relrect_color_temp,width=10)        jjo_relrect_loss_color_label.grid(row=0,column=2)        jjo_show_relrect_loss_edge_frm = tk1.Frame(jjo_show_relrect_loss_frm,bd=2,relief=tk1.GROOVE)        jjo_show_relrect_loss_edge_frm.pack(fill=tk1.X)        jjocont.show_jdecrease_relrect_edge_var = tk1.BooleanVar(value=jjocont.show_jdecrease_relrect_edge)        jjo_show_relrect_loss_edge_chbutt = tk1.Checkbutton(jjo_show_relrect_loss_edge_frm, text="Show Relative Intensity Loss Rectangle Border?", variable=jjocont.show_jdecrease_relrect_edge_var,command= lambda:                                              disablewidgets(jjocont.show_jdecrease_relrect_edge_var,False,[jjo_relrect_loss_edge_color_butt,jjo_relrect_loss_edge_color_label],[],[]))        jjo_show_relrect_loss_edge_chbutt.pack(fill=tk1.X)        jjo_relrect_loss_edge_color_frm = tk1.Frame(jjo_show_relrect_loss_edge_frm,bd=2,relief=tk1.GROOVE)        jjo_relrect_loss_edge_color_frm.pack(fill=tk1.X)        jjo_relrect_loss_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo_relrect_loss_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo_relrect_loss_edge_color_butt = tk1.Button(jjo_relrect_loss_edge_color_frm,text="Select Relative Intensity Loss\nRectangle Border Color",                                                 command= lambda: getcolor(jjo_master,"jjocont.jdecrease_relrect_edge_color_temp","Relative Intensity Loss Rectangle",jjo_relrect_loss_edge_color_label,jjo_relrect_loss_edge_color_frm,False))        jjo_relrect_loss_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_relrect_loss_edge_color_label = tk1.Label(jjo_relrect_loss_edge_color_frm,text="Current\nColor:\n%s" % jjocont.jdecrease_relrect_edge_color_temp,fg=getoppositecolor(jjocont.jdecrease_relrect_edge_color_temp), bg=jjocont.jdecrease_relrect_edge_color_temp,width=10)        jjo_relrect_loss_edge_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont.show_jdecrease_relrect_edge_var,False,[jjo_relrect_loss_edge_color_butt,jjo_relrect_loss_edge_color_label],[],[])         disablewidgets(jjocont.show_jdecrease_relrect_var,False,[jjo_relrect_loss_color_butt,jjo_relrect_loss_color_label,jjo_show_relrect_loss_edge_chbutt,jjo_relrect_loss_edge_color_butt,jjo_relrect_loss_edge_color_label],[],                       [[jjocont.show_jdecrease_relrect_edge_var,[False],[jjo_relrect_loss_edge_color_butt,jjo_relrect_loss_edge_color_label]]])        jjo_rect_gain_settings_frm = tk1.Frame(jjo_col6_frm,bd=2,relief=tk1.SUNKEN)        jjo_rect_gain_settings_frm.pack(fill=tk1.X)        jjo_rect_gain_settings_label = tk1.Label(jjo_rect_gain_settings_frm, text="Intensity Gain Rectangle Settings:",bd=1,font="Helvetica 12 bold")        jjo_rect_gain_settings_label.pack(fill=tk1.X)                jjo_show_jincrease_absrect_frm = tk1.Frame(jjo_rect_gain_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_jincrease_absrect_frm.pack(fill=tk1.X)        jjocont.show_jincrease_absrect_var = tk1.BooleanVar(value=jjocont.show_jincrease_absrect)        jjo_show_jincrease_absrect_chbutt = tk1.Checkbutton(jjo_show_jincrease_absrect_frm, text="Show Absolute Intensity Gain Rectangles?", variable=jjocont.show_jincrease_absrect_var,command= lambda:                                              disablewidgets(jjocont.show_jincrease_absrect_var,False,[jjo_absrect_gain_color_butt,jjo_absrect_gain_color_label,jjo_show_jincrease_absrect_edge_chbutt,jjo_absrect_edge_gain_color_butt,jjo_absrect_edge_gain_color_label],[],                                                             [[jjocont.show_jincrease_absrect_edge_var,[False],[jjo_absrect_edge_gain_color_butt,jjo_absrect_edge_gain_color_label]]]))        jjo_show_jincrease_absrect_chbutt.pack(fill=tk1.X)        jjo_absrect_gain_color_frm = tk1.Frame(jjo_show_jincrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo_absrect_gain_color_frm.pack(fill=tk1.X)        jjo_absrect_gain_color_frm.grid_columnconfigure(0, weight=1)        jjo_absrect_gain_color_frm.grid_columnconfigure(3, weight=1)        jjo_absrect_gain_color_butt = tk1.Button(jjo_absrect_gain_color_frm,text="Select Absolute Intensity Gain\nRectangle Color", command= lambda: getcolor(jjo_master,"jjocont.jincrease_absrect_color_temp","J/Jo Absolute Intensity gain Rectangle",                                                                                                                                                    jjo_absrect_gain_color_label,jjo_absrect_gain_color_frm,False))        jjo_absrect_gain_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_absrect_gain_color_label = tk1.Label(jjo_absrect_gain_color_frm,text="Current\nColor:\n%s" % jjocont.jincrease_absrect_color_temp,fg=getoppositecolor(jjocont.jincrease_absrect_color_temp), bg=jjocont.jincrease_absrect_color_temp,width=10)        jjo_absrect_gain_color_label.grid(row=0,column=2)        jjo_show_jincrease_absrect_edge_frm = tk1.Frame(jjo_show_jincrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo_show_jincrease_absrect_edge_frm.pack(fill=tk1.X)        jjocont.show_jincrease_absrect_edge_var = tk1.BooleanVar(value=jjocont.show_jincrease_absrect_edge)        jjo_show_jincrease_absrect_edge_chbutt = tk1.Checkbutton(jjo_show_jincrease_absrect_edge_frm, text="Show Absolute Intensity Gain Rectangle Border?", variable=jjocont.show_jincrease_absrect_edge_var,command= lambda:                                             disablewidgets(jjocont.show_jincrease_absrect_edge_var,False,[jjo_absrect_edge_gain_color_butt,jjo_absrect_edge_gain_color_label],[],[]))        jjo_show_jincrease_absrect_edge_chbutt.pack(fill=tk1.X)        jjo_absrect_edge_gain_color_frm = tk1.Frame(jjo_show_jincrease_absrect_edge_frm,bd=2,relief=tk1.GROOVE)        jjo_absrect_edge_gain_color_frm.pack(fill=tk1.X)        jjo_absrect_edge_gain_color_frm.grid_columnconfigure(0, weight=1)        jjo_absrect_edge_gain_color_frm.grid_columnconfigure(3, weight=1)                    jjo_absrect_edge_gain_color_butt = tk1.Button(jjo_absrect_edge_gain_color_frm,text="Select Absolute Intensity Gain\nRectangle Border Color",                                                 command= lambda: getcolor(jjo_master,"jjocont.jincrease_absrect_edge_color_temp","Absolute Intensity gain Rectangle",jjo_absrect_edge_gain_color_label,jjo_absrect_edge_gain_color_frm,False))        jjo_absrect_edge_gain_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_absrect_edge_gain_color_label = tk1.Label(jjo_absrect_edge_gain_color_frm,text="Current\nColor:\n%s" % jjocont.jincrease_absrect_edge_color_temp,fg=getoppositecolor(jjocont.jincrease_absrect_edge_color_temp), bg=jjocont.jincrease_absrect_edge_color_temp,width=10)        jjo_absrect_edge_gain_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont.show_jincrease_absrect_edge_var,False,[jjo_absrect_edge_gain_color_butt,jjo_absrect_edge_gain_color_label],[],[])         disablewidgets(jjocont.show_jincrease_absrect_var,False,[jjo_absrect_gain_color_butt,jjo_absrect_gain_color_label,jjo_show_jincrease_absrect_edge_chbutt,jjo_absrect_edge_gain_color_butt,jjo_absrect_edge_gain_color_label],[],                       [[jjocont.show_jincrease_absrect_edge_var,[False],[jjo_absrect_edge_gain_color_butt,jjo_absrect_edge_gain_color_label]]])        jjo_show_relrect_gain_frm = tk1.Frame(jjo_rect_gain_settings_frm,bd=2,relief=tk1.GROOVE)        jjo_show_relrect_gain_frm.pack(fill=tk1.X)        jjocont.show_jincrease_relrect_var = tk1.BooleanVar(value=jjocont.show_jincrease_relrect)        jjo_show_relrect_gain_chbutt = tk1.Checkbutton(jjo_show_relrect_gain_frm, text="Show Relative Intensity Gain Rectangles?", variable=jjocont.show_jincrease_relrect_var,command= lambda:                                              disablewidgets(jjocont.show_jincrease_relrect_var,False,[jjo_relrect_gain_color_butt,jjo_relrect_gain_color_label,jjo_show_relrect_gain_edge_chbutt,jjo_relrect_gain_edge_color_butt,jjo_relrect_gain_edge_color_label],[],                                                             [[jjocont.show_jincrease_relrect_edge_var,[False],[jjo_relrect_gain_edge_color_butt,jjo_relrect_gain_edge_color_label]]]))        jjo_show_relrect_gain_chbutt.pack(fill=tk1.X)        jjo_relrect_gain_color_frm = tk1.Frame(jjo_show_relrect_gain_frm,bd=2,relief=tk1.GROOVE)        jjo_relrect_gain_color_frm.pack(fill=tk1.X)        jjo_relrect_gain_color_frm.grid_columnconfigure(0, weight=1)        jjo_relrect_gain_color_frm.grid_columnconfigure(3, weight=1)        jjo_relrect_gain_color_butt = tk1.Button(jjo_relrect_gain_color_frm,text="Select Relative Intensity Gain\nRectangle Color",                                            command= lambda: getcolor(jjo_master,"jjocont.jincrease_relrect_color_temp","J/Jo Relative Intensity gain Rectangle",jjo_relrect_gain_color_label,jjo_relrect_gain_color_frm,False))        jjo_relrect_gain_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo_relrect_gain_color_label = tk1.Label(jjo_relrect_gain_color_frm,text="Current\nColor:\n%s" % jjocont.jincrease_relrect_color_temp,fg=getoppositecolor(jjocont.jincrease_relrect_color_temp), bg=jjocont.jincrease_relrect_color_temp,width=10)        jjo_relrect_gain_color_label.grid(row=0,column=2)        jjo_show_relrect_gain_edge_frm = tk1.Frame(jjo_show_relrect_gain_frm,bd=2,relief=tk1.GROOVE)        jjo_show_relrect_gain_edge_frm.pack(fill=tk1.X)        jjocont.show_jincrease_relrect_edge_var = tk1.BooleanVar(value=jjocont.show_jincrease_relrect_edge)        jjo_show_relrect_gain_edge_chbutt = tk1.Checkbutton(jjo_show_relrect_gain_edge_frm, text="Show Relative Intensity Gain Rectangle Border?", variable=jjocont.show_jincrease_relrect_edge_var,command= lambda:                                              disablewidgets(jjocont.show_jincrease_relrect_edge_var,False,[jjo_relrect_gain_edge_color_butt,jjo_relrect_gain_edge_color_label],[],[]))        jjo_show_relrect_gain_edge_chbutt.pack(fill=tk1.X)        jjo_relrect_gain_edge_color_frm = tk1.Frame(jjo_show_relrect_gain_edge_frm,bd=2,relief=tk1.GROOVE)        jjo_relrect_gain_edge_color_frm.pack(fill=tk1.X)        jjo_relrect_gain_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo_relrect_gain_edge_color_frm.grid_columnconfigure(3, weight=1)                       jjo_relrect_gain_edge_color_butt = tk1.Button(jjo_relrect_gain_edge_color_frm,text="Select Relative Intensity Gain\nRectangle Border Color",                                                 command= lambda: getcolor(jjo_master,"jjocont.jincrease_relrect_edge_color_temp","Relative Intensity Gain Rectangle",jjo_relrect_gain_edge_color_label,jjo_relrect_gain_edge_color_frm,False))        jjo_relrect_gain_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo_relrect_gain_edge_color_label = tk1.Label(jjo_relrect_gain_edge_color_frm,text="Current\nColor:\n%s" % jjocont.jincrease_relrect_edge_color_temp,fg=getoppositecolor(jjocont.jincrease_relrect_edge_color_temp), bg=jjocont.jincrease_relrect_edge_color_temp,width=10)        jjo_relrect_gain_edge_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont.show_jincrease_relrect_edge_var,False,[jjo_relrect_gain_edge_color_butt,jjo_relrect_gain_edge_color_label],[],[])         disablewidgets(jjocont.show_jincrease_relrect_var,False,[jjo_relrect_gain_color_butt,jjo_relrect_gain_color_label,jjo_show_relrect_gain_edge_chbutt,jjo_relrect_gain_edge_color_butt,jjo_relrect_gain_edge_color_label],[],                       [[jjocont.show_jincrease_relrect_edge_var,[False],[jjo_relrect_gain_edge_color_butt,jjo_relrect_gain_edge_color_label]]])                jjo_submit_butt_frm = tk1.Frame(jjo_interior,bd=2,relief=tk1.RIDGE)        jjo_submit_butt_frm.grid(row=2,column=0, columnspan=7, sticky='NSEW')        jjo_submit_butt = tk1.Button(jjo_submit_butt_frm, text="Submit and Save Changes and Update J/Jo Sample Plot", command= lambda: submitjjocontrols(self,jjocont,jjo_master))        jjo_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo_submit_butt.configure(font=('Consolas bold',12))        jjo_reset_butt = tk1.Button(jjo_submit_butt_frm, text="Reset J/Jo Sample Plot to Defaults", command= lambda: jjo_resetdefaults(self,jjo_master))        jjo_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo_reset_butt.configure(font=('Consolas',10))        jjo_cancel_butt = tk1.Button(jjo_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(jjo_master))        jjo_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo_cancel_butt.configure(font=('Consolas',10))        tk1.mainloop()    returndef jjocontrols_step(self):    global jjo2_master, jjocont2    try:        'normal' == jjo2_master.state()        jjo2_master.lift()        jjo2_master.attributes('-topmost',True)        jjo2_master.after_idle(jjo2_master.attributes,'-topmost',False)        except:        jjo2_master = tk1.Toplevel(root)        jjo2_master.focus_set()        jjo2_master.title("J/Jo Plot Controls (Step Data)")        jjo2_master.geometry("+40+40")        jjocont2.printstep_color_temp = jjocont2.printstep_color # set color temps        jjocont2.arrowline_color_temp = jjocont2.arrowline_color        jjocont2.jincrease_color_temp = jjocont2.jincrease_color        jjocont2.jincrease_edge_color_temp = jjocont2.jincrease_edge_color        jjocont2.jdecrease_color_temp = jjocont2.jdecrease_color        jjocont2.jdecrease_edge_color_temp = jjocont2.jdecrease_edge_color        jjocont2.firststep_color_temp = jjocont2.firststep_color        jjocont2.firststep_edge_color_temp = jjocont2.firststep_edge_color        jjocont2.laststep_color_temp = jjocont2.laststep_color        jjocont2.laststep_edge_color_temp = jjocont2.laststep_edge_color        jjocont2.axes_color_temp = jjocont2.axes_color        jjocont2.xaxis_steplabels_tick_color_temp = jjocont2.xaxis_steplabels_tick_color        jjocont2.xaxis_stepboundaries_color_temp = jjocont2.xaxis_stepboundaries_color        jjocont2.yaxis_labels_tick_color_temp = jjocont2.yaxis_labels_tick_color        jjocont2.title_color_temp = jjocont2.title_color        jjocont2.legend_color_temp = jjocont2.legend_color            jjo2_vertical_scrollbar = tk1.Scrollbar(jjo2_master,orient=tk1.VERTICAL)        jjo2_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        jjo2_horizontal_scrollbar = tk1.Scrollbar(jjo2_master,orient=tk1.HORIZONTAL)        jjo2_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)             self.jjo2_canvas = tk1.Canvas(jjo2_master, bd=0, highlightthickness=0,yscrollcommand=jjo2_vertical_scrollbar.set,xscrollcommand=jjo2_horizontal_scrollbar.set,width=1085,height=663,scrollregion=(0,0,1085,663))        self.jjo2_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        jjo2_vertical_scrollbar.config(command=self.jjo2_canvas.yview)        jjo2_horizontal_scrollbar.config(command=self.jjo2_canvas.xview)        self.jjo2_canvas.xview_moveto(0)        self.jjo2_canvas.yview_moveto(0)        jjo2_interior = tk1.Frame(self.jjo2_canvas,width=500,height=500)        jjo2_interior_id = self.jjo2_canvas.create_window(0, 0, window=jjo2_interior,anchor=tk1.NW)                jjo2_col0_frm = tk1.Frame(jjo2_interior,bd=2) # Column 0        jjo2_col0_frm.grid(row=0,column=0,sticky='NSEW')                jjo2_printsteps_frm = tk1.Frame(jjo2_col0_frm,bd=2,relief=tk1.SUNKEN)        jjo2_printsteps_frm.pack(fill=tk1.X)                step_settings_label = tk1.Label(jjo2_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        step_settings_label.grid(row=0, column=0, sticky='NSEW')        jjo2_selectprintsteps_frm = tk1.Frame(jjo2_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo2_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        selectsteps_label = tk1.Label(jjo2_selectprintsteps_frm, text="Select which Step\nLabels to NOT Print:")        selectsteps_label.grid(row=0, column=0, sticky='NSEW')        jjocont2.printsteplist_box = tk1.Listbox(jjo2_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, sample in enumerate(self.sitesteptext):            jjocont2.printsteplist_box.insert(tk1.END,sample.samplename)            jjocont2.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.jjo2_printlabel):                jjocont2.printsteplist_box.select_set(stepoffindex)                      jjocont2.printsteplist_box.grid(row=1,column=0,sticky='NSEW')        jjocont2.printsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("jjocont2.printsteplist_box"))        jjocont2.printsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("jjocont2.printsteplist_box"))        jjocont2.print_scrollbar = tk1.Scrollbar(jjocont2.printsteplist_box,orient=tk1.VERTICAL)        jjocont2.print_scrollbar.config(command=jjocont2.printsteplist_box.yview)        jjocont2.printsteplist_box.config(yscrollcommand=jjocont2.print_scrollbar.set)        jjocont2.print_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        jjocont2.printsteplist_box.bind("<Enter>", lambda x: enterjjo2_printsteplistbox(self))        jjocont2.printsteplist_box.bind("<Leave>", lambda x: leavejjo2_printsteplistbox(self))        jjo2_show_allsteps_butt = tk1.Button(jjo2_printsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: jjocont2.printsteplist_box.selection_clear(0, tk1.END))        jjo2_show_allsteps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        jjo2_show_nosteps_butt = tk1.Button(jjo2_printsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: jjocont2.printsteplist_box.selection_set(0, tk1.END))        jjo2_show_nosteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        jjo2_printstep_color_frm = tk1.Frame(jjo2_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo2_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        jjo2_printstep_color_frm.grid_columnconfigure(0, weight=1)        jjo2_printstep_color_frm.grid_columnconfigure(3, weight=1)                        jjo2_printstep_color_butt = tk1.Button(jjo2_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(jjo2_master,"jjocont2.printstep_color_temp","J/Jo Step Labels",                                                                                                                                jjo2_printstep_color_label,jjo2_printstep_color_frm,False))        jjo2_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo2_printstep_color_label = tk1.Label(jjo2_printstep_color_frm,text="Current\nColor:\n%s" % jjocont2.printstep_color_temp,fg=getoppositecolor(jjocont2.printstep_color_temp), bg=jjocont2.printstep_color_temp,width=10)        jjo2_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        jjo2_step_fontsize_frm = tk1.Frame(jjo2_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo2_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        jjo2_step_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo2_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo2_step_fontsize_label = tk1.Label(jjo2_step_fontsize_frm, text="Step Font Size:",bd=1)        jjo2_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont2.step_fontsize_mod_var = tk1.StringVar(jjo2_interior)        jjocont2.step_fontsize_mod_var.set(jjocont2.step_fontsize_mod)         jjo2_step_fontsize_optionmenu = tk1.OptionMenu(jjo2_step_fontsize_frm, jjocont2.step_fontsize_mod_var, *fontsizes_set)        jjo2_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo2_step_fontsize_optionmenu.configure(font=('Consolas',10))        jjo2_showannot_frm = tk1.Frame(jjo2_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo2_showannot_frm.grid(row=6, column=0,sticky='NSEW')        jjocont2.show_popupannotations_var = tk1.BooleanVar(value=jjocont2.show_popupannotations)        jjo2_show_popupannotations_chbutt = tk1.Checkbutton(jjo2_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=jjocont2.show_popupannotations_var)        jjo2_show_popupannotations_chbutt.pack(fill=tk1.X)        jjo2_col1_frm = tk1.Frame(jjo2_interior,bd=2) # Column 1        jjo2_col1_frm.grid(row=0,column=1,sticky='NSEW')        jjo2_legend_settings_frm = tk1.Frame(jjo2_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo2_legend_settings_frm.pack(fill=tk1.X)        jjo2_legend_settings_label = tk1.Label(jjo2_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        jjo2_legend_settings_label.pack(fill=tk1.X)                jjo2_show_title_frm = tk1.Frame(jjo2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        jjo2_show_title_frm.pack(fill=tk1.X)        jjocont2.show_title_var = tk1.BooleanVar(value=jjocont2.show_title)        jjo2_show_title_chbutt = tk1.Checkbutton(jjo2_show_title_frm, text="Show Title?", variable=jjocont2.show_title_var,command= lambda:                                              disablewidgets(jjocont2.show_title_var,False,[jjo2_title_color_butt,jjo2_title_color_label],[],[]))        jjo2_show_title_chbutt.pack(fill=tk1.X)        jjo2_title_color_frm = tk1.Frame(jjo2_show_title_frm,bd=2,relief=tk1.GROOVE)        jjo2_title_color_frm.pack(fill=tk1.X)                      jjo2_title_color_frm.grid_columnconfigure(0, weight=1)        jjo2_title_color_frm.grid_columnconfigure(3, weight=1)        jjo2_title_color_butt = tk1.Button(jjo2_title_color_frm,text="Select Title Color", command= lambda: getcolor(jjo2_master,"jjocont2.title_color_temp","J/Jo Title",                                                                                                                   jjo2_title_color_label,jjo2_title_color_frm,False))        jjo2_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo2_title_color_label = tk1.Label(jjo2_title_color_frm,text="Current\nColor:\n%s" % jjocont2.title_color_temp,fg=getoppositecolor(jjocont2.title_color_temp), bg=jjocont2.title_color_temp,width=10)        jjo2_title_color_label.grid(row=0,column=2)        disablewidgets(jjocont2.show_title_var,False,[jjo2_title_color_butt,jjo2_title_color_label],[],[])        jjo2_show_legend_frm = tk1.Frame(jjo2_legend_settings_frm,bd=2,relief=tk1.GROOVE)        jjo2_show_legend_frm.pack(fill=tk1.X)        jjocont2.show_legend_var = tk1.BooleanVar(value=jjocont2.show_legend)        jjo2_show_legend_chbutt = tk1.Checkbutton(jjo2_show_legend_frm, text="Show Legend?", variable=jjocont2.show_legend_var,command= lambda:                                              disablewidgets(jjocont2.show_legend_var,False,[jjo2_legend_color_butt,jjo2_legend_color_label],[],[]))        jjo2_show_legend_chbutt.pack(fill=tk1.X)        jjo2_legend_color_frm = tk1.Frame(jjo2_show_legend_frm,bd=2,relief=tk1.GROOVE)        jjo2_legend_color_frm.pack(fill=tk1.X)        jjo2_legend_color_frm.grid_columnconfigure(0, weight=1)        jjo2_legend_color_frm.grid_columnconfigure(3, weight=1)        jjo2_legend_color_butt = tk1.Button(jjo2_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(jjo2_master,"jjocont2.legend_color_temp","J/Jo Legend",jjo2_legend_color_label,jjo2_legend_color_frm,False))        jjo2_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo2_legend_color_label = tk1.Label(jjo2_legend_color_frm,text="Current\nColor:\n%s" % jjocont2.legend_color_temp,fg=getoppositecolor(jjocont2.legend_color_temp), bg=jjocont2.legend_color_temp,width=10)        jjo2_legend_color_label.grid(row=0,column=2)        disablewidgets(jjocont2.show_legend_var,False,[jjo2_legend_color_butt,jjo2_legend_color_label],[],[])        jjo2_axesspecs_frm = tk1.Frame(jjo2_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo2_axesspecs_frm.pack(fill=tk1.X)        jjo2_axesspecs_label = tk1.Label(jjo2_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        jjo2_axesspecs_label.pack(fill=tk1.X)        jjo2_axes_color_frm = tk1.Frame(jjo2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        jjo2_axes_color_frm.pack(fill=tk1.X)        jjo2_axes_color_frm.grid_columnconfigure(0, weight=1)        jjo2_axes_color_frm.grid_columnconfigure(3, weight=1)                        jjo2_axes_color_butt = tk1.Button(jjo2_axes_color_frm,text="Select Axes Color",                                         command= lambda: getcolor(jjo2_master,"jjocont2.axes_color_temp","J/Jo Axes",jjo2_axes_color_label,jjo2_axes_color_frm,False))        jjo2_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo2_axes_color_label = tk1.Label(jjo2_axes_color_frm,text="Current\nColor:\n%s" % jjocont2.axes_color_temp,fg=getoppositecolor(jjocont2.axes_color_temp), bg=jjocont2.axes_color_temp,width=10)        jjo2_axes_color_label.grid(row=0, column=2,sticky='NSEW')        jjo2_axes_width_frm = tk1.Frame(jjo2_axesspecs_frm,bd=2,relief=tk1.GROOVE)        jjo2_axes_width_frm.pack(fill=tk1.X)        jjo2_axes_width_frm.grid_columnconfigure(0, weight=1)        jjo2_axes_width_frm.grid_columnconfigure(3, weight=1)        jjo2_axes_width_label = tk1.Label(jjo2_axes_width_frm, text="Axes Width:")        jjo2_axes_width_label.grid(row=0,column=1,sticky='NESW')                jjocont2.axes_width_var = tk1.IntVar(jjo2_interior)        jjocont2.axes_width_var.set(jjocont2.axes_width)         jjo2_axes_width_optionmenu = tk1.OptionMenu(jjo2_axes_width_frm, jjocont2.axes_width_var, *linewidthchoices_set)        jjo2_axes_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo2_axes_width_optionmenu.configure(font=('Consolas',10))        jjo2_y_axisspecs_frm = tk1.Frame(jjo2_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo2_y_axisspecs_frm.pack(fill=tk1.X)        jjo2_y_axisspecs_label = tk1.Label(jjo2_y_axisspecs_frm, text="Y Axis Settings:",font="Helvetica 10 bold")        jjo2_y_axisspecs_label.pack(fill=tk1.X)        jjo2_show_yticks_labels_frm = tk1.Frame(jjo2_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo2_show_yticks_labels_frm.pack(fill=tk1.X)        jjocont2.show_yaxis_ticks_var = tk1.BooleanVar(value=jjocont2.show_yaxis_ticks)        jjo2_show_yaxis_ticks_chbutt = tk1.Checkbutton(jjo2_show_yticks_labels_frm, text="Show Y Axis Ticks / Labels?", variable=jjocont2.show_yaxis_ticks_var,command= lambda:                                              disablewidgets(jjocont2.show_yaxis_ticks_var,False,[jjo2_yaxis_labels_tick_color_butt,jjo2_yaxis_labels_tick_color_label,jjo2_yaxis_label_fontsize_label,jjo2_yaxis_label_fontsize_optionmenu,                                                                                                 jjo2_show_yaxis_percentlabel_chbutt,jjo2_show_yaxis_abslabel_chbutt,jjo2_yaxis_tick_width_label,jjo2_yaxis_tick_width_optionmenu,                                                                                                 jjo2_yaxis_tick_length_label,jjo2_yaxis_tick_length_optionmenu],[],[]))        jjo2_show_yaxis_ticks_chbutt.pack(fill=tk1.X)        jjo2_yaxis_labels_tick_color_frm = tk1.Frame(jjo2_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo2_yaxis_labels_tick_color_frm.pack(fill=tk1.X)        jjo2_yaxis_labels_tick_color_frm.grid_columnconfigure(0, weight=1)        jjo2_yaxis_labels_tick_color_frm.grid_columnconfigure(3, weight=1)                        jjo2_yaxis_labels_tick_color_butt = tk1.Button(jjo2_yaxis_labels_tick_color_frm,text="Select Y Axis Tick\n(& Step Label) Color",                                                      command=lambda: getcolor(jjo2_master,"jjocont2.yaxis_labels_tick_color_temp","J/Jo Y Axis Tick & Label",jjo2_yaxis_labels_tick_color_label,jjo2_yaxis_labels_tick_color_frm,False))        jjo2_yaxis_labels_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo2_yaxis_labels_tick_color_label = tk1.Label(jjo2_yaxis_labels_tick_color_frm,text="Current\nColor:\n%s" % jjocont2.yaxis_labels_tick_color_temp,                                                         fg=getoppositecolor(jjocont2.yaxis_labels_tick_color_temp), bg=jjocont2.yaxis_labels_tick_color_temp,width=10)        jjo2_yaxis_labels_tick_color_label.grid(row=0, column=2,sticky='NSEW')        jjo2_yaxis_tick_width_frm = tk1.Frame(jjo2_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo2_yaxis_tick_width_frm.pack(fill=tk1.X)        jjo2_yaxis_tick_width_frm.grid_columnconfigure(0, weight=1)        jjo2_yaxis_tick_width_frm.grid_columnconfigure(3, weight=1)        jjo2_yaxis_tick_width_label = tk1.Label(jjo2_yaxis_tick_width_frm, text="Y Axis Tick Width:")        jjo2_yaxis_tick_width_label.grid(row=0,column=1,sticky='NESW')                jjocont2.yaxis_tick_width_var = tk1.IntVar(jjo2_interior)        jjocont2.yaxis_tick_width_var.set(jjocont2.yaxis_tick_width)                jjo2_yaxis_tick_width_optionmenu = tk1.OptionMenu(jjo2_yaxis_tick_width_frm, jjocont2.yaxis_tick_width_var, *linewidthchoices_set)        jjo2_yaxis_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo2_yaxis_tick_width_optionmenu.configure(font=('Consolas',10))        jjo2_yaxis_tick_length_frm = tk1.Frame(jjo2_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo2_yaxis_tick_length_frm.pack(fill=tk1.X)        jjo2_yaxis_tick_length_frm.grid_columnconfigure(0, weight=1)        jjo2_yaxis_tick_length_frm.grid_columnconfigure(3, weight=1)        jjo2_yaxis_tick_length_label = tk1.Label(jjo2_yaxis_tick_length_frm, text="Y Axis Tick Length:")        jjo2_yaxis_tick_length_label.grid(row=0,column=1,sticky='NESW')                jjocont2.yaxis_tick_length_var = tk1.IntVar(jjo2_interior)        jjocont2.yaxis_tick_length_var.set(jjocont2.yaxis_tick_length)         jjo2_yaxis_tick_length_optionmenu = tk1.OptionMenu(jjo2_yaxis_tick_length_frm, jjocont2.yaxis_tick_length_var, *linelengthchoices_set)        jjo2_yaxis_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo2_yaxis_tick_length_optionmenu.configure(font=('Consolas',10))        jjo2_yaxis_label_fontsize_frm = tk1.Frame(jjo2_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo2_yaxis_label_fontsize_frm.pack(fill=tk1.X)        jjo2_yaxis_label_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo2_yaxis_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo2_yaxis_label_fontsize_label = tk1.Label(jjo2_yaxis_label_fontsize_frm, text="Y Axis Label Font Size:",bd=1)        jjo2_yaxis_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont2.yaxis_label_fontsize_mod_var = tk1.StringVar(jjo2_interior)        jjocont2.yaxis_label_fontsize_mod_var.set(jjocont2.yaxis_label_fontsize_mod)         jjo2_yaxis_label_fontsize_optionmenu = tk1.OptionMenu(jjo2_yaxis_label_fontsize_frm, jjocont2.yaxis_label_fontsize_mod_var, *fontsizes_set)        jjo2_yaxis_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo2_yaxis_label_fontsize_optionmenu.configure(font=('Consolas',10))                jjo2_show_yaxis_percentlabel_frm = tk1.Frame(jjo2_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo2_show_yaxis_percentlabel_frm.pack(fill=tk1.X)        jjocont2.show_yaxis_percentlabel_var = tk1.BooleanVar(value=jjocont2.show_yaxis_percentlabel)        jjo2_show_yaxis_percentlabel_chbutt = tk1.Checkbutton(jjo2_show_yaxis_percentlabel_frm, text="Show Y Axis Percent Labels?", variable=jjocont2.show_yaxis_percentlabel_var)        jjo2_show_yaxis_percentlabel_chbutt.pack(fill=tk1.X)        jjo2_show_yaxis_abslabel_frm = tk1.Frame(jjo2_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo2_show_yaxis_abslabel_frm.pack(fill=tk1.X)        jjocont2.show_yaxis_abslabel_var = tk1.BooleanVar(value=jjocont2.show_yaxis_abslabel)        jjo2_show_yaxis_abslabel_chbutt = tk1.Checkbutton(jjo2_show_yaxis_abslabel_frm, text="Show Y Axis Absolute J Value Labels?", variable=jjocont2.show_yaxis_abslabel_var)        jjo2_show_yaxis_abslabel_chbutt.pack(fill=tk1.X)        disablewidgets(jjocont2.show_yaxis_ticks_var,False,[jjo2_yaxis_labels_tick_color_butt,jjo2_yaxis_labels_tick_color_label,jjo2_yaxis_label_fontsize_label,jjo2_yaxis_label_fontsize_optionmenu,jjo2_show_yaxis_percentlabel_chbutt,                                                                   jjo2_show_yaxis_abslabel_chbutt,jjo2_yaxis_tick_width_label,jjo2_yaxis_tick_width_optionmenu,jjo2_yaxis_tick_length_label,jjo2_yaxis_tick_length_optionmenu],[],[])        jjo2_col2_frm = tk1.Frame(jjo2_interior,bd=2) # Column 2        jjo2_col2_frm.grid(row=0,column=2,sticky='NSEW')        jjo2_error_settings_frm = tk1.Frame(jjo2_col2_frm,bd=2,relief=tk1.SUNKEN)        jjo2_error_settings_frm.pack(fill=tk1.X)        jjo2_error_settings_label = tk1.Label(jjo2_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        jjo2_error_settings_label.pack(fill=tk1.X)                jjo2_error_radio_frm = tk1.Frame(jjo2_error_settings_frm,bd=2,relief=tk1.GROOVE)        jjo2_error_radio_frm.pack(fill=tk1.X)        jjo2_error_settings_label = tk1.Label(jjo2_error_radio_frm, text="Select Error-Scaling for Symbols:")        jjo2_error_settings_label.pack(fill=tk1.X)        jjocont2.error_scaling_var = tk1.StringVar()        jjocont2.error_scaling_var.set(jjocont2.error_scaling)        jjo2_errorscaling_radio_none = tk1.Radiobutton(jjo2_error_radio_frm, text="No Error Scaling",variable=jjocont2.error_scaling_var,value="None",command = lambda:              disablewidgets(jjocont2.error_scaling_var,"None",[],[jjo2_jdecrease_color_butt,jjo2_jdecrease_color_label,jjocont2.jdecrease_symbol_size_slider,jjo2_jdecrease_size_label],[]))        jjo2_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        jjo2_errorscaling_radio_size = tk1.Radiobutton(jjo2_error_radio_frm, text="Scale Symbol Size by Error",variable=jjocont2.error_scaling_var,value="Size",command = lambda:                  disablewidgets(jjocont2.error_scaling_var,"Size",[jjocont2.jdecrease_symbol_size_slider,jjo2_jdecrease_size_label],[jjo2_jdecrease_color_butt,jjo2_jdecrease_color_label],[]))        jjo2_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        jjo2_errorscaling_radio_color = tk1.Radiobutton(jjo2_error_radio_frm, text="Scale Symbol Color By Error",variable=jjocont2.error_scaling_var,value="Color",command = lambda:                               disablewidgets(jjocont2.error_scaling_var,"Color",[jjo2_jdecrease_color_butt,jjo2_jdecrease_color_label],                                              [jjocont2.jdecrease_symbol_size_slider,jjo2_jdecrease_size_label],[]))        jjo2_errorscaling_radio_color.pack(fill=tk1.X,padx=10)        jjo2_jdecrease_frm = tk1.Frame(jjo2_col2_frm,bd=2,relief=tk1.SUNKEN)        jjo2_jdecrease_frm.pack(fill=tk1.X)        jjo2_jdecrease_symbol_settings_label = tk1.Label(jjo2_jdecrease_frm, text="J Decrease Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo2_jdecrease_symbol_settings_label.pack(fill=tk1.X)        jjo2_jdecrease_symbol_frm = tk1.Frame(jjo2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo2_jdecrease_symbol_frm.pack(fill=tk1.X)        jjo2_jdecrease_symbol_frm.grid_columnconfigure(0, weight=1)        jjo2_jdecrease_symbol_frm.grid_columnconfigure(3, weight=1)                  jjo2_jdecrease_symbol_label = tk1.Label(jjo2_jdecrease_symbol_frm, text="J Decrease Symbol:",bd=1)        jjo2_jdecrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont2.jdecrease_symbol_var = tk1.StringVar(jjo2_interior)        jjocont2.jdecrease_symbol_var.set(symbolchoices_dict_reverse[jjocont2.jdecrease_symbol])         jjo2_jdecrease_symbolchoices_optionmenu = tk1.OptionMenu(jjo2_jdecrease_symbol_frm, jjocont2.jdecrease_symbol_var, *symbolchoices_set)        jjo2_jdecrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo2_jdecrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo2_jdecrease_symbol_size_frm = tk1.Frame(jjo2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo2_jdecrease_symbol_size_frm.pack(fill=tk1.X)        jjo2_jdecrease_size_label = tk1.Label(jjo2_jdecrease_symbol_size_frm, text="J Decrease Symbol Size:")        jjo2_jdecrease_size_label.pack(fill=tk1.X)        jjocont2.jdecrease_symbol_size_slider = Scale(jjo2_jdecrease_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont2.jdecrease_symbol_size_slider.set(jjocont2.jdecrease_size)        jjocont2.jdecrease_symbol_size_slider.pack(fill=tk1.X)        jjo2_jdecrease_color_frm = tk1.Frame(jjo2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo2_jdecrease_color_frm.pack(fill=tk1.X)        jjo2_jdecrease_color_frm.grid_columnconfigure(0, weight=1)        jjo2_jdecrease_color_frm.grid_columnconfigure(3, weight=1)        jjo2_jdecrease_color_butt = tk1.Button(jjo2_jdecrease_color_frm,text="Select J Decrease\nSymbol Color",                                              command= lambda: getcolor(jjo2_master,"jjocont2.jdecrease_color_temp","J Decrease Symbol",jjo2_jdecrease_color_label,jjo2_jdecrease_color_frm,False))        jjo2_jdecrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo2_jdecrease_color_label = tk1.Label(jjo2_jdecrease_color_frm,text="Current\nColor:\n%s" % jjocont2.jdecrease_color_temp,fg=getoppositecolor(jjocont2.jdecrease_color_temp), bg=jjocont2.jdecrease_color_temp,width=10)        jjo2_jdecrease_color_label.grid(row=0, column=2,sticky='NSEW')        jjo2_show_jdecrease_edge_frm = tk1.Frame(jjo2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo2_show_jdecrease_edge_frm.pack(fill=tk1.X)        jjocont2.show_jdecrease_edge_var = tk1.BooleanVar(value=jjocont2.show_jdecrease_edge)        jjo2_show_jdecrease_edge_chbutt = tk1.Checkbutton(jjo2_show_jdecrease_edge_frm, text="Show J Decrease Symbol Border?", variable=jjocont2.show_jdecrease_edge_var,command= lambda:                                              disablewidgets(jjocont2.show_jdecrease_edge_var,False,[jjo2_jdecrease_edge_color_butt,jjo2_jdecrease_edge_color_label,jjo2_jdecrease_edge_width_label,jjo2_jdecrease_edge_width_optionmenu],[],[]))        jjo2_show_jdecrease_edge_chbutt.pack(fill=tk1.X)        jjo2_jdecrease_edge_color_frm = tk1.Frame(jjo2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo2_jdecrease_edge_color_frm.pack(fill=tk1.X)        jjo2_jdecrease_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo2_jdecrease_edge_color_frm.grid_columnconfigure(3, weight=1)        jjo2_jdecrease_edge_color_butt = tk1.Button(jjo2_jdecrease_edge_color_frm,text="Select J Decrease\nSymbol Border Color",                                                   command= lambda: getcolor(jjo2_master,"jjocont2.jdecrease_edge_color_temp","J Decrease Symbol Edge",jjo2_jdecrease_edge_color_label,jjo2_jdecrease_edge_color_frm,False))        jjo2_jdecrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo2_jdecrease_edge_color_label = tk1.Label(jjo2_jdecrease_edge_color_frm,text="Current\nColor:\n%s" % jjocont2.jdecrease_edge_color_temp,fg=getoppositecolor(jjocont2.jdecrease_edge_color_temp),                                                  bg=jjocont2.jdecrease_edge_color_temp,width=10)        jjo2_jdecrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo2_jdecrease_edge_width_frm = tk1.Frame(jjo2_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo2_jdecrease_edge_width_frm.pack(fill=tk1.X)        jjo2_jdecrease_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo2_jdecrease_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo2_jdecrease_edge_width_label = tk1.Label(jjo2_jdecrease_edge_width_frm, text="Intensity Decrease Symbol\nBorder Width:")        jjo2_jdecrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont2.jdecrease_edge_width_var = tk1.IntVar(jjo2_interior)        jjocont2.jdecrease_edge_width_var.set(jjocont2.jdecrease_edge_width)         jjo2_jdecrease_edge_width_optionmenu = tk1.OptionMenu(jjo2_jdecrease_edge_width_frm, jjocont2.jdecrease_edge_width_var, *linewidthchoices_set)        jjo2_jdecrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo2_jdecrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont2.show_jdecrease_edge_var,False,[jjo2_jdecrease_edge_color_butt,jjo2_jdecrease_edge_color_label,jjo2_jdecrease_edge_width_label,jjo2_jdecrease_edge_width_optionmenu],[],[])        disablewidgets(jjocont2.error_scaling_var,"None",[],[jjo2_jdecrease_color_butt,jjo2_jdecrease_color_label,jjocont2.jdecrease_symbol_size_slider,jjo2_jdecrease_size_label],[])        disablewidgets(jjocont2.error_scaling_var,"Size",[jjocont2.jdecrease_symbol_size_slider,jjo2_jdecrease_size_label],[jjo2_jdecrease_color_butt,jjo2_jdecrease_color_label],[])        disablewidgets(jjocont2.error_scaling_var,"Color",[jjo2_jdecrease_color_butt,jjo2_jdecrease_color_label],[jjocont2.jdecrease_symbol_size_slider,jjo2_jdecrease_size_label],[])        jjo2_submit_butt_frm = tk1.Frame(jjo2_interior,bd=2,relief=tk1.RIDGE)        jjo2_submit_butt_frm.grid(row=2,column=0, columnspan=6, sticky='NSEW')                jjo2_submit_butt = tk1.Button(jjo2_submit_butt_frm, text="Submit and Save Changes and Update J/Jo Step Plot", command= lambda: submitjjo2controls(self,jjocont2,jjo2_master))        jjo2_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo2_submit_butt.configure(font=('Consolas bold',12))        jjo2_reset_butt = tk1.Button(jjo2_submit_butt_frm, text="Reset J/Jo Step Plot to Defaults", command= lambda: jjo2_resetdefaults(self,jjo2_master))        jjo2_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo2_reset_butt.configure(font=('Consolas',10))        jjo2_cancel_butt = tk1.Button(jjo2_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(jjo2_master))        jjo2_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo2_cancel_butt.configure(font=('Consolas',10))        tk1.mainloop()    returndef jjocontrols_multiple(self):    global jjo3_master, jjocont3##    if jjo3_master != None and jjo3_master.winfo_exists():##    else: # Create jjo3_master control window    try:        'normal' == jjo3_master.state()        jjo3_master.lift()        jjo3_master.attributes('-topmost',True)        jjo3_master.after_idle(jjo3_master.attributes,'-topmost',False)        except:        jjo3_master = tk1.Toplevel(root)        jjo3_master.focus_set()        jjo3_master.title("J/Jo Plot Controls (Multiple)")        jjo3_master.geometry("+40+40")        jjocont3.printstep_color_temp = jjocont3.printstep_color # set color temps        jjocont3.printsamp_color_temp = jjocont3.printsamp_color        jjocont3.arrowline_color_temp = jjocont3.arrowline_color        jjocont3.jincrease_color_temp = jjocont3.jincrease_color        jjocont3.jincrease_edge_color_temp = jjocont3.jincrease_edge_color        jjocont3.jdecrease_color_temp = jjocont3.jdecrease_color        jjocont3.jdecrease_edge_color_temp = jjocont3.jdecrease_edge_color        jjocont3.firststep_color_temp = jjocont3.firststep_color        jjocont3.firststep_edge_color_temp = jjocont3.firststep_edge_color        jjocont3.laststep_color_temp = jjocont3.laststep_color        jjocont3.laststep_edge_color_temp = jjocont3.laststep_edge_color        jjocont3.axes_color_temp = jjocont3.axes_color        jjocont3.xaxis_steplabels_tick_color_temp = jjocont3.xaxis_steplabels_tick_color        jjocont3.xaxis_stepboundaries_color_temp = jjocont3.xaxis_stepboundaries_color        jjocont3.yaxis_labels_tick_color_temp = jjocont3.yaxis_labels_tick_color        jjocont3.jdecrease_absrect_color_temp = jjocont3.jdecrease_absrect_color        jjocont3.jdecrease_absrect_edge_color_temp = jjocont3.jdecrease_absrect_edge_color        jjocont3.jdecrease_relrect_color_temp = jjocont3.jdecrease_relrect_color        jjocont3.jdecrease_relrect_edge_color_temp = jjocont3.jdecrease_relrect_edge_color        jjocont3.jincrease_absrect_color_temp = jjocont3.jincrease_absrect_color        jjocont3.jincrease_absrect_edge_color_temp = jjocont3.jincrease_absrect_edge_color        jjocont3.jincrease_relrect_color_temp = jjocont3.jincrease_relrect_color        jjocont3.jincrease_relrect_edge_color_temp = jjocont3.jincrease_relrect_edge_color        jjocont3.magmin_color_temp = jjocont3.magmin_color        jjocont3.magmin_text_color_temp = jjocont3.magmin_text_color        jjocont3.vertstepboundline_color_temp = jjocont3.vertstepboundline_color        jjocont3.title_color_temp = jjocont3.title_color        jjocont3.legend_color_temp = jjocont3.legend_color            jjo3_vertical_scrollbar = tk1.Scrollbar(jjo3_master,orient=tk1.VERTICAL)        jjo3_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        jjo3_horizontal_scrollbar = tk1.Scrollbar(jjo3_master,orient=tk1.HORIZONTAL)        jjo3_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.jjo3_canvas = tk1.Canvas(jjo3_master, bd=0, highlightthickness=0,yscrollcommand=jjo3_vertical_scrollbar.set,xscrollcommand=jjo3_horizontal_scrollbar.set,width=1800,height=880,scrollregion=(0,0,1800,880))        self.jjo3_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        jjo3_vertical_scrollbar.config(command=self.jjo3_canvas.yview)        jjo3_horizontal_scrollbar.config(command=self.jjo3_canvas.xview)        self.jjo3_canvas.xview_moveto(0)        self.jjo3_canvas.yview_moveto(0)        jjo3_interior = tk1.Frame(self.jjo3_canvas,width=500,height=500)        jjo3_interior_id = self.jjo3_canvas.create_window(0, 0, window=jjo3_interior,anchor=tk1.NW)                jjo3_col0_frm = tk1.Frame(jjo3_interior,bd=2) # Column 0        jjo3_col0_frm.grid(row=0,column=0,sticky='NSEW')                jjo3_printsamps_frm = tk1.Frame(jjo3_col0_frm,bd=2,relief=tk1.SUNKEN)        jjo3_printsamps_frm.pack(fill=tk1.X)                jjo3_sample_settings_label = tk1.Label(jjo3_printsamps_frm, text="Sample Label Settings:",font="Helvetica 12 bold")        jjo3_sample_settings_label.grid(row=0, column=0, sticky='NSEW')        jjo3_selectprintsamps_frm = tk1.Frame(jjo3_printsamps_frm,bd=2,relief=tk1.GROOVE)        jjo3_selectprintsamps_frm.grid(row=1,column=0,sticky='NSEW')        jjo3_selectsamps_label = tk1.Label(jjo3_selectprintsamps_frm, text="Select which Sample\nLabels to NOT Print:")        jjo3_selectsamps_label.grid(row=0, column=0, sticky='NSEW')        jjocont3.printsamplabel_box = tk1.Listbox(jjo3_selectprintsamps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for sampoffindex, sample in enumerate(self.sitedata):            jjocont3.printsamplabel_box.insert(tk1.END,sample.name)            jjocont3.printsamplabel_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (sample.jjo_printname):                jjocont3.printsamplabel_box.select_set(sampoffindex)        jjocont3.printsamplabel_box.grid(row=1,column=0,sticky='NSEW')        jjocont3.printsamplabel_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("jjocont3.printsamplabel_box"))        jjocont3.printsamplabel_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("jjocont3.printsamplabel_box"))        jjocont3.printsamplabel_scrollbar = tk1.Scrollbar(jjocont3.printsamplabel_box,orient=tk1.VERTICAL)        jjocont3.printsamplabel_scrollbar.config(command=jjocont3.printsamplabel_box.yview)        jjocont3.printsamplabel_box.config(yscrollcommand=jjocont3.printsamplabel_scrollbar.set)        jjocont3.printsamplabel_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        jjocont3.printsamplabel_box.bind("<Enter>", lambda x: enterjjo3_printsamplabelbox(self))        jjocont3.printsamplabel_box.bind("<Leave>", lambda x: leavejjo3_printsamplabelbox(self))        jjo3_show_allsamps_butt = tk1.Button(jjo3_printsamps_frm, text="Print ALL Sample Labels\n(Deselect All)", command= lambda: jjocont3.printsamplabel_box.selection_clear(0, tk1.END))        jjo3_show_allsamps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        jjo3_show_nosamps_butt = tk1.Button(jjo3_printsamps_frm, text="Print NO Sample Labels\n(Select All)", command= lambda: jjocont3.printsamplabel_box.selection_set(0, tk1.END))        jjo3_show_nosamps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        jjo3_printsamps_color_frm = tk1.Frame(jjo3_printsamps_frm,bd=2,relief=tk1.GROOVE)        jjo3_printsamps_color_frm.grid(row=4,column=0,sticky='NSEW')        jjo3_printsamps_color_frm.grid_columnconfigure(0, weight=1)        jjo3_printsamps_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_printsamps_color_butt = tk1.Button(jjo3_printsamps_color_frm,text="Select Sample Label Color", command= lambda: getcolor(jjo3_master,"jjocont3.printsamp_color_temp","J/Jo Sample Labels",                                                                                                                                jjo3_printsamps_color_label,jjo3_printsamps_color_frm,False))        jjo3_printsamps_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_printsamps_color_label = tk1.Label(jjo3_printsamps_color_frm,text="Current\nColor:\n%s" % jjocont3.printsamp_color_temp,fg=getoppositecolor(jjocont3.printsamp_color_temp), bg=jjocont3.printsamp_color_temp,width=10)        jjo3_printsamps_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_samps_fontsize_frm = tk1.Frame(jjo3_printsamps_frm,bd=2,relief=tk1.GROOVE)        jjo3_samps_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        jjo3_samps_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo3_samps_fontsize_frm.grid_columnconfigure(3, weight=1)                   jjo3_samps_fontsize_label = tk1.Label(jjo3_samps_fontsize_frm, text="Step Font Size:",bd=1)        jjo3_samps_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont3.samp_fontsize_mod_var = tk1.StringVar(jjo3_interior)        jjocont3.samp_fontsize_mod_var.set(jjocont3.samp_fontsize_mod)         jjo3_samps_fontsize_optionmenu = tk1.OptionMenu(jjo3_samps_fontsize_frm, jjocont3.samp_fontsize_mod_var, *fontsizes_set)        jjo3_samps_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo3_samps_fontsize_optionmenu.configure(font=('Consolas',10))        jjo3_showannot_frm = tk1.Frame(jjo3_printsamps_frm,bd=2,relief=tk1.GROOVE)        jjo3_showannot_frm.grid(row=6, column=0,sticky='NSEW')        jjocont3.show_popupannotations_var = tk1.BooleanVar(value=jjocont3.show_popupannotations)        jjo3_show_popupannotations_chbutt = tk1.Checkbutton(jjo3_showannot_frm, text="Show Step Mouseover Popup Labels?", variable=jjocont3.show_popupannotations_var)        jjo3_show_popupannotations_chbutt.pack(fill=tk1.X)        jjo3_col1_frm = tk1.Frame(jjo3_interior,bd=2) # Column 1        jjo3_col1_frm.grid(row=0,column=1,sticky='NSEW')        jjo3_printsteps_frm = tk1.Frame(jjo3_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo3_printsteps_frm.pack(fill=tk1.X)                jjo3_step_settings_label = tk1.Label(jjo3_printsteps_frm, text="Step Label Settings:",font="Helvetica 12 bold")        jjo3_step_settings_label.grid(row=0, column=0, sticky='NSEW')        jjo3_selectprintsteps_frm = tk1.Frame(jjo3_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo3_selectprintsteps_frm.grid(row=1,column=0,sticky='NSEW')        jjo3_selectsampleforprint_label = tk1.Label(jjo3_selectprintsteps_frm, text="Select Sample to\nSelect Step Labels:")        jjo3_selectsampleforprint_label.grid(row=0, column=0, sticky='NSEW')        jjocont3.sitedata = self.sitedata        jjocont3.printsamplist_box = tk1.Listbox(jjo3_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.SINGLE,exportselection=0)        for sampoffindex, sample in enumerate(self.sitedata):            jjocont3.printsamplist_box.insert(tk1.END,sample.name)            jjocont3.printsamplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="WHITE")        jjocont3.printsamplist_box.select_set(0)        jjocont3.prevsamp = self.samplelist[jjocont3.printsamplist_box.curselection()[0]]        jjocont3.printsamplist_box.grid(row=1,column=0,sticky='NSEW')        jjocont3.printsamplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("jjocont3.printsamplist_box"))        jjocont3.printsamplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("jjocont3.printsamplist_box"))        jjocont3.printsamplist_scrollbar = tk1.Scrollbar(jjocont3.printsamplist_box,orient=tk1.VERTICAL)        jjocont3.printsamplist_scrollbar.config(command=jjocont3.printsamplist_box.yview)        jjocont3.printsamplist_box.config(yscrollcommand=jjocont3.printsamplist_scrollbar.set)        jjocont3.printsamplist_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        jjocont3.printsamplist_box.bind("<<ListboxSelect>>", lambda x: updatejjo3steps(self)) # single-click sample to select        jjocont3.printsamplist_box.bind("<Enter>", lambda x: enterjjo3_printsamplistbox(self))        jjocont3.printsamplist_box.bind("<Leave>", lambda x: leavejjo3_printsamplistbox(self))        jjo3_selectsteps_label = tk1.Label(jjo3_selectprintsteps_frm, text="Select which Step\nLabels to NOT Print:")        jjo3_selectsteps_label.grid(row=0, column=1, sticky='NSEW')        jjocont3.printsteplist_box = tk1.Listbox(jjo3_selectprintsteps_frm,width=40,height=17,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)        for stepoffindex, step in enumerate(self.sitedata[0].data):            jjocont3.printsteplist_box.insert(tk1.END,step.dmagstep)            jjocont3.printsteplist_box.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            if not (step.jjo_printlabel):                jjocont3.printsteplist_box.select_set(stepoffindex)        jjocont3.printsteplist_box.grid(row=1,column=1,sticky='NSEW')        jjocont3.printsteplist_box.bind("<Control-Key-a>", lambda x: selectall_printsteplistbox("jjocont3.printsteplist_box"))        jjocont3.printsteplist_box.bind("<Control-Key-A>", lambda x: selectall_printsteplistbox("jjocont3.printsteplist_box"))        jjocont3.printsteplist_scrollbar = tk1.Scrollbar(jjocont3.printsteplist_box,orient=tk1.VERTICAL)        jjocont3.printsteplist_scrollbar.config(command=jjocont3.printsteplist_box.yview)        jjocont3.printsteplist_box.config(yscrollcommand=jjocont3.printsteplist_scrollbar.set)        jjocont3.printsteplist_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)        jjocont3.printsteplist_box.bind("<Enter>", lambda x: enterjjo3_printsteplistbox(self))        jjocont3.printsteplist_box.bind("<Leave>", lambda x: leavejjo3_printsteplistbox(self))        jjo3_show_allsteps_butt = tk1.Button(jjo3_printsteps_frm, text="Print ALL Step Labels\n(Deselect All)", command= lambda: jjocont3.printsteplist_box.selection_clear(0, tk1.END))        jjo3_show_allsteps_butt.grid(row=2,column=0, sticky='NSEW',padx=10,pady=5)        jjo3_show_nosteps_butt = tk1.Button(jjo3_printsteps_frm, text="Print NO Step Labels\n(Select All)", command= lambda: jjocont3.printsteplist_box.selection_set(0, tk1.END))        jjo3_show_nosteps_butt.grid(row=3,column=0, sticky='NSEW',padx=10,pady=5)        jjo3_printstep_color_frm = tk1.Frame(jjo3_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo3_printstep_color_frm.grid(row=4,column=0,sticky='NSEW')        jjo3_printstep_color_frm.grid_columnconfigure(0, weight=1)        jjo3_printstep_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_printstep_color_butt = tk1.Button(jjo3_printstep_color_frm,text="Select Step Label Color", command= lambda: getcolor(jjo3_master,"jjocont3.printstep_color_temp","J/Jo Step Labels",                                                                                                                                jjo3_printstep_color_label,jjo3_printstep_color_frm,False))        jjo3_printstep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_printstep_color_label = tk1.Label(jjo3_printstep_color_frm,text="Current\nColor:\n%s" % jjocont3.printstep_color_temp,fg=getoppositecolor(jjocont3.printstep_color_temp), bg=jjocont3.printstep_color_temp,width=10)        jjo3_printstep_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_step_fontsize_frm = tk1.Frame(jjo3_printsteps_frm,bd=2,relief=tk1.GROOVE)        jjo3_step_fontsize_frm.grid(row=5,column=0,sticky='NSEW')        jjo3_step_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo3_step_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo3_step_fontsize_label = tk1.Label(jjo3_step_fontsize_frm, text="Step Font Size:",bd=1)        jjo3_step_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont3.step_fontsize_mod_var = tk1.StringVar(jjo3_interior)        jjocont3.step_fontsize_mod_var.set(jjocont3.step_fontsize_mod)         jjo3_step_fontsize_optionmenu = tk1.OptionMenu(jjo3_step_fontsize_frm, jjocont3.step_fontsize_mod_var, *fontsizes_set)        jjo3_step_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo3_step_fontsize_optionmenu.configure(font=('Consolas',10))        jjo3_legend_settings_frm = tk1.Frame(jjo3_col1_frm,bd=2,relief=tk1.SUNKEN)        jjo3_legend_settings_frm.pack(fill=tk1.X)        jjo3_legend_settings_label = tk1.Label(jjo3_legend_settings_frm, text="Legend & Title Settings:",bd=1,font="Helvetica 12 bold")        jjo3_legend_settings_label.pack(fill=tk1.X)                jjo3_show_title_frm = tk1.Frame(jjo3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_title_frm.pack(fill=tk1.X)        jjocont3.show_title_var = tk1.BooleanVar(value=jjocont3.show_title)        jjo3_show_title_chbutt = tk1.Checkbutton(jjo3_show_title_frm, text="Show Title?", variable=jjocont3.show_title_var,command= lambda:                                              disablewidgets(jjocont3.show_title_var,False,[jjo3_title_color_butt,jjo3_title_color_label],[],[]))        jjo3_show_title_chbutt.pack(fill=tk1.X)        jjo3_title_color_frm = tk1.Frame(jjo3_show_title_frm,bd=2,relief=tk1.GROOVE)        jjo3_title_color_frm.pack(fill=tk1.X)          jjo3_title_color_frm.grid_columnconfigure(0, weight=1)        jjo3_title_color_frm.grid_columnconfigure(3, weight=1)        jjo3_title_color_butt = tk1.Button(jjo3_title_color_frm,text="Select Title Color", command= lambda: getcolor(jjo3_master,"jjocont3.title_color_temp","J/Jo Title",                                                                                                                   jjo3_title_color_label,jjo3_title_color_frm,False))        jjo3_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_title_color_label = tk1.Label(jjo3_title_color_frm,text="Current\nColor:\n%s" % jjocont3.title_color_temp,fg=getoppositecolor(jjocont3.title_color_temp), bg=jjocont3.title_color_temp,width=10)        jjo3_title_color_label.grid(row=0,column=2)        disablewidgets(jjocont3.show_title_var,False,[jjo3_title_color_butt,jjo3_title_color_label],[],[])        jjo3_show_legend_frm = tk1.Frame(jjo3_legend_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_legend_frm.pack(fill=tk1.X)        jjocont3.show_legend_var = tk1.BooleanVar(value=jjocont3.show_legend)        jjo3_show_legend_chbutt = tk1.Checkbutton(jjo3_show_legend_frm, text="Show Legend?", variable=jjocont3.show_legend_var,command= lambda:                                              disablewidgets(jjocont3.show_legend_var,False,[jjo3_legend_color_butt,jjo3_legend_color_label],[],[]))        jjo3_show_legend_chbutt.pack(fill=tk1.X)        jjo3_legend_color_frm = tk1.Frame(jjo3_show_legend_frm,bd=2,relief=tk1.GROOVE)        jjo3_legend_color_frm.pack(fill=tk1.X)                        jjo3_legend_color_frm.grid_columnconfigure(0, weight=1)        jjo3_legend_color_frm.grid_columnconfigure(3, weight=1)        jjo3_legend_color_butt = tk1.Button(jjo3_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(jjo3_master,"jjocont3.legend_color_temp","J/Jo Legend",jjo3_legend_color_label,jjo3_legend_color_frm,False))        jjo3_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_legend_color_label = tk1.Label(jjo3_legend_color_frm,text="Current\nColor:\n%s" % jjocont3.legend_color_temp,fg=getoppositecolor(jjocont3.legend_color_temp), bg=jjocont3.legend_color_temp,width=10)        jjo3_legend_color_label.grid(row=0,column=2)        disablewidgets(jjocont3.show_legend_var,False,[jjo3_legend_color_butt,jjo3_legend_color_label],[],[])        jjo3_col2_frm = tk1.Frame(jjo3_interior,bd=2) # Column 2        jjo3_col2_frm.grid(row=0,column=2,sticky='NSEW')        jjo3_error_settings_frm = tk1.Frame(jjo3_col2_frm,bd=2,relief=tk1.SUNKEN)        jjo3_error_settings_frm.pack(fill=tk1.X)        jjo3_error_settings_label = tk1.Label(jjo3_error_settings_frm, text="Error Scaling Settings:",bd=1,font="Helvetica 12 bold")        jjo3_error_settings_label.pack(fill=tk1.X)                jjo3_error_radio_frm = tk1.Frame(jjo3_error_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_error_radio_frm.pack(fill=tk1.X)        jjo3_error_settings_label = tk1.Label(jjo3_error_radio_frm, text="Select Error-Scaling for Symbols:")        jjo3_error_settings_label.pack(fill=tk1.X)        jjocont3.error_scaling_var = tk1.StringVar()        jjocont3.error_scaling_var.set(jjocont3.error_scaling)        jjo3_errorscaling_radio_none = tk1.Radiobutton(jjo3_error_radio_frm, text="No Error Scaling",variable=jjocont3.error_scaling_var,value="None",command = lambda:              disablewidgets(jjocont3.error_scaling_var,"None",[],[jjo3_jdecrease_color_butt,jjo3_jdecrease_color_label,jjo3_jincrease_color_butt,jjo3_jincrease_color_label,                                  jjocont3.jdecrease_symbol_size_slider,jjocont3.jincrease_symbol_size_slider,jjo3_jdecrease_size_label,jjo3_jincrease_size_label],[]))        jjo3_errorscaling_radio_none.pack(fill=tk1.X,padx=10)        jjo3_errorscaling_radio_size = tk1.Radiobutton(jjo3_error_radio_frm, text="Scale Symbol Size by Error",variable=jjocont3.error_scaling_var,value="Size",command = lambda:                  disablewidgets(jjocont3.error_scaling_var,"Size",[jjocont3.jdecrease_symbol_size_slider,jjocont3.jincrease_symbol_size_slider,jjo3_jdecrease_size_label,jjo3_jincrease_size_label],                                 [jjo3_jdecrease_color_butt,jjo3_jdecrease_color_label,jjo3_jincrease_color_butt,jjo3_jincrease_color_label],[]))        jjo3_errorscaling_radio_size.pack(fill=tk1.X,padx=10)        jjo3_errorscaling_radio_color = tk1.Radiobutton(jjo3_error_radio_frm, text="Scale Symbol Color By Error",variable=jjocont3.error_scaling_var,value="Color",command = lambda:                               disablewidgets(jjocont3.error_scaling_var,"Color",[jjo3_jdecrease_color_butt,jjo3_jdecrease_color_label,jjo3_jincrease_color_butt,jjo3_jincrease_color_label],                                              [jjocont3.jdecrease_symbol_size_slider,jjocont3.jincrease_symbol_size_slider,jjo3_jdecrease_size_label,jjo3_jincrease_size_label],[]))        jjo3_errorscaling_radio_color.pack(fill=tk1.X,padx=10)                jjo3_jdecrease_frm = tk1.Frame(jjo3_col2_frm,bd=2,relief=tk1.SUNKEN)        jjo3_jdecrease_frm.pack(fill=tk1.X)        jjo3_jdecrease_symbol_settings_label = tk1.Label(jjo3_jdecrease_frm, text="J Decrease Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo3_jdecrease_symbol_settings_label.pack(fill=tk1.X)        jjo3_jdecrease_symbol_frm = tk1.Frame(jjo3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jdecrease_symbol_frm.pack(fill=tk1.X)        jjo3_jdecrease_symbol_frm.grid_columnconfigure(0, weight=1)        jjo3_jdecrease_symbol_frm.grid_columnconfigure(3, weight=1)                  jjo3_jdecrease_symbol_label = tk1.Label(jjo3_jdecrease_symbol_frm, text="J Decrease Symbol:",bd=1)        jjo3_jdecrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont3.jdecrease_symbol_var = tk1.StringVar(jjo3_interior)        jjocont3.jdecrease_symbol_var.set(symbolchoices_dict_reverse[jjocont3.jdecrease_symbol])         jjo3_jdecrease_symbolchoices_optionmenu = tk1.OptionMenu(jjo3_jdecrease_symbol_frm, jjocont3.jdecrease_symbol_var, *symbolchoices_set)        jjo3_jdecrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_jdecrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo3_jdecrease_symbol_size_frm = tk1.Frame(jjo3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jdecrease_symbol_size_frm.pack(fill=tk1.X)        jjo3_jdecrease_size_label = tk1.Label(jjo3_jdecrease_symbol_size_frm, text="J Decrease Symbol Size:")        jjo3_jdecrease_size_label.pack(fill=tk1.X)        jjocont3.jdecrease_symbol_size_slider = Scale(jjo3_jdecrease_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont3.jdecrease_symbol_size_slider.set(jjocont3.jdecrease_size)        jjocont3.jdecrease_symbol_size_slider.pack(fill=tk1.X)        jjo3_jdecrease_color_frm = tk1.Frame(jjo3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jdecrease_color_frm.pack(fill=tk1.X)        jjo3_jdecrease_color_frm.grid_columnconfigure(0, weight=1)        jjo3_jdecrease_color_frm.grid_columnconfigure(3, weight=1)        jjo3_jdecrease_color_butt = tk1.Button(jjo3_jdecrease_color_frm,text="Select J Decrease\nSymbol Color",                                              command= lambda: getcolor(jjo3_master,"jjocont3.jdecrease_color_temp","J Decrease Symbol",jjo3_jdecrease_color_label,jjo3_jdecrease_color_frm,False))        jjo3_jdecrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_jdecrease_color_label = tk1.Label(jjo3_jdecrease_color_frm,text="Current\nColor:\n%s" % jjocont3.jdecrease_color_temp,fg=getoppositecolor(jjocont3.jdecrease_color_temp), bg=jjocont3.jdecrease_color_temp,width=10)        jjo3_jdecrease_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_show_jdecrease_edge_frm = tk1.Frame(jjo3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_jdecrease_edge_frm.pack(fill=tk1.X)        jjocont3.show_jdecrease_edge_var = tk1.BooleanVar(value=jjocont3.show_jdecrease_edge)        jjo3_show_jdecrease_edge_chbutt = tk1.Checkbutton(jjo3_show_jdecrease_edge_frm, text="Show J Decrease Symbol Border?", variable=jjocont3.show_jdecrease_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_jdecrease_edge_var,False,[jjo3_jdecrease_edge_color_butt,jjo3_jdecrease_edge_color_label,jjo3_jdecrease_edge_width_label,jjo3_jdecrease_edge_width_optionmenu],[],[]))        jjo3_show_jdecrease_edge_chbutt.pack(fill=tk1.X)        jjo3_jdecrease_edge_color_frm = tk1.Frame(jjo3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jdecrease_edge_color_frm.pack(fill=tk1.X)        jjo3_jdecrease_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo3_jdecrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_jdecrease_edge_color_butt = tk1.Button(jjo3_jdecrease_edge_color_frm,text="Select J Decrease\nSymbol Border Color",                                                   command= lambda: getcolor(jjo3_master,"jjocont3.jdecrease_edge_color_temp","J Decrease Symbol Edge",jjo3_jdecrease_edge_color_label,jjo3_jdecrease_edge_color_frm,False))        jjo3_jdecrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_jdecrease_edge_color_label = tk1.Label(jjo3_jdecrease_edge_color_frm,text="Current\nColor:\n%s" % jjocont3.jdecrease_edge_color_temp,fg=getoppositecolor(jjocont3.jdecrease_edge_color_temp),                                                  bg=jjocont3.jdecrease_edge_color_temp,width=10)        jjo3_jdecrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_jdecrease_edge_width_frm = tk1.Frame(jjo3_jdecrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jdecrease_edge_width_frm.pack(fill=tk1.X)        jjo3_jdecrease_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo3_jdecrease_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo3_jdecrease_edge_width_label = tk1.Label(jjo3_jdecrease_edge_width_frm, text="Intensity Decrease Symbol\nBorder Width:")        jjo3_jdecrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont3.jdecrease_edge_width_var = tk1.IntVar(jjo3_interior)        jjocont3.jdecrease_edge_width_var.set(jjocont3.jdecrease_edge_width)         jjo3_jdecrease_edge_width_optionmenu = tk1.OptionMenu(jjo3_jdecrease_edge_width_frm, jjocont3.jdecrease_edge_width_var, *linewidthchoices_set)        jjo3_jdecrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_jdecrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_jdecrease_edge_var,False,[jjo3_jdecrease_edge_color_butt,jjo3_jdecrease_edge_color_label,jjo3_jdecrease_edge_width_label,jjo3_jdecrease_edge_width_optionmenu],[],[])        jjo3_jincrease_frm = tk1.Frame(jjo3_col2_frm,bd=2,relief=tk1.SUNKEN)        jjo3_jincrease_frm.pack(fill=tk1.X)        jjo3_jincrease_symbol_settings_label = tk1.Label(jjo3_jincrease_frm, text="J Increase Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo3_jincrease_symbol_settings_label.pack(fill=tk1.X)        jjo3_jincrease_symbol_frm = tk1.Frame(jjo3_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jincrease_symbol_frm.pack(fill=tk1.X)        jjo3_jincrease_symbol_frm.grid_columnconfigure(0, weight=1)        jjo3_jincrease_symbol_frm.grid_columnconfigure(3, weight=1)                jjo3_jincrease_symbol_label = tk1.Label(jjo3_jincrease_symbol_frm, text="J Increase Symbol:",bd=1)        jjo3_jincrease_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont3.jincrease_symbol_var = tk1.StringVar(jjo3_interior)        jjocont3.jincrease_symbol_var.set(symbolchoices_dict_reverse[jjocont3.jincrease_symbol])         jjo3_jincrease_symbolchoices_optionmenu = tk1.OptionMenu(jjo3_jincrease_symbol_frm, jjocont3.jincrease_symbol_var, *symbolchoices_set)        jjo3_jincrease_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_jincrease_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo3_jincrease_symbol_size_frm = tk1.Frame(jjo3_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jincrease_symbol_size_frm.pack(fill=tk1.X)        jjo3_jincrease_size_label = tk1.Label(jjo3_jincrease_symbol_size_frm, text="J Increase Symbol Size:")        jjo3_jincrease_size_label.pack(fill=tk1.X)        jjocont3.jincrease_symbol_size_slider = Scale(jjo3_jincrease_symbol_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont3.jincrease_symbol_size_slider.set(jjocont3.jincrease_size)        jjocont3.jincrease_symbol_size_slider.pack(fill=tk1.X)        jjo3_jincrease_color_frm = tk1.Frame(jjo3_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jincrease_color_frm.pack(fill=tk1.X)        jjo3_jincrease_color_frm.grid_columnconfigure(0, weight=1)        jjo3_jincrease_color_frm.grid_columnconfigure(3, weight=1)        jjo3_jincrease_color_butt = tk1.Button(jjo3_jincrease_color_frm,text="Select J Increase\nSymbol Color",                                              command= lambda: getcolor(jjo3_master,"jjocont3.jincrease_color_temp","J Increase Symbol",jjo3_jincrease_color_label,jjo3_jincrease_color_frm,False))        jjo3_jincrease_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_jincrease_color_label = tk1.Label(jjo3_jincrease_color_frm,text="Current\nColor:\n%s" % jjocont3.jincrease_color_temp,fg=getoppositecolor(jjocont3.jincrease_color_temp), bg=jjocont3.jincrease_color_temp,width=10)        jjo3_jincrease_color_label.grid(row=0, column=2,sticky='NSEW')                jjo3_show_jincrease_edge_frm = tk1.Frame(jjo3_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_jincrease_edge_frm.pack(fill=tk1.X)        jjocont3.show_jincrease_edge_var = tk1.BooleanVar(value=jjocont3.show_jincrease_edge)        jjo3_show_jincrease_edge_chbutt = tk1.Checkbutton(jjo3_show_jincrease_edge_frm, text="Show J Increase Symbol Border?", variable=jjocont3.show_jincrease_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_jincrease_edge_var,False,[jjo3_jincrease_edge_color_butt,jjo3_jincrease_edge_color_label,jjo3_jincrease_edge_width_label,jjo3_jincrease_edge_width_optionmenu],[],[]))        jjo3_show_jincrease_edge_chbutt.pack(fill=tk1.X)        jjo3_jincrease_edge_color_frm = tk1.Frame(jjo3_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jincrease_edge_color_frm.pack(fill=tk1.X)        jjo3_jincrease_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo3_jincrease_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_jincrease_edge_color_butt = tk1.Button(jjo3_jincrease_edge_color_frm,text="Select J Increase\nSymbol Border Color",                                                   command= lambda: getcolor(jjo3_master,"jjocont3.jincrease_edge_color_temp","J Increase Symbol Edge",jjo3_jincrease_edge_color_label,jjo3_jincrease_edge_color_frm,False))        jjo3_jincrease_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_jincrease_edge_color_label = tk1.Label(jjo3_jincrease_edge_color_frm,text="Current\nColor:\n%s" % jjocont3.jincrease_edge_color_temp,fg=getoppositecolor(jjocont3.jincrease_edge_color_temp), bg=jjocont3.jincrease_edge_color_temp,width=10)        jjo3_jincrease_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_jincrease_edge_width_frm = tk1.Frame(jjo3_jincrease_frm,bd=2,relief=tk1.GROOVE)        jjo3_jincrease_edge_width_frm.pack(fill=tk1.X)        jjo3_jincrease_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo3_jincrease_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo3_jincrease_edge_width_label = tk1.Label(jjo3_jincrease_edge_width_frm, text="Intensity Increase Symbol\nBorder Width:")        jjo3_jincrease_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont3.jincrease_edge_width_var = tk1.IntVar(jjo3_interior)        jjocont3.jincrease_edge_width_var.set(jjocont3.jincrease_edge_width)         jjo3_jincrease_edge_width_optionmenu = tk1.OptionMenu(jjo3_jincrease_edge_width_frm, jjocont3.jincrease_edge_width_var, *linewidthchoices_set)        jjo3_jincrease_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_jincrease_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_jincrease_edge_var,False,[jjo3_jincrease_edge_color_butt,jjo3_jincrease_edge_color_label,jjo3_jincrease_edge_width_label,jjo3_jincrease_edge_width_optionmenu],[],[])         disablewidgets(jjocont3.error_scaling_var,"None",[],[jjo3_jdecrease_color_butt,jjo3_jdecrease_color_label,jjo3_jincrease_color_butt,jjo3_jincrease_color_label,                                  jjocont3.jdecrease_symbol_size_slider,jjocont3.jincrease_symbol_size_slider,jjo3_jdecrease_size_label,jjo3_jincrease_size_label],[])        disablewidgets(jjocont3.error_scaling_var,"Size",[jjocont3.jdecrease_symbol_size_slider,jjocont3.jincrease_symbol_size_slider,jjo3_jdecrease_size_label,jjo3_jincrease_size_label],                     [jjo3_jdecrease_color_butt,jjo3_jdecrease_color_label,jjo3_jincrease_color_butt,jjo3_jincrease_color_label],[])        disablewidgets(jjocont3.error_scaling_var,"Color",[jjo3_jdecrease_color_butt,jjo3_jdecrease_color_label,jjo3_jincrease_color_butt,jjo3_jincrease_color_label],                      [jjocont3.jdecrease_symbol_size_slider,jjocont3.jincrease_symbol_size_slider,jjo3_jdecrease_size_label,jjo3_jincrease_size_label],[])        jjo3_col3_frm = tk1.Frame(jjo3_interior,bd=2) # Column 3        jjo3_col3_frm.grid(row=0,column=3,sticky='NSEW')        jjo3_firststep_frm = tk1.Frame(jjo3_col3_frm,bd=2,relief=tk1.SUNKEN)        jjo3_firststep_frm.pack(fill=tk1.X)        jjo3_firststep_symbol_settings_label = tk1.Label(jjo3_firststep_frm, text="First Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo3_firststep_symbol_settings_label.pack(fill=tk1.X)        jjo3_show_firststep_frm = tk1.Frame(jjo3_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_firststep_frm.pack(fill=tk1.X)        jjocont3.show_firststep_var = tk1.BooleanVar(value=jjocont3.show_firststep)        jjo3_show_firststep_chbutt = tk1.Checkbutton(jjo3_show_firststep_frm, text="Show First Step Special Symbol?", variable=jjocont3.show_firststep_var,command= lambda:                                              disablewidgets(jjocont3.show_firststep_var,False,[jjo3_firststep_symbol_label,jjo3_firststep_symbolchoices_optionmenu,jjo3_firststep_size_label,jjocont3.firststep_symbol_size_slider,                                                                                             jjo3_firststep_color_butt,jjo3_firststep_color_label,jjo3_show_firststep_edge_chbutt,jjo3_firststep_edge_color_butt,jjo3_firststep_edge_color_label,                                                                                             jjo3_firststep_edge_width_label,jjo3_firststep_edge_width_optionmenu],[],                                                             [[jjocont3.show_firststep_edge_var,[False],[jjo3_firststep_edge_color_butt,jjo3_firststep_edge_color_label,jjo3_firststep_edge_width_label,jjo3_firststep_edge_width_optionmenu]]]))        jjo3_show_firststep_chbutt.pack(fill=tk1.X)        jjo3_firststep_symbol_frm = tk1.Frame(jjo3_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_firststep_symbol_frm.pack(fill=tk1.X)        jjo3_firststep_symbol_frm.grid_columnconfigure(0, weight=1)        jjo3_firststep_symbol_frm.grid_columnconfigure(3, weight=1)                  jjo3_firststep_symbol_label = tk1.Label(jjo3_firststep_symbol_frm, text="First Step Symbol:",bd=1)        jjo3_firststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont3.firststep_symbol_var = tk1.StringVar(jjo3_interior)        jjocont3.firststep_symbol_var.set(symbolchoices_dict_reverse[jjocont3.firststep_symbol])         jjo3_firststep_symbolchoices_optionmenu = tk1.OptionMenu(jjo3_firststep_symbol_frm, jjocont3.firststep_symbol_var, *symbolchoices_set)        jjo3_firststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_firststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo3_firststep_size_frm = tk1.Frame(jjo3_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_firststep_size_frm.pack(fill=tk1.X)        jjo3_firststep_size_label = tk1.Label(jjo3_firststep_size_frm, text="First Step Symbol Size:")        jjo3_firststep_size_label.pack(fill=tk1.X)        jjocont3.firststep_symbol_size_slider = Scale(jjo3_firststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont3.firststep_symbol_size_slider.set(jjocont3.firststep_size)        jjocont3.firststep_symbol_size_slider.pack(fill=tk1.X)        jjo3_firststep_color_frm = tk1.Frame(jjo3_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_firststep_color_frm.pack(fill=tk1.X)        jjo3_firststep_color_frm.grid_columnconfigure(0, weight=1)        jjo3_firststep_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_firststep_color_butt = tk1.Button(jjo3_firststep_color_frm,text="Select First Step\nSymbol Color",                                              command= lambda: getcolor(jjo3_master,"jjocont3.firststep_color_temp","J/Jo First Step Symbol",jjo3_firststep_color_label,jjo3_firststep_color_frm,False))        jjo3_firststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_firststep_color_label = tk1.Label(jjo3_firststep_color_frm,text="Current\nColor:\n%s" % jjocont3.firststep_color_temp,fg=getoppositecolor(jjocont3.firststep_color_temp), bg=jjocont3.firststep_color_temp,width=10)        jjo3_firststep_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_show_firststep_edge_frm = tk1.Frame(jjo3_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_firststep_edge_frm.pack(fill=tk1.X)        jjocont3.show_firststep_edge_var = tk1.BooleanVar(value=jjocont3.show_firststep_edge)        jjo3_show_firststep_edge_chbutt = tk1.Checkbutton(jjo3_show_firststep_edge_frm, text="Show First Step Symbol Border?", variable=jjocont3.show_firststep_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_firststep_edge_var,False,[jjo3_firststep_edge_color_butt,jjo3_firststep_edge_color_label,jjo3_firststep_edge_width_label,jjo3_firststep_edge_width_optionmenu],[],[]))        jjo3_show_firststep_edge_chbutt.pack(fill=tk1.X)                jjo3_firststep_edge_color_frm = tk1.Frame(jjo3_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_firststep_edge_color_frm.pack(fill=tk1.X)        jjo3_firststep_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo3_firststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_firststep_edge_color_butt = tk1.Button(jjo3_firststep_edge_color_frm,text="Select First Step\nSymbol Border Color",                                                   command= lambda: getcolor(jjo3_master,"jjocont3.firststep_edge_color_temp","J/Jo First Step Symbol Edge",jjo3_firststep_edge_color_label,jjo3_firststep_edge_color_frm,False))        jjo3_firststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_firststep_edge_color_label = tk1.Label(jjo3_firststep_edge_color_frm,text="Current\nColor:\n%s" % jjocont3.firststep_edge_color_temp,fg=getoppositecolor(jjocont3.firststep_edge_color_temp), bg=jjocont3.firststep_edge_color_temp,width=10)        jjo3_firststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_firststep_edge_width_frm = tk1.Frame(jjo3_firststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_firststep_edge_width_frm.pack(fill=tk1.X)        jjo3_firststep_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo3_firststep_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo3_firststep_edge_width_label = tk1.Label(jjo3_firststep_edge_width_frm, text="First Step Symbol\nBorder Width:")        jjo3_firststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont3.firststep_edge_width_var = tk1.IntVar(jjo3_interior)        jjocont3.firststep_edge_width_var.set(jjocont3.firststep_edge_width)         jjo3_firststep_edge_width_optionmenu = tk1.OptionMenu(jjo3_firststep_edge_width_frm, jjocont3.firststep_edge_width_var, *linewidthchoices_set)        jjo3_firststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_firststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_firststep_edge_var,False,[jjo3_firststep_edge_color_butt,jjo3_firststep_edge_color_label,jjo3_firststep_edge_width_label,jjo3_firststep_edge_width_optionmenu],[],[])        disablewidgets(jjocont3.show_firststep_var,False,[jjo3_firststep_symbol_label,jjo3_firststep_symbolchoices_optionmenu,jjo3_firststep_size_label,jjocont3.firststep_symbol_size_slider,jjo3_firststep_color_butt,jjo3_firststep_color_label,                                                       jjo3_show_firststep_edge_chbutt,jjo3_firststep_edge_color_butt,jjo3_firststep_edge_color_label,jjo3_firststep_edge_width_label,jjo3_firststep_edge_width_optionmenu],[],                                                   [[jjocont3.show_firststep_edge_var,[False],[jjo3_firststep_edge_color_butt,jjo3_firststep_edge_color_label,jjo3_firststep_edge_width_label,jjo3_firststep_edge_width_optionmenu]]])        jjo3_laststep_frm = tk1.Frame(jjo3_col3_frm,bd=2,relief=tk1.SUNKEN)        jjo3_laststep_frm.pack(fill=tk1.X)        jjo3_laststep_symbol_settings_label = tk1.Label(jjo3_laststep_frm, text="Last Step Symbol Settings:",bd=1,font="Helvetica 12 bold")        jjo3_laststep_symbol_settings_label.pack(fill=tk1.X)        jjo3_show_laststep_frm = tk1.Frame(jjo3_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_laststep_frm.pack(fill=tk1.X)        jjocont3.show_laststep_var = tk1.BooleanVar(value=jjocont3.show_laststep)        jjo3_show_laststep_chbutt = tk1.Checkbutton(jjo3_show_laststep_frm, text="Show Last Step Special Symbol?", variable=jjocont3.show_laststep_var,command= lambda:                                              disablewidgets(jjocont3.show_laststep_var,False,[jjo3_laststep_symbol_label,jjo3_laststep_symbolchoices_optionmenu,jjo3_laststep_size_label,jjocont3.laststep_symbol_size_slider,                                                                                             jjo3_laststep_color_butt,jjo3_laststep_color_label,jjo3_show_laststep_edge_chbutt,jjo3_laststep_edge_color_butt,jjo3_laststep_edge_color_label,                                                                                             jjo3_laststep_edge_width_label,jjo3_laststep_edge_width_optionmenu],[],                                                             [[jjocont3.show_laststep_edge_var,[False],[jjo3_laststep_edge_color_butt,jjo3_laststep_edge_color_label,jjo3_laststep_edge_width_label,jjo3_laststep_edge_width_optionmenu]]]))        jjo3_show_laststep_chbutt.pack(fill=tk1.X)        jjo3_laststep_symbol_frm = tk1.Frame(jjo3_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_laststep_symbol_frm.pack(fill=tk1.X)        jjo3_laststep_symbol_frm.grid_columnconfigure(0, weight=1)        jjo3_laststep_symbol_frm.grid_columnconfigure(3, weight=1)                  jjo3_laststep_symbol_label = tk1.Label(jjo3_laststep_symbol_frm, text="Last Step Symbol:",bd=1)        jjo3_laststep_symbol_label.grid(row=0, column=1,sticky='NSEW')        jjocont3.laststep_symbol_var = tk1.StringVar(jjo3_interior)        jjocont3.laststep_symbol_var.set(symbolchoices_dict_reverse[jjocont3.laststep_symbol])         jjo3_laststep_symbolchoices_optionmenu = tk1.OptionMenu(jjo3_laststep_symbol_frm, jjocont3.laststep_symbol_var, *symbolchoices_set)        jjo3_laststep_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_laststep_symbolchoices_optionmenu.configure(font=('Consolas',12))        jjo3_laststep_size_frm = tk1.Frame(jjo3_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_laststep_size_frm.pack(fill=tk1.X)        jjo3_laststep_size_label = tk1.Label(jjo3_laststep_size_frm, text="Last Step Symbol Size:")        jjo3_laststep_size_label.pack(fill=tk1.X)        jjocont3.laststep_symbol_size_slider = Scale(jjo3_laststep_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        jjocont3.laststep_symbol_size_slider.set(jjocont3.laststep_size)        jjocont3.laststep_symbol_size_slider.pack(fill=tk1.X)        jjo3_laststep_color_frm = tk1.Frame(jjo3_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_laststep_color_frm.pack(fill=tk1.X)        jjo3_laststep_color_frm.grid_columnconfigure(0, weight=1)        jjo3_laststep_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_laststep_color_butt = tk1.Button(jjo3_laststep_color_frm,text="Select Last Step\nSymbol Color",                                             command= lambda: getcolor(jjo3_master,"jjocont3.laststep_color_temp","J/Jo Last Step Symbol",jjo3_laststep_color_label,jjo3_laststep_color_frm,False))        jjo3_laststep_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_laststep_color_label = tk1.Label(jjo3_laststep_color_frm,text="Current\nColor:\n%s" % jjocont3.laststep_color_temp,fg=getoppositecolor(jjocont3.laststep_color_temp), bg=jjocont3.laststep_color_temp,width=10)        jjo3_laststep_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_show_laststep_edge_frm = tk1.Frame(jjo3_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_laststep_edge_frm.pack(fill=tk1.X)        jjocont3.show_laststep_edge_var = tk1.BooleanVar(value=jjocont3.show_laststep_edge)        jjo3_show_laststep_edge_chbutt = tk1.Checkbutton(jjo3_show_laststep_edge_frm, text="Show Last Step Symbol Border?", variable=jjocont3.show_laststep_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_laststep_edge_var,False,[jjo3_laststep_edge_color_butt,jjo3_laststep_edge_color_label,jjo3_laststep_edge_width_label,jjo3_laststep_edge_width_optionmenu],[],[]))        jjo3_show_laststep_edge_chbutt.pack(fill=tk1.X)        jjo3_laststep_edge_color_frm = tk1.Frame(jjo3_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_laststep_edge_color_frm.pack(fill=tk1.X)        jjo3_laststep_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo3_laststep_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_laststep_edge_color_butt = tk1.Button(jjo3_laststep_edge_color_frm,text="Select Last Step\nSymbol Border Color",                                                  command= lambda: getcolor(jjo3_master,"jjocont3.laststep_edge_color_temp","J/Jo Last Step Symbol Edge",jjo3_laststep_edge_color_label,jjo3_laststep_edge_color_frm,False))        jjo3_laststep_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_laststep_edge_color_label = tk1.Label(jjo3_laststep_edge_color_frm,text="Current\nColor:\n%s" % jjocont3.laststep_edge_color_temp,fg=getoppositecolor(jjocont3.laststep_edge_color_temp), bg=jjocont3.laststep_edge_color_temp,width=10)        jjo3_laststep_edge_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_laststep_edge_width_frm = tk1.Frame(jjo3_laststep_frm,bd=2,relief=tk1.GROOVE)        jjo3_laststep_edge_width_frm.pack(fill=tk1.X)        jjo3_laststep_edge_width_frm.grid_columnconfigure(0, weight=1)        jjo3_laststep_edge_width_frm.grid_columnconfigure(3, weight=1)        jjo3_laststep_edge_width_label = tk1.Label(jjo3_laststep_edge_width_frm, text="Last Step Symbol\nBorder Width:")        jjo3_laststep_edge_width_label.grid(row=0,column=1,sticky='NESW')        jjocont3.laststep_edge_width_var = tk1.IntVar(jjo3_interior)        jjocont3.laststep_edge_width_var.set(jjocont3.laststep_edge_width)         jjo3_laststep_edge_width_optionmenu = tk1.OptionMenu(jjo3_laststep_edge_width_frm, jjocont3.laststep_edge_width_var, *linewidthchoices_set)        jjo3_laststep_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_laststep_edge_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_laststep_edge_var,False,[jjo3_laststep_edge_color_butt,jjo3_laststep_edge_color_label,jjo3_laststep_edge_width_label,jjo3_laststep_edge_width_optionmenu],[],[])        disablewidgets(jjocont3.show_laststep_var,False,[jjo3_laststep_symbol_label,jjo3_laststep_symbolchoices_optionmenu,jjo3_laststep_size_label,jjocont3.laststep_symbol_size_slider,                                                      jjo3_laststep_color_butt,jjo3_laststep_color_label,jjo3_show_laststep_edge_chbutt,jjo3_laststep_edge_color_butt,jjo3_laststep_edge_color_label,                                                        jjo3_laststep_edge_width_label,jjo3_laststep_edge_width_optionmenu],[],                       [[jjocont3.show_laststep_edge_var,[False],[jjo3_laststep_edge_color_butt,jjo3_laststep_edge_color_label,jjo3_laststep_edge_width_label,jjo3_laststep_edge_width_optionmenu]]])                jjo3_col4_frm = tk1.Frame(jjo3_interior,bd=2) # Column 4        jjo3_col4_frm.grid(row=0,column=4,sticky='NSEW')        jjo3_axesspecs_frm = tk1.Frame(jjo3_col4_frm,bd=2,relief=tk1.SUNKEN)        jjo3_axesspecs_frm.pack(fill=tk1.X)        jjo3_axesspecs_label = tk1.Label(jjo3_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        jjo3_axesspecs_label.pack(fill=tk1.X)        jjo3_axes_color_frm = tk1.Frame(jjo3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_axes_color_frm.pack(fill=tk1.X)        jjo3_axes_color_frm.grid_columnconfigure(0, weight=1)        jjo3_axes_color_frm.grid_columnconfigure(3, weight=1)        jjo3_axes_color_butt = tk1.Button(jjo3_axes_color_frm,text="Select Axes Color",                                         command= lambda: getcolor(jjo3_master,"jjocont3.axes_color_temp","J/Jo Axes",jjo3_axes_color_label,jjo3_axes_color_frm,False))        jjo3_axes_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_axes_color_label = tk1.Label(jjo3_axes_color_frm,text="Current\nColor:\n%s" % jjocont3.axes_color_temp,fg=getoppositecolor(jjocont3.axes_color_temp), bg=jjocont3.axes_color_temp,width=10)        jjo3_axes_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_axes_width_frm = tk1.Frame(jjo3_axesspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_axes_width_frm.pack(fill=tk1.X)        jjo3_axes_width_frm.grid_columnconfigure(0, weight=1)        jjo3_axes_width_frm.grid_columnconfigure(3, weight=1)        jjo3_axes_width_label = tk1.Label(jjo3_axes_width_frm, text="Axes Width:")        jjo3_axes_width_label.grid(row=0,column=1,sticky='NESW')                jjocont3.axes_width_var = tk1.IntVar(jjo3_interior)        jjocont3.axes_width_var.set(jjocont3.axes_width)         jjo3_axes_width_optionmenu = tk1.OptionMenu(jjo3_axes_width_frm, jjocont3.axes_width_var, *linewidthchoices_set)        jjo3_axes_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_axes_width_optionmenu.configure(font=('Consolas',10))        jjo3_x_axisspecs_frm = tk1.Frame(jjo3_col4_frm,bd=2,relief=tk1.SUNKEN)        jjo3_x_axisspecs_frm.pack(fill=tk1.X)        jjo3_x_axisspecs_label = tk1.Label(jjo3_x_axisspecs_frm, text="X Axis Settings:",font="Helvetica 10 bold")        jjo3_x_axisspecs_label.pack(fill=tk1.X)        jjo3_show_xticks_labels_frm = tk1.Frame(jjo3_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_xticks_labels_frm.pack(fill=tk1.X)        jjocont3.show_xaxis_ticks_var = tk1.BooleanVar(value=jjocont3.show_xaxis_ticks)        jjo3_show_xaxis_ticks_chbutt = tk1.Checkbutton(jjo3_show_xticks_labels_frm, text="Show X Axis Ticks / Step Labels?", variable=jjocont3.show_xaxis_ticks_var,command= lambda:                                              disablewidgets(jjocont3.show_xaxis_ticks_var,False,[jjo3_xaxis_steplabels_tick_color_butt,jjo3_xaxis_steplabels_tick_color_label,jjo3_show_xaxis_labels_chbutt,jjo3_xaxis_steplabel_fontsize_label,                                                                                                  jjo3_xaxis_steplabel_fontsize_optionmenu,jjo3_xaxis_tick_width_label,jjo3_xaxis_tick_width_optionmenu,jjo3_xaxis_tick_length_label,                                                                                                 jjo3_xaxis_tick_length_optionmenu],[],[[jjocont3.show_xaxis_steplabels_var,[False],                                                                                                    [jjo3_xaxis_steplabel_fontsize_label,jjo3_xaxis_steplabel_fontsize_optionmenu]]]))        jjo3_show_xaxis_ticks_chbutt.pack(fill=tk1.X)        jjo3_xaxis_steplabels_tick_color_frm = tk1.Frame(jjo3_show_xticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo3_xaxis_steplabels_tick_color_frm.pack(fill=tk1.X)        jjo3_xaxis_steplabels_tick_color_frm.grid_columnconfigure(0, weight=1)        jjo3_xaxis_steplabels_tick_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_xaxis_steplabels_tick_color_butt = tk1.Button(jjo3_xaxis_steplabels_tick_color_frm,text="Select X Axis Tick\n(& Step Label) Color",                                                          command=lambda: getcolor(jjo3_master,"jjocont3.xaxis_steplabels_tick_color_temp","J/Jo X Axis Tick & Label",                                                                                   jjo3_xaxis_steplabels_tick_color_label,jjo3_xaxis_steplabels_tick_color_frm,False))        jjo3_xaxis_steplabels_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_xaxis_steplabels_tick_color_label = tk1.Label(jjo3_xaxis_steplabels_tick_color_frm,text="Current\nColor:\n%s" % jjocont3.xaxis_steplabels_tick_color_temp,                                                         fg=getoppositecolor(jjocont3.xaxis_steplabels_tick_color_temp), bg=jjocont3.xaxis_steplabels_tick_color_temp,width=10)        jjo3_xaxis_steplabels_tick_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_xaxis_tick_width_frm = tk1.Frame(jjo3_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_xaxis_tick_width_frm.pack(fill=tk1.X)        jjo3_xaxis_tick_width_frm.grid_columnconfigure(0, weight=1)        jjo3_xaxis_tick_width_frm.grid_columnconfigure(3, weight=1)        jjo3_xaxis_tick_width_label = tk1.Label(jjo3_xaxis_tick_width_frm, text="X Axis Tick Width:")        jjo3_xaxis_tick_width_label.grid(row=0,column=1,sticky='NESW')                jjocont3.xaxis_tick_width_var = tk1.IntVar(jjo3_interior)        jjocont3.xaxis_tick_width_var.set(jjocont3.xaxis_tick_width)         jjo3_xaxis_tick_width_optionmenu = tk1.OptionMenu(jjo3_xaxis_tick_width_frm, jjocont3.xaxis_tick_width_var, *linewidthchoices_set)        jjo3_xaxis_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_xaxis_tick_width_optionmenu.configure(font=('Consolas',10))        jjo3_xaxis_tick_length_frm = tk1.Frame(jjo3_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_xaxis_tick_length_frm.pack(fill=tk1.X)        jjo3_xaxis_tick_length_frm.grid_columnconfigure(0, weight=1)        jjo3_xaxis_tick_length_frm.grid_columnconfigure(3, weight=1)        jjo3_xaxis_tick_length_label = tk1.Label(jjo3_xaxis_tick_length_frm, text="X Axis Tick Length:")        jjo3_xaxis_tick_length_label.grid(row=0,column=1,sticky='NESW')                jjocont3.xaxis_tick_length_var = tk1.IntVar(jjo3_interior)        jjocont3.xaxis_tick_length_var.set(jjocont3.xaxis_tick_length)         jjo3_xaxis_tick_length_optionmenu = tk1.OptionMenu(jjo3_xaxis_tick_length_frm, jjocont3.xaxis_tick_length_var, *linelengthchoices_set)        jjo3_xaxis_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_xaxis_tick_length_optionmenu.configure(font=('Consolas',10))        jjo3_xaxis_steplabel_settings_frm = tk1.Frame(jjo3_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_xaxis_steplabel_settings_frm.pack(fill=tk1.X)        jjocont3.show_xaxis_steplabels_var = tk1.BooleanVar(value=jjocont3.show_xaxis_steplabels)        jjo3_show_xaxis_labels_chbutt = tk1.Checkbutton(jjo3_xaxis_steplabel_settings_frm, text="Show X Axis Step Labels?", variable=jjocont3.show_xaxis_steplabels_var,command= lambda:                                              disablewidgets(jjocont3.show_xaxis_steplabels_var,False,[jjo3_xaxis_steplabel_fontsize_label,jjo3_xaxis_steplabel_fontsize_optionmenu],[],[]))        jjo3_show_xaxis_labels_chbutt.pack(fill=tk1.X)        jjo3_xaxis_steplabel_fontsize_frm = tk1.Frame(jjo3_xaxis_steplabel_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_xaxis_steplabel_fontsize_frm.pack(fill=tk1.X)        jjo3_xaxis_steplabel_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo3_xaxis_steplabel_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo3_xaxis_steplabel_fontsize_label = tk1.Label(jjo3_xaxis_steplabel_fontsize_frm, text="X Axis Step Label Font Size:",bd=1)        jjo3_xaxis_steplabel_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont3.xaxis_steplabel_fontsize_mod_var = tk1.StringVar(jjo3_interior)        jjocont3.xaxis_steplabel_fontsize_mod_var.set(jjocont3.xaxis_steplabel_fontsize_mod)         jjo3_xaxis_steplabel_fontsize_optionmenu = tk1.OptionMenu(jjo3_xaxis_steplabel_fontsize_frm, jjocont3.xaxis_steplabel_fontsize_mod_var, *fontsizes_set)        jjo3_xaxis_steplabel_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo3_xaxis_steplabel_fontsize_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_xaxis_ticks_var,False,[jjo3_xaxis_steplabels_tick_color_butt,jjo3_xaxis_steplabels_tick_color_label,jjo3_show_xaxis_labels_chbutt,jjo3_xaxis_steplabel_fontsize_label,jjo3_xaxis_steplabel_fontsize_optionmenu,                                                         jjo3_xaxis_tick_width_label,jjo3_xaxis_tick_width_optionmenu,jjo3_xaxis_tick_length_label,jjo3_xaxis_tick_length_optionmenu],[],[[jjocont3.show_xaxis_steplabels_var,[False],                                                            [jjo3_xaxis_steplabel_fontsize_label,jjo3_xaxis_steplabel_fontsize_optionmenu]]])        disablewidgets(jjocont3.show_xaxis_steplabels_var,False,[jjo3_xaxis_steplabel_fontsize_label,jjo3_xaxis_steplabel_fontsize_optionmenu],[],[])        jjo3_show_xaxis_stepboundaries_frm = tk1.Frame(jjo3_x_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_xaxis_stepboundaries_frm.pack(fill=tk1.X)        jjocont3.show_xaxis_stepboundaries_var = tk1.BooleanVar(value=jjocont3.show_xaxis_stepboundaries)        jjo3_show_xaxis_stepboundaries_chbutt = tk1.Checkbutton(jjo3_show_xaxis_stepboundaries_frm, text="Show X Axis Boundary Labels?", variable=jjocont3.show_xaxis_stepboundaries_var,command= lambda:                                              disablewidgets(jjocont3.show_xaxis_stepboundaries_var,False,[jjo3_xaxis_stepboundaries_color_butt,                                                                                                          jjo3_xaxis_stepboundaries_color_label, jjo3_xaxis_stepboundaries_fontsize_label, jjo3_xaxis_stepboundaries_fontsize_optionmenu],[],[]))        jjo3_show_xaxis_stepboundaries_chbutt.pack(fill=tk1.X)        jjo3_xaxis_stepboundaries_color_frm = tk1.Frame(jjo3_show_xaxis_stepboundaries_frm,bd=2,relief=tk1.GROOVE)        jjo3_xaxis_stepboundaries_color_frm.pack(fill=tk1.X)        jjo3_xaxis_stepboundaries_color_frm.grid_columnconfigure(0, weight=1)        jjo3_xaxis_stepboundaries_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_xaxis_stepboundaries_color_butt = tk1.Button(jjo3_xaxis_stepboundaries_color_frm,text="Select X Axis Step Type\nBoundary Labels Color",                                                         command=lambda: getcolor(jjo3_master,"jjocont3.xaxis_stepboundaries_color_temp","J/Jo X Axis Step Type Boundary Labels",                                                                                  jjo3_xaxis_stepboundaries_color_label, jjo3_xaxis_stepboundaries_color_frm,False))        jjo3_xaxis_stepboundaries_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_xaxis_stepboundaries_color_label = tk1.Label(jjo3_xaxis_stepboundaries_color_frm,text="Current\nColor:\n%s" % jjocont3.xaxis_steplabels_tick_color_temp,                                                         fg=getoppositecolor(jjocont3.xaxis_stepboundaries_color_temp), bg= jjocont3.xaxis_stepboundaries_color_temp,width=10)        jjo3_xaxis_stepboundaries_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_xaxis_stepboundaries_fontsize_frm = tk1.Frame(jjo3_show_xaxis_stepboundaries_frm,bd=2,relief=tk1.GROOVE)        jjo3_xaxis_stepboundaries_fontsize_frm.pack(fill=tk1.X)        jjo3_xaxis_stepboundaries_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo3_xaxis_stepboundaries_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo3_xaxis_stepboundaries_fontsize_label = tk1.Label(jjo3_xaxis_stepboundaries_fontsize_frm, text="X Axis Step Boundary Labels\nFont Size:",bd=1)        jjo3_xaxis_stepboundaries_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont3.xaxis_stepboundaries_fontsize_mod_var = tk1.StringVar(jjo3_interior)        jjocont3.xaxis_stepboundaries_fontsize_mod_var.set(jjocont3.xaxis_stepboundaries_fontsize_mod)         jjo3_xaxis_stepboundaries_fontsize_optionmenu = tk1.OptionMenu(jjo3_xaxis_stepboundaries_fontsize_frm, jjocont3.xaxis_stepboundaries_fontsize_mod_var, *fontsizes_set)        jjo3_xaxis_stepboundaries_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo3_xaxis_stepboundaries_fontsize_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_xaxis_stepboundaries_var,False,[jjo3_xaxis_stepboundaries_color_butt, jjo3_xaxis_stepboundaries_color_label, jjo3_xaxis_stepboundaries_fontsize_optionmenu],[],[])        disablewidgets(jjocont3.show_xaxis_stepboundaries_var,False,[jjo3_xaxis_stepboundaries_color_butt,jjo3_xaxis_stepboundaries_color_label, jjo3_xaxis_stepboundaries_fontsize_label, jjo3_xaxis_stepboundaries_fontsize_optionmenu],[],[])        jjo3_y_axisspecs_frm = tk1.Frame(jjo3_col4_frm,bd=2,relief=tk1.SUNKEN)        jjo3_y_axisspecs_frm.pack(fill=tk1.X)        jjo3_y_axisspecs_label = tk1.Label(jjo3_y_axisspecs_frm, text="Y Axis Settings:",font="Helvetica 10 bold")        jjo3_y_axisspecs_label.pack(fill=tk1.X)        jjo3_show_yticks_labels_frm = tk1.Frame(jjo3_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_yticks_labels_frm.pack(fill=tk1.X)        jjocont3.show_yaxis_ticks_var = tk1.BooleanVar(value=jjocont3.show_yaxis_ticks)        jjo3_show_yaxis_ticks_chbutt = tk1.Checkbutton(jjo3_show_yticks_labels_frm, text="Show Y Axis Ticks / Labels?", variable=jjocont3.show_yaxis_ticks_var,command= lambda:                                                    disablewidgets(jjocont3.show_yaxis_ticks_var,False,[jjo3_yaxis_labels_tick_color_butt,jjo3_yaxis_labels_tick_color_label,jjo3_yaxis_label_fontsize_label,jjo3_yaxis_label_fontsize_optionmenu,jjo3_show_yaxis_percentlabel_chbutt,                                                                   jjo3_show_yaxis_abslabel_chbutt,jjo3_yaxis_tick_width_label,jjo3_yaxis_tick_width_optionmenu,jjo3_yaxis_tick_length_label,jjo3_yaxis_tick_length_optionmenu,jjo3_show_yunits_chbutt,jjo3_yunits_label,jjo3_yunits_optionmenu],[],                                                               [[jjocont3.show_yaxis_abslabel_var,True,[jjo3_show_yunits_chbutt,jjo3_yunits_label,jjo3_yunits_optionmenu]],[jjocont3.show_yunits_var,[False],[jjo3_yunits_label,jjo3_yunits_optionmenu]]]))        jjo3_show_yaxis_ticks_chbutt.pack(fill=tk1.X)        jjo3_yaxis_labels_tick_color_frm = tk1.Frame(jjo3_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo3_yaxis_labels_tick_color_frm.pack(fill=tk1.X)        jjo3_yaxis_labels_tick_color_frm.grid_columnconfigure(0, weight=1)        jjo3_yaxis_labels_tick_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_yaxis_labels_tick_color_butt = tk1.Button(jjo3_yaxis_labels_tick_color_frm,text="Select Y Axis Tick\n(& Step Label) Color",                                                      command=lambda: getcolor(jjo3_master,"jjocont3.yaxis_labels_tick_color_temp","J/Jo Y Axis Tick & Label",jjo3_yaxis_labels_tick_color_label,jjo3_yaxis_labels_tick_color_frm,False))        jjo3_yaxis_labels_tick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_yaxis_labels_tick_color_label = tk1.Label(jjo3_yaxis_labels_tick_color_frm,text="Current\nColor:\n%s" % jjocont3.yaxis_labels_tick_color_temp,                                                         fg=getoppositecolor(jjocont3.yaxis_labels_tick_color_temp), bg=jjocont3.yaxis_labels_tick_color_temp,width=10)        jjo3_yaxis_labels_tick_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_yaxis_tick_width_frm = tk1.Frame(jjo3_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo3_yaxis_tick_width_frm.pack(fill=tk1.X)        jjo3_yaxis_tick_width_frm.grid_columnconfigure(0, weight=1)        jjo3_yaxis_tick_width_frm.grid_columnconfigure(3, weight=1)        jjo3_yaxis_tick_width_label = tk1.Label(jjo3_yaxis_tick_width_frm, text="Y Axis Tick Width:")        jjo3_yaxis_tick_width_label.grid(row=0,column=1,sticky='NESW')                jjocont3.yaxis_tick_width_var = tk1.IntVar(jjo3_interior)        jjocont3.yaxis_tick_width_var.set(jjocont3.yaxis_tick_width)                jjo3_yaxis_tick_width_optionmenu = tk1.OptionMenu(jjo3_yaxis_tick_width_frm, jjocont3.yaxis_tick_width_var, *linewidthchoices_set)        jjo3_yaxis_tick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_yaxis_tick_width_optionmenu.configure(font=('Consolas',10))        jjo3_yaxis_tick_length_frm = tk1.Frame(jjo3_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo3_yaxis_tick_length_frm.pack(fill=tk1.X)        jjo3_yaxis_tick_length_frm.grid_columnconfigure(0, weight=1)        jjo3_yaxis_tick_length_frm.grid_columnconfigure(3, weight=1)        jjo3_yaxis_tick_length_label = tk1.Label(jjo3_yaxis_tick_length_frm, text="Y Axis Tick Length:")        jjo3_yaxis_tick_length_label.grid(row=0,column=1,sticky='NESW')                jjocont3.yaxis_tick_length_var = tk1.IntVar(jjo3_interior)        jjocont3.yaxis_tick_length_var.set(jjocont3.yaxis_tick_length)         jjo3_yaxis_tick_length_optionmenu = tk1.OptionMenu(jjo3_yaxis_tick_length_frm, jjocont3.yaxis_tick_length_var, *linelengthchoices_set)        jjo3_yaxis_tick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_yaxis_tick_length_optionmenu.configure(font=('Consolas',10))        jjo3_yaxis_label_fontsize_frm = tk1.Frame(jjo3_show_yticks_labels_frm,bd=2,relief=tk1.GROOVE)        jjo3_yaxis_label_fontsize_frm.pack(fill=tk1.X)        jjo3_yaxis_label_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo3_yaxis_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo3_yaxis_label_fontsize_label = tk1.Label(jjo3_yaxis_label_fontsize_frm, text="Y Axis Label Font Size:",bd=1)        jjo3_yaxis_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont3.yaxis_label_fontsize_mod_var = tk1.StringVar(jjo3_interior)        jjocont3.yaxis_label_fontsize_mod_var.set(jjocont3.yaxis_label_fontsize_mod)         jjo3_yaxis_label_fontsize_optionmenu = tk1.OptionMenu(jjo3_yaxis_label_fontsize_frm, jjocont3.yaxis_label_fontsize_mod_var, *fontsizes_set)        jjo3_yaxis_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo3_yaxis_label_fontsize_optionmenu.configure(font=('Consolas',10))                jjo3_show_yaxis_percentlabel_frm = tk1.Frame(jjo3_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_yaxis_percentlabel_frm.pack(fill=tk1.X)        jjocont3.show_yaxis_percentlabel_var = tk1.BooleanVar(value=jjocont3.show_yaxis_percentlabel)        jjo3_show_yaxis_percentlabel_chbutt = tk1.Checkbutton(jjo3_show_yaxis_percentlabel_frm, text="Show Y Axis Percent Labels?", variable=jjocont3.show_yaxis_percentlabel_var)        jjo3_show_yaxis_percentlabel_chbutt.pack(fill=tk1.X)        jjo3_show_yaxis_abslabel_frm = tk1.Frame(jjo3_y_axisspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_yaxis_abslabel_frm.pack(fill=tk1.X)        jjocont3.show_yaxis_abslabel_var = tk1.BooleanVar(value=jjocont3.show_yaxis_abslabel)        jjo3_show_yaxis_abslabel_chbutt = tk1.Checkbutton(jjo3_show_yaxis_abslabel_frm, text="Show Y Axis Absolute J Values?", variable=jjocont3.show_yaxis_abslabel_var,command= lambda:                                              disablewidgets(jjocont3.show_yaxis_abslabel_var,False,[jjo3_show_yunits_chbutt,jjo3_yunits_label,jjo3_yunits_optionmenu],[],                                                             [[jjocont3.show_yunits_var,[False],[jjo3_yunits_label,jjo3_yunits_optionmenu]]]))        jjo3_show_yaxis_abslabel_chbutt.pack(fill=tk1.X)        jjo3_yaxis_units_frm = tk1.Frame(jjo3_show_yaxis_abslabel_frm,bd=2,relief=tk1.GROOVE)        jjo3_yaxis_units_frm.pack(fill=tk1.X)        jjocont3.show_yunits_var = tk1.BooleanVar(value=jjocont3.show_yunits)        jjo3_show_yunits_chbutt = tk1.Checkbutton(jjo3_yaxis_units_frm, text="Show Y Axis J Value Units?", variable=jjocont3.show_yunits_var,command= lambda:                                              disablewidgets(jjocont3.show_yunits_var,False,[jjo3_yunits_label,jjo3_yunits_optionmenu],[],[]))        jjo3_show_yunits_chbutt.grid(row=0, column=1,columnspan=2,sticky='NSEW')        jjo3_yaxis_units_frm.grid_columnconfigure(0, weight=1)        jjo3_yaxis_units_frm.grid_columnconfigure(3, weight=1)                    jjo3_yunits_label = tk1.Label(jjo3_yaxis_units_frm, text="Y Axis J Value Units:",bd=1)        jjo3_yunits_label.grid(row=1, column=1,sticky='NSEW')        jjocont3.yunits_mod_var = tk1.StringVar(jjo3_interior)        jjocont3.yunits_mod_var.set(jjocont3.yunits_mod)        jjo3_yunits_optionmenu = tk1.OptionMenu(jjo3_yaxis_units_frm, jjocont3.yunits_mod_var, *jjoyunits_set)        jjo3_yunits_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo3_yunits_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_yunits_var,False,[jjo3_yunits_label,jjo3_yunits_optionmenu],[],[])        disablewidgets(jjocont3.show_yaxis_abslabel_var,False,[jjo3_show_yunits_chbutt,jjo3_yunits_label,jjo3_yunits_optionmenu],[],[[jjocont3.show_yunits_var,[False],[jjo3_yunits_label,jjo3_yunits_optionmenu]]])        disablewidgets(jjocont3.show_yaxis_ticks_var,False,[jjo3_yaxis_labels_tick_color_butt,jjo3_yaxis_labels_tick_color_label,jjo3_yaxis_label_fontsize_label,jjo3_yaxis_label_fontsize_optionmenu,jjo3_show_yaxis_percentlabel_chbutt,                       jjo3_show_yaxis_abslabel_chbutt,jjo3_yaxis_tick_width_label,jjo3_yaxis_tick_width_optionmenu,jjo3_yaxis_tick_length_label,jjo3_yaxis_tick_length_optionmenu,jjo3_show_yunits_chbutt,jjo3_yunits_label,jjo3_yunits_optionmenu],[],                   [[jjocont3.show_yaxis_abslabel_var,[False],[jjo3_show_yunits_chbutt,jjo3_yunits_label,jjo3_yunits_optionmenu]],[jjocont3.show_yunits_var,[False],[jjo3_yunits_label,jjo3_yunits_optionmenu]]])        jjo3_col5_frm = tk1.Frame(jjo3_interior,bd=2) # Column 5        jjo3_col5_frm.grid(row=0,column=5,sticky='NSEW')        jjo3_arrowline_frm = tk1.Frame(jjo3_col5_frm,bd=2,relief=tk1.SUNKEN)        jjo3_arrowline_frm.pack(fill=tk1.X)                jjo3_arrowline_title_label = tk1.Label(jjo3_arrowline_frm, text="Arrows & Lines Settings:",font="Helvetica 12 bold")        jjo3_arrowline_title_label.pack(fill=tk1.X)        jjo3_plotarrow_frm = tk1.Frame(jjo3_arrowline_frm,bd=2,relief=tk1.GROOVE)        jjo3_plotarrow_frm.pack(fill=tk1.X)        jjocont3.show_arrowline_var = tk1.BooleanVar(value=jjocont3.show_arrowlines)        jjo3_show_arrowline_chbutt = tk1.Checkbutton(jjo3_plotarrow_frm, text="Show Arrows and Lines?", variable=jjocont3.show_arrowline_var,command= lambda:                                              disablewidgets(jjocont3.show_arrowline_var,False,[jjo3_arrowline_label,jjo3_arrowline_radio_arrow,jjo3_arrowline_radio_line,jjo3_arrowline_color_butt,jjo3_arrowline_color_label,                                                                                             jjo3_arrowline_width_label,jjo3_arrowline_width_optionmenu],[],[]))        jjo3_show_arrowline_chbutt.pack(fill=tk1.X)        jjo3_arrowline_radio_text_frm = tk1.Frame(jjo3_plotarrow_frm,bd=2,relief=tk1.GROOVE)        jjo3_arrowline_radio_text_frm.pack(fill=tk1.X)        jjo3_arrowline_label = tk1.Label(jjo3_arrowline_radio_text_frm, text="Plot Arrows or Lines?")        jjo3_arrowline_label.pack(fill=tk1.X)        jjocont3.arrowsorlines_var = tk1.StringVar()        jjocont3.arrowsorlines_var.set(jjocont3.arrowsorlines)        jjo3_arrowline_radio_frm = tk1.Frame(jjo3_arrowline_radio_text_frm,bd=2)        jjo3_arrowline_radio_frm.pack(fill=tk1.X)        jjo3_arrowline_radio_arrow = tk1.Radiobutton(jjo3_arrowline_radio_frm, text="Plot Arrows",variable=jjocont3.arrowsorlines_var,value="Arrows")        jjo3_arrowline_radio_arrow.pack(side=tk1.LEFT,padx=20)        jjo3_arrowline_radio_line = tk1.Radiobutton(jjo3_arrowline_radio_frm, text="Plot Lines",variable=jjocont3.arrowsorlines_var,value="Lines")        jjo3_arrowline_radio_line.pack(side=tk1.LEFT,padx=20)        jjo3_arrowline_color_frm = tk1.Frame(jjo3_arrowline_frm,bd=2,relief=tk1.GROOVE)        jjo3_arrowline_color_frm.pack(fill=tk1.X)                        jjo3_arrowline_color_frm.grid_columnconfigure(0, weight=1)        jjo3_arrowline_color_frm.grid_columnconfigure(3, weight=1)        jjo3_arrowline_color_butt = tk1.Button(jjo3_arrowline_color_frm,text="Select Arrow/Line Color", command= lambda: getcolor(jjo3_master,"jjocont3.arrowline_color_temp","J/Jo Arrow/Line",                                                                                                                                jjo3_arrowline_color_label,jjo3_arrowline_color_frm,False))        jjo3_arrowline_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_arrowline_color_label = tk1.Label(jjo3_arrowline_color_frm,text="Current\nColor:\n%s" % jjocont3.arrowline_color_temp,fg=getoppositecolor(jjocont3.arrowline_color_temp), bg=jjocont3.arrowline_color_temp,width=10)        jjo3_arrowline_color_label.grid(row=0,column=2)        jjo3_arrowline_width_frm = tk1.Frame(jjo3_arrowline_frm,bd=2,relief=tk1.GROOVE)        jjo3_arrowline_width_frm.pack(fill=tk1.X)        jjo3_arrowline_width_frm.grid_columnconfigure(0, weight=1)        jjo3_arrowline_width_frm.grid_columnconfigure(3, weight=1)        jjo3_arrowline_width_label = tk1.Label(jjo3_arrowline_width_frm, text="Arrow/Line Width:")        jjo3_arrowline_width_label.grid(row=0,column=1,sticky='NESW')                jjocont3.arrowline_width_var = tk1.IntVar(jjo3_interior)        jjocont3.arrowline_width_var.set(jjocont3.arrowline_width)         jjo3_arrowline_width_optionmenu = tk1.OptionMenu(jjo3_arrowline_width_frm, jjocont3.arrowline_width_var, *linewidthchoices_set)        jjo3_arrowline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_arrowline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_arrowline_var,False,[jjo3_arrowline_label,jjo3_arrowline_radio_arrow,jjo3_arrowline_radio_line,jjo3_arrowline_color_butt,jjo3_arrowline_color_label,jjo3_arrowline_width_label,jjo3_arrowline_width_optionmenu],[],[])        jjo3_speciallinespecs_frm = tk1.Frame(jjo3_col5_frm,bd=2,relief=tk1.SUNKEN)        jjo3_speciallinespecs_frm.pack(fill=tk1.X)        jjo3_speciallinespecs_label = tk1.Label(jjo3_speciallinespecs_frm, text="Special Line Settings:",font="Helvetica 12 bold")        jjo3_speciallinespecs_label.pack(fill=tk1.X)        jjo3_jvertstepboundlinesettings_frm = tk1.Frame(jjo3_speciallinespecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_jvertstepboundlinesettings_frm.pack(fill=tk1.X)        jjo3_jvertstepboundlinesettings_label = tk1.Label(jjo3_jvertstepboundlinesettings_frm, text="Vertical Step Type Boundary Line Settings:",font="Helvetica 10 bold")        jjo3_jvertstepboundlinesettings_label.pack(fill=tk1.X)        jjo3_show_vertstepboundline_frm = tk1.Frame(jjo3_jvertstepboundlinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_vertstepboundline_frm.pack(fill=tk1.X)        jjocont3.show_vertstepboundline_var = tk1.BooleanVar(value=jjocont3.show_vertstepboundline)        jjo3_show_vertstepboundline_chbutt = tk1.Checkbutton(jjo3_show_vertstepboundline_frm, text="Show Vertical Step Type Boundary Line?", variable=jjocont3.show_vertstepboundline_var,command= lambda:                                              disablewidgets(jjocont3.show_vertstepboundline_var,False,[jjo3_vertstepboundline_color_butt,jjo3_vertstepboundline_color_label,jjo3_vertstepboundline_width_label,jjo3_vertstepboundline_width_optionmenu],[],[]))        jjo3_show_vertstepboundline_chbutt.pack(fill=tk1.X)        jjo3_vertstepboundline_color_frm = tk1.Frame(jjo3_jvertstepboundlinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo3_vertstepboundline_color_frm.pack(fill=tk1.X)        jjo3_vertstepboundline_color_frm.grid_columnconfigure(0, weight=1)        jjo3_vertstepboundline_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_vertstepboundline_color_butt = tk1.Button(jjo3_vertstepboundline_color_frm,text="Select Vertical Step Type\nBoundary Line Color",                                                      command=lambda: getcolor(jjo3_master,"jjocont3.vertstepboundline_color_temp","Vertical Step Type Boundary Line",jjo3_vertstepboundline_color_label,jjo3_vertstepboundline_color_frm,False))        jjo3_vertstepboundline_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_vertstepboundline_color_label = tk1.Label(jjo3_vertstepboundline_color_frm,text="Current\nColor:\n%s" % jjocont3.vertstepboundline_color_temp,                                                         fg=getoppositecolor(jjocont3.vertstepboundline_color_temp), bg=jjocont3.vertstepboundline_color_temp,width=10)        jjo3_vertstepboundline_color_label.grid(row=0, column=2,sticky='NSEW')        jjo3_vertstepboundline_width_frm = tk1.Frame(jjo3_jvertstepboundlinesettings_frm,bd=2,relief=tk1.GROOVE)        jjo3_vertstepboundline_width_frm.pack(fill=tk1.X)        jjo3_vertstepboundline_width_frm.grid_columnconfigure(0, weight=1)        jjo3_vertstepboundline_width_frm.grid_columnconfigure(3, weight=1)        jjo3_vertstepboundline_width_label = tk1.Label(jjo3_vertstepboundline_width_frm, text="Vertical Step Type\nBoundary Line Width:")        jjo3_vertstepboundline_width_label.grid(row=0,column=1,sticky='NESW')        jjocont3.vertstepboundline_width_var = tk1.IntVar(jjo3_interior)        jjocont3.vertstepboundline_width_var.set(jjocont3.vertstepboundline_width)        jjo3_vertstepboundline_width_optionmenu = tk1.OptionMenu(jjo3_vertstepboundline_width_frm, jjocont3.vertstepboundline_width_var, *linewidthchoices_set)        jjo3_vertstepboundline_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        jjo3_vertstepboundline_width_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_vertstepboundline_var,False,[jjo3_vertstepboundline_color_butt,jjo3_vertstepboundline_color_label,jjo3_vertstepboundline_width_label,jjo3_vertstepboundline_width_optionmenu],[],[])        jjo3_magminspecs_frm = tk1.Frame(jjo3_col5_frm,bd=2,relief=tk1.SUNKEN)        jjo3_magminspecs_frm.pack(fill=tk1.X)        jjo3_magminspecs_label = tk1.Label(jjo3_magminspecs_frm, text="Magnetic Mineral Settings:",font="Helvetica 12 bold")        jjo3_magminspecs_label.pack(fill=tk1.X)        jjo3_show_magmins_frm = tk1.Frame(jjo3_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_magmins_frm.pack(fill=tk1.X)        jjocont3.show_magmin_var = tk1.BooleanVar(value=jjocont3.show_magmin)        jjo3_show_magmin_chbutt = tk1.Checkbutton(jjo3_show_magmins_frm, text="Show Curie Temps for Magnetic Minerals?", variable=jjocont3.show_magmin_var,command= lambda:                                              disablewidgets(jjocont3.show_magmin_var,False,[jjo3_magmin_radio_text,jjo3_magmin_temp_radio,jjo3_magmin_all_radio,jjo3_magmin_selected_radio,jjo3_show_goethite_chbutt,                                                                                            jjo3_show_pyrrhotite_chbutt,jjo3_show_greigite_chbutt,jjo3_show_titanomaghemite_chbutt,jjo3_show_titanomagnetite_chbutt,                                                                                            jjo3_show_magnetite_chbutt,jjo3_show_hematite_chbutt,jjo3_magmin_color_butt,jjo3_magmin_color_text,jjo3_magmin_text_color_butt,                                                                                            jjo3_magmin_text_color_text,jjo3_magmin_fontsize_label,jjo3_magmin_fontsize_optionmenu],[],                                                             [[jjocont3.mainmagmin_var,["Temp","All"],[jjo3_show_goethite_chbutt,jjo3_show_pyrrhotite_chbutt,jjo3_show_greigite_chbutt,jjo3_show_titanomaghemite_chbutt,                                                                jjo3_show_titanomagnetite_chbutt,jjo3_show_magnetite_chbutt,jjo3_show_hematite_chbutt]]]))        jjo3_show_magmin_chbutt.pack(fill=tk1.X)        jjo3_magmin_radio_text_frm = tk1.Frame(jjo3_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_magmin_radio_text_frm.pack(fill=tk1.X)        jjo3_magmin_radio_text = tk1.Label(jjo3_magmin_radio_text_frm, text="Which magnetic minerals should be shown?")        jjo3_magmin_radio_text.pack(fill=tk1.X)        jjocont3.mainmagmin_var = tk1.StringVar()        jjocont3.mainmagmin_var.set(jjocont3.mainmagmin)        jjo3_magmin_radio_frm = tk1.Frame(jjo3_magmin_radio_text_frm,bd=2)        jjo3_magmin_radio_frm.pack(fill=tk1.X)        jjo3_magmin_temp_radio = tk1.Radiobutton(jjo3_magmin_radio_frm, text="Curie Temps\n< Max Thermal Step",variable=jjocont3.mainmagmin_var,value="Temp",                                         command= lambda: disablewidgets(jjocont3.mainmagmin_var,"Temp",[jjo3_show_goethite_chbutt,jjo3_show_pyrrhotite_chbutt,jjo3_show_greigite_chbutt,jjo3_show_titanomaghemite_chbutt,                                                                                                        jjo3_show_titanomagnetite_chbutt,jjo3_show_magnetite_chbutt,jjo3_show_hematite_chbutt],[],[]))        jjo3_magmin_temp_radio.pack(side=tk1.LEFT,padx=5)        jjo3_magmin_all_radio = tk1.Radiobutton(jjo3_magmin_radio_frm, text="All",variable=jjocont3.mainmagmin_var,value="All",                                               command= lambda: disablewidgets(jjocont3.mainmagmin_var,"All",[jjo3_show_goethite_chbutt,jjo3_show_pyrrhotite_chbutt,jjo3_show_greigite_chbutt,jjo3_show_titanomaghemite_chbutt,                                                                                                        jjo3_show_titanomagnetite_chbutt,jjo3_show_magnetite_chbutt,jjo3_show_hematite_chbutt],[],[]))        jjo3_magmin_all_radio.pack(side=tk1.LEFT,padx=5)        jjo3_magmin_selected_radio = tk1.Radiobutton(jjo3_magmin_radio_frm, text="Selected",variable=jjocont3.mainmagmin_var,value="Select",                                                    command= lambda: disablewidgets(jjocont3.mainmagmin_var,"",[jjo3_show_goethite_chbutt,jjo3_show_pyrrhotite_chbutt,jjo3_show_greigite_chbutt,jjo3_show_titanomaghemite_chbutt,                                                                                                        jjo3_show_titanomagnetite_chbutt,jjo3_show_magnetite_chbutt,jjo3_show_hematite_chbutt],[],[]))        jjo3_magmin_selected_radio.pack(side=tk1.LEFT,padx=5)        jjo3_magmin_showselected_frm = tk1.Frame(jjo3_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_magmin_showselected_frm.pack(fill=tk1.X)        jjocont3.show_goethite_var = tk1.BooleanVar(value=jjocont3.showminlist[0])        jjo3_show_goethite_chbutt = tk1.Checkbutton(jjo3_magmin_showselected_frm, text="Show Goethite? (120%s)" % degree_sign, variable=jjocont3.show_goethite_var)        jjo3_show_goethite_chbutt.pack(fill=tk1.X)        jjocont3.show_pyrrhotite_var = tk1.BooleanVar(value=jjocont3.showminlist[1])        jjo3_show_pyrrhotite_chbutt = tk1.Checkbutton(jjo3_magmin_showselected_frm, text="Show Pyrrhotite? (320%s)" % degree_sign, variable=jjocont3.show_pyrrhotite_var)        jjo3_show_pyrrhotite_chbutt.pack(fill=tk1.X)        jjocont3.show_greigite_var = tk1.BooleanVar(value=jjocont3.showminlist[2])        jjo3_show_greigite_chbutt = tk1.Checkbutton(jjo3_magmin_showselected_frm, text="Show Greigite? (270%s-340%s)" % (degree_sign,degree_sign), variable=jjocont3.show_greigite_var)        jjo3_show_greigite_chbutt.pack(fill=tk1.X)        jjocont3.show_titanomaghemite_var = tk1.BooleanVar(value=jjocont3.showminlist[3])        jjo3_show_titanomaghemite_chbutt = tk1.Checkbutton(jjo3_magmin_showselected_frm, text="Show Titanomaghemite? (300%s-400%s)" % (degree_sign,degree_sign), variable=jjocont3.show_titanomaghemite_var)        jjo3_show_titanomaghemite_chbutt.pack(fill=tk1.X)        jjocont3.show_titanomagnetite_var = tk1.BooleanVar(value=jjocont3.showminlist[4])        jjo3_show_titanomagnetite_chbutt = tk1.Checkbutton(jjo3_magmin_showselected_frm, text="Show Titanomagnetite? (300%s-500%s)" % (degree_sign,degree_sign), variable=jjocont3.show_titanomagnetite_var)        jjo3_show_titanomagnetite_chbutt.pack(fill=tk1.X)        jjocont3.show_magnetite_var = tk1.BooleanVar(value=jjocont3.showminlist[5])        jjo3_show_magnetite_chbutt = tk1.Checkbutton(jjo3_magmin_showselected_frm, text="Show Magnetite? (580%s)" % degree_sign, variable=jjocont3.show_magnetite_var)        jjo3_show_magnetite_chbutt.pack(fill=tk1.X)        jjocont3.show_hematite_var = tk1.BooleanVar(value=jjocont3.showminlist[6])        jjo3_show_hematite_chbutt = tk1.Checkbutton(jjo3_magmin_showselected_frm, text="Show Hematite? (680%s)" % degree_sign, variable=jjocont3.show_hematite_var)        jjo3_show_hematite_chbutt.pack(fill=tk1.X)                jjo3_magmin_color_frm = tk1.Frame(jjo3_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_magmin_color_frm.pack(fill=tk1.X)        jjo3_magmin_color_frm.grid_columnconfigure(0, weight=1)        jjo3_magmin_color_frm.grid_columnconfigure(3, weight=1)        jjo3_magmin_color_butt = tk1.Button(jjo3_magmin_color_frm,text="Select Magnetic Mineral\nRectangle/Line Color", command= lambda: getcolor(jjo3_master,"jjocont3.magmin_color_temp","Magnetic Mineral Rectangles",                                                                                                                              jjo3_magmin_color_text,jjo3_magmin_color_frm,False))        jjo3_magmin_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_magmin_color_text = tk1.Label(jjo3_magmin_color_frm,text="Current\nColor:\n%s" % jjocont3.magmin_color_temp,fg=getoppositecolor(jjocont3.magmin_color_temp), bg=jjocont3.magmin_color_temp,width=10)        jjo3_magmin_color_text.grid(row=0,column=2)        jjo3_magmin_text_color_frm = tk1.Frame(jjo3_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_magmin_text_color_frm.pack(fill=tk1.X)                   jjo3_magmin_text_color_frm.grid_columnconfigure(0, weight=1)        jjo3_magmin_text_color_frm.grid_columnconfigure(3, weight=1)        jjo3_magmin_text_color_butt = tk1.Button(jjo3_magmin_text_color_frm,text="Select Magnetic Mineral\nText Color", command= lambda: getcolor(jjo3_master,"jjocont3.magmin_text_color_temp","Magnetic Mineral Text",                                                                                                                              jjo3_magmin_text_color_text,jjo3_magmin_text_color_frm,False))        jjo3_magmin_text_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_magmin_text_color_text = tk1.Label(jjo3_magmin_text_color_frm,text="Current\nColor:\n%s" % jjocont3.magmin_text_color_temp,fg=getoppositecolor(jjocont3.magmin_text_color_temp), bg=jjocont3.magmin_text_color_temp,width=10)        jjo3_magmin_text_color_text.grid(row=0,column=2)        jjo3_magmin_fontsize_frm = tk1.Frame(jjo3_magminspecs_frm,bd=2,relief=tk1.GROOVE)        jjo3_magmin_fontsize_frm.pack(fill=tk1.X)        jjo3_magmin_fontsize_frm.grid_columnconfigure(0, weight=1)        jjo3_magmin_fontsize_frm.grid_columnconfigure(3, weight=1)                    jjo3_magmin_fontsize_label = tk1.Label(jjo3_magmin_fontsize_frm, text="Magnetic Mineral Font Size:",bd=1)        jjo3_magmin_fontsize_label.grid(row=1, column=1,sticky='NSEW')        jjocont3.magmin_fontsize_mod_var = tk1.StringVar(jjo3_interior)        jjocont3.magmin_fontsize_mod_var.set(jjocont3.magmin_fontsize_mod)         jjo3_magmin_fontsize_optionmenu = tk1.OptionMenu(jjo3_magmin_fontsize_frm, jjocont3.magmin_fontsize_mod_var, *fontsizes_set)        jjo3_magmin_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        jjo3_magmin_fontsize_optionmenu.configure(font=('Consolas',10))        disablewidgets(jjocont3.show_magmin_var,False,[jjo3_magmin_radio_text,jjo3_magmin_temp_radio,jjo3_magmin_all_radio,jjo3_magmin_selected_radio,jjo3_show_goethite_chbutt,                                                jjo3_show_pyrrhotite_chbutt,jjo3_show_greigite_chbutt,jjo3_show_titanomaghemite_chbutt,jjo3_show_titanomagnetite_chbutt,                                                jjo3_show_magnetite_chbutt,jjo3_show_hematite_chbutt,jjo3_magmin_color_butt,jjo3_magmin_color_text,jjo3_magmin_text_color_butt,                                                jjo3_magmin_text_color_text,jjo3_magmin_fontsize_label,jjo3_magmin_fontsize_optionmenu],[],[])        if jjocont3.mainmagmin_var.get() == "Temp" or jjocont3.mainmagmin_var.get() == "All":            jjo3_show_goethite_chbutt.config(state='disabled')            jjo3_show_pyrrhotite_chbutt.config(state='disabled')            jjo3_show_greigite_chbutt.config(state='disabled')            jjo3_show_titanomaghemite_chbutt.config(state='disabled')            jjo3_show_titanomagnetite_chbutt.config(state='disabled')            jjo3_show_magnetite_chbutt.config(state='disabled')            jjo3_show_hematite_chbutt.config(state='disabled')        jjo3_col6_frm = tk1.Frame(jjo3_interior,bd=2) # Column 6        jjo3_col6_frm.grid(row=0,column=6,sticky='NSEW')        jjo3_rect_loss_settings_frm = tk1.Frame(jjo3_col6_frm,bd=2,relief=tk1.SUNKEN)        jjo3_rect_loss_settings_frm.pack(fill=tk1.X)        jjo3_rect_loss_settings_label = tk1.Label(jjo3_rect_loss_settings_frm, text="Intensity Loss Rectangle Settings:",bd=1,font="Helvetica 12 bold")        jjo3_rect_loss_settings_label.pack(fill=tk1.X)                jjo3_show_jdecrease_absrect_frm = tk1.Frame(jjo3_rect_loss_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_jdecrease_absrect_frm.pack(fill=tk1.X)        jjocont3.show_jdecrease_absrect_var = tk1.BooleanVar(value=jjocont3.show_jdecrease_absrect)        jjo3_show_jdecrease_absrect_chbutt = tk1.Checkbutton(jjo3_show_jdecrease_absrect_frm, text="Show Absolute Intensity Loss Rectangles?", variable=jjocont3.show_jdecrease_absrect_var,command= lambda:                                              disablewidgets(jjocont3.show_jdecrease_absrect_var,False,[jjo3_absrect_loss_color_butt,jjo3_absrect_loss_color_label,jjo3_show_jdecrease_absrect_edge_chbutt,jjo3_absrect_edge_loss_color_butt,jjo3_absrect_edge_loss_color_label],[],                                                             [[jjocont3.show_jdecrease_absrect_edge_var,[False],[jjo3_absrect_edge_loss_color_butt,jjo3_absrect_edge_loss_color_label]]]))        jjo3_show_jdecrease_absrect_chbutt.pack(fill=tk1.X)        jjo3_absrect_loss_color_frm = tk1.Frame(jjo3_show_jdecrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo3_absrect_loss_color_frm.pack(fill=tk1.X)        jjo3_absrect_loss_color_frm.grid_columnconfigure(0, weight=1)        jjo3_absrect_loss_color_frm.grid_columnconfigure(3, weight=1)        jjo3_absrect_loss_color_butt = tk1.Button(jjo3_absrect_loss_color_frm,text="Select Absolute Intensity Loss\nRectangle Color", command= lambda: getcolor(jjo3_master,"jjocont3.jdecrease_absrect_color_temp","J/Jo Absolute Intensity Loss Rectangle",                                                                                                                                                    jjo3_absrect_loss_color_label,jjo3_absrect_loss_color_frm,False))        jjo3_absrect_loss_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_absrect_loss_color_label = tk1.Label(jjo3_absrect_loss_color_frm,text="Current\nColor:\n%s" % jjocont3.jdecrease_absrect_color_temp,fg=getoppositecolor(jjocont3.jdecrease_absrect_color_temp), bg=jjocont3.jdecrease_absrect_color_temp,width=10)        jjo3_absrect_loss_color_label.grid(row=0,column=2)        jjo3_show_jdecrease_absrect_edge_frm = tk1.Frame(jjo3_show_jdecrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_jdecrease_absrect_edge_frm.pack(fill=tk1.X)        jjocont3.show_jdecrease_absrect_edge_var = tk1.BooleanVar(value=jjocont3.show_jdecrease_absrect_edge)        jjo3_show_jdecrease_absrect_edge_chbutt = tk1.Checkbutton(jjo3_show_jdecrease_absrect_edge_frm, text="Show Absolute Intensity Loss Rectangle Border?", variable=jjocont3.show_jdecrease_absrect_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_jdecrease_absrect_edge_var,False,[jjo3_absrect_edge_loss_color_butt,jjo3_absrect_edge_loss_color_label],[],[]))        jjo3_show_jdecrease_absrect_edge_chbutt.pack(fill=tk1.X)        jjo3_absrect_edge_loss_color_frm = tk1.Frame(jjo3_show_jdecrease_absrect_edge_frm,bd=2,relief=tk1.GROOVE)        jjo3_absrect_edge_loss_color_frm.pack(fill=tk1.X)        jjo3_absrect_edge_loss_color_frm.grid_columnconfigure(0, weight=1)        jjo3_absrect_edge_loss_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_absrect_edge_loss_color_butt = tk1.Button(jjo3_absrect_edge_loss_color_frm,text="Select Absolute Intensity Loss\nRectangle Border Color",                                                 command= lambda: getcolor(jjo3_master,"jjocont3.jdecrease_absrect_edge_color_temp","Absolute Intensity Loss Rectangle",jjo3_absrect_edge_loss_color_label,jjo3_absrect_edge_loss_color_frm,False))        jjo3_absrect_edge_loss_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_absrect_edge_loss_color_label = tk1.Label(jjo3_absrect_edge_loss_color_frm,text="Current\nColor:\n%s" % jjocont3.jdecrease_absrect_edge_color_temp,fg=getoppositecolor(jjocont3.jdecrease_absrect_edge_color_temp), bg=jjocont3.jdecrease_absrect_edge_color_temp,width=10)        jjo3_absrect_edge_loss_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont3.show_jdecrease_absrect_edge_var,False,[jjo3_absrect_edge_loss_color_butt,jjo3_absrect_edge_loss_color_label],[],[])         disablewidgets(jjocont3.show_jdecrease_absrect_var,False,[jjo3_absrect_loss_color_butt,jjo3_absrect_loss_color_label,jjo3_show_jdecrease_absrect_edge_chbutt,jjo3_absrect_edge_loss_color_butt,jjo3_absrect_edge_loss_color_label],[],                       [[jjocont3.show_jdecrease_absrect_edge_var,[False],[jjo3_absrect_edge_loss_color_butt,jjo3_absrect_edge_loss_color_label]]])        jjo3_show_relrect_loss_frm = tk1.Frame(jjo3_rect_loss_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_relrect_loss_frm.pack(fill=tk1.X)        jjocont3.show_jdecrease_relrect_var = tk1.BooleanVar(value=jjocont3.show_jdecrease_relrect)        jjo3_show_relrect_loss_chbutt = tk1.Checkbutton(jjo3_show_relrect_loss_frm, text="Show Relative Intensity Loss Rectangles?", variable=jjocont3.show_jdecrease_relrect_var,command= lambda:                                              disablewidgets(jjocont3.show_jdecrease_relrect_var,False,[jjo3_relrect_loss_color_butt,jjo3_relrect_loss_color_label,jjo3_show_relrect_loss_edge_chbutt,jjo3_relrect_loss_edge_color_butt,jjo3_relrect_loss_edge_color_label],[],                                                             [[jjocont3.show_jdecrease_relrect_edge_var,[False],[jjo3_relrect_loss_edge_color_butt,jjo3_relrect_loss_edge_color_label]]]))        jjo3_show_relrect_loss_chbutt.pack(fill=tk1.X)        jjo3_relrect_loss_color_frm = tk1.Frame(jjo3_show_relrect_loss_frm,bd=2,relief=tk1.GROOVE)        jjo3_relrect_loss_color_frm.pack(fill=tk1.X)               jjo3_relrect_loss_color_frm.grid_columnconfigure(0, weight=1)        jjo3_relrect_loss_color_frm.grid_columnconfigure(3, weight=1)        jjo3_relrect_loss_color_butt = tk1.Button(jjo3_relrect_loss_color_frm,text="Select Relative Intensity Loss\nRectangle Color",                                            command= lambda: getcolor(jjo3_master,"jjocont3.jdecrease_relrect_color_temp","J/Jo Relative Intensity Loss Rectangle",jjo3_relrect_loss_color_label,jjo3_relrect_loss_color_frm,False))        jjo3_relrect_loss_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_relrect_loss_color_label = tk1.Label(jjo3_relrect_loss_color_frm,text="Current\nColor:\n%s" % jjocont3.jdecrease_relrect_color_temp,fg=getoppositecolor(jjocont3.jdecrease_relrect_color_temp), bg=jjocont3.jdecrease_relrect_color_temp,width=10)        jjo3_relrect_loss_color_label.grid(row=0,column=2)        jjo3_show_relrect_loss_edge_frm = tk1.Frame(jjo3_show_relrect_loss_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_relrect_loss_edge_frm.pack(fill=tk1.X)        jjocont3.show_jdecrease_relrect_edge_var = tk1.BooleanVar(value=jjocont3.show_jdecrease_relrect_edge)        jjo3_show_relrect_loss_edge_chbutt = tk1.Checkbutton(jjo3_show_relrect_loss_edge_frm, text="Show Relative Intensity Loss Rectangle Border?", variable=jjocont3.show_jdecrease_relrect_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_jdecrease_relrect_edge_var,False,[jjo3_relrect_loss_edge_color_butt,jjo3_relrect_loss_edge_color_label],[],[]))        jjo3_show_relrect_loss_edge_chbutt.pack(fill=tk1.X)        jjo3_relrect_loss_edge_color_frm = tk1.Frame(jjo3_show_relrect_loss_edge_frm,bd=2,relief=tk1.GROOVE)        jjo3_relrect_loss_edge_color_frm.pack(fill=tk1.X)        jjo3_relrect_loss_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo3_relrect_loss_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_relrect_loss_edge_color_butt = tk1.Button(jjo3_relrect_loss_edge_color_frm,text="Select Relative Intensity Loss\nRectangle Border Color",                                                 command= lambda: getcolor(jjo3_master,"jjocont3.jdecrease_relrect_edge_color_temp","Relative Intensity Loss Rectangle",jjo3_relrect_loss_edge_color_label,jjo3_relrect_loss_edge_color_frm,False))        jjo3_relrect_loss_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_relrect_loss_edge_color_label = tk1.Label(jjo3_relrect_loss_edge_color_frm,text="Current\nColor:\n%s" % jjocont3.jdecrease_relrect_edge_color_temp,fg=getoppositecolor(jjocont3.jdecrease_relrect_edge_color_temp), bg=jjocont3.jdecrease_relrect_edge_color_temp,width=10)        jjo3_relrect_loss_edge_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont3.show_jdecrease_relrect_edge_var,False,[jjo3_relrect_loss_edge_color_butt,jjo3_relrect_loss_edge_color_label],[],[])         disablewidgets(jjocont3.show_jdecrease_relrect_var,False,[jjo3_relrect_loss_color_butt,jjo3_relrect_loss_color_label,jjo3_show_relrect_loss_edge_chbutt,jjo3_relrect_loss_edge_color_butt,jjo3_relrect_loss_edge_color_label],[],                       [[jjocont3.show_jdecrease_relrect_edge_var,[False],[jjo3_relrect_loss_edge_color_butt,jjo3_relrect_loss_edge_color_label]]])        jjo3_rect_gain_settings_frm = tk1.Frame(jjo3_col6_frm,bd=2,relief=tk1.SUNKEN)        jjo3_rect_gain_settings_frm.pack(fill=tk1.X)        jjo3_rect_gain_settings_label = tk1.Label(jjo3_rect_gain_settings_frm, text="Intensity Gain Rectangle Settings:",bd=1,font="Helvetica 12 bold")        jjo3_rect_gain_settings_label.pack(fill=tk1.X)                jjo3_show_jincrease_absrect_frm = tk1.Frame(jjo3_rect_gain_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_jincrease_absrect_frm.pack(fill=tk1.X)        jjocont3.show_jincrease_absrect_var = tk1.BooleanVar(value=jjocont3.show_jincrease_absrect)        jjo3_show_jincrease_absrect_chbutt = tk1.Checkbutton(jjo3_show_jincrease_absrect_frm, text="Show Absolute Intensity Gain Rectangles?", variable=jjocont3.show_jincrease_absrect_var,command= lambda:                                              disablewidgets(jjocont3.show_jincrease_absrect_var,False,[jjo3_absrect_gain_color_butt,jjo3_absrect_gain_color_label,jjo3_show_jincrease_absrect_edge_chbutt,jjo3_absrect_edge_gain_color_butt,jjo3_absrect_edge_gain_color_label],[],                                                             [[jjocont3.show_jincrease_absrect_edge_var,[False],[jjo3_absrect_edge_gain_color_butt,jjo3_absrect_edge_gain_color_label]]]))        jjo3_show_jincrease_absrect_chbutt.pack(fill=tk1.X)        jjo3_absrect_gain_color_frm = tk1.Frame(jjo3_show_jincrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo3_absrect_gain_color_frm.pack(fill=tk1.X)                        jjo3_absrect_gain_color_frm.grid_columnconfigure(0, weight=1)        jjo3_absrect_gain_color_frm.grid_columnconfigure(3, weight=1)        jjo3_absrect_gain_color_butt = tk1.Button(jjo3_absrect_gain_color_frm,text="Select Absolute Intensity Gain\nRectangle Color", command= lambda: getcolor(jjo3_master,"jjocont3.jincrease_absrect_color_temp","J/Jo Absolute Intensity gain Rectangle",                                                                                                                                                    jjo3_absrect_gain_color_label,jjo3_absrect_gain_color_frm,False))        jjo3_absrect_gain_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_absrect_gain_color_label = tk1.Label(jjo3_absrect_gain_color_frm,text="Current\nColor:\n%s" % jjocont3.jincrease_absrect_color_temp,fg=getoppositecolor(jjocont3.jincrease_absrect_color_temp), bg=jjocont3.jincrease_absrect_color_temp,width=10)        jjo3_absrect_gain_color_label.grid(row=0,column=2)        jjo3_show_jincrease_absrect_edge_frm = tk1.Frame(jjo3_show_jincrease_absrect_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_jincrease_absrect_edge_frm.pack(fill=tk1.X)        jjocont3.show_jincrease_absrect_edge_var = tk1.BooleanVar(value=jjocont3.show_jincrease_absrect_edge)        jjo3_show_jincrease_absrect_edge_chbutt = tk1.Checkbutton(jjo3_show_jincrease_absrect_edge_frm, text="Show Absolute Intensity Gain Rectangle Border?", variable=jjocont3.show_jincrease_absrect_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_jincrease_absrect_edge_var,False,[jjo3_absrect_edge_gain_color_butt,jjo3_absrect_edge_gain_color_label],[],[]))        jjo3_show_jincrease_absrect_edge_chbutt.pack(fill=tk1.X)        jjo3_absrect_edge_gain_color_frm = tk1.Frame(jjo3_show_jincrease_absrect_edge_frm,bd=2,relief=tk1.GROOVE)        jjo3_absrect_edge_gain_color_frm.pack(fill=tk1.X)        jjo3_absrect_edge_gain_color_frm.grid_columnconfigure(0, weight=1)        jjo3_absrect_edge_gain_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_absrect_edge_gain_color_butt = tk1.Button(jjo3_absrect_edge_gain_color_frm,text="Select Absolute Intensity Gain\nRectangle Border Color",                                                 command= lambda: getcolor(jjo3_master,"jjocont3.jincrease_absrect_edge_color_temp","Absolute Intensity gain Rectangle",jjo3_absrect_edge_gain_color_label,jjo3_absrect_edge_gain_color_frm,False))        jjo3_absrect_edge_gain_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_absrect_edge_gain_color_label = tk1.Label(jjo3_absrect_edge_gain_color_frm,text="Current\nColor:\n%s" % jjocont3.jincrease_absrect_edge_color_temp,fg=getoppositecolor(jjocont3.jincrease_absrect_edge_color_temp), bg=jjocont3.jincrease_absrect_edge_color_temp,width=10)        jjo3_absrect_edge_gain_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont3.show_jincrease_absrect_edge_var,False,[jjo3_absrect_edge_gain_color_butt,jjo3_absrect_edge_gain_color_label],[],[])         disablewidgets(jjocont3.show_jincrease_absrect_var,False,[jjo3_absrect_gain_color_butt,jjo3_absrect_gain_color_label,jjo3_show_jincrease_absrect_edge_chbutt,jjo3_absrect_edge_gain_color_butt,jjo3_absrect_edge_gain_color_label],[],                       [[jjocont3.show_jincrease_absrect_edge_var,[False],[jjo3_absrect_edge_gain_color_butt,jjo3_absrect_edge_gain_color_label]]])        jjo3_show_relrect_gain_frm = tk1.Frame(jjo3_rect_gain_settings_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_relrect_gain_frm.pack(fill=tk1.X)        jjocont3.show_jincrease_relrect_var = tk1.BooleanVar(value=jjocont3.show_jincrease_relrect)        jjo3_show_relrect_gain_chbutt = tk1.Checkbutton(jjo3_show_relrect_gain_frm, text="Show Relative Intensity Gain Rectangles?", variable=jjocont3.show_jincrease_relrect_var,command= lambda:                                              disablewidgets(jjocont3.show_jincrease_relrect_var,False,[jjo3_relrect_gain_color_butt,jjo3_relrect_gain_color_label,jjo3_show_relrect_gain_edge_chbutt,jjo3_relrect_gain_edge_color_butt,jjo3_relrect_gain_edge_color_label],[],                                                             [[jjocont3.show_jincrease_relrect_edge_var,[False],[jjo3_relrect_gain_edge_color_butt,jjo3_relrect_gain_edge_color_label]]]))        jjo3_show_relrect_gain_chbutt.pack(fill=tk1.X)        jjo3_relrect_gain_color_frm = tk1.Frame(jjo3_show_relrect_gain_frm,bd=2,relief=tk1.GROOVE)        jjo3_relrect_gain_color_frm.pack(fill=tk1.X)        jjo3_relrect_gain_color_frm.grid_columnconfigure(0, weight=1)        jjo3_relrect_gain_color_frm.grid_columnconfigure(3, weight=1)        jjo3_relrect_gain_color_butt = tk1.Button(jjo3_relrect_gain_color_frm,text="Select Relative Intensity Gain\nRectangle Color",                                            command= lambda: getcolor(jjo3_master,"jjocont3.jincrease_relrect_color_temp","J/Jo Relative Intensity gain Rectangle",jjo3_relrect_gain_color_label,jjo3_relrect_gain_color_frm,False))        jjo3_relrect_gain_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        jjo3_relrect_gain_color_label = tk1.Label(jjo3_relrect_gain_color_frm,text="Current\nColor:\n%s" % jjocont3.jincrease_relrect_color_temp,fg=getoppositecolor(jjocont3.jincrease_relrect_color_temp), bg=jjocont3.jincrease_relrect_color_temp,width=10)        jjo3_relrect_gain_color_label.grid(row=0,column=2)        jjo3_show_relrect_gain_edge_frm = tk1.Frame(jjo3_show_relrect_gain_frm,bd=2,relief=tk1.GROOVE)        jjo3_show_relrect_gain_edge_frm.pack(fill=tk1.X)        jjocont3.show_jincrease_relrect_edge_var = tk1.BooleanVar(value=jjocont3.show_jincrease_relrect_edge)        jjo3_show_relrect_gain_edge_chbutt = tk1.Checkbutton(jjo3_show_relrect_gain_edge_frm, text="Show Relative Intensity Gain Rectangle Border?", variable=jjocont3.show_jincrease_relrect_edge_var,command= lambda:                                              disablewidgets(jjocont3.show_jincrease_relrect_edge_var,False,[jjo3_relrect_gain_edge_color_butt,jjo3_relrect_gain_edge_color_label],[],[]))        jjo3_show_relrect_gain_edge_chbutt.pack(fill=tk1.X)        jjo3_relrect_gain_edge_color_frm = tk1.Frame(jjo3_show_relrect_gain_edge_frm,bd=2,relief=tk1.GROOVE)        jjo3_relrect_gain_edge_color_frm.pack(fill=tk1.X)        jjo3_relrect_gain_edge_color_frm.grid_columnconfigure(0, weight=1)        jjo3_relrect_gain_edge_color_frm.grid_columnconfigure(3, weight=1)                        jjo3_relrect_gain_edge_color_butt = tk1.Button(jjo3_relrect_gain_edge_color_frm,text="Select Relative Intensity Gain\nRectangle Border Color",                                                 command= lambda: getcolor(jjo3_master,"jjocont3.jincrease_relrect_edge_color_temp","Relative Intensity Gain Rectangle",jjo3_relrect_gain_edge_color_label,jjo3_relrect_gain_edge_color_frm,False))        jjo3_relrect_gain_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        jjo3_relrect_gain_edge_color_label = tk1.Label(jjo3_relrect_gain_edge_color_frm,text="Current\nColor:\n%s" % jjocont3.jincrease_relrect_edge_color_temp,fg=getoppositecolor(jjocont3.jincrease_relrect_edge_color_temp), bg=jjocont3.jincrease_relrect_edge_color_temp,width=10)        jjo3_relrect_gain_edge_color_label.grid(row=0, column=2,sticky='NSEW')        disablewidgets(jjocont3.show_jincrease_relrect_edge_var,False,[jjo3_relrect_gain_edge_color_butt,jjo3_relrect_gain_edge_color_label],[],[])         disablewidgets(jjocont3.show_jincrease_relrect_var,False,[jjo3_relrect_gain_color_butt,jjo3_relrect_gain_color_label,jjo3_show_relrect_gain_edge_chbutt,jjo3_relrect_gain_edge_color_butt,jjo3_relrect_gain_edge_color_label],[],                       [[jjocont3.show_jincrease_relrect_edge_var,[False],[jjo3_relrect_gain_edge_color_butt,jjo3_relrect_gain_edge_color_label]]])                jjo3_submit_butt_frm = tk1.Frame(jjo3_interior,bd=2,relief=tk1.RIDGE)        jjo3_submit_butt_frm.grid(row=2,column=0, columnspan=7, sticky='NSEW')        jjo3_submit_butt = tk1.Button(jjo3_submit_butt_frm, text="Submit and Save Changes and Update J/Jo Multiple Plot", command= lambda: submitjjo3controls(self,jjocont3,jjo3_master))        jjo3_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo3_submit_butt.configure(font=('Consolas bold',12))        jjo3_reset_butt = tk1.Button(jjo3_submit_butt_frm, text="Reset J/Jo Multiple Plot to Defaults", command= lambda: jjo3_resetdefaults(self,jjo3_master))        jjo3_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo3_reset_butt.configure(font=('Consolas',10))        jjo3_cancel_butt = tk1.Button(jjo3_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(jjo3_master))        jjo3_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        jjo3_cancel_butt.configure(font=('Consolas',10))        tk1.mainloop()    return######## Arrow & Best Fit Line Functions ###########def processarrow(startchoice,endchoice,color,width,self,arrowmaster):    arrowmaster.destroy()    arrowmaster.quit()    startstep = startchoice.get()    endstep = endchoice.get()    if startstep != endstep:        newarrow = [startstep,endstep]        self.sample.arrowlist.append([newarrow,color,width])        messaboxtext = ("NEW ARROW SUBMITTED. Start step is: %s. End Step is: %s. " % (startstep,endstep))        tkMessageBox.showinfo("",messaboxtext)    else:        messaboxtext = ("Arrow start and end steps cannot be the same. No arrow added.")        tkMessageBox.showinfo("",messaboxtext)    self.domultiplot(False,False,False,False)    returndef add_arrow(self):    global arrowmaster, newarrowcolor    try:        'normal' == root.state()        arrowmaster.lift()        arrowmaster.attributes('-topmost',True)        arrowmaster.after_idle(arrowmaster.attributes,'-topmost',False)    except:        arrowmaster = tk1.Toplevel()        arrowmaster.focus_set()        arrowmaster.title("Add New Arrow to Zijderveld Plot!")        header_label = tk1.Label(arrowmaster, text="This window can add one specified arrow to your Zijderveld + 3D Plots.")        header_label.grid(row=0, column=0, columnspan=4,sticky='NSEW')        start_label_frm = tk1.Frame(arrowmaster,bd=2,relief=tk1.GROOVE)        start_label = tk1.Label(arrowmaster, text="Select Starting Step for Arrow:")        start_label.grid(row=1, column=0, sticky='W')        currentsampsteps_duplist = []        for stepindex, stepname in enumerate(self.sample.steplist):            if not(stepindex in self.sample.duplist):                currentsampsteps_duplist.append(stepname)            else:                currentsampsteps_duplist.append(stepname + " -- Duplicate step")        startchoice = tk1.StringVar(arrowmaster)        startchoice.set(currentsampsteps_duplist[0])                startoptionmenu = tk1.OptionMenu(arrowmaster, startchoice, *currentsampsteps_duplist)        startoptionmenu.grid(row=1,column=1,sticky='E')        end_label = tk1.Label(arrowmaster, text="Select Ending Step for Arrow:")        end_label.grid(row=1, column=2, sticky='W')        endchoice = tk1.StringVar(arrowmaster)        endchoice.set(currentsampsteps_duplist[0])         endoptionmenu = tk1.OptionMenu(arrowmaster, endchoice, *currentsampsteps_duplist)        endoptionmenu.grid(row=1,column=3,sticky='E')        newarrowcolor_frm = tk1.Frame(arrowmaster,bd=2,relief=tk1.GROOVE)        newarrowcolor_frm.grid(row=2,column=1,columnspan=2)        newarrowcolor = "red"        newarrowcolor_frm.grid_columnconfigure(0, weight=1)        newarrowcolor_frm.grid_columnconfigure(3, weight=1)                newarrow_color_butt = tk1.Button(newarrowcolor_frm,text="Select New Arrow Line Color", command=                                                          lambda: getcolor(arrowmaster,"newarrowcolor","New Best Fit Line",newarrow_color_label,newarrowcolor_frm,True))        newarrow_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        newarrow_color_label = tk1.Label(newarrowcolor_frm,text="Current\nColor:\n%s" % newarrowcolor, fg=getoppositecolor(newarrowcolor), bg=newarrowcolor,width=10)        newarrow_color_label.grid(row=0, column=2,sticky='NSEW')        newarrow_width_frm = tk1.Frame(arrowmaster,bd=2,relief=tk1.GROOVE)        newarrow_width_frm.grid(row=4,column=1,columnspan=2)        newarrow_width_frm.grid_columnconfigure(0, weight=1)        newarrow_width_frm.grid_columnconfigure(3, weight=1)        newarrow_width_label = tk1.Label(newarrow_width_frm, text="New Best Fit Line Width:")        newarrow_width_label.grid(row=0,column=1,sticky='NESW')        newarrow_width_var = tk1.IntVar(arrowmaster)        newarrow_width_var.set(2)        newarrow_width_optionmenu = tk1.OptionMenu(newarrow_width_frm, newarrow_width_var, *linewidthchoices_set)        newarrow_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        newarrow_width_optionmenu.configure(font=('Consolas',12))                addnewarrowbutt = tk1.Button(arrowmaster, text="Add New Arrow", command= lambda: processarrow(startchoice,endchoice,newarrowcolor,newarrow_width_var.get(),self,arrowmaster))        addnewarrowbutt.pack()        addnewarrowbutt.grid(row=5,column=0, columnspan=4, sticky='NSEW')        tk1.mainloop()        returndef processbfline(bflsteplistbox,color,width,self,bflinemaster):    currentselection = bflsteplistbox.curselection()    steplistbox_currentselection = self.steplistbox.curselection()    self.sample.bflinelist_names = []    finalselection = []    if currentselection:        for stepindex in currentselection:            if not(stepindex in self.sample.duplist) or not(stepindex in steplistbox_currentselection):                finalselection.append(stepindex)                self.sample.bflinelist_names.append(self.sample.data[stepindex].dmagstep)        self.sample.bflinelist.append([finalselection,color,width])        messaboxtext = ("NEW BEST FIT LINE SUBMITTED. Line will be fit to the following steps: " + ', '.join(self.sample.bflinelist_names))        tkMessageBox.showinfo("",messaboxtext)    else:        messaboxtext = ("Line cannot be processed. No step data for best fit line submitted.")        tkMessageBox.showinfo("",messaboxtext)    bflinemaster.destroy()    bflinemaster.quit()    self.domultiplot(False,False,False,False)    returndef cleararrows(self):    if self.sample.arrowlist == []:        warningmessagetitle = ("No Arrows to Clear!")        warningmessagetext = ("No arrows to clear!")        tkMessageBox.showwarning(warningmessagetitle,warningmessagetext)    else:        self.sample.arrowlist = []    self.domultiplot(False,False,False,False)    returndef clearbflines(self):    if self.sample.bflinelist == []:        warningmessagetitle = ("No Best Fit Lines to Clear!")        warningmessagetext = ("No best fit lines to clear!")        tkMessageBox.showwarning(warningmessagetitle,warningmessagetext)    else:        self.sample.bflinelist = []    self.domultiplot(False,False,False,False)    return################ Plot Site Means Functions ######################class plotmeans_setdefaults:    def __init__(self):        self.point_symbol_size = 150    # Size of non-mean points.        self.point_symbol = "s"           # Symbol for non-mean points.  IMPORTANT NOTE: You can see a list of marker symbols at: https://matplotlib.org/api/markers_api.html        self.point_color = "BLACK"        # Point Color when using open/closed symbols        self.point_edge_width = 2      # Thickness of border on points.        self.mean_symbol_size = 150    # Size of mean points.        self.mean_symbol = "*"            # Symbol for mean points. IMPORTANT NOTE: You can see a list of marker symbols at: https://matplotlib.org/api/markers_api.html        self.mean_color = "BLACK"        self.mean_edge_width = 2      # Thickness of border on points.        self.plotarc = True        self.arc_symbol = "o"        self.arc_symbol_size = 150        self.arc_color = "BLACK"        self.arc_edge_width = 2        self.lowerhem_color = "BLACK"          # Lower hemisphere color        self.upperhem_color = "WHITE"          # Upper hemisphere color        self.axeslength = 500            # Length of axes of this plot. Best to not touch this.         self.eqarearadius = 450          # controls radius of equal area plot circle. Needs to be less than axes length.         self.circle_thickness = 3         # Thickness of circle line.        self.circle_color = "BLACK"       # Color of Equal Area Plot circle        self.show_circleticks = True        self.numcircleticks = 12            self.circletick_length_mod = "Normal"        self.circletick_width = 1        self.circletick_color = "BLACK"        self.show_cross = True        self.show_axesticks = True        self.numaxesticks = 3        self.axestick_width = 1        self.axestick_length_mod = "Normal"        self.axestick_color = "BLACK"    # Axes tick color        self.show_posxaxis_ticks = True        self.show_posyaxis_ticks = True        self.show_negxaxis_ticks = True        self.show_negyaxis_ticks = True             self.ellipse_symbol = "o"         # Ellipse Symbol. This is a plus. Best to leave as is.        self.ellipse_densityfactor = 50   # Controls density of ellipse points.         self.ellipse_width = 5            # Width of ellipse.        self.show_labels = True        self.label_color = "BLACK"        self.label_fontsize_mod = "Normal"          # Font size of labels                self.numsordirs = "Dirs"        self.show_north = True        self.show_east = False        self.show_south = False        self.show_west = False        self.show_0 = True        self.show_90 = False        self.show_180 = False        self.show_270 = False        self.show_gadfield = False        self.sitelat = 0        self.field_symbol = "x"        self.field_color = "BLACK"        self.field_size = 150        self.show_gadfield_edge = True        self.field_edge_color = "BLACK"        self.show_gadfield_label = False        self.show_title = True        self.title_color = "BLACK"        self.show_legend = self.show_pointnumbers = True        self.legend_color = "BLACK"        self.show_popupannotations = self.truenums = True        self.cosmologicalconstant = 1.57 # Don't touch this setting or bad things will happen and the program won't work (and the universe may implode).        returndef charsperline(string,numcharsperline):    if len(string) <= numcharsperline:        stringpluslinebreak = string    else:        restofstring = string[numcharsperline:len(string)]        block_list = list(string[0:numcharsperline])        endonlycharlist = [',','-',' ','.']        if any(char in block_list for char in endonlycharlist) and (not(block_list[-1] in endonlycharlist)):            for counter in range(numcharsperline-1,-1,-1):                if not(block_list[counter] in endonlycharlist):                    restofstring = block_list[counter] + restofstring                    del block_list[counter]                else:                    break        block_str = ''.join(block_list)        stringpluslinebreak = block_str + '\n' + charsperline(restofstring,numcharsperline)    return(stringpluslinebreak)class readmeanrow:    def __init__(self,line,linelist,coordtype,framename,linenum):        global topmeannum        self.use = True        if line == "" and (len(linelist) > 0): # data coming in from plot mean            self.samplename = charsperline(linelist[0],16)            self.line = linelist[1]            self.component = linelist[2]            self.geodec = float(linelist[3])            self.geoinc = float(linelist[4])            self.tiltdec = float(linelist[5])            self.tiltinc = float(linelist[6])            if coordtype == "Tilt":                self.dec = self.tiltdec                self.inc = self.tiltinc            elif coordtype == "Geographic":                self.dec = self.geodec                self.inc = self.geoinc            self.steps = linelist[7]            self.numsteps = linelist[8]            if linelist[9] != "ERR":                self.a95 = float(linelist[9])            else:                self.a95 = linelist[9]            indexminus = 0        elif line != "\n" and len(line) > 0: # data being read from file            self.samplename = line[0:14].rstrip()            self.line = line[14]            self.component = line[17:20].rstrip()            self.geodec = float(line[20:26].strip())            self.geoinc = float(line[26:32].strip())            self.tiltdec = float(line[32:38].strip())            self.tiltinc = float(line[38:44].strip())            if coordtype == "Tilt":                self.dec = self.tiltdec                self.inc = self.tiltinc            elif coordtype == "Geographic":                self.dec = self.geodec                self.inc = self.geoinc            self.steps = (line[44:52]).strip()            self.numsteps = (line[52:54]).strip()            a95_str = line[54:60].strip()            if a95_str != "ERR":                self.a95 = float(a95_str)            else:                self.a95 = a95_str            if self.samplename[0:9] == "New Mean ":                try:                    samplename_list = self.samplename.split()                    newmeannum = int(samplename_list[2])                    if newmeannum > topmeannum:                        topmeannum = newmeannum                except:                    pass                linelist = line[60:len(line)].split()            if self.line == "C": # Arc and not a point                self.arcstartgeog = float(linelist[0])                self.arcendgeog = float(linelist[1])                self.arcstarttilt = float(linelist[2])                self.arcendtilt = float(linelist[3])                if coordtype == "Tilt":                    self.arcstart = self.arcstarttilt                    self.arcend = self.arcendtilt                elif coordtype == "Geographic":                    self.arcstart = self.arcstartgeog                    self.arcend = self.arcendgeog                self.mean = False                self.symbol = pmcont.arc_symbol                self.color = "BLACK"                self.plotarc = pmcont.plotarc                foundsymbol = False                if len(linelist) > 4:                    item5 = linelist[4].upper()                    if isitacolor(item5):                        if item5 in specialcolorset:                            self.color = specialcolordict[item5]                        else:                            self.color = item5                    elif item5 in lsqsymbolnames_set:                        self.symbol = lsqsymbolnames_dict[item5]                        foundsymbol = True                if len(linelist) > 5 and not(foundsymbol):                    item6 = linelist[5].upper()                    if item6 in lsqsymbolnames_set:                        self.symbol = lsqsymbolnames_dict[item6]            else:                self.plotarc = False                indexminus = 10        else:            self.use = False            return(None)                if self.line != "C":            if len(linelist) >= (11-indexminus):                if linelist[10-indexminus].upper() in ["M","P"]:                    self.color = "BLACK"                    foundsymbol = False                    if linelist[10-indexminus].upper() == "M":                        self.mean = True                        self.symbol = pmcont.mean_symbol                    else:                        self.mean = False                        self.symbol = pmcont.point_symbol                    if len(linelist) >= (12-indexminus):                        item2 = linelist[11-indexminus].upper()                        if isitacolor(item2):                            if item2 in specialcolorset:                                self.color = specialcolordict[item2]                            else:                                self.color = item2                        elif item2 in lsqsymbolnames_set:                            self.symbol = lsqsymbolnames_dict[item2]                            foundsymbol = True                    if len(linelist) >= (13-indexminus) and not(foundsymbol):                        item3 = linelist[12-indexminus].upper()                        if item3 in lsqsymbolnames_set:                            self.symbol = lsqsymbolnames_dict[item3]                else:                    self.mean = False                    self.symbol = pmcont.point_symbol                    self.color = "BLACK"                    foundsymbol = False                    item1 = linelist[10-indexminus].upper()                    if isitacolor(item1):                        if item1 in specialcolorset:                            self.color = specialcolordict[item1]                        else:                            self.color = item1                    elif item1 in lsqsymbolnames_set:                        self.symbol = lsqsymbolnames_dict[item1]                        foundsymbol = True                    if len(linelist) >= (12-indexminus) and not(foundsymbol):                        item2 = linelist[11-indexminus].upper()                        if item2 in lsqsymbolnames_set:                            self.symbol = lsqsymbolnames_dict[item2]            else:                self.mean = False                self.symbol = pmcont.point_symbol                self.color = "BLACK"        self.linenum = linenum        self.show = True        self.color_temp = self.color        if self.color in specialcolorset_reverse:            self.colorname = specialcolordict_reverse[self.color]        else:            self.colorname = self.color        self.symbol_var = tk1.StringVar(framename)        self.symbol_var.set(symbolchoices_dict_reverse[self.symbol])                 self.show_var = tk1.BooleanVar(value=self.show)        self.mean_var = tk1.BooleanVar(value=self.mean)        self.show_chbutt = tk1.Checkbutton(framename, text="Show Component?", variable=self.show_var)        self.direction_label = tk1.Label(framename, text="Dec: \nInc: ", font=("Consolas",8))        self.mean_chbutt = tk1.Checkbutton(framename, text="Plot as Mean?", font=("Consolas",8), variable=self.mean_var)        self.color_frm = tk1.Frame(framename)        self.color_chbutt = tk1.Button(self.color_frm,text="Select Point\nColor", font=("Consolas",8))        self.color_label = tk1.Label(self.color_frm,text="Current\nColor:",fg=getoppositecolor(self.color_temp), bg=self.color_temp  ,width=10)        self.symbol_frm = tk1.Frame(framename)        self.symbol_label = tk1.Label(self.symbol_frm, text="Select\nSymbol:", font=("Consolas",8))        self.symbolmenu = tk1.OptionMenu(self.symbol_frm, self.symbol_var, *symbolchoices_set)        returndef pmupdateplot(self,pmcont,ax4):    for meanpoint in self.mean_pointlist:        meanpoint.show = meanpoint.show_var.get()        meanpoint.mean = meanpoint.mean_var.get()        meanpoint.color = meanpoint.color_temp        if meanpoint.line == "C":            meanpoint.plotarc = not(meanpoint.plotarc_var.get())        meanpoint.symbol = symbolchoices_dict[meanpoint.symbol_var.get()]    plotfilemeans(self,pmcont,"update",ax4,False)    returndef switchpointtomean(pmcont,thepoint):    if thepoint.mean_var.get():        thepoint.symbol_var.set(symbolchoices_dict_reverse[pmcont.mean_symbol])    else:        thepoint.symbol_var.set(symbolchoices_dict_reverse[pmcont.point_symbol])    thepoint.symbolmenu.destroy()    thepoint.symbolmenu = tk1.OptionMenu(thepoint.symbol_frm, thepoint.symbol_var, *symbolchoices_set)    thepoint.symbolmenu.pack(fill=tk1.X)    thepoint.symbolmenu.configure(font=('Consolas',8))    returndef pm_resetdefaults(self,pmjmaster,ax4):    global pmjcont    pmcont = plotmeans_setdefaults()    pmjmaster.destroy()    pmjmaster.quit()    pmupdateplot(self,pmcont)    returndef pmsaveselected(self):    anyselected = False    for meanpoint in self.mean_pointlist:        meanpoint.show = meanpoint.show_var.get()        meanpoint.mean = meanpoint.mean_var.get()        meanpoint.color = meanpoint.color_temp        if meanpoint.color in specialcolorset_reverse:            meanpoint.colorname = specialcolordict_reverse[meanpoint.color]        else:            meanpoint.colorname = meanpoint.color        meanpoint.symbol = symbolchoices_dict[meanpoint.symbol_var.get()]        meanpoint.symbolname = lsqsymbolnames_dict_reverse[meanpoint.symbol]        if meanpoint.show:            anyselected = True    if not anyselected:        warningmessagetitle = ("Cannot save points in file!")        warningmessagetext = ("Cannot save points in file because no points or means were selected.\n\nSelect at least 1 point to save as a file.")        tkMessageBox.showwarning(warningmessagetitle,warningmessagetext)        return    if os.path.isdir(self.filepath):        savefilepathandname = asksaveasfilename(initialdir=self.filepath,title = "Save selected points",defaultextension=".lsq",filetypes = (("lsq files","*.lsq"),("all files","*.*"))).replace("/","\\")    else:        savefilepathandname = asksaveasfilename(title = "Save selected points",defaultextension=".lsq",filetypes = (("lsq files","*.lsq"),("all files","*.*"))).replace("/","\\")    if savefilepathandname != "":        savefile = open(savefilepathandname, 'w')    else:        return        for meanpoint in self.mean_pointlist:        if meanpoint.show:            samplename = meanpoint.samplename[0:13]            if samplename[0:9] == "New Mean ":                try:                    samplename_list = samplename.split()                    meannum = int(samplename_list[2])                    meannum_str = str(meannum)                    samplename = samplename[0:9] + meannum_str                except:                    pass                samplespace = (14 - len(samplename)) * " "            geodec_str = str(meanpoint.geodec)            geodecspace = (9 - len(meanpoint.component) - len(geodec_str)) * " "            geoinc_str = str(meanpoint.geoinc)            geoincspace = (6 - len(geoinc_str)) * " "            dec_str = str(meanpoint.tiltdec)            decspace = (6 - len(dec_str)) * " "            inc_str = str(meanpoint.tiltinc)            incspace = (6 - len(inc_str)) * " "            steps_print = meanpoint.steps[0:7]            lenstepsnums = len(steps_print) + len(meanpoint.numsteps)            if lenstepsnums < 9:                numstepsspace = (9 - lenstepsnums) * " "            else:                numstepsspace = " "                steps_print = meanpoint.steps[0:(8-len(meanpoint.numsteps))]            a95_str = str(meanpoint.a95)            a95space = (6 - len(a95_str)) * " "            if meanpoint.mean:                meantext = "M"            else:                meantext = "P"            if meanpoint.line != "C":                linetext = "%s%s%s  %s%s%s%s%s%s%s%s%s %s%s%s%s%s %s %s %s\n" % (samplename, samplespace, meanpoint.line, meanpoint.component, geodecspace, geodec_str, geoincspace, geoinc_str, decspace, dec_str, incspace,                                                                            inc_str, steps_print, numstepsspace, meanpoint.numsteps, a95space, a95_str, meantext, meanpoint.colorname, meanpoint.symbolname)            else:                arcstartgeog_str = str(meanpoint.arcstartgeog)                arcstartgeogspace = (7 - len(arcstartgeog_str)) * " "                arcendgeog_str = str(meanpoint.arcendgeog)                                arcendgeogspace = (7 - len(arcendgeog_str)) * " "                arcstarttilt_str = str(meanpoint.arcstarttilt)                arcstarttiltspace = (7 - len(arcstarttilt_str)) * " "                arcendtilt_str = str(meanpoint.arcendtilt)                arcendtiltspace = (7 - len(arcendtilt_str)) * " "                linetext = "%s%s%s  %s%s%s%s%s%s%s%s%s %s%s%s%s%s%s%s%s%s%s%s%s%s %s %s\n" % (samplename, samplespace, meanpoint.line, meanpoint.component, geodecspace, geodec_str, geoincspace, geoinc_str, decspace, dec_str, incspace,                                                                            inc_str, steps_print, numstepsspace, meanpoint.numsteps, a95space, a95_str, arcstartgeogspace, meanpoint.arcstartgeog, arcendgeogspace,                                                                              meanpoint.arcendgeog, arcstarttiltspace, meanpoint.arcstarttilt, arcendtiltspace, meanpoint.arcendtilt, meanpoint.colorname, meanpoint.symbolname)            savefile.write(linetext)    savefile.close()    returndef pmpurgeunselected(self,pmcont,ax4):    new_mean_pointlist = []    showpointnum = 0    for meanpoint in self.mean_pointlist:        if meanpoint.show_var.get():            showpointnum = showpointnum + 1            meanpoint.linenum = showpointnum            new_mean_pointlist.append(meanpoint)    self.mean_pointlist = new_mean_pointlist    self.scrollframe.destroy()    self.scrollframe=tk1.Frame(self.interior,relief=tk1.GROOVE,width=550,height=800,bd=1)    self.scrollframe.grid(row=1,column=0,columnspan=6,rowspan=10,sticky='NSEW')    self.scrollcanvas = tk1.Canvas(self.scrollframe)    self.pointlist_frm = tk1.Frame(self.scrollcanvas)    self.pointlist_scrollbar = tk1.Scrollbar(self.scrollframe,orient="vertical",command=self.scrollcanvas.yview)    self.scrollcanvas.configure(yscrollcommand=self.pointlist_scrollbar.set)    self.pointlist_scrollbar.pack(side=tk1.RIGHT,fill=tk1.Y)    self.scrollcanvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)            self.scrollcanvas.create_window((0,0),window=self.pointlist_frm,anchor=tk1.NW)    self.pointlist_frm.bind("<Configure>",self.pm_scrollfunction)    self.scrollcanvas.bind("<Enter>", self.enterscrollcanvas)    self.scrollcanvas.bind("<Leave>", self.leavescrollcanvas)    root.bind("<Control-o>", lambda x: plotfilemeans(self,pmcont,"newsite",ax4,False))    root.bind("<Control-O>", lambda x: plotfilemeans(self,pmcont,"newsite",ax4,False))    plotfilemeans(self,pmcont,"newlyaddedmean",ax4,False)    returndef submitpmcontrols(self,pmcont,pmmaster,ax4):    pmcont.point_symbol_size = pmcont.point_symbol_size_slider.get()    pmcont.point_symbol = symbolchoices_dict[pmcont.point_symbol_var.get()]    pmcont.point_color = pmcont.point_color_temp    pmcont.point_edge_width = pmcont.point_edge_width_var.get()    pmcont.mean_symbol_size = pmcont.mean_symbol_size_slider.get()    pmcont.mean_symbol = symbolchoices_dict[pmcont.mean_symbol_var.get()]    pmcont.mean_color = pmcont.mean_color_temp    pmcont.mean_edge_width = pmcont.mean_edge_width_var.get()    pmcont.plotarc = pmcont.plotarc_var.get()    pmcont.arc_symbol = symbolchoices_dict[pmcont.arc_symbol_var.get()]    pmcont.arc_symbol_size = pmcont.arc_symbol_size_slider.get()    pmcont.arc_color = pmcont.arc_color_temp    pmcont.arc_edge_width = pmcont.arc_edge_width_var.get()    pmcont.ellipse_densityfactor = pmcont.ellipse_densityfactor_slider.get()    pmcont.ellipse_width = pmcont.ellipse_width_var.get()    pmcont.lowerhem_color = pmcont.lowerhem_color_temp    pmcont.upperhem_color = pmcont.upperhem_color_temp    pmcont.circle_color = pmcont.circle_color_temp    pmcont.circle_thickness = pmcont.circle_thickness_var.get()    pmcont.eqarearadius = pmcont.eqarearadius_slider.get()    pmcont.show_circleticks = pmcont.show_circleticks_var.get()    pmcont.numcircleticks = circleticknumchoices_dict[pmcont.numcircleticks_var.get()]    pmcont.circletick_length_mod = pmcont.circletick_length_var.get()    pmcont.circletick_width = pmcont.circletick_width_var.get()    pmcont.circletick_color = pmcont.circletick_color_temp    pmcont.show_cross = pmcont.show_cross_var.get()    pmcont.show_axesticks = pmcont.show_axesticks_var.get()    pmcont.numaxesticks = axisticknumchoices_dict[pmcont.numaxesticks_var.get()]    pmcont.axestick_width = pmcont.axestick_width_var.get()    pmcont.axestick_length_mod = pmcont.axestick_length_mod_var.get()    pmcont.axestick_color = pmcont.axestick_color_temp    pmcont.show_posxaxis_ticks = pmcont.show_posxaxis_ticks_var.get()    pmcont.show_posyaxis_ticks = pmcont.show_posyaxis_ticks_var.get()    pmcont.show_negxaxis_ticks = pmcont.show_negxaxis_ticks_var.get()    pmcont.show_negyaxis_ticks = pmcont.show_negyaxis_ticks_var.get()    pmcont.show_labels = pmcont.show_labels_var.get()    pmcont.label_color = pmcont.label_color_temp    pmcont.label_fontsize_mod = pmcont.label_fontsize_var.get()    pmcont.numsordirs = pmcont.numsordirs_var.get()    pmcont.show_north = pmcont.show_north_var.get()    pmcont.show_east = pmcont.show_east_var.get()    pmcont.show_south = pmcont.show_south_var.get()    pmcont.show_west = pmcont.show_west_var.get()    pmcont.show_0 = pmcont.show_0_var.get()    pmcont.show_90 = pmcont.show_90_var.get()    pmcont.show_180 = pmcont.show_180_var.get()    pmcont.show_270 = pmcont.show_270_var.get()    pmcont.show_gadfield = pmcont.show_gadfield_var.get()    pmcont.sitelat = pmcont.sitelat_slider.get()    pmcont.field_symbol = symbolchoices_dict[pmcont.field_symbol_var.get()]    pmcont.field_color = pmcont.field_color_temp    pmcont.field_size = pmcont.field_symbol_size_slider.get()    pmcont.show_gadfield_edge = pmcont.show_gadfield_edge_var.get()    pmcont.field_edge_color = pmcont.field_edge_color_temp    pmcont.show_gadfield_label = pmcont.show_gadfield_label_var.get()    pmcont.show_title = pmcont.show_title_var.get()    pmcont.title_color = pmcont.title_color_temp    pmcont.show_legend = pmcont.show_legend_var.get()    pmcont.show_pointnumbers = pmcont.show_pointnumbers_var.get()    pmcont.legend_color = pmcont.legend_color_temp    pmcont.show_popupannotations = pmcont.show_popupannotations_var.get()    pmcont.truenums = pmcont.use_truenumbers_var.get()    pmmaster.destroy()    pmmaster.quit()    pmupdateplot(self,pmcont,ax4)    returndef pmcontrols(self,pmcont,ax4):    global pmmaster##    if pmmaster != None and pmmaster.winfo_exists():##    else: # Create pmmaster control window    try:        'normal' == pmmaster.state()        pmmaster.lift()        pmmaster.attributes('-topmost',True)        pmmaster.after_idle(pmmaster.attributes,'-topmost',False)    except:        pmmaster = tk1.Toplevel(root)        pmmaster.focus_set()        pmmaster.title("Mean Component Plot Controls")        pmmaster.geometry("+30+30")        pmcont.point_color_temp = pmcont.point_color        pmcont.mean_color_temp = pmcont.mean_color        pmcont.arc_color_temp = pmcont.arc_color        pmcont.lowerhem_color_temp = pmcont.lowerhem_color        pmcont.upperhem_color_temp = pmcont.upperhem_color        pmcont.circle_color_temp = pmcont.circle_color        pmcont.circletick_color_temp = pmcont.circletick_color        pmcont.axestick_color_temp = pmcont.axestick_color        pmcont.label_color_temp = pmcont.label_color        pmcont.field_color_temp = pmcont.field_color        pmcont.field_edge_color_temp = pmcont.field_edge_color        pmcont.title_color_temp = pmcont.title_color        pmcont.legend_color_temp = pmcont.legend_color        pm_vertical_scrollbar = tk1.Scrollbar(pmmaster,orient=tk1.VERTICAL)        pm_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        pm_horizontal_scrollbar = tk1.Scrollbar(pmmaster,orient=tk1.HORIZONTAL)        pm_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.pm_canvas = tk1.Canvas(pmmaster, bd=0, highlightthickness=0,yscrollcommand=pm_vertical_scrollbar.set,xscrollcommand=pm_horizontal_scrollbar.set,width=1650,height=675,scrollregion=(0,0,1650,675))        self.pm_canvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        pm_vertical_scrollbar.config(command=self.pm_canvas.yview)        pm_horizontal_scrollbar.config(command=self.pm_canvas.xview)        self.pm_canvas.xview_moveto(0)        self.pm_canvas.yview_moveto(0)        pm_interior = tk1.Frame(self.pm_canvas,width=500,height=500)        pm_interior_id = self.pm_canvas.create_window(0, 0, window=pm_interior,anchor=tk1.NW)                pm_col0_frm = tk1.Frame(pm_interior,bd=2) # Column 0        pm_col0_frm.grid(row=0,column=0,sticky='NSEW')        pm_legend_settings_frm = tk1.Frame(pm_col0_frm,bd=2,relief=tk1.SUNKEN)        pm_legend_settings_frm.pack(fill=tk1.X)        pm_legend_settings_label = tk1.Label(pm_legend_settings_frm, text="Title & Legend Settings:",bd=1,font="Helvetica 12 bold")        pm_legend_settings_label.pack(fill=tk1.X)                pm_show_title_frm = tk1.Frame(pm_legend_settings_frm,bd=2,relief=tk1.GROOVE)        pm_show_title_frm.pack(fill=tk1.X)        pmcont.show_title_var = tk1.BooleanVar(value=pmcont.show_title)        pm_show_title_chbutt = tk1.Checkbutton(pm_show_title_frm, text="Show Title?", variable=pmcont.show_title_var,command= lambda:                                              disablewidgets(pmcont.show_title_var,False,[pm_title_color_butt,pm_title_color_label],[],[]))        pm_show_title_chbutt.pack(fill=tk1.X)        pm_title_color_frm = tk1.Frame(pm_show_title_frm,bd=2,relief=tk1.GROOVE)        pm_title_color_frm.pack(fill=tk1.X)                      pm_title_color_frm.grid_columnconfigure(0, weight=1)        pm_title_color_frm.grid_columnconfigure(3, weight=1)        pm_title_color_butt = tk1.Button(pm_title_color_frm,text="Select Title Color", command= lambda: getcolor(pmmaster,"pmcont.title_color_temp","Mean Plot Title",pm_title_color_label,pm_title_color_frm,False))        pm_title_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        pm_title_color_label = tk1.Label(pm_title_color_frm,text="Current\nColor:\n%s" % pmcont.title_color_temp,fg=getoppositecolor(pmcont.title_color_temp), bg=pmcont.title_color_temp,width=10)        pm_title_color_label.grid(row=0,column=2)        disablewidgets(pmcont.show_title_var,False,[pm_title_color_butt,pm_title_color_label],[],[])        pm_show_legend_frm = tk1.Frame(pm_legend_settings_frm,bd=2,relief=tk1.GROOVE)        pm_show_legend_frm.pack(fill=tk1.X)        pmcont.show_legend_var = tk1.BooleanVar(value=pmcont.show_legend)        pm_show_legend_chbutt = tk1.Checkbutton(pm_show_legend_frm, text="Show Legend?", variable=pmcont.show_legend_var,command= lambda:                                              disablewidgets(pmcont.show_legend_var,False,[pm_legend_color_butt,pm_legend_color_label,pm_show_pointnumbers_chbutt],[],[]))        pm_show_legend_chbutt.pack(fill=tk1.X)        pm_legend_color_frm = tk1.Frame(pm_show_legend_frm,bd=2,relief=tk1.GROOVE)        pm_legend_color_frm.pack(fill=tk1.X)        pm_legend_color_frm.grid_columnconfigure(0, weight=1)        pm_legend_color_frm.grid_columnconfigure(3, weight=1)        pm_legend_color_butt = tk1.Button(pm_legend_color_frm,text="Select Legend Color", command= lambda: getcolor(pmmaster,"pmcont.legend_color_temp","Mean Plot Legend",pm_legend_color_label,pm_legend_color_frm,False))        pm_legend_color_butt.grid(row=0,column=1,sticky='NSEW',padx=10,pady=5)        pm_legend_color_label = tk1.Label(pm_legend_color_frm,text="Current\nColor:\n%s" % pmcont.legend_color_temp,fg=getoppositecolor(pmcont.legend_color_temp), bg=pmcont.legend_color_temp,width=10)        pm_legend_color_label.grid(row=0,column=2)        pm_show_pointnumbers_frm = tk1.Frame(pm_legend_settings_frm,bd=2,relief=tk1.GROOVE)        pm_show_pointnumbers_frm.pack(fill=tk1.X)        pmcont.show_pointnumbers_var = tk1.BooleanVar(value=pmcont.show_pointnumbers)        pm_show_pointnumbers_chbutt = tk1.Checkbutton(pm_show_pointnumbers_frm, text="Show Point Numbers?", variable=pmcont.show_pointnumbers_var)        pm_show_pointnumbers_chbutt.pack(fill=tk1.X)        pmcont.use_truenumbers_var = tk1.BooleanVar(value=pmcont.truenums)        pm_use_truenumbers_chbutt = tk1.Checkbutton(pm_show_pointnumbers_frm, text="Use True Line Numbers for Legend and Popups?", variable=pmcont.use_truenumbers_var)        pm_use_truenumbers_chbutt.pack(fill=tk1.X)        disablewidgets(pmcont.show_legend_var,False,[pm_legend_color_butt,pm_legend_color_label,pm_show_pointnumbers_chbutt],[],[])        pm_label_settings_frm = tk1.Frame(pm_col0_frm,bd=2,relief=tk1.GROOVE)        pm_label_settings_frm.pack(fill=tk1.X)        pm_label_settings_label = tk1.Label(pm_label_settings_frm, text="Label Settings:",bd=1,font="Helvetica 12 bold")        pm_label_settings_label.pack(fill=tk1.X)        pm_showannot_frm = tk1.Frame(pm_label_settings_frm,bd=2,relief=tk1.GROOVE)        pm_showannot_frm.pack(fill=tk1.X)                pmcont.show_popupannotations_var = tk1.BooleanVar(value=pmcont.show_popupannotations)        pm_show_popupannotations_chbutt = tk1.Checkbutton(pm_showannot_frm, text="Show Mouseover Popup Labels?", variable=pmcont.show_popupannotations_var)        pm_show_popupannotations_chbutt.pack(fill=tk1.X)        pm_show_labels_frm = tk1.Frame(pm_label_settings_frm,bd=2,relief=tk1.GROOVE)        pm_show_labels_frm.pack(fill=tk1.X)        pmcont.show_labels_var = tk1.BooleanVar(value=pmcont.show_labels)        pm_show_label_chbutt = tk1.Checkbutton(pm_show_labels_frm, text="Show Cardinal Directions or Degrees?", variable=pmcont.show_labels_var,                                         command= lambda: disablewidgets(pmcont.show_labels_var,False,                                                                         [pm_numdirradio_dirs,pm_numdirradio_nums,pm_show_north_chbutt,pm_show_east_chbutt,pm_show_south_chbutt,pm_show_west_chbutt,                                                                          pm_show_0_chbutt,pm_show_90_chbutt,pm_show_180_chbutt,pm_show_270_chbutt,pm_label_color_butt,pm_label_color_label,pm_label_fontsize_label,pm_label_fontsize_optionmenu],[],                                                                         [[pmcont.numsordirs_var,["Nums"],[pm_show_north_chbutt,pm_show_east_chbutt,pm_show_south_chbutt,pm_show_west_chbutt]],                                                                          [pmcont.numsordirs_var,["Dirs"],[pm_show_0_chbutt,pm_show_90_chbutt,pm_show_180_chbutt,pm_show_270_chbutt]]]))        pm_show_label_chbutt.pack(fill=tk1.X)        pm_numsordirs_frm = tk1.Frame(pm_show_labels_frm,bd=2,relief=tk1.GROOVE)        pm_numsordirs_frm.pack(fill=tk1.X)        pmcont.numsordirs_var = tk1.StringVar()        pmcont.numsordirs_var.set(pmcont.numsordirs)        pm_numdircheckbutts_frm = tk1.Frame(pm_numsordirs_frm,bd=2)        pm_numdircheckbutts_frm.pack(fill=tk1.X)        pm_dircheck_butt_frm = tk1.Frame(pm_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        pm_dircheck_butt_frm.grid(row=0,column=0,sticky='NSEW')        pm_numcheck_butt_frm = tk1.Frame(pm_numdircheckbutts_frm,bd=2,relief=tk1.GROOVE)        pm_numcheck_butt_frm.grid(row=0,column=1,sticky='NSEW')        pm_numdirradio_dirs = tk1.Radiobutton(pm_dircheck_butt_frm, text="Cardinal Directions",variable=pmcont.numsordirs_var,value="Dirs",command= lambda: disablewidgets(pmcont.numsordirs_var,"Dirs",                                                                         [pm_show_0_chbutt,pm_show_90_chbutt,pm_show_180_chbutt,pm_show_270_chbutt],[pm_show_north_chbutt,pm_show_east_chbutt,pm_show_south_chbutt,pm_show_west_chbutt],[]))        pm_numdirradio_dirs.pack(fill=tk1.X)        pm_numdirradio_nums = tk1.Radiobutton(pm_numcheck_butt_frm, text="Degrees",variable=pmcont.numsordirs_var,value="Nums",command= lambda: disablewidgets(pmcont.numsordirs_var,"Nums",                                                                         [pm_show_north_chbutt,pm_show_east_chbutt,pm_show_south_chbutt,pm_show_west_chbutt],[pm_show_0_chbutt,pm_show_90_chbutt,pm_show_180_chbutt,pm_show_270_chbutt],[]))        pm_numdirradio_nums.pack(fill=tk1.X)        pmcont.show_north_var = tk1.BooleanVar(value=pmcont.show_north)        pm_show_north_chbutt = tk1.Checkbutton(pm_dircheck_butt_frm, text="Show North (\"N\")?", variable=pmcont.show_north_var)        pm_show_north_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pmcont.show_east_var = tk1.BooleanVar(value=pmcont.show_east)        pm_show_east_chbutt = tk1.Checkbutton(pm_dircheck_butt_frm, text="Show East (\"E\")?", variable=pmcont.show_east_var)        pm_show_east_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pmcont.show_south_var = tk1.BooleanVar(value=pmcont.show_south)        pm_show_south_chbutt = tk1.Checkbutton(pm_dircheck_butt_frm, text="Show South (\"S\")?", variable=pmcont.show_south_var)        pm_show_south_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pmcont.show_west_var = tk1.BooleanVar(value=pmcont.show_west)        pm_show_west_chbutt = tk1.Checkbutton(pm_dircheck_butt_frm, text="Show West (\"W\")?", variable=pmcont.show_west_var)        pm_show_west_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pmcont.show_0_var = tk1.BooleanVar(value=pmcont.show_0)        pm_show_0_chbutt = tk1.Checkbutton(pm_numcheck_butt_frm, text="Show 0%s?" % degree_sign, variable=pmcont.show_0_var)        pm_show_0_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pmcont.show_90_var = tk1.BooleanVar(value=pmcont.show_90)        pm_show_90_chbutt = tk1.Checkbutton(pm_numcheck_butt_frm, text="Show 90%s?" % degree_sign, variable=pmcont.show_90_var)        pm_show_90_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pmcont.show_180_var = tk1.BooleanVar(value=pmcont.show_180)        pm_show_180_chbutt = tk1.Checkbutton(pm_numcheck_butt_frm, text="Show 180%s?" % degree_sign, variable=pmcont.show_180_var)        pm_show_180_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pmcont.show_270_var = tk1.BooleanVar(value=pmcont.show_270)        pm_show_270_chbutt = tk1.Checkbutton(pm_numcheck_butt_frm, text="Show 270%s?" % degree_sign, variable=pmcont.show_270_var)        pm_show_270_chbutt.pack(fill=tk1.X,anchor=tk1.W)        pm_label_color_frm = tk1.Frame(pm_show_labels_frm,bd=2,relief=tk1.GROOVE)        pm_label_color_frm.pack(fill=tk1.X)        pm_label_color_frm.grid_columnconfigure(0, weight=1)        pm_label_color_frm.grid_columnconfigure(3, weight=1)                        pm_label_color_butt = tk1.Button(pm_label_color_frm,text="Select Axes Label Color", command= lambda: getcolor(pmmaster,"pmcont.label_color_temp","Mean Plot Axes Labels",                                                                                                                      pm_label_color_label,pm_label_color_frm,False))        pm_label_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_label_color_label = tk1.Label(pm_label_color_frm,text="Current\nColor:\n%s" % pmcont.label_color_temp,fg=getoppositecolor(pmcont.label_color_temp), bg=pmcont.label_color_temp,width=10)        pm_label_color_label.grid(row=0, column=2,sticky='NSEW')        pm_label_fontsize_frm = tk1.Frame(pm_label_settings_frm,bd=2,relief=tk1.GROOVE)        pm_label_fontsize_frm.pack(fill=tk1.X)        pm_label_fontsize_frm.grid_columnconfigure(0, weight=1)        pm_label_fontsize_frm.grid_columnconfigure(3, weight=1)                    pm_label_fontsize_label = tk1.Label(pm_label_fontsize_frm, text="Axes Label Font Size:",bd=1)        pm_label_fontsize_label.grid(row=1, column=1,sticky='NSEW')        pmcont.label_fontsize_var = tk1.StringVar(pm_interior)        pmcont.label_fontsize_var.set(pmcont.label_fontsize_mod)         pm_label_fontsize_optionmenu = tk1.OptionMenu(pm_label_fontsize_frm, pmcont.label_fontsize_var, *fontsizes_set)        pm_label_fontsize_optionmenu.grid(row=1,column=2,sticky='NSEW')        pm_label_fontsize_optionmenu.configure(font=('Consolas',10))           if pmcont.show_labels:            if pmcont.numsordirs_var.get() == "Dirs":                pm_show_0_chbutt.config(state='disabled')                pm_show_90_chbutt.config(state='disabled')                pm_show_180_chbutt.config(state='disabled')                pm_show_270_chbutt.config(state='disabled')            elif pmcont.numsordirs_var.get() == "Nums":                pm_show_north_chbutt.config(state='disabled')                pm_show_east_chbutt.config(state='disabled')                pm_show_south_chbutt.config(state='disabled')                pm_show_west_chbutt.config(state='disabled')        else:            disablewidgets(pmcont.show_labels_var,False,[pm_numdirradio_dirs,pm_numdirradio_nums,pm_show_north_chbutt,pm_show_east_chbutt,pm_show_south_chbutt,pm_show_west_chbutt,pm_show_0_chbutt,pm_show_90_chbutt,                                                    pm_show_180_chbutt,pm_show_270_chbutt,pm_label_color_butt,pm_label_color_label,pm_label_fontsize_label,pm_label_fontsize_optionmenu],[],[])        pm_col1_frm = tk1.Frame(pm_interior,bd=2) # Column 1        pm_col1_frm.grid(row=0,column=1,sticky='NSEW')        pm_point_frm = tk1.Frame(pm_col1_frm,bd=2,relief=tk1.SUNKEN)        pm_point_frm.pack(fill=tk1.X)        pm_point_symbol_settings_label = tk1.Label(pm_point_frm, text="Component Point Symbol Settings:",bd=1,font="Helvetica 12 bold")        pm_point_symbol_settings_label.pack(fill=tk1.X)        pm_point_symbol_frm = tk1.Frame(pm_point_frm,bd=2,relief=tk1.GROOVE)        pm_point_symbol_frm.pack(fill=tk1.X)        pm_point_symbol_frm.grid_columnconfigure(0, weight=1)        pm_point_symbol_frm.grid_columnconfigure(3, weight=1)                pm_point_symbol_label = tk1.Label(pm_point_symbol_frm, text="DEFAULT Component Point Symbol\n\n(Changes default only;\nIndividual point symbols\nmust be changed in List):",bd=1)        pm_point_symbol_label.grid(row=0, column=1,sticky='NSEW')        pmcont.point_symbol_var = tk1.StringVar(pm_interior)        pmcont.point_symbol_var.set(symbolchoices_dict_reverse[pmcont.point_symbol])         pm_point_symbolchoices_optionmenu = tk1.OptionMenu(pm_point_symbol_frm, pmcont.point_symbol_var, *symbolchoices_set)        pm_point_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_point_symbolchoices_optionmenu.configure(font=('Consolas',12))        pm_point_color_frm = tk1.Frame(pm_point_frm,bd=2,relief=tk1.GROOVE)        pm_point_color_frm.pack(fill=tk1.X)        pm_point_color_frm.grid_columnconfigure(0, weight=1)        pm_point_color_frm.grid_columnconfigure(3, weight=1)        pm_point_color_butt = tk1.Button(pm_point_color_frm,text="Select DEFAULT Component Symbol Color\n\n(Changes default only;\nIndividual point colors\nmust be changed in List):", command= lambda: getcolor(pmmaster,"pmcont.point_color_temp","Component Point Symbol",                                                                                                                                          pm_point_color_label,pm_point_color_frm,False))        pm_point_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_point_color_label = tk1.Label(pm_point_color_frm,text="Current\nColor:\n%s" % pmcont.point_color_temp,fg=getoppositecolor(pmcont.point_color_temp), bg=pmcont.point_color_temp,width=10)        pm_point_color_label.grid(row=0, column=2,sticky='NSEW')                pm_point_symbol_size_frm = tk1.Frame(pm_point_frm,bd=2,relief=tk1.GROOVE)        pm_point_symbol_size_frm.pack(fill=tk1.X)        pm_point_symbol_size_label = tk1.Label(pm_point_symbol_size_frm, text="Component Point Symbol Size:")        pm_point_symbol_size_label.pack(fill=tk1.X)        pmcont.point_symbol_size_slider = Scale(pm_point_symbol_size_frm, from_=1, to=1000,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        pmcont.point_symbol_size_slider.set(pmcont.point_symbol_size)        pmcont.point_symbol_size_slider.pack(fill=tk1.X)        pm_point_edge_width_frm = tk1.Frame(pm_point_frm,bd=2,relief=tk1.GROOVE)        pm_point_edge_width_frm.pack(fill=tk1.X)        pm_point_edge_width_frm.grid_columnconfigure(0, weight=1)        pm_point_edge_width_frm.grid_columnconfigure(3, weight=1)        pm_point_edge_width_label = tk1.Label(pm_point_edge_width_frm, text="Component Point Symbol Border Width:")        pm_point_edge_width_label.grid(row=0,column=1,sticky='NESW')        pmcont.point_edge_width_var = tk1.IntVar(pm_interior)        pmcont.point_edge_width_var.set(pmcont.point_edge_width)         pm_point_edge_width_optionmenu = tk1.OptionMenu(pm_point_edge_width_frm, pmcont.point_edge_width_var, *linewidthchoices_set)        pm_point_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_point_edge_width_optionmenu.configure(font=('Consolas',10))                pm_mean_frm = tk1.Frame(pm_col1_frm,bd=2,relief=tk1.SUNKEN)        pm_mean_frm.pack(fill=tk1.X)        pm_mean_symbol_settings_label = tk1.Label(pm_mean_frm, text="Mean Symbol Settings:",bd=1,font="Helvetica 12 bold")        pm_mean_symbol_settings_label.pack(fill=tk1.X)        pm_mean_symbol_frm = tk1.Frame(pm_mean_frm,bd=2,relief=tk1.GROOVE)        pm_mean_symbol_frm.pack(fill=tk1.X)        pm_mean_symbol_frm.grid_columnconfigure(0, weight=1)        pm_mean_symbol_frm.grid_columnconfigure(3, weight=1)                  pm_mean_symbol_label = tk1.Label(pm_mean_symbol_frm, text="DEFAULT Mean Symbol\n\n(Changes default only;\nIndividual mean symbols\nmust be changed in List):",bd=1)        pm_mean_symbol_label.grid(row=0, column=1,sticky='NSEW')        pmcont.mean_symbol_var = tk1.StringVar(pm_interior)        pmcont.mean_symbol_var.set(symbolchoices_dict_reverse[pmcont.mean_symbol])         pm_mean_symbolchoices_optionmenu = tk1.OptionMenu(pm_mean_symbol_frm, pmcont.mean_symbol_var, *symbolchoices_set)        pm_mean_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_mean_symbolchoices_optionmenu.configure(font=('Consolas',12))        pm_mean_color_frm = tk1.Frame(pm_mean_frm,bd=2,relief=tk1.GROOVE)        pm_mean_color_frm.pack(fill=tk1.X)        pm_mean_color_frm.grid_columnconfigure(0, weight=1)        pm_mean_color_frm.grid_columnconfigure(3, weight=1)        pm_mean_color_butt = tk1.Button(pm_mean_color_frm,text="Select DEFAULT Mean Symbol Color\n\n(Changes default only;\nIndividual mean colors\nmust be changed in List)", command= lambda: getcolor(pmmaster,"pmcont.mean_color_temp","Default Mean Symbol",                                                                                                                                          pm_mean_color_label,pm_mean_color_frm,False))        pm_mean_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_mean_color_label = tk1.Label(pm_mean_color_frm,text="Current\nColor:\n%s" % pmcont.mean_color_temp,fg=getoppositecolor(pmcont.mean_color_temp), bg=pmcont.mean_color_temp,width=10)        pm_mean_color_label.grid(row=0, column=2,sticky='NSEW')        pm_mean_symbol_size_frm = tk1.Frame(pm_mean_frm,bd=2,relief=tk1.GROOVE)        pm_mean_symbol_size_frm.pack(fill=tk1.X)        pm_mean_symbol_size_label = tk1.Label(pm_mean_symbol_size_frm, text="Mean Symbol Size:")        pm_mean_symbol_size_label.pack(fill=tk1.X)        pmcont.mean_symbol_size_slider = Scale(pm_mean_symbol_size_frm, from_=1, to=1000,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        pmcont.mean_symbol_size_slider.set(pmcont.mean_symbol_size)        pmcont.mean_symbol_size_slider.pack(fill=tk1.X)        pm_mean_edge_width_frm = tk1.Frame(pm_mean_frm,bd=2,relief=tk1.GROOVE)        pm_mean_edge_width_frm.pack(fill=tk1.X)        pm_mean_edge_width_frm.grid_columnconfigure(0, weight=1)        pm_mean_edge_width_frm.grid_columnconfigure(3, weight=1)        pm_mean_edge_width_label = tk1.Label(pm_mean_edge_width_frm, text="Mean Symbol Border Width:")        pm_mean_edge_width_label.grid(row=0,column=1,sticky='NESW')        pmcont.mean_edge_width_var = tk1.IntVar(pm_interior)        pmcont.mean_edge_width_var.set(pmcont.mean_edge_width)         pm_mean_edge_width_optionmenu = tk1.OptionMenu(pm_mean_edge_width_frm, pmcont.mean_edge_width_var, *linewidthchoices_set)        pm_mean_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_mean_edge_width_optionmenu.configure(font=('Consolas',10))                pm_col2_frm = tk1.Frame(pm_interior,bd=2) # Column 2        pm_col2_frm.grid(row=0,column=2,sticky='NSEW')        pm_arc_frm = tk1.Frame(pm_col2_frm,bd=2,relief=tk1.SUNKEN)        pm_arc_frm.pack(fill=tk1.X)        pm_arc_symbol_settings_label = tk1.Label(pm_arc_frm, text="Arc Symbol Settings:",bd=1,font="Helvetica 12 bold")        pm_arc_symbol_settings_label.pack(fill=tk1.X)        pm_arc_symbol_frm = tk1.Frame(pm_arc_frm,bd=2,relief=tk1.GROOVE)        pm_arc_symbol_frm.pack(fill=tk1.X)        pm_arc_symbol_frm.grid_columnconfigure(0, weight=1)        pm_arc_symbol_frm.grid_columnconfigure(3, weight=1)                  pm_arc_symbol_label = tk1.Label(pm_arc_symbol_frm, text="DEFAULT Arc Symbol\n\n(Changes default only;\nIndividual arc symbols\nmust be changed in List):",bd=1)        pm_arc_symbol_label.grid(row=0, column=1,sticky='NSEW')        pmcont.arc_symbol_var = tk1.StringVar(pm_interior)        pmcont.arc_symbol_var.set(symbolchoices_dict_reverse[pmcont.arc_symbol])         pm_arc_symbolchoices_optionmenu = tk1.OptionMenu(pm_arc_symbol_frm, pmcont.arc_symbol_var, *symbolchoices_set)        pm_arc_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_arc_symbolchoices_optionmenu.configure(font=('Consolas',12))        pm_arc_symbol_size_frm = tk1.Frame(pm_arc_frm,bd=2,relief=tk1.GROOVE)        pm_arc_symbol_size_frm.pack(fill=tk1.X)        pm_arc_symbol_size_label = tk1.Label(pm_arc_symbol_size_frm, text="Arc Symbol Size:")        pm_arc_symbol_size_label.pack(fill=tk1.X)        pmcont.arc_symbol_size_slider = Scale(pm_arc_symbol_size_frm, from_=1, to=1000,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        pmcont.arc_symbol_size_slider.set(pmcont.arc_symbol_size)        pmcont.arc_symbol_size_slider.pack(fill=tk1.X)        pm_arc_color_frm = tk1.Frame(pm_arc_frm,bd=2,relief=tk1.GROOVE)        pm_arc_color_frm.pack(fill=tk1.X)        pm_arc_color_frm.grid_columnconfigure(0, weight=1)        pm_arc_color_frm.grid_columnconfigure(3, weight=1)        pm_arc_color_butt = tk1.Button(pm_arc_color_frm,text="Select DEFAULT Arc Symbol Color\n\n(Changes default only;\nIndividual arc colors\nmust be changed in List)", command= lambda: getcolor(pmmaster,"pmcont.arc_color_temp","Default Arc Symbol",                                                                                                                                          pm_arc_color_label,pm_arc_color_frm,False))        pm_arc_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_arc_color_label = tk1.Label(pm_arc_color_frm,text="Current\nColor:\n%s" % pmcont.arc_color_temp,fg=getoppositecolor(pmcont.arc_color_temp), bg=pmcont.arc_color_temp,width=10)        pm_arc_color_label.grid(row=0, column=2,sticky='NSEW')        pm_arc_edge_width_frm = tk1.Frame(pm_arc_frm,bd=2,relief=tk1.GROOVE)        pm_arc_edge_width_frm.pack(fill=tk1.X)        pm_arc_edge_width_frm.grid_columnconfigure(0, weight=1)        pm_arc_edge_width_frm.grid_columnconfigure(3, weight=1)        pm_arc_edge_width_label = tk1.Label(pm_arc_edge_width_frm, text="Arc Symbol Border Width:")        pm_arc_edge_width_label.grid(row=0,column=1,sticky='NESW')        pmcont.arc_edge_width_var = tk1.IntVar(pm_interior)        pmcont.arc_edge_width_var.set(pmcont.arc_edge_width)         pm_arc_edge_width_optionmenu = tk1.OptionMenu(pm_arc_edge_width_frm, pmcont.arc_edge_width_var, *linewidthchoices_set)        pm_arc_edge_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_arc_edge_width_optionmenu.configure(font=('Consolas',10))                pm_plotarc_frm = tk1.Frame(pm_arc_frm,bd=2,relief=tk1.GROOVE)        pm_plotarc_frm.pack(fill=tk1.X)        pm_arccircle_label = tk1.Label(pm_plotarc_frm, text="Plot Arcs or Whole Circles?")        pm_arccircle_label.pack(fill=tk1.X)        pmcont.plotarc_var = tk1.StringVar()        pmcont.plotarc_var.set(pmcont.plotarc)        pm_arccircle_radio_frm = tk1.Frame(pm_plotarc_frm,bd=2)        pm_arccircle_radio_frm.pack(fill=tk1.X)        pm_arc_radio_arc = tk1.Radiobutton(pm_arccircle_radio_frm, text="Plot Arcs",variable=pmcont.plotarc_var,value=True)        pm_arc_radio_arc.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10)        pm_circle_radio_circle = tk1.Radiobutton(pm_arccircle_radio_frm, text="Plot Whole Circles",variable=pmcont.plotarc_var,value=False)        pm_circle_radio_circle.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10)        pm_ellipsespecs_frm = tk1.Frame(pm_col2_frm,bd=2,relief=tk1.SUNKEN)        pm_ellipsespecs_frm.pack(fill=tk1.X)        pm_ellipsespecs_label = tk1.Label(pm_ellipsespecs_frm, text="%s95 Ellipse Settings:" % alpha_symbol,font="Helvetica 12 bold")        pm_ellipsespecs_label.pack(fill=tk1.X)        pm_ellipse_width_frm = tk1.Frame(pm_ellipsespecs_frm,bd=2,relief=tk1.GROOVE)        pm_ellipse_width_frm.pack(fill=tk1.X)        pm_ellipse_width_frm.grid_columnconfigure(0, weight=1)        pm_ellipse_width_frm.grid_columnconfigure(3, weight=1)        pm_ellipse_width_label = tk1.Label(pm_ellipse_width_frm, text="%s95 Ellipse Width:" % alpha_symbol)        pm_ellipse_width_label.grid(row=0, column=1, sticky='NSEW')        pmcont.ellipse_width_var = tk1.IntVar(pm_interior)        pmcont.ellipse_width_var.set(pmcont.ellipse_width)         pm_ellipse_width_optionmenu = tk1.OptionMenu(pm_ellipse_width_frm, pmcont.ellipse_width_var, *linewidthchoices_set)        pm_ellipse_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_ellipse_width_optionmenu.configure(font=('Consolas',10))        pm_ellipse_densityfactor_frm = tk1.Frame(pm_ellipsespecs_frm,bd=2,relief=tk1.GROOVE)        pm_ellipse_densityfactor_frm.pack(fill=tk1.X)        pm_ellipse_density_label = tk1.Label(pm_ellipse_densityfactor_frm, text="%s95 Ellipse Density Factor:" % alpha_symbol)        pm_ellipse_density_label .pack(fill=tk1.X)        pmcont.ellipse_densityfactor_slider = Scale(pm_ellipse_densityfactor_frm, from_=1, to=100,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        pmcont.ellipse_densityfactor_slider.set(pmcont.ellipse_densityfactor)        pmcont.ellipse_densityfactor_slider.pack(fill=tk1.X)                pm_col3_frm = tk1.Frame(pm_interior,bd=2) # Column 3        pm_col3_frm.grid(row=0,column=3,sticky='NSEW')        pm_circlespecs_frm = tk1.Frame(pm_col3_frm,bd=2,relief=tk1.SUNKEN)        pm_circlespecs_frm.pack(fill=tk1.X)        pm_circlespecs_label = tk1.Label(pm_circlespecs_frm, text="Circle Settings:",font="Helvetica 12 bold")        pm_circlespecs_label.pack(fill=tk1.X)        pm_circle_color_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_circle_color_frm.pack(fill=tk1.X)        pm_circle_color_frm.grid_columnconfigure(0, weight=1)        pm_circle_color_frm.grid_columnconfigure(3, weight=1)                        pm_circle_color_butt = tk1.Button(pm_circle_color_frm,text="Select Circle Color", command= lambda: getcolor(pmmaster,"pmcont.circle_color_temp","Mean Plot Circle",pm_circle_color_label,pm_circle_color_frm,False))        pm_circle_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_circle_color_label = tk1.Label(pm_circle_color_frm,text="Current\nColor:\n%s" % pmcont.circle_color_temp,fg=getoppositecolor(pmcont.circle_color_temp), bg=pmcont.circle_color_temp,width=10)        pm_circle_color_label.grid(row=0, column=2,sticky='NSEW')        pm_circle_thickness_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_circle_thickness_frm.pack(fill=tk1.X)        pm_circle_thickness_frm.grid_columnconfigure(0, weight=1)        pm_circle_thickness_frm.grid_columnconfigure(3, weight=1)        pm_circle_thickness_label = tk1.Label(pm_circle_thickness_frm, text="Circle Thickness:")        pm_circle_thickness_label.grid(row=0, column=1, sticky='NSEW')        pmcont.circle_thickness_var = tk1.IntVar(pm_interior)        pmcont.circle_thickness_var.set(pmcont.circle_thickness)         pm_circle_thickness_optionmenu = tk1.OptionMenu(pm_circle_thickness_frm, pmcont.circle_thickness_var, *linewidthchoices_set)        pm_circle_thickness_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_circle_thickness_optionmenu.configure(font=('Consolas',10))        pm_circleradius_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_circleradius_frm.pack(fill=tk1.X)        pm_circlerad_label = tk1.Label(pm_circleradius_frm, text="Circle Radius:")        pm_circlerad_label.pack(fill=tk1.X)        pmcont.eqarearadius_slider = Scale(pm_circleradius_frm, from_=100, to=500,orient=tk1.HORIZONTAL,resolution=1,length=100,width=15)        pmcont.eqarearadius_slider.set(pmcont.eqarearadius)        pmcont.eqarearadius_slider.pack(fill=tk1.X)        pm_col4_frm = tk1.Frame(pm_interior,bd=2) # Column 4        pm_col4_frm.grid(row=0,column=4,sticky='NSEW')        pm_axesspecs_frm = tk1.Frame(pm_col4_frm,bd=2,relief=tk1.SUNKEN)        pm_axesspecs_frm.pack(fill=tk1.X)        pm_axesspecs_label = tk1.Label(pm_axesspecs_frm, text="Axes Settings:",font="Helvetica 12 bold")        pm_axesspecs_label.pack(fill=tk1.X)        pm_show_cross_frm = tk1.Frame(pm_axesspecs_frm,bd=2,relief=tk1.GROOVE)        pm_show_cross_frm.pack(fill=tk1.X)        pmcont.show_cross_var = tk1.BooleanVar(value=pmcont.show_cross)        pm_show_cross_chbutton = tk1.Checkbutton(pm_show_cross_frm, text="Show Cross at Plot Center?", variable=pmcont.show_cross_var)        pm_show_cross_chbutton.pack(fill=tk1.X)        pm_show_axesticks_frm = tk1.Frame(pm_axesspecs_frm,bd=2,relief=tk1.GROOVE)        pm_show_axesticks_frm.pack(fill=tk1.X)        pmcont.show_axesticks_var = tk1.BooleanVar(value=pmcont.show_axesticks)        pm_show_axes_chbutt = tk1.Checkbutton(pm_show_axesticks_frm, text="Show Axes Ticks?", variable=pmcont.show_axesticks_var,command= lambda:                                            disablewidgets(pmcont.show_axesticks_var,False,[pm_show_posxaxis_ticks_chbutt,pm_show_posyaxis_ticks_chbutt,pm_show_negxaxis_ticks_chbutt,pm_show_negyaxis_ticks_chbutt,pm_axisticknum_label,                                                                                          pm_axesticknum_optionmenu,pm_axestick_color_butt,pm_axestick_color_label,pm_axestick_width_label,pm_axestick_width_optionmenu,                                                                                          pm_axestick_length_label,pm_axestick_length_optionmenu],[],[]))        pm_show_axes_chbutt.pack(fill=tk1.X)        pmcont.show_posxaxis_ticks_var = tk1.BooleanVar(value=pmcont.show_posxaxis_ticks)        pm_show_posxaxis_ticks_chbutt = tk1.Checkbutton(pm_show_axesticks_frm, text="Show Positive X Axis Ticks?", variable=pmcont.show_posxaxis_ticks_var)        pm_show_posxaxis_ticks_chbutt.pack(fill=tk1.X)        pmcont.show_posyaxis_ticks_var = tk1.BooleanVar(value=pmcont.show_posyaxis_ticks)        pm_show_posyaxis_ticks_chbutt = tk1.Checkbutton(pm_show_axesticks_frm, text="Show Positive Y Axis Ticks?", variable=pmcont.show_posyaxis_ticks_var)        pm_show_posyaxis_ticks_chbutt.pack(fill=tk1.X)        pmcont.show_negxaxis_ticks_var = tk1.BooleanVar(value=pmcont.show_negxaxis_ticks)        pm_show_negxaxis_ticks_chbutt = tk1.Checkbutton(pm_show_axesticks_frm, text="Show Negative X Axis Ticks?", variable=pmcont.show_negxaxis_ticks_var)        pm_show_negxaxis_ticks_chbutt.pack(fill=tk1.X)        pmcont.show_negyaxis_ticks_var = tk1.BooleanVar(value=pmcont.show_negyaxis_ticks)        pm_show_negyaxis_ticks_chbutt = tk1.Checkbutton(pm_show_axesticks_frm, text="Show Negative Y Axis Ticks?", variable=pmcont.show_negyaxis_ticks_var)        pm_show_negyaxis_ticks_chbutt.pack(fill=tk1.X)        pm_axisticknum_frm = tk1.Frame(pm_axesspecs_frm,bd=2,relief=tk1.GROOVE)        pm_axisticknum_frm.pack(fill=tk1.X)        pm_axisticknum_label = tk1.Label(pm_axisticknum_frm, text="Number of Ticks Per Axis:")        pm_axisticknum_label.pack(fill=tk1.X)        pmcont.numaxesticks_var = tk1.StringVar(pm_interior)        pmcont.numaxesticks_var.set(axisticknumchoices_dict_reverse[pmcont.numaxesticks])         pm_axesticknum_optionmenu = tk1.OptionMenu(pm_axisticknum_frm, pmcont.numaxesticks_var, *axisticknumchoices_set)        pm_axesticknum_optionmenu.pack(fill=tk1.X)        pm_axesticknum_optionmenu.configure(font=('Consolas',10))                pm_axestick_color_frm = tk1.Frame(pm_axesspecs_frm,bd=2,relief=tk1.GROOVE)        pm_axestick_color_frm.pack(fill=tk1.X)        pm_axestick_color_frm.grid_columnconfigure(0, weight=1)        pm_axestick_color_frm.grid_columnconfigure(3, weight=1)                        pm_axestick_color_butt = tk1.Button(pm_axestick_color_frm,text="Select Axes Tick Color", command= lambda: getcolor(pmmaster,"pmcont.axestick_color_temp","Mean Plot Axes Ticks",                                                                                                                           pm_axestick_color_label,pm_axestick_color_frm,False))        pm_axestick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_axestick_color_label = tk1.Label(pm_axestick_color_frm,text="Current\nColor:\n%s" % pmcont.axestick_color_temp,fg=getoppositecolor(pmcont.axestick_color_temp), bg=pmcont.axestick_color_temp,width=10)        pm_axestick_color_label.grid(row=0, column=2,sticky='NSEW')        pm_axestick_width_frm = tk1.Frame(pm_axesspecs_frm,bd=2,relief=tk1.GROOVE)        pm_axestick_width_frm.pack(fill=tk1.X)        pm_axestick_width_frm.grid_columnconfigure(0, weight=1)        pm_axestick_width_frm.grid_columnconfigure(3, weight=1)        pm_axestick_width_label = tk1.Label(pm_axestick_width_frm, text="Axes Tick Width:")        pm_axestick_width_label.grid(row=0,column=1,sticky='NESW')                pmcont.axestick_width_var = tk1.IntVar(pm_interior)        pmcont.axestick_width_var.set(pmcont.axestick_width)         pm_axestick_width_optionmenu = tk1.OptionMenu(pm_axestick_width_frm, pmcont.axestick_width_var, *linewidthchoices_set)        pm_axestick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_axestick_width_optionmenu.configure(font=('Consolas',10))        pm_axestick_length_frm = tk1.Frame(pm_axesspecs_frm,bd=2,relief=tk1.GROOVE)        pm_axestick_length_frm.pack(fill=tk1.X)        pm_axestick_length_frm.grid_columnconfigure(0, weight=1)        pm_axestick_length_frm.grid_columnconfigure(3, weight=1)        pm_axestick_length_label = tk1.Label(pm_axestick_length_frm, text="Axes Tick Length:")        pm_axestick_length_label.grid(row=0, column=1, sticky='NSEW')        pmcont.axestick_length_mod_var = tk1.StringVar(pm_interior)        pmcont.axestick_length_mod_var.set(pmcont.axestick_length_mod)         pm_axestick_length_optionmenu = tk1.OptionMenu(pm_axestick_length_frm, pmcont.axestick_length_mod_var, *fontsizes_set)        pm_axestick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_axestick_length_optionmenu.configure(font=('Consolas',10))        disablewidgets(pmcont.show_axesticks_var,False,[pm_show_posxaxis_ticks_chbutt,pm_show_posyaxis_ticks_chbutt,pm_show_negxaxis_ticks_chbutt,pm_show_negyaxis_ticks_chbutt,pm_axisticknum_label,pm_axesticknum_optionmenu,                                                      pm_axestick_color_butt,pm_axestick_color_label,pm_axestick_width_label,pm_axestick_width_optionmenu,pm_axestick_length_label,pm_axestick_length_optionmenu],[],[])        pm_show_circleticks_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_show_circleticks_frm.pack(fill=tk1.X)        pmcont.show_circleticks_var = tk1.BooleanVar(value=pmcont.show_circleticks)        pm_show_circleticks_chbutt = tk1.Checkbutton(pm_show_circleticks_frm, text="Show Circle Ticks?", variable=pmcont.show_circleticks_var,                                          command= lambda: disablewidgets(pmcont.show_circleticks_var,False,                                                                          [pm_circletick_width_label,pm_circletick_width_optionmenu,pm_circletick_length_label,pm_circletick_length_optionmenu,pm_circletick_color_butt,                                                                           pm_circletick_color_label,pm_circleticknum_label,pm_circleticknum_optionmenu],[],[]))        pm_show_circleticks_chbutt.pack(fill=tk1.X)        pm_circletick_width_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_circletick_width_frm.pack(fill=tk1.X)        pm_circletick_width_frm.grid_columnconfigure(0, weight=1)        pm_circletick_width_frm.grid_columnconfigure(3, weight=1)        pm_circletick_width_label = tk1.Label(pm_circletick_width_frm, text="Circle Tick Width:")        pm_circletick_width_label.grid(row=0, column=1, sticky='NSEW')        pmcont.circletick_width_var = tk1.IntVar(pm_interior)        pmcont.circletick_width_var.set(pmcont.circletick_width)         pm_circletick_width_optionmenu = tk1.OptionMenu(pm_circletick_width_frm, pmcont.circletick_width_var, *linewidthchoices_set)        pm_circletick_width_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_circletick_width_optionmenu.configure(font=('Consolas',10))        pm_circletick_length_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_circletick_length_frm.pack(fill=tk1.X)        pm_circletick_length_frm.grid_columnconfigure(0, weight=1)        pm_circletick_length_frm.grid_columnconfigure(3, weight=1)        pm_circletick_length_label = tk1.Label(pm_circletick_length_frm, text="Circle Tick Length:")        pm_circletick_length_label.grid(row=0, column=1, sticky='NSEW')        pmcont.circletick_length_var = tk1.StringVar(pm_interior)        pmcont.circletick_length_var.set(pmcont.circletick_length_mod)         pm_circletick_length_optionmenu = tk1.OptionMenu(pm_circletick_length_frm, pmcont.circletick_length_var, *fontsizes_set)        pm_circletick_length_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_circletick_length_optionmenu.configure(font=('Consolas',10))        pm_circletick_color_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_circletick_color_frm.pack(fill=tk1.X)        pm_circletick_color_frm.grid_columnconfigure(0, weight=1)        pm_circletick_color_frm.grid_columnconfigure(3, weight=1)                        pm_circletick_color_butt = tk1.Button(pm_circletick_color_frm,text="Select Circle Tick Color", command= lambda: getcolor(pmmaster,"pmcont.circletick_color_temp","Mean Plot Circle Tick",                                                                                                                                 pm_circletick_color_label,pm_circletick_color_frm,False))        pm_circletick_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_circletick_color_label = tk1.Label(pm_circletick_color_frm,text="Current\nColor:\n%s" % pmcont.circletick_color_temp,fg=getoppositecolor(pmcont.circletick_color_temp), bg=pmcont.circletick_color_temp,width=10)        pm_circletick_color_label.grid(row=0, column=2,sticky='NSEW')                pm_circleticknum_frm = tk1.Frame(pm_circlespecs_frm,bd=2,relief=tk1.GROOVE)        pm_circleticknum_frm.pack(fill=tk1.X)        pm_circleticknum_label = tk1.Label(pm_circleticknum_frm, text="Number of Ticks on Circle:")        pm_circleticknum_label.pack(fill=tk1.X)        pmcont.numcircleticks_var = tk1.StringVar(pm_interior)        pmcont.numcircleticks_var.set(circleticknumchoices_dict_reverse[pmcont.numcircleticks])         pm_circleticknum_optionmenu = tk1.OptionMenu(pm_circleticknum_frm, pmcont.numcircleticks_var, *circleticknumchoices_set)        pm_circleticknum_optionmenu.pack(fill=tk1.X)        pm_circleticknum_optionmenu.configure(font=('Consolas',10))        disablewidgets(pmcont.show_circleticks_var,False,[pm_circletick_width_label,pm_circletick_width_optionmenu,pm_circletick_length_label,pm_circletick_length_optionmenu,                                                         pm_circletick_color_butt,pm_circletick_color_label,pm_circleticknum_label,pm_circleticknum_optionmenu],[],[])        pm_col5_frm = tk1.Frame(pm_interior,bd=2) # Column 5        pm_col5_frm.grid(row=0,column=5,sticky='NSEW')                pm_field_frm = tk1.Frame(pm_col5_frm,bd=2,relief=tk1.SUNKEN)        pm_field_frm.pack(fill=tk1.X)        pm_field_symbol_settings_label = tk1.Label(pm_field_frm, text="Local Field Symbol Settings:",bd=1,font="Helvetica 12 bold")        pm_field_symbol_settings_label.pack(fill=tk1.X)        pm_show_gadfield_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_show_gadfield_frm.pack(fill=tk1.X)        pmcont.show_gadfield_var = tk1.BooleanVar(value=pmcont.show_gadfield)        pm_show_gadfield_chbutt = tk1.Checkbutton(pm_show_gadfield_frm, text="Show Symbol for Field?", variable=pmcont.show_gadfield_var,command= lambda: disablewidgets(pmcont.show_gadfield_var,False,                                                                                [pm_field_lat_label,pmcont.sitelat_slider,pm_field_symbol_label,pm_field_symbolchoices_optionmenu,pm_field_size_label,                                                                                 pmcont.field_symbol_size_slider,pm_field_color_butt,pm_field_color_label,pm_field_edge_color_butt,pm_field_edge_color_label,                                                                                 pm_show_gadfield_edge_chbutt,pm_show_gadfield_label_chbutt],[],[[pmcont.show_gadfield_edge_var,[False],[pm_field_edge_color_butt,pm_field_edge_color_label]]]))        pm_show_gadfield_chbutt.pack(fill=tk1.X)        pm_field_lat_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_field_lat_frm.pack(fill=tk1.X)        pm_field_lat_label = tk1.Label(pm_field_lat_frm, text="Site Latitude:")        pm_field_lat_label.pack(fill=tk1.X)        pmcont.sitelat_slider = Scale(pm_field_lat_frm, from_=-90, to=90,orient=tk1.HORIZONTAL,resolution=1,length=180,width=15)        pmcont.sitelat_slider.set(pmcont.sitelat)        pmcont.sitelat_slider.pack(fill=tk1.X)        pm_field_symbol_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_field_symbol_frm.pack(fill=tk1.X)        pm_field_symbol_frm.grid_columnconfigure(0, weight=1)        pm_field_symbol_frm.grid_columnconfigure(3, weight=1)                  pm_field_symbol_label = tk1.Label(pm_field_symbol_frm, text="Field Symbol:",bd=1)        pm_field_symbol_label.grid(row=0, column=1,sticky='NSEW')        pmcont.field_symbol_var = tk1.StringVar(pm_interior)        pmcont.field_symbol_var.set(symbolchoices_dict_reverse[pmcont.field_symbol])         pm_field_symbolchoices_optionmenu = tk1.OptionMenu(pm_field_symbol_frm, pmcont.field_symbol_var, *symbolchoices_set)        pm_field_symbolchoices_optionmenu.grid(row=0,column=2,sticky='NSEW')        pm_field_symbolchoices_optionmenu.configure(font=('Consolas',12))        pm_field_size_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_field_size_frm.pack(fill=tk1.X)        pm_field_size_label = tk1.Label(pm_field_size_frm, text="Field Symbol Size:")        pm_field_size_label.pack(fill=tk1.X)        pmcont.field_symbol_size_slider = Scale(pm_field_size_frm, from_=1, to=maxsymbolsize,orient=tk1.HORIZONTAL,resolution=1,length=200,width=15)        pmcont.field_symbol_size_slider.set(pmcont.field_size)        pmcont.field_symbol_size_slider.pack(fill=tk1.X)        pm_field_color_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_field_color_frm.pack(fill=tk1.X)        pm_field_color_frm.grid_columnconfigure(0, weight=1)        pm_field_color_frm.grid_columnconfigure(3, weight=1)                       pm_field_color_butt = tk1.Button(pm_field_color_frm,text="Select Field\nSymbol Color", command= lambda: getcolor(pmmaster,"pmcont.field_color_temp","Mean Plot Field Symbol",                                                                                                                                      pm_field_color_label,pm_field_color_frm,False))        pm_field_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_field_color_label = tk1.Label(pm_field_color_frm,text="Current\nColor:\n%s" % pmcont.field_color_temp,fg=getoppositecolor(pmcont.field_color_temp), bg=pmcont.field_color_temp,width=10)        pm_field_color_label.grid(row=0, column=2,sticky='NSEW')        pm_show_gadfield_edge_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_show_gadfield_edge_frm.pack(fill=tk1.X)        pmcont.show_gadfield_edge_var = tk1.BooleanVar(value=pmcont.show_gadfield_edge)        pm_show_gadfield_edge_chbutt = tk1.Checkbutton(pm_show_gadfield_edge_frm, text="Show Field Symbol Border?", variable=pmcont.show_gadfield_edge_var,command= lambda:                                              disablewidgets(pmcont.show_gadfield_edge_var,False,[pm_field_edge_color_butt,pm_field_edge_color_label],[],[]))        pm_show_gadfield_edge_chbutt.pack(fill=tk1.X)                pm_field_edge_color_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_field_edge_color_frm.pack(fill=tk1.X)        pm_field_edge_color_frm.grid_columnconfigure(0, weight=1)        pm_field_edge_color_frm.grid_columnconfigure(3, weight=1)                       pm_field_edge_color_butt = tk1.Button(pm_field_edge_color_frm,text="Select Field\nSymbol Border Color", command= lambda: getcolor(pmmaster,"pmcont.field_edge_color_temp","Mean Plot Field Symbol Edge",                                                                                                                                                       pm_field_edge_color_label,pm_field_edge_color_frm,False))        pm_field_edge_color_butt.grid(row=0, column=1, sticky='NSEW',padx=10,pady=5)        pm_field_edge_color_label = tk1.Label(pm_field_edge_color_frm,text="Current\nColor:\n%s" % pmcont.field_edge_color_temp,fg=getoppositecolor(pmcont.field_edge_color_temp), bg=pmcont.field_edge_color_temp,width=10)        pm_field_edge_color_label.grid(row=0, column=2,sticky='NSEW')        pm_show_gadfield_label_frm = tk1.Frame(pm_field_frm,bd=2,relief=tk1.GROOVE)        pm_show_gadfield_label_frm.pack(fill=tk1.X)        pmcont.show_gadfield_label_var = tk1.BooleanVar(value=pmcont.show_gadfield_label)        pm_show_gadfield_label_chbutt = tk1.Checkbutton(pm_show_gadfield_label_frm, text="Show Field Label?", variable=pmcont.show_gadfield_label_var)        pm_show_gadfield_label_chbutt.pack(fill=tk1.X)        disablewidgets(pmcont.show_gadfield_edge_var,False,[pm_field_edge_color_butt,pm_field_edge_color_label],[],[])        disablewidgets(pmcont.show_gadfield_var,False,[pm_field_lat_label,pmcont.sitelat_slider,pm_field_symbol_label,pm_field_symbolchoices_optionmenu,pm_field_size_label,pmcont.field_symbol_size_slider,                                                    pm_field_color_butt,pm_field_color_label,pm_show_gadfield_edge_chbutt,pm_field_edge_color_butt,pm_field_edge_color_label,pm_show_gadfield_label_chbutt],[],                                                   [[pmcont.show_gadfield_edge_var,[False],[pm_field_edge_color_butt,pm_field_edge_color_label]]])                pm_submit_butt_frm = tk1.Frame(pm_interior,bd=2,relief=tk1.RIDGE)        pm_submit_butt_frm.grid(row=2,column=0, columnspan=6, sticky='NSEW')        pm_submit_butt = tk1.Button(pm_submit_butt_frm, text="Submit and Save Changes and Update Mean Plot", command= lambda: submitpmcontrols(self,pmcont,pmmaster,ax4))        pm_submit_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        pm_submit_butt.configure(font=('Consolas bold',12))        pm_reset_butt = tk1.Button(pm_submit_butt_frm, text="Reset Mean Plot to Defaults", command= lambda: pm_resetdefaults(self,pmmaster,ax4))        pm_reset_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        pm_reset_butt.configure(font=('Consolas',10))        pm_cancel_butt = tk1.Button(pm_submit_butt_frm, text="Cancel (Close Without Saving Changes)", command= lambda: closewin(pmmaster))        pm_cancel_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=20,pady=2)        pm_cancel_butt.configure(font=('Consolas',10))                tk1.mainloop()    returndef getmeancolor(variablename,rownum,framename):    root.update()    root.deiconify()    root.lift()    initialcolorval = variablename.color    color = askcolor(initialcolor=initialcolorval,title="Select Color of Component",parent=root)        if color[1] != None:        variablename.color_temp = str(color[1])        variablename.color_label.destroy()        variablename.color_label = tk1.Label(framename,text="New Color: %s" % color[1],fg=getoppositecolor(str(color[1])), bg=color[1],font=("Consolas",8),width=20)        variablename.color_label.pack(fill=tk1.X)    root.update()    root.deiconify()    root.lift()    return(color)def plotmean_update_annot(ind,item):    global pm_annot        pos = item[0].get_offsets()[ind["ind"][0]]    pm_annot.xy = pos    text = (item[1])    pm_annot.set_text(text)    pm_annot.get_bbox_patch().set_color(item[2])    pm_annot.get_bbox_patch().set_facecolor('#f3f2f1')    pm_annot.get_bbox_patch().set_alpha(0.75)    returndef plotmean_on_plot_hover(event):    vis = pm_annot.get_visible()    for item in range(0,len(pm_annot_pointlist)):        onpoint, ind = pm_annot_pointlist[item][0].contains(event)        if onpoint:            plotmean_update_annot(ind,pm_annot_pointlist[item])            pm_annot.set_visible(True)            fig.canvas.draw_idle()        else:            if vis:                pm_annot.set_visible(False)                fig.canvas.draw_idle()    returndef getrowsinmean(newmeanpointlist):            consecutivetillend = True    consecutive_list = []    for index, pointnum in enumerate(newmeanpointlist):        if index == 0:            consecutive_list.append(pointnum)        else:            if pointnum > prev_pointnum + 1:                consecutivetillend = False                break            else:                consecutive_list.append(pointnum)        prev_pointnum = pointnum    if len(consecutive_list) > 1:        consecutive_str = str(consecutive_list[0]) + "-" + str(consecutive_list[len(consecutive_list)-1]) + ","    else:        consecutive_str = str(consecutive_list[0]) + ","    if not consecutivetillend:        restoflist = newmeanpointlist[index:len(newmeanpointlist)]        rowsinmean_steps = consecutive_str + getrowsinmean(restoflist)    else:        rowsinmean_steps = consecutive_str    return(rowsinmean_steps)def pmplotselectedmean(self,pmcont,ax4):    global topmeannum        newmeanlist_geo = []    newmeanlist_tilt = []    newmeanpointlist = []    for meanpoint in self.mean_pointlist:        meanpoint.show = meanpoint.show_var.get()        meanpoint.mean = meanpoint.mean_var.get()        meanpoint.color = meanpoint.color_temp        if meanpoint.color in specialcolorset_reverse:            meanpoint.colorname = specialcolordict_reverse[meanpoint.color]        else:            meanpoint.colorname = meanpoint.color        meanpoint.symbol = symbolchoices_dict[meanpoint.symbol_var.get()]        if (meanpoint.show) and (meanpoint.line !="C"):            newmeanlist_geo.append([meanpoint.geoinc,meanpoint.geodec])            newmeanlist_tilt.append([meanpoint.tiltinc,meanpoint.tiltdec])            newmeanpointlist.append(meanpoint.linenum)    numpoints = len(newmeanpointlist)    if numpoints < 2:        warningmessagetitle = ("Cannot calculate and plot new mean!")        warningmessagetext = ("Cannot calculate and plot new mean unless at least 2 points selected! Note: Arcs don't count (yet!).\n\nSelect at least 2 points to calculate and plot new mean.")        tkMessageBox.showwarning(warningmessagetitle,warningmessagetext)        return    topmeannum = topmeannum + 1    rowsinmean_steps = getrowsinmean(newmeanpointlist)[:-1]    newpointname = "New Mean %s of " % topmeannum + rowsinmean_steps    newmeandata_geo = get_meancoords(newmeanlist_geo)    newgeodec = "%.1f" % newmeandata_geo[1]    newgeoinc = "%.1f" % newmeandata_geo[0]    newmeandata_tilt = get_meancoords(newmeanlist_tilt)    newtiltdec = "%.1f" % newmeandata_tilt[1]    newtiltinc = "%.1f" % newmeandata_tilt[0]        if newmeandata_tilt[2] == "max -- 180": # Writes a95 from tilt data.        newmeana95_str = "ERR"    else:        newmeana95_str = "%.1f" % newmeandata_tilt[2]    newpointlist = [newpointname,"N","MEN",newgeodec,newgeoinc,newtiltdec,newtiltinc,rowsinmean_steps,str(numpoints),newmeana95_str,"M",pmcont.mean_color]    newmean = readmeanrow("",newpointlist,self.coordtype,self.pointlist_frm,len(self.mean_pointlist)+1)    self.mean_pointlist.append(newmean)    plotfilemeans(self,pmcont,"newlyaddedmean",ax4,False)    returndef createmeanpointwidgets(self,index,rownum,pointnum,pmcont,pm_plottype):    if self.mean_pointlist[index].mean:        if pm_plottype == "newlyaddedmean":            showtext = "%s. Show Mean:\n%s" % (pointnum,self.mean_pointlist[index].samplename)        else:            showtext = "%s. Show Mean:\n%s\nSteps: %s" % (pointnum,self.mean_pointlist[index].samplename, self.mean_pointlist[index].steps)    elif self.mean_pointlist[index].line =="C":        showtext = "%s. Show Arc:\n%s\nComponent: %s" % (pointnum,self.mean_pointlist[index].samplename,self.mean_pointlist[index].component)    else:        showtext = "%s. Show Sample:\n%s\nComponent: %s" % (pointnum,self.mean_pointlist[index].samplename,self.mean_pointlist[index].component)            self.mean_pointlist[index].show_var = tk1.BooleanVar(value=self.mean_pointlist[index].show)    self.mean_pointlist[index].show_chbutt = tk1.Checkbutton(self.pointlist_frm, text=showtext, font=("Consolas",8), variable=self.mean_pointlist[index].show_var,                                                       command = lambda index=index: disablewidgets(self.mean_pointlist[index].show_var,False,                                    [self.mean_pointlist[index].direction_label,self.mean_pointlist[index].mean_chbutt,self.mean_pointlist[index].color_chbutt,self.mean_pointlist[index].color_label,self.mean_pointlist[index].symbol_label,self.mean_pointlist[index].symbolmenu],[],[]))    self.mean_pointlist[index].show_chbutt.grid(row=rownum, column=0,sticky='W')        decspace = (5 - len(str(self.mean_pointlist[index].dec))) * " "    incspace = (5 - len(str(self.mean_pointlist[index].inc))) * " "    if self.mean_pointlist[index].line == "C":        decinctext = "Pole:\nDec: %s%s \nInc: %s%s " % (decspace, self.mean_pointlist[index].dec, incspace, self.mean_pointlist[index].inc)    else:        decinctext = "Dec: %s%s \nInc: %s%s " % (decspace, self.mean_pointlist[index].dec, incspace, self.mean_pointlist[index].inc)            self.mean_pointlist[index].direction_label = tk1.Label(self.pointlist_frm, text=decinctext, font=("Consolas",8))    self.mean_pointlist[index].direction_label.grid(row=rownum, column=1,sticky='NSEW')        if self.mean_pointlist[index].line =="C":        self.mean_pointlist[index].plotarc_var = tk1.BooleanVar(value=not(self.mean_pointlist[index].plotarc))        self.mean_pointlist[index].mean_chbutt = tk1.Checkbutton(self.pointlist_frm, text="Plot Whole\nCircle? (Arc:\n%s, %s)" % (self.mean_pointlist[index].arcstart,self.mean_pointlist[index].arcend), font=("Consolas",8), variable=self.mean_pointlist[index].plotarc_var)        self.mean_pointlist[index].mean_chbutt.grid(row=rownum, column=2,sticky='NSEW')    else:        self.mean_pointlist[index].mean_var = tk1.BooleanVar(value=self.mean_pointlist[index].mean)        self.mean_pointlist[index].mean_chbutt = tk1.Checkbutton(self.pointlist_frm, text="Plot as Mean?\n(%s95: %s)" % (alpha_symbol, self.mean_pointlist[index].a95), font=("Consolas",8), variable=self.mean_pointlist[index].mean_var,command = lambda index=index: switchpointtomean(pmcont,self.mean_pointlist[index]))        self.mean_pointlist[index].mean_chbutt.grid(row=rownum, column=2,sticky='NSEW')        self.mean_pointlist[index].color_frm = tk1.Frame(self.pointlist_frm)    self.mean_pointlist[index].color_frm.grid(row=rownum, column=3,sticky='NSEW')    self.mean_pointlist[index].color_chbutt = tk1.Button(self.mean_pointlist[index].color_frm,text=" Select Color", font=("Consolas",8), command= lambda index=index, rownum=rownum:getmeancolor(self.mean_pointlist[index],rownum,self.mean_pointlist[index].color_frm))    self.mean_pointlist[index].color_chbutt.pack(fill=tk1.X,padx=10,pady=5)    self.mean_pointlist[index].color_label = tk1.Label(self.mean_pointlist[index].color_frm,text="Color: %s" % self.mean_pointlist[index].colorname,font=("Consolas",8),width=20,fg=getoppositecolor(self.mean_pointlist[index].color_temp),bg=self.mean_pointlist[index].color_temp)    self.mean_pointlist[index].color_label.pack(fill=tk1.X)    self.mean_pointlist[index].symbol_frm = tk1.Frame(self.pointlist_frm)    self.mean_pointlist[index].symbol_frm.grid(row=rownum, column=5,sticky='NSEW')    self.mean_pointlist[index].symbol_label = tk1.Label(self.mean_pointlist[index].symbol_frm, text="Select Symbol:", font=("Consolas",8))    self.mean_pointlist[index].symbol_label.pack(fill=tk1.X)    self.mean_pointlist[index].symbol_var = tk1.StringVar(self.mean_pointlist[index].symbol_frm)    self.mean_pointlist[index].symbol_var.set(symbolchoices_dict_reverse[self.mean_pointlist[index].symbol])     self.mean_pointlist[index].symbolmenu = tk1.OptionMenu(self.mean_pointlist[index].symbol_frm, self.mean_pointlist[index].symbol_var, *symbolchoices_set)    self.mean_pointlist[index].symbolmenu.pack(fill=tk1.X)    self.mean_pointlist[index].symbolmenu.configure(font=('Consolas',8))    disablewidgets(self.mean_pointlist[index].show_var,False,[self.mean_pointlist[index].direction_label,self.mean_pointlist[index].mean_chbutt,self.mean_pointlist[index].color_chbutt,self.mean_pointlist[index].color_label,                                                         self.mean_pointlist[index].symbol_label,self.mean_pointlist[index].symbolmenu],[],[])    returndef plotfilemeans(self,pmcont,pm_plottype,ax4,switchfromrotate):    global fig, pm_annot, pm_annot_pointlist, topmeannum    newcoords = False    if pm_plottype == "newsite":        self.coordtype = "Tilt"        if not switchfromrotate:            self.filepathandname = ""            self.filepathandname = openfile(self,"Open File Containing Site Means","*.lsq",(("lsq files","*.lsq"),("all files","*.*")))            if self.filepathandname != "":                self.datafile = self.currentfile            else:                return                self.interior.destroy()        self.interior = tk1.Frame(self.maincanvas)        self.interior_id = self.maincanvas.create_window(0, 0, window=self.interior,anchor=tk1.NW)        fig = plt.Figure(figsize=(mainfigurewidth,mainfigureheight),facecolor='white')        plt.rcParams["font.family"] = "consolas"        plt.axis('off')        self.zerorowcolspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))        self.zerorowcolspacer.grid(row=0, column=0, sticky='NSEW')        self.colspacer = tk1.Label(self.interior, text="  ",font=("Helvetica",10))        self.colspacer.grid(row=0, column=4, sticky='NSEW')        self.canvas=FigureCanvasTkAgg(fig,self.interior)        self.canvas.get_tk_widget().grid(row=0,column=6,rowspan=12,columnspan=2)        self.canvas.show()        self.toprow_frm = tk1.Frame(self.interior)        self.toprow_frm.grid(row=0,column=0,columnspan=5,sticky='NSEW')        self.introname = tk1.Label(self.toprow_frm, text="Equal Area Plot of Components and Means",font=("Helvetica",15))        self.introname.pack(fill=tk1.X)        self.plotfilemeans_butt = tk1.Button(self.toprow_frm, text="Open .lsq File and Plot", width=15, height=1,command=lambda: plotfilemeans(self,pmcont,"newsite",ax4,False))        self.plotfilemeans_butt.pack(fill=tk1.X,padx=20,pady=2)        CreateToolTip(self.plotfilemeans_butt, 25, -50, 250, self, \        'Open .lsq File and Plot (Ctrl-O).\n\nSupports .lsq files created by Paleomag 3.1.')        self.scrollframe=tk1.Frame(self.interior,relief=tk1.GROOVE,width=550,height=800,bd=1)        self.scrollframe.grid(row=1,column=0,columnspan=6,rowspan=10,sticky='NSEW')        self.scrollcanvas = tk1.Canvas(self.scrollframe)             self.pointlist_frm = tk1.Frame(self.scrollcanvas)        self.pointlist_scrollbar = tk1.Scrollbar(self.scrollframe,orient="vertical",command=self.scrollcanvas.yview)              self.scrollcanvas.configure(yscrollcommand=self.pointlist_scrollbar.set)        self.pointlist_scrollbar.pack(side=tk1.RIGHT,fill=tk1.Y)                self.scrollcanvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)                self.scrollcanvas.create_window((0,0),window=self.pointlist_frm,anchor=tk1.NW)                self.pointlist_frm.bind("<Configure>",self.pm_scrollfunction)        self.scrollcanvas.bind("<Enter>", self.enterscrollcanvas)        self.scrollcanvas.bind("<Leave>", self.leavescrollcanvas)        root.bind("<Control-o>", lambda x: plotfilemeans(self,pmcont,"newsite",ax4,False))        root.bind("<Control-O>", lambda x: plotfilemeans(self,pmcont,"newsite",ax4,False))        self.lastrow_frm = tk1.Frame(self.interior)        self.lastrow_frm.grid(row=12,column=1,columnspan=2)        self.reset_butt = tk1.Button(self.lastrow_frm, text="RESET", width=7, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.startover())        self.reset_butt.pack(side=tk1.LEFT,padx=10,pady=2)        CreateToolTip(self.reset_butt, 15, -80, 180, self, \        'Reset Multiplot (Ctrl-Shift-R).\n\nReturn to splash page and open and view sample or step demagnetization data from a site.')                self.plotsitemeans_butt = tk1.Button(self.lastrow_frm, text="PLOT SITE MEANS", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: plotsitemeans(self,False))        self.plotsitemeans_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.plotsitemeans_butt, 20, -80, 180, self, \        'Plot Site Means (Ctrl-Shift-M).\n\nOpen an .lsq file and plot components, and calculate and plot new means for a site.')        self.calculator_butt = tk1.Button(self.lastrow_frm, text="CALCULATOR", width=11, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: calculator(self))        self.calculator_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.calculator_butt, 18, -125, 250, self, \        'Paleomagnetic Calculator (Ctrl-Shift-C).\n\nCalculate various paleomagnetic statistics including:, Grand Mean VGP, Site VGPs, Site Directions, Mean Directions, Mean Site Location, Paleolatitude, Paleoinclination, Angular Distance, Real distance, Rotated Coordinates, and Convert Coordinate Format.')        self.about_butt = tk1.Button(self.lastrow_frm, text="ABOUT", width=6, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.aboutmultiplot())        self.about_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.about_butt, 10, -110, 180, self, \        'About Multiplot (Ctrl-Shift-A).\n\nDeveloper info and support contact, technical requirements, citation information, and software license and legal/copyright information.')                self.shortcut_butt = tk1.Button(self.lastrow_frm, text="SHORTCUTS", width=10, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.shortcuts())        self.shortcut_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.shortcut_butt, 15, -65, 180, self, \        'Multiplot Shortcuts (Ctrl-Shift-S).\n\nSee a list of keyboard and mouse shortcuts.')        self.quit_butt = tk1.Button(self.lastrow_frm, text="QUIT", width=5, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.quitprogram())        self.quit_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.quit_butt, 10, -20, 180, self, \        'Quit Multiplot (Ctrl-Shift-Q).')                self.gs = gridspec.GridSpec(1, 1)        ax4 = fig.add_subplot(self.gs[0])                    ax4.clear()                plt.subplots_adjust(left=0.05, right=1.15, top=1.15, bottom=0.05)        #fig.tight_layout()        fig.set_tight_layout(True)        ax4.axis('equal')        ax4.axis('off')        ax4.axis([-pmcont.axeslength, pmcont.axeslength, -pmcont.axeslength, pmcont.axeslength])        self.pointlist_label = tk1.Label(self.toprow_frm, text="List of Components and Means in\n%s:" % self.datafile,font="Helvetica 12 bold")        self.pointlist_label.pack(side=tk1.BOTTOM)    else:        if self.coordtype != self.pm_coordtype_var.get():            self.coordtype = self.pm_coordtype_var.get()            newcoords = True        self.plotting_label.destroy()    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.plotting_label = tk1.Label(self.interior, text="Plotting...Please wait just a few seconds.",font=("Helvetica",15))    self.plotting_label.grid(row=12,column=7,sticky='E')    ax4.clear()    ax4.axis('off')    self.canvas.draw()    ax4.axis('equal')    ax4.axis([-pmcont.axeslength, pmcont.axeslength, -pmcont.axeslength, pmcont.axeslength])        horiz_offset = 100    maincircle = plt.Circle((0+horiz_offset, 0), pmcont.eqarearadius, color=pmcont.circle_color, fill=False, lw=pmcont.circle_thickness)    ax4.add_artist(maincircle)        if pmcont.show_cross:                        ax4.plot([0+horiz_offset,0+horiz_offset],[-6,6],pmcont.axestick_color,lw=pmcont.axestick_width,zorder=0)        ax4.plot([-6+horiz_offset,6+horiz_offset],[0,0],pmcont.axestick_color,lw=pmcont.axestick_width,zorder=0)    if pmcont.show_circleticks: # plot circle ticks        tickdegrees = 360/pmcont.numcircleticks         tickmarker = 0        while tickmarker < 360:             tick_length = eqcircletick_length_dict[pmcont.circletick_length_mod][tickmarker]            tickmarker_rad = math.radians(tickmarker)            x1 = math.sin(tickmarker_rad)*(pmcont.eqarearadius-tick_length)            x2 = math.sin(tickmarker_rad)*pmcont.eqarearadius            y1 = math.cos(tickmarker_rad)*(pmcont.eqarearadius-tick_length)            y2 = math.cos(tickmarker_rad)*pmcont.eqarearadius            ax4.plot([x1+horiz_offset,x2+horiz_offset],[y1,y2],pmcont.circletick_color,lw=pmcont.circletick_width,zorder=0)            tickmarker = tickmarker + tickdegrees    if pmcont.show_axesticks: # plot axes ticks        tickdegrees = 90/pmcont.numaxesticks         tickmarker = tickdegrees        while tickmarker < 90:            tick_length = eqaxestick_length_dict[pmcont.axestick_length_mod][tickmarker]            tickdist = math.sqrt(1-(math.sin(math.radians(math.fabs(tickmarker)))))*pmcont.eqarearadius            if pmcont.show_posxaxis_ticks:                ax4.plot([tickdist+horiz_offset,tickdist+horiz_offset],[-tick_length,tick_length],pmcont.axestick_color,lw=pmcont.axestick_width,zorder=0)            if pmcont.show_posyaxis_ticks:                ax4.plot([-tick_length+horiz_offset,tick_length+horiz_offset],[tickdist,tickdist],pmcont.axestick_color,lw=pmcont.axestick_width,zorder=0)            if pmcont.show_negxaxis_ticks:                ax4.plot([-tickdist+horiz_offset,-tickdist+horiz_offset],[-tick_length,tick_length],pmcont.axestick_color,lw=pmcont.axestick_width,zorder=0)            if pmcont.show_negyaxis_ticks:                ax4.plot([-tick_length+horiz_offset,tick_length+horiz_offset],[-tickdist,-tickdist],pmcont.axestick_color,lw=pmcont.axestick_width,zorder=0)            tickmarker = tickmarker + tickdegrees    if pmcont.show_labels:        label_fontsize = fontsizes_dict[pmcont.label_fontsize_mod][1][0] * 1.5        if pmcont.numsordirs == "Dirs":            if pmcont.show_north:                ax4.text(0+horiz_offset, pmcont.eqarearadius + 7, "N", color=pmcont.label_color, ha="center", fontsize=label_fontsize,zorder=0)            if pmcont.show_east:                ax4.text(pmcont.eqarearadius + 7+horiz_offset, 0, "E", color=pmcont.label_color, va="center", fontsize=label_fontsize,zorder=0)            if pmcont.show_south:                ax4.text(0+horiz_offset, -(pmcont.eqarearadius + 7), "S", color=pmcont.label_color, ha="center", va="top", fontsize=label_fontsize,zorder=0)            if pmcont.show_west:                ax4.text(-(pmcont.eqarearadius + 7)+horiz_offset, 0, "W", color=pmcont.label_color, va="center", ha="right", fontsize=label_fontsize,zorder=0)        elif pmcont.numsordirs == "Nums":            if pmcont.show_0:                ax4.text(0+horiz_offset, pmcont.eqarearadius + 7, "0%s" % degree_sign, color=pmcont.label_color, ha="center", fontsize=label_fontsize,zorder=0)            if pmcont.show_90:                ax4.text(pmcont.eqarearadius + 7+horiz_offset, 0, "90%s" % degree_sign, color=pmcont.label_color, va="center", fontsize=label_fontsize,zorder=0)            if pmcont.show_180:                ax4.text(0+horiz_offset, -(pmcont.eqarearadius + 7), "180%s" % degree_sign, color=pmcont.label_color, ha="center", va="top", fontsize=label_fontsize,zorder=0)            if pmcont.show_270:                ax4.text(-(pmcont.eqarearadius + 7)+horiz_offset, 0, "270%s" % degree_sign, color=pmcont.label_color, va="center", ha="right", fontsize=label_fontsize,zorder=0)    if pm_plottype == "newsite":        f = open(self.filepathandname, 'r')        self.mean_pointlist = []        rownum = 0        index = 0        topmeannum = 0        pointnum = 1        for line in f:  # Create widgets to allow manipulation of each component            newpoint = readmeanrow(line,[],self.coordtype,self.pointlist_frm,pointnum)            if newpoint.use:                self.mean_pointlist.append(newpoint)                createmeanpointwidgets(self,index,rownum,pointnum,pmcont,pm_plottype)                endspacer_label = tk1.Label(self.pointlist_frm,text=" ",font=("Consolas",10))                endspacer_label.grid(row=rownum, column=4,sticky='NSEW')                rownum = rownum + 1                linecanvas = tk1.Canvas(self.pointlist_frm,width=10,height=3)                linecanvas.grid(row=rownum, column=0,columnspan=6,sticky='NSEW')                linecanvas.create_line(0,3,700,3) # draw a linebreak                rownum = rownum + 1                index = index + 1                pointnum = pointnum + 1        f.close()        self.pm_update_butt = tk1.Button(self.toprow_frm, text="Update Mean Plot", width=15, font=15,height=2,command=lambda: pmupdateplot(self,pmcont,ax4))        self.pm_update_butt.pack(fill=tk1.X,padx=20,pady=3)        CreateToolTip(self.pm_update_butt, 25, -50, 400, self, \        'Update Mean Plot (Ctrl-U).\n\nUpdates plot with any changes made to components and means.')        self.pm_coordtype_label = tk1.Label(self.toprow_frm, text="Select Input Coordinate Type:")        self.pm_coordtype_label.pack(fill=tk1.X)        self.pm_coordtype_frm = tk1.Frame(self.toprow_frm)        self.pm_coordtype_frm.pack(fill=tk1.X)        self.pm_coordtype_spacer_label = tk1.Label(self.pm_coordtype_frm, text="                                           ")        self.pm_coordtype_spacer_label.pack(side=tk1.LEFT)        self.pm_coordtype_var = tk1.StringVar()        self.pm_coordtype_var.set(self.coordtype)                    self.pm_geographic_radio = tk1.Radiobutton(self.pm_coordtype_frm, text="Geographic Coordinates",variable=self.pm_coordtype_var,value="Geographic")        self.pm_geographic_radio.pack(side=tk1.LEFT)        CreateToolTip(self.pm_geographic_radio, 25, -50, 400, self, \        'Plot Geographic Coordinates.')        self.pm_tilt_radio = tk1.Radiobutton(self.pm_coordtype_frm, text="Tilt Coordinates",variable=self.pm_coordtype_var,value="Tilt")        self.pm_tilt_radio.pack(side=tk1.LEFT)        CreateToolTip(self.pm_geographic_radio, 25, -50, 400, self, \        'Plot Tilt Coordinates.')        self.pm_plotselected_butt = tk1.Button(self.toprow_frm, text="Plot Selected as New Mean and Update Plot", width=15, height=1,command=lambda: pmplotselectedmean(self,pmcont,ax4))        self.pm_plotselected_butt.pack(fill=tk1.X,padx=20,pady=2)        CreateToolTip(self.pm_plotselected_butt, 25, -65, 400, self, \        'Plot Selected as New Mean and Update Plot (Ctrl-N).\n\nPlots mean direction of any selected components and updates plot with any changes made to components and means.')        self.pm_purgeunselected_butt = tk1.Button(self.toprow_frm, text="Purge Unselected Components and Means and Update Plot", width=15, height=1,command=lambda: pmpurgeunselected(self,pmcont,ax4))        self.pm_purgeunselected_butt.pack(fill=tk1.X,padx=20,pady=2)        CreateToolTip(self.pm_purgeunselected_butt, 25, -50, 400, self, \        'Purge Unselected Components and Means.\n\nPurges unselected components and means from the list.')        self.pm_saveselected_butt = tk1.Button(self.toprow_frm, text="Save Selected as .lsq File", width=15, height=1,command=lambda: pmsaveselected(self))        self.pm_saveselected_butt.pack(fill=tk1.X,padx=20,pady=2)        CreateToolTip(self.pm_saveselected_butt, 25, -50, 400, self, \        'Save Selected as .lsq File (Ctrl-S).\n\nSaves selected components and means as an .lsq file.')        self.pmcont_butt = tk1.Button(self.toprow_frm, text="Mean Plot Controls", width=15, height=1,command=lambda: pmcontrols(self,pmcont,ax4))        self.pmcont_butt.pack(fill=tk1.X,padx=20,pady=2)        CreateToolTip(self.pmcont_butt, 25, -50, 250, self, \        'Mean Plot Settings.\n\nClick to show Mean Plot settings.')        self.rotatelsq_butt = tk1.Button(self.toprow_frm, text="Rotate LSQ File", width=15, height=1,command=lambda: self.switchtorotate("site"))        self.rotatelsq_butt.pack(fill=tk1.X,padx=20,pady=2)        CreateToolTip(self.rotatelsq_butt, 25, -50, 250, self, \        'Rotate data in .lsq file.')        self.popup_frm = tk1.Frame(self.toprow_frm)        self.popup_frm.pack(fill=tk1.X)        self.popup_butt = tk1.Button(self.popup_frm, text="Open Figure in Standalone Window", command= lambda: self.show_popup_plotmeans(pmcont))        self.popup_butt.pack(side=tk1.LEFT,padx=5,pady=5)        CreateToolTip(self.popup_butt, 15, -110, 250, self, \        'Open Current Figure in New Standalone Window.\n\nOpens the plots in the main Multiplot canvas at right in a new standalone window. Useful for comparing currently displayed data to some new dataset.')        self.popup_entrybox = tk1.Entry(self.popup_frm,width=25)        self.popup_entrybox.pack(side=tk1.LEFT)        self.popup_entrybox.config(background="white", foreground="dark grey")        self.popup_entrybox.insert(tk1.END, "Enter Window Name")        self.popup_entrybox.bind("<FocusIn>", lambda x: self.clearpopupentrybox())        self.popup_entrybox.bind("<Return>", lambda x: self.show_popup_plotmeans(pmcont))        self.popup_entrybox.bind("<FocusOut>", lambda x: self.popupentryboxfocusout())        root.bind("<Control-u>", lambda x: pmupdateplot(self,pmcont,ax4))        root.bind("<Control-U>", lambda x: pmupdateplot(self,pmcont,ax4))        root.bind("<Control-n>", lambda x: pmplotselectedmean(self,pmcont,ax4))        root.bind("<Control-N>", lambda x: pmplotselectedmean(self,pmcont,ax4))        root.bind("<Control-s>", lambda x: pmsaveselected(self))        root.bind("<Control-S>", lambda x: pmsaveselected(self))                     elif pm_plottype == "newlyaddedmean" or newcoords:        rownum = 0        pointnum = 1        for index in range(0,len(self.mean_pointlist)): # Create widgets to allow manipulation of each component            if newcoords:                if self.coordtype == "Tilt":                    self.mean_pointlist[index].dec = self.mean_pointlist[index].tiltdec                    self.mean_pointlist[index].inc = self.mean_pointlist[index].tiltinc                    if self.mean_pointlist[index].line == "C":                        self.mean_pointlist[index].arcstart = self.mean_pointlist[index].arcstarttilt                        self.mean_pointlist[index].arcend = self.mean_pointlist[index].arcendtilt                if self.coordtype == "Geographic":                    self.mean_pointlist[index].dec = self.mean_pointlist[index].geodec                    self.mean_pointlist[index].inc = self.mean_pointlist[index].geoinc                    if self.mean_pointlist[index].line == "C":                        self.mean_pointlist[index].arcstart = self.mean_pointlist[index].arcstartgeog                        self.mean_pointlist[index].arcend = self.mean_pointlist[index].arcendgeog            createmeanpointwidgets(self,index,rownum,pointnum,pmcont,pm_plottype)            endspacer_label = tk1.Label(self.pointlist_frm,text=" ",font=("Consolas",10))            endspacer_label.grid(row=rownum, column=4,sticky='NSEW')            rownum = rownum + 1            linecanvas = tk1.Canvas(self.pointlist_frm,width=10,height=3)            linecanvas.grid(row=rownum, column=0,columnspan=6,sticky='NSEW')            linecanvas.create_line(0,3,700,3) # draw a linebreak            rownum = rownum + 1            pointnum = pointnum + 1            pm_annot_pointlist = []    legendicons_list = []    legend_label_list = []    anyselected = False    showpointnum = 0    for point in self.mean_pointlist:        if point.show:            anyselected = True            showpointnum = showpointnum + 1            if pmcont.truenums:                pointnum = point.linenum            else:                pointnum = showpointnum                        rad_dec = math.radians(point.dec)            rad_inc = math.radians(point.inc)                        forward = math.sqrt(1-(math.sin(math.radians(math.fabs(point.inc)))))*pmcont.eqarearadius            point_x = math.sin(rad_dec) * forward            point_y = math.cos(rad_dec) * forward                        if point.inc < 0:                up = True                drawcolor = "white"                point_edgecolor = point.color            else:                up = False                drawcolor = point.color                point_edgecolor = None            if (not point.mean) and (point.line != "C"): # plot a component                newpoint = ax4.scatter(point_x+horiz_offset, point_y, color=drawcolor, s=pmcont.point_symbol_size, marker=point.symbol, edgecolor=point_edgecolor,linewidth=pmcont.point_edge_width,zorder=pointnum)                pm_annot_pointlist.append([newpoint,"%s. Component Name: %s\nComponent: %s\nDec: %s%s\nInc: %s%s" % (pointnum, point.samplename,point.component,point.dec,degree_sign,point.inc,degree_sign),point.color])                newlegendpoint, = ax4.plot(-100000,color=drawcolor,marker=point.symbol,markersize=10,markeredgecolor=point_edgecolor,lw=3,zorder=0,linestyle="none")                if pmcont.show_pointnumbers:                    newlegend_label = "%s. Component %s %s" % (pointnum, point.samplename,point.component)                else:                    newlegend_label = "Component %s %s" % (point.samplename,point.component)            else:  # Plot a mean or a circle                if point.line == "C": # Plot a Circle                    newpoint = ax4.scatter(point_x+horiz_offset, point_y, color=drawcolor, s=pmcont.arc_symbol_size, marker=point.symbol, edgecolor=point_edgecolor,linewidth=pmcont.arc_edge_width,zorder=pointnum)                    if point.plotarc:                        showtexttype = "Arc"                    else:                        showtexttype = "Great Circle"                    pm_annot_pointlist.append([newpoint,"%s. Pole of %s of: %s\nComponent: %s\nPole Dec: %s%s\nPole Inc: %s%s" % (pointnum, showtexttype, point.samplename,point.component,point.dec,degree_sign,point.inc,degree_sign),point.color])                    if pmcont.show_pointnumbers:                            newlegend_label = "%s. Arc %s" % (pointnum, point.samplename)                    else:                        newlegend_label = "Arc %s" % (point.samplename)                else: # Plot a Mean                    newpoint = ax4.scatter(point_x+horiz_offset, point_y, color=drawcolor, s=pmcont.mean_symbol_size, marker=point.symbol, edgecolor=point_edgecolor,linewidth=pmcont.mean_edge_width,zorder=pointnum)                    pm_annot_pointlist.append([newpoint,"%s. Mean Name: %s\nComponent: %s\nDec: %s\nInc: %s\n%s95: %s%s" % (pointnum, point.samplename,point.component,point.dec,point.inc,alpha_symbol,point.a95,degree_sign),point.color])                    if pmcont.show_pointnumbers:                        newlegend_label = "%s. Mean %s" % (pointnum, point.samplename)                    else:                        newlegend_label = "Mean %s" % (point.samplename)                newlegendpoint, = ax4.plot(-100000,color=drawcolor,marker=point.symbol,markersize=10,markeredgecolor=point_edgecolor,lw=3,zorder=0,linestyle="none")                if point.a95 == "ERR":                    legendicons_list.append(newlegendpoint)                    legend_label_list.append(newlegend_label)                    continue                                elif point.line == "C":                    ell_a95 = 90.0001 # This is necessary to avoid float errors at many decimal places                    edf = pmcont.ellipse_densityfactor / 5                    if point.plotarc:                        degreediff = math.fabs( (point.arcstart) - (point.arcend) )                        if degreediff <= 180:                            arcstart_degrees = min(point.arcstart,point.arcend)                            arcend_degrees = max(point.arcstart,point.arcend)                        elif degreediff > 180:                            arcstart_degrees = min(point.arcstart % 360, point.arcend % 360)                            arcend_degrees = max(point.arcstart % 360, point.arcend % 360)                    else:                        arcstart_degrees = 0.0                        arcend_degrees = 360.0                else:                    arcstart_degrees = 0.0                    arcend_degrees = 360.0                    ell_a95 = point.a95                    edf = pmcont.ellipse_densityfactor                    if ell_a95 == 90:                        ell_a95 = 90.0001 # This is necessary to avoid float errors at many decimal places                                dec = point.dec                inc = point.inc                                if ell_a95 > 90: # Note: Much of the math in this section is borrowed from pmagpy. Thank you!                    bigellipse = True                    ell_a95 = 180 - ell_a95                    dec = dec - 180                    inc = -inc                else:                    bigellipse = False                                rad_ell_a95 = math.radians(ell_a95)                rad_dec = math.radians(dec)                rad_inc = math.radians(inc)                               trans_matrix = [[0,0,0],[0,0,0],[0,0,0]]                                north = math.cos(rad_dec) * math.cos(rad_inc)                east = math.sin(rad_dec) * math.cos(rad_inc)                down = math.sin(rad_inc)                if down < 0:                    north = -north                    east = -east                    down = -down                trans_matrix[0][2] = north                trans_matrix[1][2] = east                trans_matrix[2][2] = down                binc = inc - ( (abs(inc)/inc) * 90 )                rad_binc = math.radians(binc)                                north = math.cos(rad_dec) * math.cos(rad_binc)                east = math.sin(rad_dec) * math.cos(rad_binc)                down = math.sin(rad_binc)                if down < 0:                    north = -north                    east = -east                    down = -down                trans_matrix[0][0] = north                trans_matrix[1][0] = east                trans_matrix[2][0] = down                gdec = dec + 90                rad_gdec = math.radians(gdec)                ginc = 0                                north = math.cos(rad_gdec) * math.cos(ginc)                east = math.sin(rad_gdec) * math.cos(ginc)                down = math.sin(ginc)                if down < 0:                    north = -north                    east = -east                    down = -down                trans_matrix[0][1] = north                trans_matrix[1][1] = east                trans_matrix[2][1] = down                totdrawpoints = int(ell_a95 * edf)                totdegrees = math.fabs(arcstart_degrees - arcend_degrees)                pointsperdegree = float(float(totdrawpoints) / totdegrees)                startdegrees = int(round(arcstart_degrees*pointsperdegree,0))                enddegrees = int(round(arcend_degrees*pointsperdegree,0))                if point.line == "C" and point.plotarc:                    if point.inc >= 0:                        offset = 90                    else:                        offset = -90                        startdegrees, enddegrees = -enddegrees, -startdegrees                else:                    offset = 0                                for pointnum in range(startdegrees,enddegrees):                    degrees_pointnum  = (float(pointnum)/pointsperdegree)                    degrees_offset = (degrees_pointnum+offset)%360                    rad_pointnum = math.radians(degrees_offset)                    vector_matrix = [0,0,0]                    vector_matrix[0] = math.sin(rad_ell_a95) * math.cos(rad_pointnum)                    vector_matrix[1] = math.sin(rad_ell_a95) * math.sin(rad_pointnum)                    vector_matrix[2] = math.sqrt(1.0 - vector_matrix[0]**2 - vector_matrix[1]**2)                    ellipse = [0,0,0]                           for j in range(0,3):                        for k in range(0,3):                            ellipse[j] = ellipse[j] + (trans_matrix[j][k]*vector_matrix[k])                    R = math.sqrt(1.0 - abs(ellipse[2])) / math.sqrt (ellipse[0]**2 + ellipse[1]**2)                    R_deg = math.degrees(R) / 90 * pmcont.eqarearadius * pmcont.cosmologicalconstant                    ell_x = (ellipse[1] * R_deg)                    ell_y = (ellipse[0] * R_deg)                    if up or bigellipse:                        ell_x = -ell_x                        ell_y = -ell_y##                    if inc * ellipse[2] >= 0:                        # Use this code when plotting the ellipse in different colors for upper vs. lower hemisphere##                        drawcolor = pmcont.lowerhem_color##                    else:##                        if pmcont.upperhem == "white":##                            drawcolor = pmcont.lowerhem_color##                        else:##                            drawcolor = pmcont.upperhem_color                    newpoint = ax4.scatter(ell_x+horiz_offset, ell_y, color=point.color, s=pmcont.ellipse_width, marker=pmcont.ellipse_symbol,zorder=pointnum)                    if point.line == "C":                        if point.plotarc:                            showtexttype = "Arc"                        else:                            showtexttype = "Great Circle"                        pm_annot_pointlist.append([newpoint,"%s. %s of: %s\nComponent: %s\nPole Dec: %s%s\nPole Inc: %s%s" % (pointnum, showtexttype, point.samplename,point.component,point.dec,degree_sign,point.inc,degree_sign),point.color])                    else:                        pm_annot_pointlist.append([newpoint,"%s. %s95 ellipse of: %s\nComponent: %s\n%s95: %s%s\nDec: %s%s\nInc: %s%s" % (pointnum,alpha_symbol,point.samplename,point.component,alpha_symbol,point.a95,degree_sign,point.dec,degree_sign,point.inc,degree_sign),point.color])# this is an attempt to plot arcs the same way I plot arcs between points in the Multiplot Equal Area Plot...doesn't work yet.##            elif point.line == "C":##                p0_lat = 0 # this is always the case becuase the Node (p0) is always along the equator##                p0_lon = (point.dec - 90) % 360##                if point.plotarc:##                    degreediff = math.fabs( (point.arcstart) - (point.arcend) )##                    if degreediff <= 180:##                        angdist_01 = math.radians(min(point.arcstart,point.arcend))##                        angdist_02 = math.radians(max(point.arcstart,point.arcend))##                    elif degreediff > 180:##                        angdist_01 = math.radians(min(point.arcstart % 360, point.arcend % 360))##                        angdist_02 = math.radians(max(point.arcstart % 360, point.arcend % 360))##                else:##                    angdist_01 = math.radians(0.0)##                    angdist_02 = math.radians(360.0)####                if point.inc >= 0:##                    heading_01 = math.radians(90 - point.inc)##                else:##                    heading_01 = math.radians(-(90 + point.inc))######                if inc < 0 and prev_inc < 0:####                    angdist_02 = -angdist_02####                    if angdist_01 > angdist_02:####                        angdist_01, angdist_02 = angdist_02, angdist_01####                elif (np.sign(p1_lat) != np.sign(p2_lat)) and (math.fabs(angdist_02 - angdist_01) > math.pi):####                    angdist_02 = math.fabs(angdist_02) - (2 * math.pi)####                    angdist_01, angdist_02 = angdist_02, angdist_01####                start_angdist_point = int(round(angdist_01 * 100, 0))##                end_angdist_point = int(round(angdist_02 * 100, 0))##                for angdist_0p in range(start_angdist_point,end_angdist_point):##                    p_lat = math.asin( math.cos(heading_01)*math.sin(angdist_0p/100) )##                    p_lon = math.atan2(math.sin(heading_01)*math.sin(angdist_0p/100),math.cos(angdist_0p/100)) + p0_lon##                    forward = math.sqrt(1-(math.sin(math.fabs(p_lat))))*pmcont.eqarearadius##                    arc_x = math.sin(p_lon) * forward##                    arc_y = math.cos(p_lon) * forward##                    ax4.scatter(arc_x+horiz_offset, arc_y+horiz_offset, color=point.color, s=pmcont.ellipse_width, marker=pmcont.ellipse_symbol,zorder=4)                                                legendicons_list.append(newlegendpoint)            legend_label_list.append(newlegend_label)    if not anyselected:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax4.text(100, 0, "No Points Selected to Plot", color=pmcont.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props)    self.toolbar_frm = tk1.Frame(self.interior)    self.toolbar_frm.grid(row=12,column=6,sticky='W')    self.toolbar = NavigationToolbar2TkAgg(self.canvas, self.toolbar_frm)    self.toolbar.update()    if pmcont.show_gadfield:        sitelat = int(pmcont.sitelat)          sitelat_rad = math.radians(pmcont.sitelat)        siteinc = math.atan(2 * math.tan(sitelat_rad))  # GAD equation: tan (I) = 2tan (lat)        forward = math.sqrt(1-(math.sin(math.fabs(siteinc))))*pmcont.eqarearadius        point_x = 0        point_y = forward        if sitelat <= 0:            if not(pmcont.field_symbol in ["+","x"]):                gadfield_drawcolor = "white"                gadfield_edgecolor = pmcont.field_color            else:                gadfield_drawcolor = pmcont.field_color                gadfield_edgecolor = pmcont.field_edge_color        else:            gadfield_drawcolor = pmcont.field_color            gadfield_edgecolor = pmcont.field_edge_color        if pmcont.show_gadfield_edge:            newpoint = ax4.scatter(point_x+horiz_offset, point_y, color=gadfield_drawcolor, s=pmcont.field_size, marker=pmcont.field_symbol, edgecolor=gadfield_edgecolor,zorder=0)        else:            newpoint = ax4.scatter(point_x+horiz_offset, point_y, color=gadfield_drawcolor, s=pmcont.field_size, marker=pmcont.field_symbol,zorder=0)        siteinc_deg = round(math.degrees(siteinc),1)        gadfield_label_str = "GAD Field\nSite Lat: %s%s\nSite Inc: %s%s" % (sitelat, degree_sign, siteinc_deg, degree_sign)        pm_annot_pointlist.append([newpoint,gadfield_label_str,gadfield_drawcolor])                if pmcont.show_gadfield_label:            step_x = 4            step_y = 8            ax4.text(point_x+step_x+horiz_offset, point_y+step_y, gadfield_label_str,color=pmcont.field_color,fontsize=15,zorder=0)        if pmcont.show_legend:            black_x, = ax4.plot(-1000000, pmcont.field_symbol, color=gadfield_drawcolor, markersize=8,markeredgecolor=gadfield_edgecolor, linestyle="none")            legendicons_list.append(black_x)            legend_label_list.append(gadfield_label_str)    if pmcont.show_popupannotations:        fig.canvas.mpl_connect('motion_notify_event', plotmean_on_plot_hover)        pm_annot = ax4.annotate("", xy=(0,0), xytext=(20,-20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=2000)        pm_annot.set_visible(False)    if pmcont.show_legend:        divider_icon, = ax4.plot(-100000,color='white',marker=".",markersize=0,zorder=0,linestyle="none")        legendicons_list.append(divider_icon)        legend_label_list.append("--------------------")        upperhem_opencircle, = ax4.plot(-100000,color='white',marker=pmcont.point_symbol,markersize=10,markeredgecolor="BLACK",lw=3,zorder=0,linestyle="none")        legendicons_list.append(upperhem_opencircle)        legend_label_list.append("Open Symbols:\nUpper Hemisphere\n(Neg. Inclination)")        lowerhem_closedcircle, = ax4.plot(-100000,color='black',marker=pmcont.point_symbol,markersize=10,markeredgecolor="BLACK",lw=3,zorder=0,linestyle="none")        legendicons_list.append(lowerhem_closedcircle)        legend_label_list.append("Closed Symbols:\nLower Hemisphere\n(Pos. Inclination)")        a95ellipse, = ax4.plot(-100000,color='BLACK',marker=".",markersize=0,markeredgecolor="BLACK",lw=3,zorder=0)        legendicons_list.append(a95ellipse)        legend_label_list.append("%s95 ellipse boundary" % alpha_symbol)                pm_legend = ax4.legend(legendicons_list,legend_label_list,numpoints=1,fontsize=10,loc=2,fancybox=True, shadow=True)        for text in pm_legend.get_texts():            text.set_color(pmcont.legend_color)    if pmcont.show_title:        bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)        ax4.text(1150, 870, "Equal Area Plot of\nComponents and Means of\n%s" % self.datafile, color=pmcont.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)                   self.canvas.draw()    self.plotting_label.destroy()    self.plotting_label = tk1.Label(self.interior, text="Plot Complete.",font=("Helvetica",15))    self.plotting_label.grid(row=12,column=7,sticky='E')    return    def plotsitemeans(self,plotsyet):    global fig, pmcont, ax0, ax1, ax2, ax3, ax4    unbindeverything(self)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)            if plotsyet:        if self.show_zij:            ax0.clear()            ax0.axis('off')        if self.show_3D:            ax1.clear()            ax1.axis('off')        if self.show_eq:            ax2.clear()            ax2.axis('off')        if self.show_jjo:            ax3.clear()            ax3.axis('off')        if self.totalplots == 0:            ax0.clear()            ax0.axis('off')        self.canvas.draw()        self.canvas.show()    self.interior.destroy()    pmcont = plotmeans_setdefaults()       self.interior = tk1.Frame(self.maincanvas)    self.interior_id = self.maincanvas.create_window(0, 0, window=self.interior,anchor=tk1.NW)    fig = Figure(figsize=(mainfigurewidth,mainfigureheight),facecolor='white')    plt.rcParams["font.family"] = "consolas"    plt.axis('off')    self.zerorowcolspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))    self.zerorowcolspacer.grid(row=0, column=0, sticky='NSEW')    self.colspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))    self.colspacer.grid(row=0, column=4, sticky='NSEW')    self.canvas=FigureCanvasTkAgg(fig,self.interior)    self.canvas.get_tk_widget().grid(row=0,column=6,rowspan=12,columnspan=2)    self.canvas.show()    self.toprow_frm = tk1.Frame(self.interior)    self.toprow_frm.grid(row=0,column=0,columnspan=5,sticky='NSEW')    self.introname = tk1.Label(self.toprow_frm, text="Equal Area Plot of Components and Means",font=("Helvetica",15))    self.introname.pack(fill=tk1.X)    self.plotfilemeans_butt = tk1.Button(self.toprow_frm, text="Open .lsq File and Plot", width=15, height=1,command=lambda: plotfilemeans(self,pmcont,"newsite",ax4,False))    self.plotfilemeans_butt.pack(fill=tk1.X,padx=20,pady=2)    CreateToolTip(self.plotfilemeans_butt, 25, -50, 250, self, \    'Open .lsq File and Plot (Ctrl-O).\n\nSupports .lsq files created by Paleomag 3.1.')    self.lastrow_frm = tk1.Frame(self.interior)    self.lastrow_frm.grid(row=12,column=1,columnspan=2)    self.reset_butt = tk1.Button(self.lastrow_frm, text="RESET", width=7, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.startover())    self.reset_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.reset_butt, 15, -80, 180, self, \    'Reset Multiplot (Ctrl-Shift-R).\n\nReturn to splash page and open and view sample or step demagnetization data from a site.')        self.plotsitemeans_butt = tk1.Button(self.lastrow_frm, text="PLOT SITE MEANS", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: plotsitemeans(self,False))    self.plotsitemeans_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.plotsitemeans_butt, 20, -80, 180, self, \    'Plot Site Means (Ctrl-Shift-M).\n\nOpen an .lsq file and plot components, and calculate and plot new means for a site.')    self.calculator_butt = tk1.Button(self.lastrow_frm, text="CALCULATOR", width=11, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: calculator(self))    self.calculator_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.calculator_butt, 18, -125, 250, self, \    'Paleomagnetic Calculator (Ctrl-Shift-C).\n\nCalculate various paleomagnetic statistics including:, Grand Mean VGP, Site VGPs, Site Directions, Mean Directions, Mean Site Location, Paleolatitude, Paleoinclination, Angular Distance, Real distance, Rotated Coordinates, and Convert Coordinate Format.')    self.about_butt = tk1.Button(self.lastrow_frm, text="ABOUT", width=6, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.aboutmultiplot())    self.about_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.about_butt, 10, -110, 180, self, \    'About Multiplot (Ctrl-Shift-A).\n\nDeveloper info and support contact, technical requirements, citation information, and software license and legal/copyright information.')        self.shortcut_butt = tk1.Button(self.lastrow_frm, text="SHORTCUTS", width=10, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.shortcuts())    self.shortcut_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.shortcut_butt, 15, -65, 180, self, \    'Multiplot Shortcuts (Ctrl-Shift-S).\n\nSee a list of keyboard and mouse shortcuts.')    self.quit_butt = tk1.Button(self.lastrow_frm, text="QUIT", width=5, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.quitprogram())    self.quit_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.quit_butt, 10, -20, 180, self, \    'Quit Multiplot (Ctrl-Shift-Q).')    root.bind("<Control-o>", lambda x: plotfilemeans(self,pmcont,"newsite",ax4,False))    root.bind("<Control-O>", lambda x: plotfilemeans(self,pmcont,"newsite",ax4,False))    self.gs = gridspec.GridSpec(1, 1)    ax4 = fig.add_subplot(self.gs[0])                ax4.clear()        plt.subplots_adjust(left=0.05, right=1.15, top=1.15, bottom=0.05)    #fig.tight_layout()    fig.set_tight_layout(True)    ax4.axis('equal')    ax4.axis('off')    ax4.axis([-pmcont.axeslength, pmcont.axeslength, -pmcont.axeslength, pmcont.axeslength])              return################ Calculator Functions ######################def openfile_and_runcalcprocedure(self,procedurename):    if procedurename == calculate_foldtest:        self.filepathandname = openfile(self,"Open Data File","*.lsq, *.xls, .xlsx, .txt,*.*",((".LSQ files, Excel files, Text Files","*.lsq"),(".LSQ files, Excel files, Text Files","*.xls"),(".LSQ files, Excel files, Text Files","*.xlsx"),("*.LSQ files, Excel files, Text Files","*.txt"),("all files","*.*")))    else:        self.filepathandname = openfile(self,"Open Data File","*.xls, .xlsx, .txt,*.*",(("Excel files, Text Files","*.xls"),("Excel files, Text Files","*.xlsx"),("Excel files, Text Files","*.txt"),("all files","*.*")))    if self.filepathandname != "":        if procedurename == calculate_foldtest:            procedurename(self,"File","All")        else:            procedurename(self,"File")    else:        return    returndef select_all(textboxname): #from https://stackoverflow.com/questions/13801557/select-all-text-in-a-text-widget-using-python-3-with-tkinter    textboxname.tag_add(tk1.SEL, "1.0", tk1.END)    textboxname.mark_set(tk1.INSERT, "1.0")    textboxname.see(tk1.INSERT)    return 'break'def control_return_textbox(self,procedurename):    procedurename(self,"Widget")    return 'break'def changeoutputtype(self,outputtype,datatext,finaloutputtext):    self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)        self.verboseoutput_butt.configure(state='normal')    self.conciseoutput_butt.configure(state='normal')    self.sidebysidetype_butt.configure(state='normal')    self.outputdatatextbox_label.destroy()        if outputtype == "Verbose":        self.outputdatatextbox_label = tk1.Label(self.canvas, text="%s (Verbose):" % (datatext), width=135)        self.output_textbox.insert(tk1.END, self.verbose)        self.output_textbox.configure(state='disabled')        self.verboseoutput_butt.configure(state='disabled')        self.savedata = self.verbose        CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \        'Save Output (Ctrl-S).')    elif outputtype == "Concise":        self.outputdatatextbox_label = tk1.Label(self.canvas, text="%s (Concise):" % (datatext), width=135)        self.output_textbox.insert(tk1.END, self.concise)        self.output_textbox.configure(state='disabled')        self.conciseoutput_butt.configure(state='disabled')        self.savedata = self.concise    elif outputtype == "Side-by-side":        self.outputdatatextbox_label = tk1.Label(self.canvas, text="%s (Concise; Input/Output Side-by-Side):" % (datatext), width=135)        self.output_textbox.insert(tk1.END, self.sidebyside)        self.output_textbox.configure(state='disabled')        self.sidebysidetype_butt.configure(state='disabled')        self.savedata = self.sidebyside    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    if finaloutputtext != "":        self.finaloutput_label.destroy()        self.finaloutput_textbox.configure(state='normal')        self.finaloutput_textbox.delete(1.0,tk1.END)                if outputtype == "Verbose":            self.finaloutput_textbox.insert(tk1.END, self.finaloutput_verbose)            self.finaloutput_label = tk1.Label(self.canvas, text="Final Output: %s (Verbose):" % finaloutputtext, width=135)            self.savedata = self.finaloutput_verbose + "\n\n" + self.savedata        elif outputtype == "Concise" or outputtype == "Side-by-side":            self.finaloutput_textbox.insert(tk1.END, self.finaloutput_concise + '\n')            self.finaloutput_label = tk1.Label(self.canvas, text="Final Output: %s (Concise):" % finaloutputtext, width=135)            self.savedata = self.finaloutput_concise + "\n\n" + self.savedata        self.finaloutput_textbox.configure(state='disabled')        self.finaloutput_label.grid(row=1,column=2, sticky='NSEW')    returndef saveoutput(self):    if os.path.isdir(self.filepath):        savefilepathandname = asksaveasfilename(initialdir=self.filepath,title = "Save Output Data",defaultextension=".txt",filetypes = (("txt files","*.txt"),("all files","*.*"))).replace("/","\\")    else:        savefilepathandname = asksaveasfilename(title = "Save Output Data",defaultextension=".txt",filetypes = (("txt files","*.txt"),("all files","*.*"))).replace("/","\\")    if savefilepathandname != "":        savefile = open(savefilepathandname, 'w')    else:        return    savefile.write(self.savedata.encode('latin'))    savefile.close()    returndef get_zeroes(num):    num_str = str(num)    startzeroes = False    if "e" in num_str:        zeroes_str = ""        prev_char = ""        for char in num_str:            if startzeroes:                zeroes_str = zeroes_str + char            if prev_char == "e" and char == "-":                startzeroes = True            prev_char = char        zeroes = int(zeroes_str) - 1    else:        zeroes = 0        for char in num_str:            if char == ".":                startzeroes = True            if startzeroes and char == "0":                zeroes = zeroes + 1            elif startzeroes and char in ['1','2','3','4','5','6','7','8','9']:                break    return(zeroes)def get_decimals(numlist):    decimals = 0    for num in numlist:        num_dec = str(num)[::-1].find('.')        if num_dec > decimals:            decimals = num_dec    return(decimals)def get_vgpfromdecinc(site_lat,site_lon,site_dec,site_inc,a95,a95_check):    site_lat_rad = math.radians(site_lat)    site_lon_rad = math.radians(site_lon%360)    site_dec_rad = math.radians(site_dec%360)    site_inc_rad = math.radians(site_inc)    if site_inc_rad == 0.0:        site_inc_rad = 0.000000001    mag_north_vector = math.cos(site_inc_rad) * math.cos(site_dec_rad)    mag_east_vector = math.cos(site_inc_rad) * math.sin(site_dec_rad)    mag_down_vector = math.sin(site_inc_rad)    magnetic_colat = math.atan(2/math.tan(site_inc_rad))    cos_p = math.cos(magnetic_colat)    raw_vgp_lat_rad = math.asin( (math.sin(site_lat_rad)*math.cos(magnetic_colat)) + (math.cos(site_lat_rad)*math.sin(magnetic_colat)*math.cos(site_dec_rad)) )    if get_zeroes(site_dec_rad) > 10:        vgp_avgdec = 0.0    long_diff = math.asin(math.sin(magnetic_colat)*math.sin(site_dec_rad)/math.cos(raw_vgp_lat_rad))    sinlat_x_sinvgplat = math.sin(site_lat_rad)*math.sin(raw_vgp_lat_rad)    if cos_p < sinlat_x_sinvgplat:        raw_vgp_lon_rad = site_lon_rad + math.pi - long_diff    else:        raw_vgp_lon_rad = site_lon_rad + long_diff    if site_inc_rad < 0:        vgp_lat_rad = -1 * raw_vgp_lat_rad        vgp_lon = math.degrees(math.pi + raw_vgp_lon_rad) % 360    else:        vgp_lat_rad = raw_vgp_lat_rad        vgp_lon = math.degrees(raw_vgp_lon_rad) % 360    vgp_lat = math.degrees(vgp_lat_rad)        if a95_check == "ok":        paleolat = math.atan(math.tan(site_inc_rad)/2)        dp = a95 * (1 + (3 * math.cos(magnetic_colat)**2)) / 2        dm = a95 * math.cos(paleolat) / math.cos(site_inc_rad)    else:        dp = "--"        dm = "--"    return([vgp_lat,vgp_lon,dp,dm])def get_decincfromvgp(site_lat, site_lon, vgp_lat, vgp_lon):    site_lat_rad = math.radians(site_lat)    if site_lon > 180:        site_lon = -360 + site_lon    site_lon_rad = math.radians(site_lon)    vgp_lat_rad = math.radians(vgp_lat)    if vgp_lon > 180:        vgp_lon = -360 + vgp_lon    vgp_lon_rad = math.radians(vgp_lon)##    if vgp_lat_rad == 0.0:##        vgp_lat_rad = 0.000000001    long_diff = site_lon_rad - vgp_lon_rad    magnetic_colat = math.acos( (math.sin(site_lat_rad) * math.sin(vgp_lat_rad)) + (math.cos(site_lat_rad) * math.cos(vgp_lat_rad) * math.cos(long_diff)) )    VGP_colat = (math.pi/2) - vgp_lat_rad    site_colat = (math.pi/2) - site_lat_rad    cos_D = ( math.cos(VGP_colat) - (math.cos(site_colat)*math.cos(magnetic_colat)) ) / ( math.sin(site_colat) * math.sin(magnetic_colat) )    big_C = math.fabs(1-(cos_D**2))    raw_dec = -1 * math.atan(cos_D/math.sqrt(big_C)) + (math.pi/2)     deltalon = vgp_lon_rad - site_lon_rad    if (-math.pi < deltalon < 0) or (deltalon > math.pi):        site_dec = math.degrees((2 * math.pi) - raw_dec)    else:        site_dec = math.degrees(raw_dec)    site_inc = math.degrees(math.atan(2/math.tan(magnetic_colat)))    return([site_dec,site_inc])def get_paleolat(inc):    inc_rad = math.radians(inc)    paleolat = math.degrees(math.atan(math.tan(inc_rad)/2))    return(paleolat)def get_inc(lat):    lat_rad = math.radians(lat)    newinc = math.degrees(math.atan(2*math.tan(lat_rad)))    return(newinc)def get_meancoords(pointlist):    north_vector_sum = 0    east_vector_sum = 0    down_vector_sum = 0    for point in pointlist:        point_lat_rad = math.radians(point[0])        point_lon_rad = math.radians(point[1])        point_north_vector = math.cos(point_lat_rad) * math.cos(point_lon_rad)        north_vector_sum = north_vector_sum + point_north_vector        point_east_vector = math.cos(point_lat_rad) * math.sin(point_lon_rad)        east_vector_sum = east_vector_sum + point_east_vector        point_down_vector = math.sin(point_lat_rad)        down_vector_sum = down_vector_sum + point_down_vector    numpoints = len(pointlist)    R = math.sqrt(north_vector_sum**2 + east_vector_sum**2 + down_vector_sum**2)    if numpoints == int(round(R,10)):        avglat = point[0]        avglon = point[1]        a95 = 0        k = "--"    else:        north_dircos = north_vector_sum / R        east_dircos = east_vector_sum / R        down_dircos = down_vector_sum / R        hypotenuse = math.sqrt(north_dircos**2 + east_dircos**2)        avglat = math.degrees(math.atan2(down_dircos,hypotenuse))        avglon = math.degrees(math.atan2(east_dircos,north_dircos)) % 360        if ( 1 - ((numpoints - R) / R) * ( (20**(1/(numpoints-1))) - 1 ) ) < -1:            a95 = "max -- 180"        else:            a95 = math.degrees( math.acos( 1 - ((numpoints - R) / R) * ( (20**(1/(numpoints-1))) - 1 ) ) )        k = (numpoints - 1) / (numpoints - R)    return([avglat,avglon,a95,k,numpoints])def get_coorddist(p1_lat,p1_lon,p2_lat,p2_lon):    earth_radius = 6371.0    p1_lat_rad = math.radians(p1_lat)    p1_lon_rad = math.radians(p1_lon%360)    p2_lat_rad = math.radians(p2_lat)    p2_lon_rad = math.radians(p2_lon%360)    if p1_lat_rad == p2_lat_rad and p1_lon_rad == p2_lon_rad:        angdist = 0        realdist = 0    else:        if math.fabs((math.degrees(p2_lon_rad) - math.degrees(p1_lon_rad))) > 180:            lon_diff = math.radians(360-math.fabs((math.degrees(p2_lon_rad) - math.degrees(p1_lon_rad))))        else:            lon_diff = math.radians(math.fabs((math.degrees(p2_lon_rad) - math.degrees(p1_lon_rad))))        angdist_rad = math.acos( (math.sin(p1_lat_rad)*math.sin(p2_lat_rad)) + (math.cos(p1_lat_rad)*math.cos(p2_lat_rad)*math.cos(lon_diff)) )        angdist = math.degrees(angdist_rad)        realdist = angdist_rad * earth_radius    return([angdist,realdist])def get_rotatedcoords(axistype,rotation_angle,rotation_pole_axis_lon,rotation_pole_axis_lat,dec,inc):        dec_rad = math.radians(dec)    inc_rad = math.radians(inc)        north = math.cos(dec_rad)*math.cos(inc_rad)    east = math.sin(dec_rad)*math.cos(inc_rad)    down = -math.sin(inc_rad)    if axistype == "Right Strike":        rotation_pole_axis_lon = (rotation_pole_axis_lon + 180) % 360    elif axistype == "Dip Direction":        rotation_pole_axis_lon = (rotation_pole_axis_lon + 90) % 360    rotation_pole_axis_lon_rad = math.radians(rotation_pole_axis_lon) # This is the Euler Pole longitude in radians -- the point around which the coordinate are being rotated.    rotation_pole_axis_lat_rad = math.radians(rotation_pole_axis_lat) # This is the Euler Pole latitude in radians -- the point around which the coordinate are being rotated.        EP_x = math.cos(rotation_pole_axis_lon_rad) * math.cos(rotation_pole_axis_lat_rad) # "ep" stands for Euler Pole    EP_y = math.sin(rotation_pole_axis_lon_rad) * math.cos(rotation_pole_axis_lat_rad)    EP_z = -math.sin(rotation_pole_axis_lat_rad)    rotation_angle_rad = math.radians(rotation_angle)    R11 = (EP_x * EP_x * (1 - math.cos(rotation_angle_rad))) + (math.cos(rotation_angle_rad))    R12 = (EP_x * EP_y * (1 - math.cos(rotation_angle_rad))) - (EP_z * math.sin(rotation_angle_rad))    R13 = (EP_x * EP_z * (1 - math.cos(rotation_angle_rad))) + (EP_y * math.sin(rotation_angle_rad))        R21 = (EP_y * EP_x * (1 - math.cos(rotation_angle_rad))) + (EP_z * math.sin(rotation_angle_rad))    R22 = (EP_y * EP_y * (1 - math.cos(rotation_angle_rad))) + (math.cos(rotation_angle_rad))    R23 = (EP_y * EP_z * (1 - math.cos(rotation_angle_rad))) - (EP_x * math.sin(rotation_angle_rad))    R31 = (EP_z * EP_x * (1 - math.cos(rotation_angle_rad))) - (EP_y * math.sin(rotation_angle_rad))    R32 = (EP_z * EP_y * (1 - math.cos(rotation_angle_rad))) + (EP_x * math.sin(rotation_angle_rad))    R33 = (EP_z * EP_z * (1 - math.cos(rotation_angle_rad))) + (math.cos(rotation_angle_rad))    north_rot = (R11 * north) + (R12 * east) + (R13 * down)    east_rot  = (R21 * north) + (R22 * east) + (R23 * down)    down_rot  = (R31 * north) + (R32 * east) + (R33 * down)    if north_rot > 0:        lon_rad_rot = math.atan(east_rot/north_rot)    else:        lon_rad_rot = math.pi + math.atan(east_rot/north_rot)    lat_rad_rot = -math.atan(down_rot/(math.sqrt(north_rot**2+east_rot**2)))    lon_rot = math.degrees(lon_rad_rot) % 360    lat_rot = math.degrees(lat_rad_rot)        newdirs = [lon_rot,lat_rot]    return(newdirs)def get_convertedcoords(inputdatatype,outputdatatype,inputcoords):    if inputdatatype == "Decimal Degrees":        degrees_in = inputcoords[0]        if outputdatatype == "Decimal Degrees":            degrees_out = degrees_in            newcoords = [degrees_out]        elif outputdatatype == "Degrees, Decimal Minutes":            degrees_out = int(math.modf(degrees_in)[1])            min_out = math.fabs(math.modf(degrees_in)[0]) * 60            newcoords = [degrees_out,min_out]        elif outputdatatype == "Degrees, Minutes, Seconds":            degrees_out = int(math.modf(degrees_in)[1])            min_dec = math.fabs(math.modf(degrees_in)[0]) * 60            min_out = int(math.modf(min_dec)[1])            sec_out = math.modf(min_dec)[0] * 60            newcoords = [degrees_out,min_out,sec_out]    elif inputdatatype == "Degrees, Decimal Minutes":        degrees_in = inputcoords[0]        min_in = inputcoords[1]        if outputdatatype == "Decimal Degrees":            min_dec = min_in / 60            if degrees_in < 0:                 degrees_in = math.fabs(degrees_in)                degrees_out = -(degrees_in + min_dec)            else:                degrees_out = degrees_in + min_dec            newcoords = [degrees_out]        elif outputdatatype == "Degrees, Decimal Minutes":            min_dec = (math.fabs(math.modf(degrees_in)[0]) * 60) + min_in            min_out = min_dec % 60            if degrees_in < 0:                 degrees_in = math.fabs(degrees_in)                degrees_out = -int(math.modf(degrees_in)[1] + (min_dec // 60))            else:                degrees_out = int(math.modf(degrees_in)[1] + (min_dec // 60))            newcoords = [degrees_out,min_out]        elif outputdatatype == "Degrees, Minutes, Seconds":            min_dec = (math.fabs(math.modf(degrees_in)[0]) * 60) + min_in            sec_out = math.modf(min_dec)[0] * 60            min_out = int(math.modf(min_dec)[1] % 60)            if degrees_in < 0:                 degrees_in = math.fabs(degrees_in)                degrees_out = -int(math.modf(degrees_in)[1] + (min_dec // 60))            else:                degrees_out = int(math.modf(degrees_in)[1] + (min_dec // 60))            newcoords = [degrees_out,min_out,sec_out]    elif inputdatatype == "Degrees, Minutes, Seconds":        degrees_in = inputcoords[0]        min_in = inputcoords[1]        sec_in = inputcoords[2]        if outputdatatype == "Decimal Degrees":            sec_dec = sec_in / 60            min_dec = (sec_dec + min_in) / 60            if degrees_in < 0:                degrees_out = -(math.fabs(degrees_in) + min_dec)            else:                degrees_out = degrees_in + min_dec            newcoords = [degrees_out]        elif outputdatatype == "Degrees, Decimal Minutes":            sec_dec = sec_in / 60            deg_dec = math.fabs(math.modf(degrees_in)[0])            min_dec = min_in + ( deg_dec * 60) + sec_dec            min_out = min_dec % 60            if degrees_in < 0:                degrees_out = -int(math.fabs(math.modf(degrees_in)[1]) + (min_dec//60) )            else:                degrees_out = int(math.modf(degrees_in)[1] + (min_dec//60) )            newcoords = [degrees_out,min_out]        elif outputdatatype == "Degrees, Minutes, Seconds":            deg_dec = math.fabs(math.modf(degrees_in)[0])            min_dec = min_in + (deg_dec * 60)            sec_dec = sec_in + (math.modf(min_dec)[0] * 60)            sec_out = sec_dec % 60            min_dec = math.modf(min_dec)[1] + (sec_dec // 60)            min_out = int(min_dec % 60)            if degrees_in < 0:                degrees_out = -int(math.fabs(math.modf(degrees_in)[1]) + (min_dec//60) )            else:                degrees_out = int(math.modf(degrees_in)[1] + (min_dec//60) )            newcoords = [degrees_out,min_out,sec_out]    return(newcoords)def calculate_fullsitestats(self,datasource):    outputdatatype = self.outputdata_var.get()    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    site_lat = str(rowitems[0])                    site_lon = str(rowitems[1])                    site_dec = str(rowitems[2])                    site_inc = str(rowitems[3])                    a95 = str(rowitems[4])                    newline = site_lat + " " + site_lon + " " + site_dec + " " + site_inc + " " + a95                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""    loclist = []    dirlist = []    vgplist = []    decimals_loclist = []    decimals_dirlist = []    decimals_vgplist = []    if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"        self.finaloutput_verbose = "No input data entered."        self.finaloutput_concise = "No input"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                site_lat = float(linelist[0])                site_lon = float(linelist[1])                site_dec = float(linelist[2])                site_inc = float(linelist[3])                if len(linelist) >= 5:                    try:                        a95 = float(linelist[4])                        if a95 >= 0:                            a95_check = "ok"                        else:                            a95_check = "bad number"                    except:                        a95 = "--"                        a95_check = "nan"                else:                    a95 = "--"                    a95_check = "not present"                                       site_lat_ok = (-90 <= site_lat <= 90)                site_lon_ok = (-360 <= site_lon <= 360)                site_dec_ok = (-360 <= site_dec <= 360)                site_inc_ok = (-90 <= site_inc <= 90)                if site_lat_ok and site_lon_ok and site_dec_ok and site_inc_ok:                    loclist.append([site_lat,site_lon])                    decimals_loclist.append(site_lat)                    decimals_loclist.append(site_lon)                                        dirlist.append([site_inc,site_dec])                    decimals_dirlist.append(site_inc)                    decimals_dirlist.append(site_dec)                                        newvgp = get_vgpfromdecinc(site_lat,site_lon,site_dec,site_inc,a95,a95_check)                    decimals = get_decimals([site_lat,site_lon,site_dec,site_inc])                    if decimals < 2:                        decimals = 2                    vgp_lat_print = round(newvgp[0],decimals)                    vgp_lon_print = round(newvgp[1],decimals)                    vgp_lat = newvgp[0]                    vgp_lon = newvgp[1]                    vgplist.append([vgp_lat,vgp_lon])                    decimals_vgplist.append(vgp_lat_print)                    decimals_vgplist.append(vgp_lon_print)                    if a95_check == "ok":                        dp = round(newvgp[2],decimals)                        dm = round(newvgp[3],decimals)                        verbose_text = verbose_text + "VGP Latitude: %s%s, VGP Longitude: %s%s, dp: %s%s, dm: %s%s" % (vgp_lat_print, degree_sign, vgp_lon_print, degree_sign, dp, degree_sign, dm, degree_sign)                        concise_text = concise_text + "%s %s %s %s" % (vgp_lat_print,vgp_lon_print,dp,dm)                    else:                        verbose_text = verbose_text + "VGP Latitude: %s%s, VGP Longitude: %s%s, " % (vgp_lat_print, degree_sign, vgp_lon_print, degree_sign)                        concise_text = concise_text + "%s %s, " % (vgp_lat_print,vgp_lon_print)                if not site_lat_ok or not site_dec_ok or not site_lon_ok or not site_inc_ok:                    verbose_text = verbose_text + "Out of range. "                    concise_text = concise_text + "Out of range "                if not site_lat_ok:                    verbose_text = verbose_text + "Site latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not site_lon_ok:                    verbose_text = verbose_text + "Site longitude must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not site_dec_ok:                    verbose_text = verbose_text + "Site declination must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not site_inc_ok:                    verbose_text = verbose_text + "Site inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if a95_check == "bad number":                    verbose_text = verbose_text + "Input a95 must be %s0%s." % (great_equal_sign,degree_sign,great_equal_sign,degree_sign)                elif a95_check == "nan":                    verbose_text = verbose_text + "Input a95 not a number."                    concise_text = concise_text + "a95 nan"                elif a95_check == "not present":                    verbose_text = verbose_text + "No a95 given"                    concise_text = concise_text + "No a95"            except:                if linelist == []:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Could not calculate; Input not all numbers."                    concise_text = concise_text + "NAN"            self.enterdata_textbox.delete(1.0,tk1.END)            self.enterdata_textbox.insert(tk1.END, entrydata[:-1])            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]                if vgplist != []:            numpoints = len(loclist)            avgloc = get_meancoords(loclist)            decimals_loc = get_decimals(decimals_loclist)            if decimals < 2:                decimals = 2            loc_avglat = round(avgloc[0],decimals)            loc_avglon = round(avgloc[1],decimals)            avgdir = get_meancoords(dirlist)            decimals = get_decimals(decimals_dirlist)            if decimals < 2:                decimals = 2            dir_avgdec = round(avgdir[1],decimals)            dir_avginc = round(avgdir[0],decimals)            try:                dir_a95 = round(avgdir[2],decimals)            except:                dir_a95 = avgdir[2]            try:                dir_k = round(avgdir[3],decimals)            except:                dir_k = avgdir[3]            decimals = get_decimals([dir_avginc])            if decimals <= 1:                decimals = 1            paleolat = round(get_paleolat(dir_avginc),decimals)            if dir_a95 == "max -- 180":                dir_a95_bounds = 0            else:                dir_a95_bounds = dir_a95            upperpaleolat = round(get_paleolat(dir_avginc+dir_a95_bounds),decimals)            lowerpaleolat = round(get_paleolat(dir_avginc-dir_a95_bounds),decimals)                                   if outputdatatype == "Mean VGP from Mean Site VGPs":                meanvgp = get_meancoords(vgplist)                decimals = get_decimals(decimals_vgplist)                avgvgplat = round(meanvgp[0],decimals)                avgvgplon = round(meanvgp[1],decimals)                try:                    vgp_A95 = round(meanvgp[2],decimals)                except:                    vgp_A95 = meanvgp[2]                try:                    vgp_K = round(meanvgp[3],decimals)                except:                    vgp_K = meanvgp[3]                self.finaloutput_verbose = "Mean VGP Latitude: %s%s, Mean VGP Longitude: %s%s, A95: %s%s, K: %s\n" %(avgvgplat,degree_sign,avgvgplon,degree_sign,vgp_A95,degree_sign,vgp_K)                self.finaloutput_concise = "%s   %s, %s, %s\n" %(avgvgplat,avgvgplon,vgp_A95,vgp_K)            elif outputdatatype == "Mean VGP from Mean Dec/Inc":                decimals = get_decimals([loc_avglat,loc_avglon,dir_avgdec,dir_avginc])                if dir_a95 != "max -- 180":                    meanvgp = get_vgpfromdecinc(loc_avglat,loc_avglon,dir_avgdec,dir_avginc,dir_a95,"ok")                    vgp_dp = round(meanvgp[2],decimals)                    vgp_dm = round(meanvgp[3],decimals)                else:                    meanvgp = get_vgpfromdecinc(loc_avglat,loc_avglon,dir_avgdec,dir_avginc,dir_a95,"not ok")                    vgp_dp = "max -- 180"                    vgp_dm = "max -- 180"                avgvgplat = round(meanvgp[0],decimals)                avgvgplon = round(meanvgp[1],decimals)                self.finaloutput_verbose = "Grand Mean VGP Latitude: %s%s, Grand Mean VGP Longitude: %s%s, dp: %s%s, dm: %s%s\n" %(avgvgplat,degree_sign,avgvgplon,degree_sign,vgp_dp,degree_sign,vgp_dm,degree_sign)                self.finaloutput_concise = "%s   %s, %s, %s\n" %(avgvgplat,avgvgplon,vgp_dp,vgp_dm)            self.finaloutput_verbose = self.finaloutput_verbose + "Grand Mean Declination: %s%s, Grand Mean Inclination: %s%s, a95: %s%s, k: %s\n" % (dir_avgdec,degree_sign,dir_avginc,degree_sign,dir_a95,degree_sign,dir_k)            self.finaloutput_verbose = self.finaloutput_verbose + "Avg Site Latitude: %s%s, Avg Site Longitude: %s%s\nPaleolatitude: %s%s, Upper Paleolatitude: %s%s, Lower Paleolatitude: %s%s, N: %s" % (loc_avglat,degree_sign,loc_avglon,degree_sign,paleolat,degree_sign,upperpaleolat,degree_sign,lowerpaleolat,degree_sign,numpoints)            self.finaloutput_concise = self.finaloutput_concise + "%s %s %s %s\n%s %s\n%s %s %s %s" % (dir_avgdec,dir_avginc,dir_a95,dir_k,loc_avglat,loc_avglon,paleolat,upperpaleolat,lowerpaleolat,numpoints)        else:            self.finaloutput_verbose = "No valid input entered."            self.finaloutput_concise = "No valid input"    self.finaloutput_textbox.configure(state='normal')    self.finaloutput_textbox.delete(1.0,tk1.END)    self.finaloutput_textbox.insert(tk1.END, self.finaloutput_verbose)    self.finaloutput_textbox.configure(state='disabled')        self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Individual Site Output: VGP Latitude & Longitudes (+ dp & dm, if site %s95 entered) (Verbose):" % (alpha_symbol), width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Individual Site Output: VGP Latitude & Longitudes (+ dp & dm, if %s95 entered)" % (alpha_symbol),"Mean VGP Latitude & Longitude"))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Individual Site Output: VGP Latitude & Longitudes (+ dp & dm, if %s95 entered)" % (alpha_symbol),"Mean VGP Latitude & Longitude"))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Data Check ", height=3,command=lambda:                                          changeoutputtype(self,"Side-by-side","Data Check: Input VGP Latitude & Longitude","Mean VGP Latitude and Longitude"))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.finaloutput_verbose + "\n\n" + self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: fullsitestats_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: fullsitestats_enter(self))    root.bind("<Control-L>", lambda x: fullsitestats_enter(self))    returndef fullsitestats_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)        self.introname = tk1.Label(self.canvas, text="1. Calculate Full Site Statistics:\n(Set of Site Lat/Lon Coordinates, Dec/Inc Directions (+ %s95s) %s\nGrand Mean VGP (+ A95, K or dp, dm), Mean Dec/Inc (%s95, k), Mean Site Location,\nPaleolatitude + Individual Site VGPs (+ dp, dm))" % (alpha_symbol,right_arrow,alpha_symbol),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_fullsitestats))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_fullsitestats))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_fullsitestats))        self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Site Latitudes & Longitudes, Declinations & Inclinations\n(+ optional %s95):" % (alpha_symbol), width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)        self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.finaloutput_label = tk1.Label(self.canvas, text="Final Output:", width=135)    self.finaloutput_label.grid(row=1,column=2, sticky='NSEW')    self.finaloutput_textbox = tk1.Text(self.canvas,width=100, height=4)    self.finaloutput_textbox.grid(row=2,column=2, sticky='NSEW')    self.finaloutput_textbox.configure(state='disabled')    self.finaloutput_textbox.bind("<Control-Key-a>", lambda x: select_all(self.finaloutput_textbox))    self.finaloutput_textbox.bind("<Control-Key-A>", lambda x: select_all(self.finaloutput_textbox))    self.outputdata_frm = tk1.Frame(self.canvas)    self.outputdata_frm.grid(row=3,column=2,sticky='NSEW')    self.specifyoutputdata_label = tk1.Label(self.outputdata_frm, text="\nSpecify Output Data Type:")    self.specifyoutputdata_label.grid(row=0,column=0, columnspan=2, sticky='NSEW')    self.outputdata_var = tk1.StringVar()    self.outputdata_var.set("Mean VGP from Mean Dec/Inc")    self.meandecinc_radio = tk1.Radiobutton(self.outputdata_frm, text="Mean VGP from Mean Dec/Inc",variable=self.outputdata_var,value="Mean VGP from Mean Dec/Inc")    self.meandecinc_radio.grid(row=1,column=0,sticky='W')    self.out_meansitevgps_radio = tk1.Radiobutton(self.outputdata_frm, text="Mean VGP from Mean Site VGPs",variable=self.outputdata_var,value="Mean VGP from Mean Site VGPs")    self.out_meansitevgps_radio.grid(row=1,column=1,sticky='W')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data:", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate\n", width=2, height=3,command=lambda: calculate_fullsitestats(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_fullsitestats(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_fullsitestats))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_decinctovgp(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    site_lat = str(rowitems[0])                    site_lon = str(rowitems[1])                    site_dec = str(rowitems[2])                    site_inc = str(rowitems[3])                    a95 = str(rowitems[4])                    newline = site_lat + " " + site_lon + " " + site_dec + " " + site_inc + " " + a95                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()            self.verbose = ""    self.concise = ""    self.sidebyside = ""        if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline             try:                linelist = newline.split()                site_lat = float(linelist[0])                site_lon = float(linelist[1])                site_dec = float(linelist[2])                site_inc = float(linelist[3])                if len(linelist) >= 5:                    try:                        a95 = float(linelist[4])                        if a95 >= 0:                            a95_check = "ok"                        else:                            a95_check = "bad number"                    except:                        a95 = "--"                        a95_check = "nan"                else:                    a95 = "--"                    a95_check = "not present"                                        site_lat_ok = (-90 <= site_lat <= 90)                site_lon_ok = (-360 <= site_lon <= 360)                site_dec_ok = (-360 <= site_dec <= 360)                site_inc_ok = (-90 <= site_inc <= 90)                if site_lat_ok and site_lon_ok and site_dec_ok and site_inc_ok:                    newvgp = get_vgpfromdecinc(site_lat,site_lon,site_dec,site_inc,a95,a95_check)                    decimals = get_decimals([site_lat,site_lon,site_dec,site_inc])                    if decimals < 2:                        decimals = 2                    vgp_lat = round(newvgp[0],decimals)                    vgp_lon = round(newvgp[1],decimals)                    if a95_check == "ok":                        dp = round(newvgp[2],decimals)                        dm = round(newvgp[3],decimals)                        verbose_text = verbose_text + "VGP Latitude: %s%s, VGP Longitude: %s%s, dp: %s%s, dm: %s%s" % (vgp_lat, degree_sign, vgp_lon, degree_sign, dp, degree_sign, dm, degree_sign)                        concise_text = concise_text + "%s %s %s %s" % (vgp_lat,vgp_lon,dp,dm)                    else:                        verbose_text = verbose_text + "VGP Latitude: %s%s, VGP Longitude: %s%s, " % (vgp_lat, degree_sign, vgp_lon, degree_sign)                        concise_text = concise_text + "%s %s, " % (vgp_lat,vgp_lon)                if not site_lat_ok or not site_dec_ok or not site_lon_ok or not site_inc_ok:                    verbose_text = verbose_text + "Out of range. "                    concise_text = concise_text + "Out of range "                if not site_lat_ok:                    verbose_text = verbose_text + "Site latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not site_lon_ok:                    verbose_text = verbose_text + "Site longitude must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not site_dec_ok:                    verbose_text = verbose_text + "Site declination must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not site_inc_ok:                    verbose_text = verbose_text + "Site inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if a95_check == "bad number":                    verbose_text = verbose_text + "Input a95 must be %s0%s." % (great_equal_sign,degree_sign,great_equal_sign,degree_sign)                elif a95_check == "nan":                    verbose_text = verbose_text + "Input a95 not a number."                    concise_text = concise_text + "a95 nan"                elif a95_check == "not present":                    verbose_text = verbose_text + "No a95 given"                    concise_text = concise_text + "No a95"            except:                if linelist == []:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Could not calculate; Input not all numbers."                    concise_text = concise_text + "NAN"            self.enterdata_textbox.delete(1.0,tk1.END)            self.enterdata_textbox.insert(tk1.END, entrydata[:-1])            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]           self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: VGP Coordinates (+ dp, dm if %s95 given) (Verbose):" % alpha_symbol, width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: VGP Coordinates (+ dp, dm if %s95 given)" % alpha_symbol,""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: VGP Coordinates (+ dp, dm if %s95 given)" % alpha_symbol,""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda: changeoutputtype(self,"Side-by-side","Output Data: VGP Coordinates (+ dp, dm if %s95 given)" % alpha_symbol,""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: decinctovgp_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: decinctovgp_enter(self))    root.bind("<Control-L>", lambda x: decinctovgp_enter(self))    returndef decinctovgp_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)        self.introname = tk1.Label(self.canvas, text="2. Calculate:\nSite Virtual Geomagnetic Pole (VGP) (+ dp, dm)\n(Site Lat/Lon, Site Dec/Inc (+ %s95) %s Site VGP (+ dp, dm))" % (alpha_symbol,right_arrow),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_decinctovgp))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_decinctovgp))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_decinctovgp))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Site Latitude, Longitude, Declination, & Inclination:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)    self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: VGP Coordinates (+ dp, dm if %s95 given)" % alpha_symbol, width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_decinctovgp(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_decinctovgp(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_decinctovgp))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_vgptodecinc(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    site_lat = str(rowitems[0])                    site_lon = str(rowitems[1])                    vgp_lat = str(rowitems[2])                    vgp_lon = str(rowitems[3])                    newline = site_lat + " " + site_lon + " " + vgp_lat + " " + vgp_lon                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()            self.verbose = ""    self.concise = ""    self.sidebyside = ""        if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline             try:                linelist = newline.split()                site_lat = float(linelist[0])                site_lon = float(linelist[1])                vgp_lat = float(linelist[2])                vgp_lon = float(linelist[3])                site_lat_ok = (-90 <= site_lat <= 90)                site_lon_ok = (-360 <= site_lon <= 360)                vgp_lat_ok = (-90 <= vgp_lat <= 90)                vgp_lon_ok = (-360 <= vgp_lon <= 360)                if site_lat_ok and site_lon_ok and vgp_lat_ok and vgp_lon_ok:                    newdir = get_decincfromvgp(site_lat, site_lon, vgp_lat, vgp_lon)                    decimals = get_decimals([site_lat, site_lon, vgp_lat, vgp_lon])                    if decimals < 2:                        decimals = 2                    site_dec = round(newdir[0],decimals)                    site_inc = round(newdir[1],decimals)                                                                    verbose_text = verbose_text + "Declination: %s%s, Inclination: %s%s" % (site_dec, degree_sign, site_inc, degree_sign)                    concise_text = concise_text + "%s %s" % (site_dec,site_inc)                if not site_lat_ok or not vgp_lon_ok or not site_lon_ok or not vgp_lat_ok:                    verbose_text = verbose_text + "Out of range. "                    concise_text = concise_text + "Out of range"                if not site_lat_ok:                    verbose_text = verbose_text + "Site latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not site_lon_ok:                    verbose_text = verbose_text + "Site longitude must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not vgp_lat_ok:                    verbose_text = verbose_text + "Site inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not vgp_lon_ok:                    verbose_text = verbose_text + "Site declination must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)            except:                if linelist == []:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Could not calculate; Input not all numbers."                    concise_text = concise_text + "NAN"            self.enterdata_textbox.delete(1.0,tk1.END)            self.enterdata_textbox.insert(tk1.END, entrydata[:-1])            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]            self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Declination/Inclination (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: Declination/Inclination",""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: Declination/Inclination",""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda: changeoutputtype(self,"Side-by-side","Output Data: Declination/Inclination",""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: vgptodecinc_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: vgptodecinc_enter(self))    root.bind("<Control-L>", lambda x: vgptodecinc_enter(self))    returndef vgptodecinc_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="3. Calculate:\nSite Declination & Inclination\n(Site Lat/Lon, Site VGP Coordinates %s Site Dec/Inc)" % right_arrow,font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_vgptodecinc))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_vgptodecinc))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_vgptodecinc))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Site Latitude & Longitude,\nand VGP Latitude & Longitude:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)    self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Declination and Inclination", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_vgptodecinc(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_vgptodecinc(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_vgptodecinc))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_meandecinc(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    p1_dec = str(rowitems[0])                    p1_inc = str(rowitems[1])                    newline = p1_dec + " " + p1_inc                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""    dirlist = []    decimals_dirlist = []    if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"        self.finaloutput_verbose = "No input data entered."        self.finaloutput_concise = "No input"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                p1_dec = float(linelist[0])                p1_inc = float(linelist[1])                p1_dec_ok = (-360 <= p1_dec <= 360)                p1_inc_ok = (-90 <= p1_inc <= 90)                if p1_dec_ok and p1_inc_ok:                    dirlist.append([p1_inc,p1_dec])                    decimals_dirlist.append(p1_inc)                    decimals_dirlist.append(p1_dec)                    verbose_text = verbose_text + "Input Data OK."                    concise_text = concise_text + "Input OK"                else:                    concise_text = concise_text + "Out of range"                    if not p1_dec_ok:                        verbose_text = verbose_text + "Declination must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                                        if not p1_inc_ok:                        verbose_text = verbose_text + "Inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)            except:                if linelist == []:                    verbose_text = verbose_text + "No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Input not all numbers."                    concise_text = concise_text + "NAN"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]                if dirlist != []:            meancoords = get_meancoords(dirlist)            decimals = get_decimals(decimals_dirlist)            if decimals < 2:                decimals = 2            avginc = round(meancoords[0],decimals)            avgdec = round(meancoords[1],decimals)            try:                a95 = round(meancoords[2],decimals)            except:                a95 = meancoords[2]            try:                k = round(meancoords[3],decimals)            except:                k = meancoords[3]            numpoints = meancoords[4]            self.finaloutput_verbose = "Mean Declination: %s%s, Mean Inclination: %s%s\na95: %s%s\nk: %s\nN = %s" %(avgdec,degree_sign,avginc,degree_sign,a95,degree_sign,k,numpoints)            self.finaloutput_concise = "%s   %s\n%s\n%s\n%s" %(avgdec,avginc,a95,k,numpoints)        else:            self.finaloutput_verbose = "No valid input entered."            self.finaloutput_concise = "No valid input"    self.finaloutput_textbox.configure(state='normal')    self.finaloutput_textbox.delete(1.0,tk1.END)    self.finaloutput_textbox.insert(tk1.END, self.finaloutput_verbose)    self.finaloutput_textbox.configure(state='disabled')        self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Data Check: Input Declination & Inclination (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Data Check: Input Declination & Inclination","Mean Declination & Inclination"))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Data Check: Input Declination & Inclination","Mean Declination & Inclination"))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Data Check ", height=3,command=lambda:                                          changeoutputtype(self,"Side-by-side","Data Check: Input Declination & Inclination","Mean Latitude and Longitude"))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.finaloutput_verbose + "\n\n" + self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: meandecinc_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: meandecinc_enter(self))    root.bind("<Control-L>", lambda x: meandecinc_enter(self))    returndef meandecinc_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="4. Calculate:\nMean Declination & Inclination (+ %s95, k)\n(Set of Site Mean Dec/Inc Directions %s Mean Dec/Inc + %s95, k)" % (alpha_symbol,right_arrow,alpha_symbol),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_meandecinc))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_meandecinc))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_meandecinc))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Declinations & Inclinations:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)    self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.finaloutput_label = tk1.Label(self.canvas, text="Final Output", width=135)    self.finaloutput_label.grid(row=1,column=2, sticky='NSEW')    self.finaloutput_textbox = tk1.Text(self.canvas,width=100, height=4)    self.finaloutput_textbox.grid(row=2,column=2, sticky='NSEW')    self.finaloutput_textbox.configure(state='disabled')    self.finaloutput_textbox.bind("<Control-Key-a>", lambda x: select_all(self.finaloutput_textbox))    self.finaloutput_textbox.bind("<Control-Key-A>", lambda x: select_all(self.finaloutput_textbox))    self.spacer4_label = tk1.Label(self.canvas, text="  ")    self.spacer4_label.grid(row=3,column=2, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Input Data Check", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=100)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_meandecinc(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_meandecinc(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_meandecinc))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_meanvgp(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    vgp_lat = str(rowitems[0])                    vgp_lon = str(rowitems[1])                    newline = vgp_lat + " " + vgp_lon                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""    vgplist = []    decimals_vgplist = []    if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"        self.finaloutput_verbose = "No input data entered."        self.finaloutput_concise = "No input"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                vgp_lat = float(linelist[0])                vgp_lon = float(linelist[1])                vgp_lat_ok = (-90 <= vgp_lat <= 90)                vgp_lon_ok = (-360 <= vgp_lon <= 360)                if vgp_lat_ok and vgp_lon_ok:                    vgplist.append([vgp_lat,vgp_lon])                    decimals_vgplist.append(vgp_lat)                    decimals_vgplist.append(vgp_lon)                    verbose_text = verbose_text + "Input Data OK."                    concise_text = concise_text + "Input OK"                else:                    concise_text = concise_text + "Out of range"                    if not vgp_lat_ok:                        verbose_text = verbose_text + "VGP Latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                    if not vgp_lon_ok:                        verbose_text = verbose_text + "VGP Longitude must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                                except:                if linelist == []:                    verbose_text = verbose_text + "No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Input not all numbers."                    concise_text = concise_text + "NAN"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]                if vgplist != []:            meancoords = get_meancoords(vgplist)            decimals = get_decimals(decimals_vgplist)            if decimals < 2:                decimals = 2            avgvgplat = round(meancoords[0],decimals)            avgvgplon = round(meancoords[1],decimals)            try:                a95 = round(meancoords[2],decimals)            except:                a95 = meancoords[2]            try:                k = round(meancoords[3],decimals)            except:                k = meancoords[3]            numpoints = meancoords[4]            self.finaloutput_verbose = "Mean VGP Latitude: %s%s, Mean VGP Longitude: %s%s\nA95: %s%s\nK: %s\nN: %s" %(avgvgplat,degree_sign,avgvgplon,degree_sign,a95,degree_sign,k,numpoints)            self.finaloutput_concise = "%s   %s\n%s\n%s\n%s" %(avgvgplat,avgvgplon,a95,k,numpoints)        else:            self.finaloutput_verbose = "No valid input entered."            self.finaloutput_concise = "No valid input"    self.finaloutput_textbox.configure(state='normal')    self.finaloutput_textbox.delete(1.0,tk1.END)    self.finaloutput_textbox.insert(tk1.END, self.finaloutput_verbose)    self.finaloutput_textbox.configure(state='disabled')        self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Data Check: Input Latitude & Longitude (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Data Check: Input VGP Latitude & Longitude","Mean VGP Latitude & Longitude"))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Data Check: Input VGP Latitude & Longitude","Mean VGP Latitude & Longitude"))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Data Check ", height=3,command=lambda:                                          changeoutputtype(self,"Side-by-side","Data Check: Input VGP Latitude & Longitude","Mean VGP Latitude and Longitude"))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.finaloutput_verbose + "\n\n" + self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: meanvgp_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: meanvgp_enter(self))    root.bind("<Control-L>", lambda x: meanvgp_enter(self))    returndef meanvgp_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="5. Calculate:\nMean Virtual Geomagnetic Pole (VGP) (+ A95, K)\n(Set of Site VGPs %s Mean VGP, + A95, K)" % (right_arrow),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_meanvgp))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_meanvgp))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_meanvgp))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input VGP Latitudes & Longitudes:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)        self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.finaloutput_label = tk1.Label(self.canvas, text="Final Output", width=135)    self.finaloutput_label.grid(row=1,column=2, sticky='NSEW')    self.finaloutput_textbox = tk1.Text(self.canvas,width=100, height=4)    self.finaloutput_textbox.grid(row=2,column=2, sticky='NSEW')    self.finaloutput_textbox.configure(state='disabled')    self.finaloutput_textbox.bind("<Control-Key-a>", lambda x: select_all(self.finaloutput_textbox))    self.finaloutput_textbox.bind("<Control-Key-A>", lambda x: select_all(self.finaloutput_textbox))    self.spacer4_label = tk1.Label(self.canvas, text="  ")    self.spacer4_label.grid(row=3,column=2, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Data Check", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_meanvgp(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_meanvgp(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_meanvgp))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_inctopaleolat(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    inputinc = str(rowitems[0])                    a95 = str(rowitems[1])                    newline = inputinc + " " + a95                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""        if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                inc = float(linelist[0])                if len(linelist) >= 2:                    try:                        a95 = float(linelist[1])                        if a95 >= 0:                            a95_check = "ok"                        else:                            a95_check = "bad number"                    except:                        a95 = "--"                        a95_check = "nan"                else:                    a95 = "--"                    a95_check = "not present"                if -90 <= inc <= 90:                    decimals = get_decimals([inc])                    if decimals <= 1:                        decimals = 1                    paleolat = round(get_paleolat(inc),decimals)                    if a95_check == "ok":                        upperpaleolat = round(get_paleolat(inc+a95),decimals)                        lowerpaleolat = round(get_paleolat(inc-a95),decimals)                        verbose_text = verbose_text + "Input Inclination: %s%s; Paleolatitude: %s%s; Upper Paleolatitude: %s%s; Lower Paleolatitude: %s%s" % (inc,degree_sign,paleolat,degree_sign,upperpaleolat,degree_sign,lowerpaleolat, degree_sign)                        concise_text = concise_text + "%s %s %s" % (paleolat, upperpaleolat, lowerpaleolat)                    else:                        verbose_text = verbose_text + "Input Inclination: %s%s; Paleolatitude: %s%s, " % (inc,degree_sign,paleolat,degree_sign)                        concise_text = concise_text + "%s " % paleolat                elif inc > 90:                    verbose_text = verbose_text + "Invalid input inclination. Inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                    concise_text = concise_text + "Invalid inclination"                elif inc < -90:                    verbose_text = verbose_text + "Invalid input inclination. Inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                    concise_text = concise_text + "Invalid inclination"                if a95_check == "bad number":                    verbose_text = verbose_text + "Input a95 must be %s0%s." % (great_equal_sign,degree_sign,great_equal_sign,degree_sign)                elif a95_check == "nan":                    verbose_text = verbose_text + "Input a95 not a number."                    concise_text = concise_text + "a95 nan"                elif a95_check == "not present":                    verbose_text = verbose_text + "No a95 given"                    concise_text = concise_text + "No a95"            except:                if len(linelist) == 0:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input\n"                else:                    verbose_text = verbose_text + "Could not calculate; Input not a number."                    concise_text = concise_text + "NAN\n"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]            self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Paleolatitude (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: Paleolatitude",""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: Paleolatitude",""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda: changeoutputtype(self,"Side-by-side","Output Data: Paleolatitude",""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: inctopaleolat_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: inctopaleolat_enter(self))    root.bind("<Control-L>", lambda x: inctopaleolat_enter(self))    returndef inctopaleolat_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="6. Calculate:\nPaleolatitude\n(Inclination (+ %s95) %s Paleolatitude (+ limits))" % (alpha_symbol, right_arrow),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_inctopaleolat))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_inctopaleolat))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_inctopaleolat))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Inclination (+ %s95):" % (alpha_symbol), width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)        self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Paleolatitude", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')       self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_inctopaleolat(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_inctopaleolat(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_inctopaleolat))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_lattoinc(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    inputinc = str(rowitems[0])                    a95 = str(rowitems[1])                    newline = inputinc + " " + a95                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""        if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                lat = float(linelist[0])                if len(linelist) >= 2:                    try:                        a95 = float(linelist[1])                        if a95 >= 0:                            a95_check = "ok"                        else:                            a95_check = "bad number"                    except:                        a95 = "--"                        a95_check = "nan"                else:                    a95 = "--"                    a95_check = "not present"                if -90 <= lat <= 90:                    decimals = get_decimals([lat])                    if decimals <= 1:                        decimals = 1                    paleoinc = round(get_inc(lat),decimals)                    if a95_check == "ok":                        upperpaleoinc = round(get_inc(lat+a95),decimals)                        lowerpaleoinc = round(get_inc(lat-a95),decimals)                        verbose_text = verbose_text + "Input Latitude: %s%s; Paleinclination: %s%s; Upper Paleoinclination: %s%s; Lower Paleoinclination: %s%s" % (lat,degree_sign,paleoinc,degree_sign,upperpaleoinc,degree_sign,lowerpaleoinc, degree_sign)                        concise_text = concise_text + "%s %s %s" % (paleoinc, upperpaleoinc, lowerpaleoinc)                    else:                        verbose_text = verbose_text + "Input Latitude: %s%s; Paleoinclination: %s%s, " % (lat,degree_sign,paleoinc,degree_sign)                        concise_text = concise_text + "%s " % paleoinc                elif lat > 90:                    verbose_text = verbose_text + "Invalid input latitude. Latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                    concise_text = concise_text + "Invalid latitude"                elif lat < -90:                    verbose_text = verbose_text + "Invalid input latitude. Latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                    concise_text = concise_text + "Invalid latitude"                if a95_check == "bad number":                    verbose_text = verbose_text + "Input a95 must be %s0%s." % (great_equal_sign,degree_sign,great_equal_sign,degree_sign)                elif a95_check == "nan":                    verbose_text = verbose_text + "Input a95 not a number."                    concise_text = concise_text + "a95 nan"                elif a95_check == "not present":                    verbose_text = verbose_text + "No a95 given"                    concise_text = concise_text + "No a95"            except:                if len(linelist) == 0:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input\n"                else:                    verbose_text = verbose_text + "Could not calculate; Input not a number."                    concise_text = concise_text + "NAN\n"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]            self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Inclination (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: Inclination",""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: Inclination",""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda: changeoutputtype(self,"Side-by-side","Output Data: Inclination",""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: lattoinc_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: lattoinc_enter(self))    root.bind("<Control-L>", lambda x: lattoinc_enter(self))    returndef lattoinc_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="7. Calculate:\nInclination\n(Latitude %s Inclination)" % (right_arrow),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_lattoinc))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_lattoinc))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_lattoinc))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Latitude (+ %s95):" % alpha_symbol, width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)        self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Inclination", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_lattoinc(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_lattoinc(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_lattoinc))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_angdist(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    p1_lat = str(rowitems[0])                    p1_lon = str(rowitems[1])                    p2_lat = str(rowitems[2])                    p2_lon = str(rowitems[3])                    newline = p1_lat + " " + p1_lon + " " + p2_lat + " " + p2_lon                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""        if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline             try:                linelist = newline.split()                p1_lat = float(linelist[0])                p1_lon = float(linelist[1])                p2_lat = float(linelist[2])                p2_lon = float(linelist[3])                p1_lat_ok = (-90 <= p1_lat <= 90)                p2_lat_ok = (-90 <= p2_lat <= 90)                p1_lon_ok = (-360 <= p1_lon <= 360)                p2_lon_ok = (-360 <= p2_lon <= 360)                if p1_lat_ok and p2_lat_ok and p1_lon_ok and p2_lon_ok:                    decimals = get_decimals([p1_lat,p1_lon,p2_lat,p2_lon])                    if decimals < 5:                        decimals = 5                    angdist = round(get_coorddist(p1_lat,p1_lon,p2_lat,p2_lon)[0],decimals)                    verbose_text = verbose_text + "Angular Distance: %s%s." % (angdist, degree_sign)                    concise_text = concise_text + "%s" % angdist                if not p1_lat_ok or not p2_lat_ok or not p1_lon_ok or not p2_lon_ok:                    verbose_text = verbose_text + "Out of range. "                    concise_text = concise_text + "Out of range"                if not p1_lat_ok or not p2_lat_ok:                    verbose_text = verbose_text + "Latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not p1_lon_ok or not p2_lon_ok:                    verbose_text = verbose_text + "Longitude must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)            except:                if linelist == []:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Could not calculate; Input not all numbers."                    concise_text = concise_text + "NAN"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]            self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Angular Distance (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: Angular Distance",""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: Angular Distance",""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda: changeoutputtype(self,"Side-by-side","Output Data: Angular Distance",""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: angdist_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: angdist_enter(self))    root.bind("<Control-L>", lambda x: angdist_enter(self))    returndef angdist_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="8. Calculate:\nAngular Distance (%s)\n(Between Two Lat/Lon Coordinates or Dec/Inc Components)" % (degree_sign),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_angdist))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_angdist))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_angdist))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Latitude & Longitude of Two Points:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)        self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Angular Distance", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_angdist(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_angdist(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_angdist))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_realdist(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    p1_lat = str(rowitems[0])                    p1_lon = str(rowitems[1])                    p2_lat = str(rowitems[2])                    p2_lon = str(rowitems[3])                    newline = p1_lat + " " + p1_lon + " " + p2_lat + " " + p2_lon                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()            self.verbose = ""    self.concise = ""    self.sidebyside = ""    if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline             try:                linelist = newline.split()                p1_lat = float(linelist[0])                p1_lon = float(linelist[1])                p2_lat = float(linelist[2])                p2_lon = float(linelist[3])                p1_lat_ok = (-90 <= p1_lat <= 90)                p2_lat_ok = (-90 <= p2_lat <= 90)                p1_lon_ok = (-360 <= p1_lon <= 360)                p2_lon_ok = (-360 <= p2_lon <= 360)                if p1_lat_ok and p2_lat_ok and p1_lon_ok and p2_lon_ok:                    realdist = round(get_coorddist(p1_lat,p1_lon,p2_lat,p2_lon)[1], 3)                    verbose_text = verbose_text + "Real Distance: %s km." % realdist                    concise_text = concise_text + "%s" % realdist                if not p1_lat_ok or not p2_lat_ok or not p1_lon_ok or not p2_lon_ok:                    verbose_text = verbose_text + "Out of range. "                    concise_text = concise_text + "Out of range"                if not p1_lat_ok or not p2_lat_ok:                    verbose_text = verbose_text + "Latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not p1_lon_ok or not p2_lon_ok:                    verbose_text = verbose_text + "Longitude must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)            except:                if linelist == []:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Could not calculate; Input not all numbers."                    concise_text = concise_text + "NAN"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]            self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Real Distance (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: Real Distance",""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: Real Distance",""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda: changeoutputtype(self,"Side-by-side","Output Data: Real Distance",""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: realdist_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: realdist_enter(self))    root.bind("<Control-L>", lambda x: realdist_enter(self))    returndef realdist_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="9. Calculate:\nReal Distance (km)\n(Between Two Lat/Lon Coordinates)",font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_realdist))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_realdist))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_realdist))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Latitude & Longitude of Two Points:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)        self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Real Distance (Km)", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))    self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_realdist(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_realdist(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_realdist))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_meanlatlon(self,datasource):    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    p1_lat = str(rowitems[0])                    p1_lon = str(rowitems[1])                    newline = p1_lat + " " + p1_lon                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""    pointlist = []    decimals_pointlist = []    if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"        self.finaloutput_verbose = "No input data entered."        self.finaloutput_concise = "No input"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                p1_lat = float(linelist[0])                p1_lon = float(linelist[1])                p1_lat_ok = (-90 <= p1_lat <= 90)                p1_lon_ok = (-360 <= p1_lon <= 360)                if p1_lat_ok and p1_lon_ok:                    pointlist.append([p1_lat,p1_lon])                    decimals_pointlist.append(p1_lat)                    decimals_pointlist.append(p1_lon)                    verbose_text = verbose_text + "Input Data OK."                    concise_text = concise_text + "Input OK"                else:                    concise_text = concise_text + "Out of range"                    if not p1_lat_ok:                        verbose_text = verbose_text + "Latitude must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                    if not p1_lon_ok:                        verbose_text = verbose_text + "Longitude must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                                except:                if linelist == []:                    verbose_text = verbose_text + "No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Input not all numbers."                    concise_text = concise_text + "NAN"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]                if pointlist != []:            meancoords = get_meancoords(pointlist)            decimals = get_decimals(decimals_pointlist)            if decimals < 2:                decimals = 2            avglat = round(meancoords[0], decimals)            avglon = round(meancoords[1], decimals)            numpoints = meancoords[4]            self.finaloutput_verbose = "Mean Latitude: %s%s, Mean Longitude: %s%s\nN: %s" %(avglat,degree_sign,avglon,degree_sign,numpoints)            self.finaloutput_concise = "%s   %s\n%s" %(avglat,avglon,numpoints)        else:            self.finaloutput_verbose = "No valid input entered."            self.finaloutput_concise = "No valid input"                self.finaloutput_textbox.configure(state='normal')    self.finaloutput_textbox.delete(1.0,tk1.END)    self.finaloutput_textbox.insert(tk1.END, self.finaloutput_verbose)    self.finaloutput_textbox.configure(state='disabled')        self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Data Check: Input Latitude & Longitude (Verbose):", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Data Check: Input Latitude & Longitude","Mean Latitude and Longitude"))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Data Check: Input Latitude & Longitude","Mean Latitude and Longitude"))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda:                                          changeoutputtype(self,"Side-by-side","Data Check: Input Latitude & Longitude","Mean Latitude and Longitude"))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.finaloutput_verbose + "\n\n" + self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: meanlatlon_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: meanlatlon_enter(self))    root.bind("<Control-L>", lambda x: meanlatlon_enter(self))    returndef meanlatlon_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="10. Calculate:\nMean Latitude & Longitude\n(Set of Lat/Lon Coordinates %s Mean Lat/Lon)" % (right_arrow),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_meanlatlon))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_meanlatlon))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_meanlatlon))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Coordinates (Latitude & Longitude):", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)        self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.finaloutput_label = tk1.Label(self.canvas, text="Final Output", width=100)    self.finaloutput_label.grid(row=1,column=2, sticky='NSEW')    self.finaloutput_textbox = tk1.Text(self.canvas,width=100, height=4)    self.finaloutput_textbox.grid(row=2,column=2, sticky='NSEW')    self.finaloutput_textbox.configure(state='disabled')    self.finaloutput_textbox.bind("<Control-Key-a>", lambda x: select_all(self.finaloutput_textbox))    self.finaloutput_textbox.bind("<Control-Key-A>", lambda x: select_all(self.finaloutput_textbox))    self.spacer4_label = tk1.Label(self.canvas, text="  ")    self.spacer4_label.grid(row=3,column=2, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Data Check", width=135)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_meanlatlon(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_meanlatlon(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_meanlatlon))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returndef calculate_rotatecoords(self,datasource):    inputdatatype = self.inputdata_var.get()    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    if inputdatatype == "Core Coordinates":                        core_dec = str(rowitems[0])                        core_inc = str(rowitems[1])                        core_plate_strike = str(rowitems[2])                        core_plate_dip = str(rowitems[3])                        site_strike = str(rowitems[4])                        site_dip = str(rowitems[5])                        newline = core_dec + " " + core_inc + " " + core_plate_strike + " " + core_plate_dip + " " + site_dip + " " + site_strike                    elif inputdatatype == "Geographic Coordinates":                        geog_dec = str(rowitems[0])                        geog_inc = str(rowitems[1])                        site_strike = str(rowitems[2])                        site_dip = str(rowitems[3])                        newline = geog_dec + " " + geog_inc + " " + site_dip + " " + site_strike                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""        if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                if inputdatatype == "Core Coordinates":                    core_dec = float(linelist[0])                    core_inc = float(linelist[1])                    core_plate_strike = float(linelist[2])                    core_plate_dip = float(linelist[3])                    dotilt = False                    if len(linelist) > 4:                        site_strike = float(linelist[4])                        site_strike_ok = (-360 <= site_strike <= 360)                        if len(linelist) > 5:                            site_dip = float(linelist[5])                            site_dip_ok = (site_dip >= 0)                            if site_dip_ok and site_strike_ok:                                dotilt = True                                        core_dec_ok = (-360 <= core_dec <= 360)                    core_inc_ok = (-90 <= core_inc <= 90)                    core_plate_strike_ok = (0 <= core_plate_strike <= 360)                    core_plate_dip_ok = (0 <= core_plate_dip)                                    if core_dec_ok and core_inc_ok and core_plate_strike_ok and core_plate_dip_ok:                        try:                            offset_list = self.offset_entrybox.get().split()                            offset_str = offset_list[0]                            offset = float(offset_str)                            offset_ok = (-360 <= offset <= 360)                            self.offset_entrybox.delete(0,tk1.END)                            self.offset_entrybox.insert(tk1.END, offset_str)                        except:                            self.offset_entrybox.delete(0,tk1.END)                            self.offset_entrybox.insert(tk1.END, "90")                            offset = 90                        strike_rotation_angle = (offset - core_plate_strike) % 360                        newgeogset_strike = get_rotatedcoords("Left Strike",strike_rotation_angle,0,90,core_dec,core_inc)                        decimals = get_decimals([core_plate_dip,core_plate_strike,core_dec,core_inc])                                                if decimals < 2:                            decimals = 2                        dip_rotation_angle = -1 * core_plate_dip                        newgeogset = get_rotatedcoords("Left Strike",dip_rotation_angle,core_plate_strike,0,newgeogset_strike[0],newgeogset_strike[1])                        geog_dec = round(newgeogset[0], decimals)                        geog_inc = round(newgeogset[1], decimals)                        verbose_text = verbose_text + "Geographic Dec.: %s%s, Geographic Inc.: %s%s" % (geog_dec, degree_sign, geog_inc, degree_sign)                        concise_text = concise_text + "%s %s" % (geog_dec, geog_inc)                        if dotilt:                            dip_rotation_angle = -1 * site_dip                            newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle,site_strike,0,geog_dec,geog_inc)                            decimals = get_decimals([site_dip,site_strike,geog_dec,geog_inc])                            if decimals < 2:                                decimals = 2                                tilt_dec = round(newtiltset[0], decimals)                            tilt_inc = round(newtiltset[1], decimals)                                                        verbose_text = verbose_text + ", Tilt-Corrected Dec.: %s%s, Tilt-Corrected Inc.: %s%s" % (tilt_dec, degree_sign, tilt_inc, degree_sign)                            concise_text = concise_text + " %s %s" % (tilt_dec, tilt_inc)                    else:                        if not core_dec_ok:                            verbose_text = verbose_text + "Core declination must be %s360%s, %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                        if not core_inc_ok:                            verbose_text = verbose_text + "Core inclination must be %s90%s, %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                        if not core_plate_strike_ok:                            verbose_text = verbose_text + "Core plate strike must be %s0%s, %s360%s. " % (great_equal_sign,degree_sign,less_equal_sign,degree_sign)                        if not core_plate_dip_ok:                            verbose_text = verbose_text + "Core plate dip must be %s0%s, %s90%s. " % (great_equal_sign,degree_sign,less_equal_sign,degree_sign)                        if dotilt and not site_dip_ok:                            verbose_text = verbose_text + "Site dip must be %s0%s, %s90%s. " % (great_equal_sign,degree_sign,less_equal_sign,degree_sign)                        if dotilt and not site_strike_ok:                            verbose_text = verbose_text + "Site dip must be %s360%s, %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                elif inputdatatype == "Geographic Coordinates":                    geog_dec = float(linelist[0])                    geog_inc = float(linelist[1])                    site_strike = float(linelist[2])                    site_dip = float(linelist[3])                    geog_dec_ok = (-360 <= geog_dec <= 360)                    geog_inc_ok = (-90 <= geog_inc <= 90)                    site_dip_ok = (0 <= site_dip <= 90)                    site_strike_ok = (-360 <= site_strike <= 360)                    if geog_dec_ok and geog_inc_ok and site_strike_ok and site_dip_ok:                        dip_rotation_angle = -site_dip                        newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle, site_strike, 0, geog_dec, geog_inc)                        decimals = get_decimals([geog_dec,geog_inc,site_strike,site_dip])                                                tilt_dec = round(newtiltset[0], decimals)                        tilt_inc = round(newtiltset[1], decimals)                        verbose_text = verbose_text + "Tilt-Corrected Dec.: %s%s, Tilt-Corrected Inc.: %s%s" % (tilt_dec, degree_sign, tilt_inc, degree_sign)                        concise_text = concise_text + " %s %s" % (tilt_dec, tilt_inc)                    else:                        if not geog_dec_ok:                            verbose_text = verbose_text + "Geographic Declination strike must be %s-360%s, %s360%s. " % (great_equal_sign,degree_sign,less_equal_sign,degree_sign)                        if not geog_inc_ok:                            verbose_text = verbose_text + "Geographic Inclination must be %s-90%s, %s90%s. " % (great_equal_sign,degree_sign,less_equal_sign,degree_sign)                        if not site_strike_ok:                            verbose_text = verbose_text + "Site strike must be %s360%s, %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                        if not site_dip_ok:                            verbose_text = verbose_text + "Site dip must be %s0%s, %s90%s. " % (great_equal_sign,degree_sign,less_equal_sign,degree_sign)            except:                if linelist == []:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Could not calculate; Input not all numbers."                    concise_text = concise_text + "NAN"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]    self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Rotated Coordinates (Verbose):", width=120)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: Convert Coordinates (from %s)" % (inputdatatype),""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: Convert Coordinates (from %s)" % (inputdatatype),""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda:                                          changeoutputtype(self,"Side-by-side","Output Data: Convert Coordinates (from %s)" % (inputdatatype),""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: rotatecoords_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: rotatecoords_enter(self))    root.bind("<Control-L>", lambda x: rotatecoords_enter(self))    returndef disablecpsoffset(self):    if self.inputdata_var.get() == "Geographic Coordinates":        self.offset_entrybox.configure(state='disabled')        else:        self.offset_entrybox.configure(state='normal')    returndef rotatecoords_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)        self.introname = tk1.Label(self.canvas, text="11. Calculate:\nRotated Coordinates:\n(Core Coordinates %s Geographic Coordinates %s Tilt-Corrected)" % (right_arrow, right_arrow),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_rotatecoords))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_rotatecoords))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_rotatecoords))    self.inputdata_frm = tk1.Frame(self.canvas)    self.inputdata_frm.grid(row=3,column=0,columnspan=4,sticky='NSEW')    self.specifyinputdata_label = tk1.Label(self.inputdata_frm, text="Specify Input Data Type:")    self.specifyinputdata_label.grid(row=0,column=0, sticky='W')    self.inputdata_var = tk1.StringVar()    self.inputdata_var.set("Core Coordinates")    self.corecoord_radio = tk1.Radiobutton(self.inputdata_frm, text="Core Coordinates: (Core Dec, Core Inc, Core Plate Strike, Core Plate Dip, optional Site Bedding Rotation Axis, optional Site Dip)\t",variable=self.inputdata_var,value="Core Coordinates", command=lambda: disablecpsoffset(self))    self.corecoord_radio.grid(row=1,column=0,sticky='W')    self.geocoord_radio = tk1.Radiobutton(self.inputdata_frm, text="Geographic Coordinates: (Geographic Dec, Geographic Inc, Site Bedding Rotation Axis, Site Dip)\t",variable=self.inputdata_var,value="Geographic Coordinates",command=lambda: disablecpsoffset(self))    self.geocoord_radio.grid(row=2,column=0,sticky='W')    self.newbeddingstrike_label = tk1.Label(self.inputdata_frm, text="Select Type of Bedding Rotation Axis:")    self.newbeddingstrike_label.grid(row=3,column=0,sticky='W')    self.inputstrike_frm = tk1.Frame(self.inputdata_frm)    self.inputstrike_frm.grid(row=4,column=0,sticky='W')        self.rotationaxis_var = tk1.StringVar()    self.rotationaxis_var.set("Right Strike")    self.rightstrike_radio = tk1.Radiobutton(self.inputstrike_frm, text="Right-Handed Strike   ",variable=self.rotationaxis_var,value="Right Strike")    self.rightstrike_radio.pack(side=tk1.LEFT)    CreateToolTip(self.rightstrike_radio, 30, -50, 250, self, \    'Right-Handed strike means thumb of the right hand points in the strike direction and fingers point in dip direction. Note: BOTH Rapid Squid and JR6 Spinner use right-handed strike for bedding.')    self.leftstrike_radio = tk1.Radiobutton(self.inputstrike_frm, text="Left-Handed Strike   ",variable=self.rotationaxis_var,value="Left Strike")    self.leftstrike_radio.pack(side=tk1.LEFT)    CreateToolTip(self.leftstrike_radio, 30, -50, 250, self, \    'Left-Handed strike means thumb of the left hand points in the strike direction and fingers point in dip direction.')                          self.dipdir_radio = tk1.Radiobutton(self.inputstrike_frm, text="Dip Direction   ",variable=self.rotationaxis_var,value="Dip Direction")    self.dipdir_radio.pack(side=tk1.LEFT)    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Data:\nCore Declination, Core Inclination, Core Plate Strike, Core Plate Dip\n(+ optional Site Bedding Strike, Site Bedding Dip)", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)    self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))        self.spacer2_label = tk1.Label(self.canvas, text="   ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.offset_frm = tk1.Frame(self.canvas)    self.offset_frm.grid(row=2,column=2,sticky='W')    self.offset_label = tk1.Label(self.offset_frm, text="Enter Core Plate Strike Offset\n(default is 90, unless another number is entered):")    self.offset_label.pack(side=tk1.LEFT)    self.offset_entrybox = tk1.Entry(self.offset_frm,width=10)    self.offset_entrybox.pack(side=tk1.LEFT)    self.offset_entrybox.insert(tk1.END, "90")    self.offset_entrybox.bind("<Button-1>", lambda x: self.clearentrybox("self.offset_entrybox"))    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Converted Coordinates:", width=120)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer4_label = tk1.Label(self.canvas, text="   ")    self.spacer4_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_rotatecoords(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_rotatecoords(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_rotatecoords))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    return  def calculate_convertcoords(self,datasource, event=None):    inputdatatype = self.inputdata_var.get()    outputdatatype = self.outputdata_var.get()    if datasource == "File":        inputdata = []        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    if inputdatatype == "Decimal Degrees":                        degrees_in = str(rowitems[0])                        newline = degrees_in                    elif inputdatatype == "Degrees, Decimal Minutes":                        degrees_in = str(rowitems[0])                        min_in = str(rowitems[1])                        newline = degrees_in + " " + min_in                    elif inputdatatype == "Degrees, Minutes, Seconds":                        degrees_in = str(rowitems[0])                        min_in = str(rowitems[1])                        sec_in = str(rowitems[2])                        newline = degrees_in + " " + min_in + " " + sec_in                    inputdata.append(newline)        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                newline = " ".join(linelist)                inputdata.append(newline)            f.close()                elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()    self.verbose = ""    self.concise = ""    self.sidebyside = ""    if inputdata == []:        self.concise = self.concise + "No input\n"        self.verbose = self.verbose + "No input data entered.\n"        self.sidebyside = self.sidebyside + "No input\n"    else:        entrydata = ""        for dataline in inputdata:            verbose_text = ""            concise_text = ""            sidebyside_text = ""            if datasource == "Widget":                linelist = dataline.split()                newline = " ".join(linelist)            elif datasource == "File":                newline = dataline            newline = newline.replace(",", " ").replace(";", " ")            entrydata = entrydata + newline + '\n'            sidebyside_text = "%s    " % newline            try:                linelist = newline.split()                degrees_in_ok = True                min_in_ok = sec_in_ok = True                if inputdatatype == "Decimal Degrees":                    degrees_in = float(linelist[0])                    degrees_in_ok = (-360 <= degrees_in <= 360)                    if degrees_in_ok:                        newcoords = get_convertedcoords(inputdatatype,outputdatatype,[degrees_in])                elif inputdatatype == "Degrees, Decimal Minutes":                    degrees_in = float(linelist[0])                    min_in = float(linelist[1])                    degrees_in_ok = (-360 <= degrees_in <= 360)                    min_in_ok = (0 <= min_in <= 60)                    if degrees_in_ok and min_in_ok:                        newcoords = get_convertedcoords(inputdatatype,outputdatatype,[degrees_in,min_in])                elif inputdatatype == "Degrees, Minutes, Seconds":                    degrees_in = float(linelist[0])                    min_in = float(linelist[1])                    sec_in = float(linelist[2])                    degrees_in_ok = (-360 <= degrees_in <= 360)                    min_in_ok = (0 <= min_in <= 60)                    sec_in_ok = (0 <= sec_in <= 60)                    if degrees_in_ok and min_in_ok and sec_in_ok:                        newcoords = get_convertedcoords(inputdatatype,outputdatatype,[degrees_in,min_in,sec_in])                allok = degrees_in_ok and min_in_ok and sec_in_ok                if outputdatatype == "Decimal Degrees" and allok:                    degrees_out = newcoords[0]                    verbose_text = verbose_text + "%s: %s%s" % (outputdatatype, degrees_out, degree_sign)                    concise_text = concise_text + str(degrees_out)                elif outputdatatype == "Degrees, Decimal Minutes" and allok:                    degrees_out = newcoords[0]                    min_out = newcoords[1]                    verbose_text = verbose_text + "%s: %s%s %s'" % (outputdatatype, degrees_out, degree_sign, min_out)                    concise_text = concise_text + "%s %s" % (degrees_out, min_out)                elif outputdatatype == "Degrees, Minutes, Seconds" and allok:                    degrees_out = newcoords[0]                    min_out = newcoords[1]                    sec_out = newcoords[2]                    verbose_text = verbose_text + "%s: %s%s %s' %s\"" % (outputdatatype, degrees_out, degree_sign, min_out, sec_out)                    concise_text = concise_text + "%s %s %s" % (degrees_out, min_out, sec_out)                if not degrees_in_ok:                    verbose_text = verbose_text + "Degrees must be %s360%s, %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                if not min_in_ok:                    verbose_text = verbose_text + "Minutes must be >0, <60. "                if not sec_in_ok:                    verbose_text = verbose_text + "Seconds must be >0, <60. "                if not degrees_in_ok or not min_in_ok or not sec_in_ok:                    concise_text = concise_text + "Out of range"            except:                if linelist == []:                    verbose_text = verbose_text + "Could not calculate; No input given."                    concise_text = concise_text + "No input"                else:                    verbose_text = verbose_text + "Could not calculate; Input not all numbers."                    concise_text = concise_text + "NAN"            self.verbose = self.verbose + verbose_text + '\n'            self.concise = self.concise + concise_text + '\n'            self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        self.enterdata_textbox.delete(1.0,tk1.END)        self.enterdata_textbox.insert(tk1.END, entrydata[:-1])        self.verbose = self.verbose[:-1]        self.concise = self.concise[:-1]        self.sidebyside = self.sidebyside[:-1]    self.output_textbox.configure(state='normal')    self.output_textbox.delete(1.0,tk1.END)    self.output_textbox.insert(tk1.END, self.verbose)    self.output_textbox.configure(state='disabled')    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Converted Coordinates to %s (Verbose):" % outputdatatype, width=120)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')        self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Output Data: Convert Coordinates (%s to %s)" % (inputdatatype, outputdatatype),""))    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.verboseoutput_butt.configure(state='disabled')    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Output Data: Convert Coordinates (%s to %s)" % (inputdatatype, outputdatatype),""))    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side Input/Output ", height=3,command=lambda:                                          changeoutputtype(self,"Side-by-side","Output Data: Convert Coordinates (%s to %s)" % (inputdatatype, outputdatatype),""))    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=20,pady=4)    self.savedata = self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text="  Clear  ", height=3,command=lambda: convertcoords_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=20,pady=4)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: convertcoords_enter(self))    root.bind("<Control-L>", lambda x: convertcoords_enter(self))    returndef convertcoords_enter(self):    self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="12. Calculate:\nConvertd Coordinates:\n(Decimal Degrees %s Deg. Decimal Min. %s Deg. Min. Sec.)" % (double_arrow, double_arrow),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=3,command=lambda: openfile_and_runcalcprocedure(self,calculate_convertcoords))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from Excel files and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_convertcoords))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_convertcoords))    self.inputdata_frm = tk1.Frame(self.canvas)    self.inputdata_frm.grid(row=3,column=0,sticky='NSEW')    self.specifyinputdata_label = tk1.Label(self.inputdata_frm, text="\nSpecify Input Data Type:")    self.specifyinputdata_label.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.inputdata_var = tk1.StringVar()    self.inputdata_var.set("Decimal Degrees")    self.in_decdeg_radio = tk1.Radiobutton(self.inputdata_frm, text="Decimal Degrees\n(e.g., 23.515)",variable=self.inputdata_var,value="Decimal Degrees")    self.in_decdeg_radio.grid(row=1,column=0,sticky='W')    self.in_degdecmin_radio = tk1.Radiobutton(self.inputdata_frm, text="Degrees, Decimal Minutes\n(e.g., 23 30.9)",variable=self.inputdata_var,value="Degrees, Decimal Minutes")    self.in_degdecmin_radio.grid(row=1,column=1,sticky='W')    self.in_degminsec_radio = tk1.Radiobutton(self.inputdata_frm, text="Degrees, Minutes, Seconds\n(e.g., 23 30 54)",variable=self.inputdata_var,value="Degrees, Minutes, Seconds")    self.in_degminsec_radio.grid(row=1,column=2,sticky='W')    self.spacer1_label = tk1.Label(self.inputdata_frm, text="  ")    self.spacer1_label.grid(row=2,column=0, columnspan=3, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Data:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)    self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))        self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.outputdata_frm = tk1.Frame(self.canvas)    self.outputdata_frm.grid(row=3,column=2,sticky='NSEW')    self.specifyoutputdata_label = tk1.Label(self.outputdata_frm, text="\nSpecify Output Data Type:")    self.specifyoutputdata_label.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.outputdata_var = tk1.StringVar()    self.outputdata_var.set("Degrees, Minutes, Seconds")    self.out_decdeg_radio = tk1.Radiobutton(self.outputdata_frm, text="Decimal Degrees\n(e.g., 23.515%s)" % degree_sign,variable=self.outputdata_var,value="Decimal Degrees")    self.out_decdeg_radio.grid(row=1,column=0,sticky='W')    self.out_degdecmin_radio = tk1.Radiobutton(self.outputdata_frm, text="Degrees, Decimal Minutes\n(e.g., 23%s 30.9')" % degree_sign,variable=self.outputdata_var,value="Degrees, Decimal Minutes")    self.out_degdecmin_radio.grid(row=1,column=1,sticky='W')    self.out_degminsec_radio = tk1.Radiobutton(self.outputdata_frm, text="Degrees, Minutes, Seconds\n(e.g., 23%s 30' 54\")" % degree_sign,variable=self.outputdata_var,value="Degrees, Minutes, Seconds")    self.out_degminsec_radio.grid(row=1,column=2,sticky='W')    self.spacer4_label = tk1.Label(self.outputdata_frm, text="  ")    self.spacer4_label.grid(row=2,column=0, columnspan=3, sticky='NSEW')        self.outputdatatextbox_label = tk1.Label(self.canvas, text="Output Data: Converted Coordinates:", width=120)    self.outputdatatextbox_label.grid(row=4,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.output_textbox.grid(row=5,column=2, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))        self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')           self.calc_butt = tk1.Button(self.canvas, text="Calculate", width=2, height=3,command=lambda: calculate_convertcoords(self,"Widget"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_convertcoords(self,"Widget"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_convertcoords))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate (Ctrl-Enter).')    returnclass createcomp:    def __init__(self,name,gdec,ginc,tdec,tinc,num,firstpart,lastpart):        self.show = True        self.name = name        self.geog_dec = gdec        self.geog_inc = ginc        self.tilt_dec = tdec        self.tilt_inc = tinc        self.compnum = num        self.firstpart = firstpart        self.lastpart = lastpart        self.show_var = tk1.BooleanVar(value=self.show)        self.drawcolor = "black"        compname = self.firstpart[17:20].upper()        if compname in ["A_L","AOL","AOC"]:            self.drawcolor = "yellow"        elif compname in ["B_L","BOL","BOC"]:            self.drawcolor = "red"        elif compname in ["C_L","COL","COC"]:            self.drawcolor = "blue"        elif compname in ["D_L","DOL","DOC"]:            self.drawcolor = "green"        elif compname in ["E_L","EOL","EOC"]:            self.drawcolor = "purple"                    if self.lastpart != "":            symbolcolortext = self.lastpart[17:]            if symbolcolortext != "" and not symbolcolortext.isspace():                symbolcolor_list = symbolcolortext.split()                newcolor = symbolcolor_list[0]                if isitacolor(newcolor):                    self.drawcolor = newcolor        returndef createcompwidget(self,index,rownum):    self.complist[index].show_var = tk1.BooleanVar(value=self.complist[index].show)    showtext = "%s. Show Component:\n%s" % (self.complist[index].compnum,self.complist[index].name)    self.drawcolorlabel = tk1.Label(self.pointlist_frm, bg=self.complist[index].drawcolor,width=1)    self.drawcolorlabel.grid(row=rownum, column=0)    self.complist[index].show_chbutt = tk1.Checkbutton(self.pointlist_frm, text=showtext, font=("Consolas",8), variable=self.complist[index].show_var)    self.complist[index].show_chbutt.grid(row=rownum, column=1,sticky='W')    gdecspace = (5 - len(str(self.complist[index].geog_dec))) * " "    gincspace = (5 - len(str(self.complist[index].geog_inc))) * " "    gdecinctext = "GEOG: Dec: %s%s \n      Inc: %s%s " % (gdecspace, self.complist[index].geog_dec, gincspace, self.complist[index].geog_inc)    self.complist[index].gdir_label = tk1.Label(self.pointlist_frm, text=gdecinctext, font=("Consolas",8))    self.complist[index].gdir_label.grid(row=rownum, column=2,sticky='NSEW')    tdecspace = (5 - len(str(self.complist[index].tilt_dec))) * " "    tincspace = (5 - len(str(self.complist[index].tilt_inc))) * " "    tdecinctext = "TILT: Dec: %s%s \n      Inc: %s%s " % (tdecspace, self.complist[index].tilt_dec, tincspace, self.complist[index].tilt_inc)    self.complist[index].tdir_label = tk1.Label(self.pointlist_frm, text=tdecinctext, font=("Consolas",8))    self.complist[index].tdir_label.grid(row=rownum, column=3,sticky='NSEW')    returndef ftsaveselected(self):    anyselected = False    for comp in self.complist:        comp.show = comp.show_var.get()        if comp.show:            anyselected = True    if not anyselected:        warningmessagetitle = ("Cannot save points in file!")        warningmessagetext = ("Cannot save points in file because no points or means were selected.\n\nSelect at least 1 point to save as a file.")        tkMessageBox.showwarning(warningmessagetitle,warningmessagetext)        return    if os.path.isdir(self.filepath):        savefilepathandname = asksaveasfilename(initialdir=self.filepath,title = "Save selected points",defaultextension=".lsq",filetypes = (("lsq files","*.lsq"),("all files","*.*"))).replace("/","\\")    else:        savefilepathandname = asksaveasfilename(title = "Save selected points",defaultextension=".lsq",filetypes = (("lsq files","*.lsq"),("all files","*.*"))).replace("/","\\")    if savefilepathandname != "":        savefile = open(savefilepathandname, 'w')    else:        return        for comp in self.complist:        if comp.show:            if comp.firstpart == "":                name = comp.name[0:13]                namespace = ( 13 - len(name) ) * " "                firstpart = name + namespace + " L  COM"                lastpart = " COM     0   0.0\n"            else:                firstpart = comp.firstpart                lastpart = comp.lastpart            geodec_str = str(comp.geog_dec)            geodecspace = (6 - len(geodec_str)) * " "            geoinc_str = str(comp.geog_inc)            geoincspace = (6 - len(geoinc_str)) * " "            tiltdec_str = str(comp.tilt_dec)            tiltdecspace = (6 - len(tiltdec_str)) * " "            tiltinc_str = str(comp.tilt_inc)            tiltincspace = (6 - len(tiltinc_str)) * " "            linetext = "%s%s%s%s%s%s%s%s%s%s" % (firstpart,geodecspace,geodec_str,geoincspace,geoinc_str,tiltdecspace,tiltdec_str,tiltincspace,tiltinc_str,lastpart)            savefile.write(linetext)    savefile.close()    returndef ftpurgeunselected(self):    self.scrollframe.destroy()    self.scrollframe.forget()    self.scrollcanvas.destroy()    self.scrollcanvas.forget()    makepointlist_frm(self)        for comp in self.complist:        comp.show = comp.show_var.get()            oldlist = self.complist    self.complist = []    pointnum = 1    index = 0    rownum = 0    for comp in oldlist:        if comp.show:            comp.compnum = pointnum            self.complist.append(comp)            createcompwidget(self,index,rownum)            endspacer_label = tk1.Label(self.pointlist_frm,text=" ",font=("Consolas",10))            endspacer_label.grid(row=rownum, column=4,sticky='NSEW')            rownum = rownum + 1            linecanvas = tk1.Canvas(self.pointlist_frm,width=10,height=3)            linecanvas.grid(row=rownum, column=0,columnspan=6,sticky='NSEW')            linecanvas.create_line(0,3,700,3) # draw a linebreak            rownum = rownum + 1            pointnum = pointnum + 1            index = index + 1    calculate_foldtest(self,"Listbox","All")    returndef addmorelistbox(self):    self.filepathandname = ""    self.filepathandname = openfile(self,"Open File Containing Components","*.lsq",(("lsq files","*.lsq"),("all files","*.*")))    if self.filepathandname == "":        return    startlen = len(self.complist)    pointnum = startlen + 1    index = startlen    rownum = (startlen * 2) + 1    f = open(self.filepathandname,'r')    for line in f:        if line[14] != "C":            name = str(line[0:14]+"-"+line[11]+"-"+line[17:20]).replace(" ", "")            geog_dec = float(line[20:26].strip())            geog_inc = float(line[26:32].strip())            tilt_dec = float(line[32:38].strip())            tilt_inc = float(line[38:44].strip())            firstpart = str(line[0:20])            lastpart = str(line[44:])            newcomp = createcomp(name,geog_dec,geog_inc,tilt_dec,tilt_inc,pointnum,firstpart,lastpart)            self.complist.append(newcomp)            createcompwidget(self,index,rownum)            endspacer_label = tk1.Label(self.pointlist_frm,text=" ",font=("Consolas",10))            endspacer_label.grid(row=rownum, column=4,sticky='NSEW')            rownum = rownum + 1            linecanvas = tk1.Canvas(self.pointlist_frm,width=10,height=3)            linecanvas.grid(row=rownum, column=0,columnspan=6,sticky='NSEW')            linecanvas.create_line(0,3,700,3) # draw a linebreak            rownum = rownum + 1            pointnum = pointnum + 1            index = index + 1    calculate_foldtest(self,"Listbox","All")    returndef addcompdist(self,distdiff,index,rownum):    compdisttext = ("Dist Diff:\n%s%s" % (distdiff,degree_sign) )    self.complist[index].compdist_label = tk1.Label(self.pointlist_frm, text=compdisttext, font=("Consolas",8))    self.complist[index].compdist_label.grid(row=rownum, column=4,sticky='NSEW')    return    def ft_update_annot(ind,item):    global ft_annot        pos = item[0].get_offsets()[ind["ind"][0]]    ft_annot.xy = pos    text = (item[1])    ft_annot.set_text(text)    ft_annot.get_bbox_patch().set_color(item[2])    ft_annot.get_bbox_patch().set_facecolor('#f3f2f1')    ft_annot.get_bbox_patch().set_alpha(0.75)    returndef ft_on_plot_hover(event):    vis = ft_annot.get_visible()    for item in range(0,len(ft_annot_pointlist)):        onpoint, ind = ft_annot_pointlist[item][0].contains(event)        if onpoint:            ft_update_annot(ind,ft_annot_pointlist[item])            ft_annot.set_visible(True)            fig.canvas.draw_idle()        else:            if vis:                ft_annot.set_visible(False)                fig.canvas.draw_idle()    returndef calcftbootstrap(self):    k_ratio_list = []    for trialnum in range(self.trialsize):        geogbootlist = []        tiltbootlist = []        for samplenum in range(self.samplesize):            sampindex = randint(0,self.totcomps-1)            geogbootlist.append([self.geoglist[sampindex][0],self.geoglist[sampindex][1]])            tiltbootlist.append([self.tiltlist[sampindex][0],self.tiltlist[sampindex][1]])        meangeogbootstats = get_meancoords(geogbootlist)        meangeogk = meangeogbootstats[3]        meantiltbootstats = get_meancoords(tiltbootlist)        meantiltk = meantiltbootstats[3]        k2_over_k1 = meantiltk / meangeogk        k_ratio_list.append(k2_over_k1)    average_k_ratio = sum(k_ratio_list) / self.trialsize    Nx2minus1 = 2 * (self.totcomps - 1)    critval = round(scipy.stats.f.isf(0.05, Nx2minus1, Nx2minus1),2)    return([average_k_ratio,critval,Nx2minus1])def dobootstrap(self):    samplesizeerrortext = ""    try:        self.samplesize = float(self.samplesize_entrybox.get())        if not self.samplesize.is_integer():            samplesizeerrortext = "Sample size must be an integer number. "        elif self.samplesize <= 1:            samplesizeerrortext = "Sample size must be an integer greater than 1. "        else:            self.samplesize = int(self.samplesize)    except:        samplesizeerrortext = "Sample size must be an integer number. "        self.samplesize_entrybox.delete(0,tk1.END)        self.samplesize_entrybox.insert(tk1.END, self.totcomps)    trialsizerrortext = ""    try:        self.trialsize = float(self.trialsize_entrybox.get())        if not self.trialsize.is_integer():            trialsizerrortext = "Trial size must be an integer number. "        elif self.trialsize < 1:            trialsizerrortext = "Number of trials must be at least 1. "        else:            self.trialsize = int(self.trialsize)    except:        trialsizerrortext = "Trial size must be an integer number. "        self.trialsize_entrybox.delete(0,tk1.END)        self.trialsize_entrybox.insert(tk1.END, "1000")    if samplesizeerrortext != "" or trialsizerrortext != "":        tkMessageBox.showwarning("Cannot Perform Bootstrap Fold Test","%s\n%s\nPlease reenter sample size and trial size." % (samplesizeerrortext,trialsizerrortext))    else:        boostrapresults = calcftbootstrap(self)        average_k_ratio = boostrapresults[0]        critval = boostrapresults[1]        Nx2minus1 = boostrapresults[2]        percentpos = (100-round(scipy.stats.f.sf(average_k_ratio, Nx2minus1, Nx2minus1) * 100,1))        if percentpos == 100.0:            percentpos = 99.9        percentneg = 100-percentpos        if percentpos >= 95:            bsfoldtestoutcome = ("Statistically Definitively Positive!\nThe likelihood that your fold test is positive is %s%%." % percentpos)        elif percentpos >= 50:            bsfoldtestoutcome = ("Statistically Negative, but more likely positive than negative.\nThe likelihood that your fold test is positive is %s%%." % percentpos)        elif percentpos > 5:            bsfoldtestoutcome = ("Statistically Negative, and more likely negative than positive.\nThe likelihood that your fold test is positive is %s%%." % percentpos)        elif percentpos <= 5:            bsfoldtestoutcome = ("Statistically Definitively Negative!\nThe likelihood that your fold test is negative is %s%%" % percentneg)        bsfoldtesttext = "Average Ktilt/Kgeog = %s\nCritical value = %s\nFold test is %s" % (average_k_ratio,critval,bsfoldtestoutcome)        self.finalbsoutput_textbox.configure(state='normal')        self.finalbsoutput_textbox.delete(1.0,tk1.END)                self.finalbsoutput_textbox.insert(tk1.END, bsfoldtesttext)        self.finalbsoutput_textbox.configure(state='disabled')    returndef bootstrap_foldtest(self):    global bootstrapmaster    self.totcomps = 0    self.geoglist = []    self.tiltlist = []    for comp in self.complist:        comp.show = comp.show_var.get()        if comp.show:            self.totcomps = self.totcomps + 1            self.geoglist.append([comp.geog_dec,comp.geog_inc])            self.tiltlist.append([comp.tilt_dec,comp.tilt_inc])    if self.totcomps < 2:        tkMessageBox.showwarning("Cannot Perform Bootstrap Fold Test","At least 2 samples must be selected to perform a fold test. Cannot perform bootstrap fold test.")        return            try:        'normal' == bootstrapmaster.state()        bootstrapmaster.lift()        bootstrapmaster.attributes('-topmost',True)        bootstrapmaster.after_idle(bootstrapmaster.attributes,'-topmost',False)    except:        bootstrapmaster = tk1.Toplevel()        bootstrapmaster.focus_set()        bootstrapmaster.title("Calculate Boostrapped Fold Test")        heading_label = tk1.Label(bootstrapmaster, text="Calculate Boostrapped Fold Test:")        heading_label.pack(fill=tk1.X)        totcomps_label = tk1.Label(bootstrapmaster, text="%s samples selected for bootstrap fold test" % self.totcomps)        totcomps_label.pack(fill=tk1.X)        samplesize_label = tk1.Label(bootstrapmaster, text="Enter bootstrap sample size:")        samplesize_label.pack(fill=tk1.X)        self.samplesize_entrybox = tk1.Entry(bootstrapmaster)        self.samplesize_entrybox.pack(fill=tk1.X)        self.samplesize_entrybox.insert(tk1.END, "%s" % self.totcomps)        self.samplesize_entrybox.bind("<Button-1>", lambda x: self.clearentrybox("self.samplesize_entrybox"))        spacer1 = tk1.Label(bootstrapmaster, text="       ")        spacer1.pack(fill=tk1.X)                                             trialsize_label = tk1.Label(bootstrapmaster, text="Enter the number of trials:")        trialsize_label.pack(fill=tk1.X)        self.trialsize_entrybox = tk1.Entry(bootstrapmaster)        self.trialsize_entrybox.pack(fill=tk1.X)        self.trialsize_entrybox.insert(tk1.END, "1000")        self.trialsize_entrybox.bind("<Button-1>", lambda x: self.clearentrybox("self.trialsize_entrybox"))        spacer2 = tk1.Label(bootstrapmaster, text="       ")        spacer2.pack(fill=tk1.X)        finalbsoutput_textbox_label = tk1.Label(bootstrapmaster, text="Bootstrap Results:")        finalbsoutput_textbox_label.pack(fill=tk1.X)        self.finalbsoutput_textbox = tk1.Text(bootstrapmaster,width=100, height=4)        self.finalbsoutput_textbox.pack(fill=tk1.X)        self.finalbsoutput_textbox.configure(state='disabled')        spacer3 = tk1.Label(bootstrapmaster, text="       ")        spacer3.pack(fill=tk1.X)        dobootstrap_butt = tk1.Button(bootstrapmaster, text="Perform Bootstrap", command= lambda: dobootstrap(self))        dobootstrap_butt.pack()        dobootstrap_butt.pack(fill=tk1.X)        tk1.mainloop()    returndef calculate_foldtest(self,datasource,whichdata):    global fig, ax_ft, ft_annot, ft_annot_pointlist        inputdata = []    if datasource == "File":        if self.fileextension in ["xls","xlsx"]:            wb = open_workbook(self.filepathandname)                    for sheet in wb.sheets():                number_of_rows = sheet.nrows                number_of_columns = sheet.ncols                for row in range(0, number_of_rows):                            rowitems = []                    values = []                    for col in range(number_of_columns):                        value  = (sheet.cell(row,col).value)                        rowitems.append(value)                    name = str(rowitems[0]).replace(" ", "")                    geog_dec = str(rowitems[1])                    geog_inc = str(rowitems[2])                    tilt_dec = str(rowitems[3])                    tilt_inc = str(rowitems[4])                    newline = [name,geog_dec,geog_inc,tilt_dec,tilt_inc,"",""]                    inputdata.append(newline)        elif self.fileextension == "lsq":            f = open(self.filepathandname,'r')            for line in f:                if line[14] != "C": # Exclude circles for fold test                    name = str(line[0:14]+"-"+line[14]+"-"+line[17:20]).replace(" ", "")                    geog_dec = str(line[20:26].strip())                    geog_inc = str(line[26:32].strip())                    tilt_dec = str(line[32:38].strip())                    tilt_inc = str(line[38:44].strip())                    firstpart = str(line[0:20])                    lastpart = str(line[44:])                    newline = [name,geog_dec,geog_inc,tilt_dec,tilt_inc,firstpart,lastpart]                    inputdata.append(newline)            f.close()        else:            f = open(self.filepathandname,'r')            for line in f:                linelist = line.split()                name = str(linelist[0]).replace(" ", "")                geog_dec = str(linelist[1])                geog_inc = str(linelist[2])                tilt_dec = str(linelist[3])                tilt_inc = str(linelist[4])                newline = [name,geog_dec,geog_inc,tilt_dec,tilt_inc,"",""]                inputdata.append(newline)            f.close()        self.complist = []        self.scrollframe.destroy()        self.scrollcanvas.destroy()        makepointlist_frm(self)    elif datasource == "Widget":        inputdata = self.enterdata_textbox.get("1.0",'end-1c').splitlines()        self.complist = []        self.scrollframe.destroy()        self.scrollcanvas.destroy()        makepointlist_frm(self)    elif datasource == "Listbox":        for comp in self.complist:            comp.show = comp.show_var.get()            if comp.show:                name = comp.name                newline = [name,str(comp.geog_dec),str(comp.geog_inc),str(comp.tilt_dec),str(comp.tilt_inc)]                inputdata.append(newline)    self.verbose = ""    self.concise = ""    self.sidebyside = ""    geoglist = []    tiltlist = []    decimals_list = []    if inputdata == []:        if datasource != "Listbox":            self.concise = self.concise + "No input\n"            self.verbose = self.verbose + "No input data entered.\n"            self.sidebyside = self.sidebyside + "No input\n"        self.finaloutput_verbose = "No input data entered."        self.finaloutput_concise = "No input"    else:        entrydata = ""        pointnum = 1        index = 0        rownum = 0        for dataline in inputdata:            if datasource != "Listbox":                verbose_text = ""                concise_text = ""                sidebyside_text = ""            if datasource == "Widget":                dataline_str = ""                for c in dataline:                    if not(c in [";",","]):                         dataline_str = dataline_str + c                  newline = dataline_str.split()            elif datasource in ["File","Listbox"]:                newline = dataline            newlinetext = ""            for itemindex, item in enumerate(newline):                if itemindex > 4:                    break                else:                    newlinetext = newlinetext + item + " "            entrydata = entrydata + newlinetext.rstrip() + "\n"            if datasource != "Listbox":                sidebyside_text = sidebyside_text + newlinetext + "   "            try:            #if 1 == 1:                name = newline[0]                geog_dec = float(newline[1])                geog_inc = float(newline[2])                tilt_dec = float(newline[3])                tilt_inc = float(newline[4])                geog_dec_ok = (-360 <= geog_dec <= 360)                geog_inc_ok = (-90 <= geog_inc <= 90)                tilt_dec_ok = (-360 <= tilt_dec <= 360)                tilt_inc_ok = (-90 <= tilt_inc <= 90)                if geog_dec_ok and geog_inc_ok and tilt_dec_ok and tilt_inc_ok:                    if datasource in ["Widget","File"]:                        if datasource == "Widget":                            firstpart = ""                            lastpart = ""                        else:                            firstpart = newline[5]                            lastpart = newline[6]                        newcomp = createcomp(name,geog_dec,geog_inc,tilt_dec,tilt_inc,pointnum,firstpart,lastpart)                        self.complist.append(newcomp)                        createcompwidget(self,index,rownum)                        endspacer_label = tk1.Label(self.pointlist_frm,text=" ",font=("Consolas",10))                        endspacer_label.grid(row=rownum, column=4,sticky='NSEW')                        rownum = rownum + 1                        linecanvas = tk1.Canvas(self.pointlist_frm,width=10,height=3)                        linecanvas.grid(row=rownum, column=0,columnspan=6,sticky='NSEW')                        linecanvas.create_line(0,3,700,3) # draw a linebreak                        rownum = rownum + 1                        pointnum = pointnum + 1                        index = index + 1                    geoglist.append([geog_inc,geog_dec])                    tiltlist.append([tilt_inc,tilt_dec])                    decimals_list.append(geog_dec)                    decimals_list.append(geog_inc)                    decimals_list.append(tilt_dec)                    decimals_list.append(tilt_inc)                    if datasource != "Listbox":                        verbose_text = verbose_text + "Input Data OK."                        concise_text = concise_text + "Input OK"                else:                    if datasource != "Listbox":                        concise_text = concise_text + "Out of range"                        if not geog_dec_ok:                            verbose_text = verbose_text + "Geographic Declination must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                                            if not geog_inc_ok:                            verbose_text = verbose_text + "Geographic Inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                        if not tilt_dec_ok:                            verbose_text = verbose_text + "Tilt Declination must be %s360%s & %s-360%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)                                            if not tilt_inc_ok:                            verbose_text = verbose_text + "Tilt Inclination must be %s90%s & %s-90%s. " % (less_equal_sign,degree_sign,great_equal_sign,degree_sign)            except:            #else:                if newline == []:                    if datasource != "Listbox":                        verbose_text = verbose_text + "No input given."                        concise_text = concise_text + "No input"                else:                    if datasource != "Listbox":                        verbose_text = verbose_text + "Input not all numbers."                        concise_text = concise_text + "NAN"            if datasource != "Listbox":                self.verbose = self.verbose + verbose_text + '\n'                self.concise = self.concise + concise_text + '\n'                self.sidebyside = self.sidebyside + sidebyside_text + concise_text + '\n'        if datasource != "Listbox":            self.enterdata_textbox.delete(1.0,tk1.END)            self.enterdata_textbox.insert(tk1.END, entrydata[:-1])            self.verbose = self.verbose[:-1]            self.concise = self.concise[:-1]            self.sidebyside = self.sidebyside[:-1]                    if len(geoglist) >= 2 and len(tiltlist) >= 2:            meangeogdir = get_meancoords(geoglist)            meantiltdir = get_meancoords(tiltlist)            decimals = get_decimals(decimals_list)            if decimals < 2:                decimals = 2            avggeoginc = round(meangeogdir[0],decimals)            avggeogdec = round(meangeogdir[1],decimals)            avgtiltinc = round(meantiltdir[0],decimals)            avgtiltdec = round(meantiltdir[1],decimals)            try:                geoga95 = round(meangeogdir[2],decimals)            except:                geoga95 = meangeogdir[2]            try:                geogk = round(meangeogdir[3],decimals)            except:                geogk = meangeogdir[3]            try:                tilta95 = round(meantiltdir[2],decimals)            except:                tilta95 = meantiltdir[2]            try:                tiltk = round(meantiltdir[3],decimals)            except:                tiltk = meantiltdir[3]            numpoints = meangeogdir[4]            if tiltk == "--" or geogk == "--":                self.finaloutput_verbose = "All samples have same directions; cannot calculate k values."                self.finaloutput_concise = "Cannot calculate k"            else:                k2_over_k1 = tiltk / geogk                k2_over_k1 = round(k2_over_k1,2)                Nx2minus1 = 2 * (numpoints - 1)                critval = round(scipy.stats.f.isf(0.05, Nx2minus1, Nx2minus1),2)                percentpos = (100-round(scipy.stats.f.sf(k2_over_k1, Nx2minus1, Nx2minus1) * 100,1))                if percentpos == 100.0:                    percentpos = 99.9                percentneg = 100-percentpos                if percentpos >= 95:                    foldtestoutcome = ("Statistically Definitively Positive!\nThe likelihood that your fold test is positive is %s%%." % percentpos)                elif percentpos >= 50:                    foldtestoutcome = ("Statistically Negative, but more likely positive than negative.\nThe likelihood that your fold test is positive is %s%%." % percentpos)                elif percentpos > 5:                    foldtestoutcome = ("Statistically Negative, and more likely negative than positive.\nThe likelihood that your fold test is positive is %s%%." % percentpos)                elif percentpos <= 5:                    foldtestoutcome = ("Statistically Definitively Negative!\nThe likelihood that your fold test is negative is %s%%" % percentneg)                self.finaloutput_verbose = "Mean Geographic Directions: Dec: %s%s, Inc: %s%s, a95: %s%s, k: %s, N = %s\n" %(avggeogdec,degree_sign,avggeoginc,degree_sign,geoga95,degree_sign,geogk,numpoints)                self.finaloutput_verbose = self.finaloutput_verbose + "Mean Tilt Directions: Dec: %s%s, Inc: %s%s, a95: %s%s, k: %s, N = %s\n" %(avgtiltdec,degree_sign,avgtiltinc,degree_sign,tilta95,degree_sign,tiltk,numpoints)                self.finaloutput_verbose = self.finaloutput_verbose + "Tilt k / Geographic k = %s, critical value = %s\nFold test is %s" % (k2_over_k1,critval,foldtestoutcome)                self.finaloutput_concise = "Geographic: %s   %s, %s, %s, %s\nTilt: %s   %s, %s, %s, %s\nTilt k / Geog k: %s, Crit Val: %s\nFold Test: %s" %(avggeogdec,avggeoginc,geoga95,geogk,numpoints,avgtiltdec,avgtiltinc,tilta95,tiltk,numpoints,k2_over_k1,critval,foldtestoutcome)        else:            if len(geoglist) == 1 or len(tiltlist) == 1:                self.finaloutput_verbose = "Only 1 valid data inputted, but at least 2 are needed to calculate k values for fold test."                self.finaloutput_concise = "Insufficient valid input"            else:                self.finaloutput_verbose = "No valid input entered."            self.finaloutput_concise = "No valid input"    self.finaloutput_textbox.configure(state='normal')    self.finaloutput_textbox.delete(1.0,tk1.END)    self.finaloutput_textbox.insert(tk1.END, self.finaloutput_verbose)    self.finaloutput_textbox.configure(state='disabled')    #if datasource == "Listbox" or 1==1:    self.outputdatatextbox_label.destroy()    self.outputdatatextbox_label = tk1.Label(self.canvas, text="  Equal Area Plot of Components                                                                                           List Box of Components")    self.outputdatatextbox_label.grid(row=4,column=2, sticky='W')    self.output_textbox.destroy()    self.output_textbox.forget()    self.output_textbox = tk1.Frame(self.checkdata_dataselect_frm, height=30,width=160)    self.output_textbox.grid(row=0,column=0, sticky='NSEW')    if datasource != "Listbox":        fig=plt.Figure(figsize=(4,4))        ax_ft=fig.add_axes([0.1,0.1,0.8,0.8])    self.minicanvas=FigureCanvasTkAgg(fig,self.output_textbox)    self.minicanvas.get_tk_widget().grid(row=0,column=0)    axeslength = 500    eqarearadius = 498    ax_ft.clear()    ax_ft.axis('off')    self.minicanvas.draw()    ax_ft.axis('equal')    ax_ft.axis([-axeslength, axeslength, -axeslength, axeslength])    maincircle = plt.Circle((0, 0), eqarearadius, color="Black", fill=False, lw=1)    ax_ft.add_artist(maincircle)        ax_ft.plot([0,0],[-6,6],"Black",lw=1,zorder=0) # Draw Cross    ax_ft.plot([-6,6],[0,0],"Black",lw=1,zorder=0)    tickmarker = 0 # plot circle ticks    while tickmarker < 360:         tick_length = eqcircletick_length_dict["Normal"][tickmarker]        tickmarker_rad = math.radians(tickmarker)        x1 = math.sin(tickmarker_rad)*(eqarearadius-tick_length)        x2 = math.sin(tickmarker_rad)*eqarearadius        y1 = math.cos(tickmarker_rad)*(eqarearadius-tick_length)        y2 = math.cos(tickmarker_rad)*eqarearadius        ax_ft.plot([x1,x2],[y1,y2],"black",lw=1,zorder=0)        tickmarker = tickmarker + 30    tickmarker = 30 # plot axes ticks    while tickmarker < 90:        tick_length = eqaxestick_length_dict["Normal"][tickmarker]        tickdist = math.sqrt(1-(math.sin(math.radians(math.fabs(tickmarker)))))*eqarearadius        ax_ft.plot([tickdist,tickdist],[-tick_length,tick_length],"Black",lw=1,zorder=0)        ax_ft.plot([-tick_length,tick_length],[tickdist,tickdist],"Black",lw=1,zorder=0)        ax_ft.plot([-tickdist,-tickdist],[-tick_length,tick_length],"Black",lw=1,zorder=0)        ax_ft.plot([-tick_length,tick_length],[-tickdist,-tickdist],"Black",lw=1,zorder=0)        tickmarker = tickmarker + 30    label_fontsize = fontsizes_dict["Small"][1][0] * 1.5    ax_ft.text(0, eqarearadius + 7, "N", color="Black", ha="center", fontsize=label_fontsize,zorder=0)    ax_ft.text(eqarearadius + 7, 0, "E", color="Black", va="center", fontsize=label_fontsize,zorder=0)    ax_ft.text(0, -(eqarearadius + 7), "S", color="Black", ha="center", va="top", fontsize=label_fontsize,zorder=0)    ax_ft.text(-(eqarearadius + 7), 0, "W", color="Black", va="center", ha="right", fontsize=label_fontsize,zorder=0)    ft_annot_pointlist = []    gsymbol = "o"    tsymbol = "s"    symbolsize = 60    showa = False    showb = False    showc = False    showd = False    showe = False    geoglist = []    tiltlist = []    for comp in self.complist:        comp.show = comp.show_var.get()        if comp.show:            geoglist.append([comp.geog_inc,comp.geog_dec])            tiltlist.append([comp.tilt_inc,comp.tilt_dec])    totcomps = len(geoglist)    if totcomps >= 1:        meangeoglist = get_meancoords(geoglist)        meangeogdec = meangeoglist[1]        meangeoginc = meangeoglist[0]        rad_meangdec = math.radians(meangeogdec)        rad_meanginc = math.radians(meangeoginc)                 meangforward = math.sqrt(1-(math.sin(math.radians(math.fabs(meangeoginc)))))*eqarearadius        meangpoint_x = math.sin(rad_meangdec) * meangforward        meangpoint_y = math.cos(rad_meangdec) * meangforward        try:            a95g = float(meangeoglist[2])            a95g = round(a95g,1)        except:            a95g = meangeoglist[2]        if whichdata in ["All","Geog"]:            if meangeoginc >= 0:                newpoint = ax_ft.scatter(meangpoint_x, meangpoint_y, color="black", s=symbolsize+15, marker="o", edgecolor=None,linewidth=2,zorder=totcomps+1)                ax_ft.text(meangpoint_x, meangpoint_y, "M",color="white",va='center',ha='center',zorder=totcomps+2,fontsize=7,fontweight='bold')            else:                newpoint = ax_ft.scatter(meangpoint_x, meangpoint_y, color="white", s=symbolsize+15, marker="o", edgecolor="black",linewidth=2,zorder=totcomps+1)                ax_ft.text(meangpoint_x, meangpoint_y, "M",color="black",va='center',ha='center',zorder=totcomps+2,fontsize=7,fontweight='bold')            ft_annot_pointlist.append([newpoint,"GEOGRAPHIC Mean:\nDec: %s%s\nInc: %s%s\na95: %s" % (round(meangeogdec,1),degree_sign,round(meangeoginc,1),degree_sign,a95g),"black"])        meantiltlist = get_meancoords(tiltlist)        meantiltdec = meantiltlist[1]        meantiltinc = meantiltlist[0]        rad_meantdec = math.radians(meantiltdec)        rad_meantinc = math.radians(meantiltinc)                 meantforward = math.sqrt(1-(math.sin(math.radians(math.fabs(meantiltinc)))))*eqarearadius        meantpoint_x = math.sin(rad_meantdec) * meantforward        meantpoint_y = math.cos(rad_meantdec) * meantforward        try:            a95t = float(meantiltlist[2])            a95t = round(a95t,1)        except:            a95t = meantiltlist[2]        if whichdata in ["All","Tilt"]:            if meantiltinc >= 0:                newpoint = ax_ft.scatter(meantpoint_x, meantpoint_y, color="black", s=symbolsize+15, marker="s", edgecolor=None,linewidth=2,zorder=totcomps+1)                ax_ft.text(meantpoint_x, meantpoint_y, "M",color="white",va='center',ha='center',zorder=totcomps+2,fontsize=7,fontweight='bold')            else:                newpoint = ax_ft.scatter(meantpoint_x, meantpoint_y, color="white", s=symbolsize+15, marker="s", edgecolor="black",linewidth=2,zorder=totcomps+1)                ax_ft.text(meantpoint_x, meantpoint_y, "M",color="black",va='center',ha='center',zorder=totcomps+2,fontsize=7,fontweight='bold')            ft_annot_pointlist.append([newpoint,"TILT Mean:\nDec: %s%s\nInc: %s%s\na95: %s" % (round(meantiltdec,1),degree_sign,round(meantiltinc,1),degree_sign,a95t),"black"])                index = 0    rownum = 0    for comp in self.complist:        geogdist = get_coorddist(comp.geog_inc,comp.geog_dec,meangeoginc,meangeogdec)[0]        tiltdist = get_coorddist(comp.tilt_inc,comp.tilt_dec,meantiltinc,meantiltdec)[0]        distdiff = round(geogdist - tiltdist,1)        addcompdist(self,distdiff,index,rownum)        index = index + 1        rownum = rownum + 2                if comp.show:            drawcolor = comp.drawcolor            if drawcolor == "yellow":                showa = True            elif drawcolor == "red":                showb = True            elif drawcolor == "blue":                showc = True            elif drawcolor == "green":                showd = True            elif drawcolor == "purple":                showe = True            if whichdata in ["All","Geog"]:                rad_gdec = math.radians(comp.geog_dec)                rad_ginc = math.radians(comp.geog_inc)                         gforward = math.sqrt(1-(math.sin(math.radians(math.fabs(comp.geog_inc)))))*eqarearadius                gpoint_x = math.sin(rad_gdec) * gforward                gpoint_y = math.cos(rad_gdec) * gforward                if comp.geog_inc >= 0:                    newpoint = ax_ft.scatter(gpoint_x, gpoint_y, color=drawcolor, s=symbolsize, marker=gsymbol, edgecolor=None,linewidth=1,zorder=comp.compnum)                    ax_ft.text(gpoint_x, gpoint_y, comp.compnum,color=getoppositecolor(drawcolor),va='center',ha='center',zorder=comp.compnum+1,fontsize=6,fontweight='bold')                else:                    newpoint = ax_ft.scatter(gpoint_x, gpoint_y, color="white", s=symbolsize, marker=gsymbol, edgecolor=drawcolor,linewidth=1,zorder=comp.compnum)                    ax_ft.text(gpoint_x, gpoint_y, comp.compnum,color="black",va='center',ha='center',zorder=comp.compnum+1,fontsize=6,fontweight='bold')                ft_annot_pointlist.append([newpoint,"%s. GEOG\n%s\nDec: %s%s\nInc: %s%s" % (comp.compnum,comp.name,comp.geog_dec,degree_sign,comp.geog_inc,degree_sign),drawcolor])            if whichdata in ["All","Tilt"]:                rad_tdec = math.radians(comp.tilt_dec)                rad_tinc = math.radians(comp.tilt_inc)                tforward = math.sqrt(1-(math.sin(math.radians(math.fabs(comp.tilt_inc)))))*eqarearadius                tpoint_x = math.sin(rad_tdec) * tforward                tpoint_y = math.cos(rad_tdec) * tforward                if comp.tilt_inc >= 0:                    newpoint = ax_ft.scatter(tpoint_x, tpoint_y, color=drawcolor, s=symbolsize, marker=tsymbol, edgecolor=None,linewidth=1,zorder=comp.compnum)                    ax_ft.text(tpoint_x, tpoint_y, comp.compnum,color=getoppositecolor(drawcolor),va='center',ha='center',zorder=comp.compnum+1,fontsize=6,fontweight='bold')                                        else:                    newpoint = ax_ft.scatter(tpoint_x, tpoint_y, color="white", s=symbolsize, marker=tsymbol, edgecolor=drawcolor,linewidth=1,zorder=comp.compnum)                    ax_ft.text(tpoint_x, tpoint_y, comp.compnum,color="black",va='center',ha='center',zorder=comp.compnum+1,fontsize=6,fontweight='bold')                ft_annot_pointlist.append([newpoint,"%s. TILT\n%s\nDec: %s%s\nInc: %s%s" % (comp.compnum,comp.name,comp.tilt_dec,degree_sign,comp.tilt_inc,degree_sign),drawcolor])    self.minicanvas.show()    self.minicanvas.draw()    black_sq_fill, = ax_ft.plot(-10000, "s", color="black", markersize=3,markeredgecolor=None, linestyle="none")    black_sq_fill_text = "Tilt, Down"        black_sq_open, = ax_ft.plot(-10000, "s", color="white", markersize=3,markeredgecolor="black", linestyle="none")    black_sq_open_text = "Tilt, Up"        black_circ_fill, = ax_ft.plot(-10000, "o", color="black", markersize=3,markeredgecolor=None, linestyle="none")    black_circ_fill_text = "Geog, Up"        black_circ_open, = ax_ft.plot(-10000, "o", color="white", markersize=3,markeredgecolor="black", linestyle="none")    black_circ_open_text = "Geog, Down"    legendicons_list = [black_sq_fill,black_sq_open,black_circ_fill,black_circ_open]    legendtext_list = [black_sq_fill_text,black_sq_open_text,black_circ_fill_text,black_circ_open_text]        if showa:        yellow_sq_fill, = ax_ft.plot(-10000, "s", color="yellow", markersize=3,markeredgecolor=None, linestyle="none")        legendicons_list.append(yellow_sq_fill)        legendtext_list.append("A comp")    if showb:        red_sq_fill, = ax_ft.plot(-10000, "s", color="red", markersize=3,markeredgecolor=None, linestyle="none")        legendicons_list.append(red_sq_fill)        legendtext_list.append("B comp")    if showc:        blue_sq_fill, = ax_ft.plot(-10000, "s", color="blue", markersize=3,markeredgecolor=None, linestyle="none")        legendicons_list.append(blue_sq_fill)        legendtext_list.append("C comp")    if showd:        green_sq_fill, = ax_ft.plot(-10000, "s", color="green", markersize=3,markeredgecolor=None, linestyle="none")        legendicons_list.append(green_sq_fill)        legendtext_list.append("D comp")    if showe:        purple_sq_fill, = ax_ft.plot(-10000, "s", color="purple", markersize=3,markeredgecolor=None, linestyle="none")        legendicons_list.append(purple_sq_fill)        legendtext_list.append("E comp")    ft_legend = ax_ft.legend(legendicons_list,legendtext_list,numpoints=1,fontsize=6,loc=2,bbox_to_anchor=(-0.005, 0.83),bbox_transform=plt.gcf().transFigure,frameon=False)    for text in ft_legend.get_texts():        text.set_color("black")    fig.canvas.mpl_connect('motion_notify_event', ft_on_plot_hover)    ft_annot = ax_ft.annotate("", xy=(0,0), xytext=(20,-20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=2000)    ft_annot.set_visible(False)    #self.conciseoutput_butt.configure(state='disabled')##    else:##        self.outputdatatextbox_label.destroy()##        self.outputdatatextbox_label = tk1.Label(self.canvas, text="  Input Data Check                                                                                                        List Box of Components")##        self.outputdatatextbox_label.grid(row=4,column=2, sticky='W')####        self.output_textbox.destroy()##        self.output_textbox = tk1.Text(self.checkdata_dataselect_frm, wrap=tk1.NONE, height=30,width=2000)##        self.output_textbox.grid(row=0,column=0, sticky='NSEW')##        self.output_textbox.configure(state='normal')##        self.output_textbox.delete(1.0,tk1.END)##        self.output_textbox.insert(tk1.END, self.verbose)##        self.output_textbox.configure(state='disabled')####        self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")##        self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)##        self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set##        self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)####        self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")##        self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)##        self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set##        self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM,ipadx=200)####        self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())##        self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())##        root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)##        self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))##        self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))    self.outputtype_frm = tk1.Frame(self.canvas)    self.outputtype_frm.grid(row=7,column=2,sticky='NSEW')    ##    self.verboseoutput_butt = tk1.Button(self.outputtype_frm, text=" Verbose \n Output ", height=3,command=lambda: changeoutputtype(self,"Verbose","Data Check: Input Declination & Inclination","Mean Declination & Inclination"))##    self.verboseoutput_butt.pack(side=tk1.LEFT,padx=10,pady=2)##    self.verboseoutput_butt.configure(state='disabled')####    self.conciseoutput_butt = tk1.Button(self.outputtype_frm, text=" Concise \n Output ", height=3,command=lambda: changeoutputtype(self,"Concise","Data Check: Input Declination & Inclination","Mean Declination & Inclination"))##    self.conciseoutput_butt.pack(side=tk1.LEFT,padx=10,pady=2)####    self.sidebysidetype_butt = tk1.Button(self.outputtype_frm, text=" Concise Side-by-Side \n Input/Data Check ", height=3,command=lambda:##                                          changeoutputtype(self,"Side-by-side","Data Check: Input Declination & Inclination","Mean Latitude and Longitude"))##    self.sidebysidetype_butt.pack(side=tk1.LEFT,padx=10,pady=2)##    if datasource == "Listbox":##        self.conciseoutput_butt.configure(state='disabled')##        self.sidebysidetype_butt.configure(state='disabled')##    else:##        self.conciseoutput_butt.configure(state='normal')##        self.sidebysidetype_butt.configure(state='normal')            self.savedata = self.finaloutput_verbose + "\n\n" + self.verbose    self.saveoutputdata_butt = tk1.Button(self.outputtype_frm, text=" Save \n Output ", height=3,command=lambda: saveoutput(self))    self.saveoutputdata_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.saveoutputdata_butt, 10, -20, 200, self, \    'Save Output (Ctrl-S).')    self.clearoutput_butt = tk1.Button(self.outputtype_frm, text=" Clear \n Output ", height=3,command=lambda: foldtest_enter(self))    self.clearoutput_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.clearoutput_butt, 10, -20, 200, self, \    'Clear (Ctrl-L).')    self.calclist_butt = tk1.Button(self.outputtype_frm, text="  Calculate from Selected  \n  List Box Components  ", height=3,command=lambda: calculate_foldtest(self,"Listbox","All"))    self.calclist_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.calclist_butt, 30, -20, 200, self, \    'Calculate From List Box.\n\nAlso creates equal area plot in of components.')    self.ftsaveselected_butt = tk1.Button(self.outputtype_frm, text=" Save \n Selected ", height=3,command=lambda: ftsaveselected(self))    self.ftsaveselected_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.ftsaveselected_butt, 30, -20, 200, self, \    'Save selected components in List Box as .lsq file.')    self.ftpurgeunselected_butt = tk1.Button(self.outputtype_frm, text=" Purge Unselected, \n Recalculate, Replot ", height=3,command=lambda: ftpurgeunselected(self))    self.ftpurgeunselected_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.ftpurgeunselected_butt, 30, -20, 200, self, \    'Purge unselected components in List Box.')    self.addmorelistbox_butt = tk1.Button(self.outputtype_frm, text=" Add Components \n To List Box \n From .lsq File ", height=3,command=lambda: addmorelistbox(self))    self.addmorelistbox_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.addmorelistbox_butt, 30, -20, 200, self, \    'Add more components to listbox from .lsq file.\n\nWill append any new items to end of List Box and does NOT erase any items from List Box.')    self.moreftplotbutts_frm = tk1.Frame(self.canvas)    self.moreftplotbutts_frm.grid(row=8,column=2,sticky='NSEW')    self.tiltonly_butt = tk1.Button(self.moreftplotbutts_frm, text=" Plot Tilt\n Only ", height=3,command=lambda: calculate_foldtest(self,"Listbox","Tilt"))    self.tiltonly_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.tiltonly_butt, 30, -20, 200, self, \    'Plot only tilt components.\n')    self.geogonly_butt = tk1.Button(self.moreftplotbutts_frm, text=" Plot Geographic \n Only ", height=3,command=lambda: calculate_foldtest(self,"Listbox","Geog"))    self.geogonly_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.geogonly_butt, 30, -20, 200, self, \    'Plot only geographic components.\n')    self.bootstrap_butt = tk1.Button(self.moreftplotbutts_frm, text=" Bootstrap \n Fold Test ", height=3,command=lambda: bootstrap_foldtest(self))    self.bootstrap_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.bootstrap_butt, 30, -20, 200, self, \    'Bootstrap Fold Test.\n')    root.bind("<Control-s>", lambda x: saveoutput(self))    root.bind("<Control-S>", lambda x: saveoutput(self))    root.unbind("<Control-l>")    root.unbind("<Control-L>")    root.bind("<Control-l>", lambda x: meandecinc_enter(self))    root.bind("<Control-L>", lambda x: meandecinc_enter(self))    returndef makepointlist_frm(self):    self.scrollframe=tk1.Frame(self.checkdata_dataselect_frm,relief=tk1.GROOVE,width=250,height=800,bd=1)    self.scrollframe.grid(row=0,column=2,sticky='NSEW')    self.scrollcanvas = tk1.Canvas(self.scrollframe)     self.pointlist_frm = tk1.Frame(self.scrollcanvas)    self.pointlist_scrollbar = tk1.Scrollbar(self.scrollframe,orient="vertical",command=self.scrollcanvas.yview)      self.scrollcanvas.configure(yscrollcommand=self.pointlist_scrollbar.set)    self.pointlist_scrollbar.pack(side=tk1.RIGHT,fill=tk1.Y)        self.scrollcanvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE,ipadx=50)    self.scrollcanvas.create_window((0,0),window=self.pointlist_frm,anchor=tk1.NW)        self.pointlist_frm.bind("<Configure>",self.ft_scrollfunction)    self.scrollcanvas.bind("<Enter>", self.ft_enterscrollcanvas)    self.scrollcanvas.bind("<Leave>", self.ft_leavescrollcanvas)    returndef foldtest_enter(self):    self.canvas.destroy()    self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.introname = tk1.Label(self.canvas, text="13. Calculate: Fold Test\n(Set of Geographic Dec/Inc Directions and Tilt Dec/Inc Directions %s\nFold Test Outcome + Mean Dec/Inc Geographic and Tilt Directions, %s95, k)" % (right_arrow,alpha_symbol),font=("Helvetica",25))    self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')    self.enterdata_label = tk1.Label(self.canvas, text="Enter Data in Text Box or Select Datafile\n(.lsq, .txt, or Excel supported)",font=("Helvetica 12 bold"))    self.enterdata_label.grid(row=1,column=0, sticky='NSEW')    self.enterdatafromfile_butt = tk1.Button(self.canvas, text="Open Datafile", width=2, height=5,command=lambda: openfile_and_runcalcprocedure(self,calculate_foldtest))    self.enterdatafromfile_butt.grid(row=2,column=0, sticky='NSEW',padx=3,pady=4)    CreateToolTip(self.enterdatafromfile_butt, 30, -50, 250, self, \    'Open Datafile (Ctrl-O).\n\nInput from .lsq, files, Excel files, and text files is supported.')    root.bind("<Control-o>", lambda x: openfile_and_runcalcprocedure(self,calculate_foldtest))    root.bind("<Control-O>", lambda x: openfile_and_runcalcprocedure(self,calculate_foldtest))    self.spacer1_label = tk1.Label(self.canvas, text="  ")    self.spacer1_label.grid(row=3,column=0, sticky='NSEW')    self.enterdatatextbox_label = tk1.Label(self.canvas, text="Enter Input Geographic Decs/Incs, and Tilt Decs/Incs:", width=50)    self.enterdatatextbox_label.grid(row=4,column=0, sticky='NSEW')    self.enterdata_textbox = tk1.Text(self.canvas, wrap=tk1.NONE, height=30,width=50)    self.enterdata_textbox.grid(row=5,column=0, sticky='NSEW')    self.enterdata_textbox.focus_set()    self.enterdata_yscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.enterdata_yscrollbar.config(command=self.enterdata_textbox.yview)    self.enterdata_textbox['yscrollcommand'] = self.enterdata_yscrollbar.set    self.enterdata_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.enterdata_xscrollbar = tk1.Scrollbar(self.enterdata_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.enterdata_xscrollbar.config(command=self.enterdata_textbox.xview)    self.enterdata_textbox['xscrollcommand'] = self.enterdata_xscrollbar.set    self.enterdata_xscrollbar.pack(fill=tk1.X, side=tk1.BOTTOM)    self.enterdata_textbox.bind("<Enter>", lambda x: self.enterdatatextbox())    self.enterdata_textbox.bind("<Leave>", lambda x: self.leavedatatextbox())    self.enterdata_textbox.bind("<Control-Key-a>", lambda x: select_all(self.enterdata_textbox))    self.enterdata_textbox.bind("<Control-Key-A>", lambda x: select_all(self.enterdata_textbox))    self.spacer2_label = tk1.Label(self.canvas, text="  ")    self.spacer2_label.grid(row=4,column=1, sticky='NSEW')    self.finaloutput_label = tk1.Label(self.canvas, text="Final Output of McElhinny (1964) Fold Test", width=135)    self.finaloutput_label.grid(row=1,column=2, sticky='NSEW')    self.finaloutput_textbox = tk1.Text(self.canvas,width=100, height=5)    self.finaloutput_textbox.grid(row=2,column=2, sticky='NSEW')    self.finaloutput_textbox.configure(state='disabled')    self.finaloutput_textbox.bind("<Control-Key-a>", lambda x: select_all(self.finaloutput_textbox))    self.finaloutput_textbox.bind("<Control-Key-A>", lambda x: select_all(self.finaloutput_textbox))    self.spacer4_label = tk1.Label(self.canvas, text="  ")    self.spacer4_label.grid(row=3,column=2, sticky='NSEW')    self.outputdatatextbox_label = tk1.Label(self.canvas, text="  Input Data Check                                                                                                        List Box of Components")    self.outputdatatextbox_label.grid(row=4,column=2, sticky='W')    self.checkdata_dataselect_frm = tk1.Frame(self.canvas)    self.checkdata_dataselect_frm.grid(row=5,column=2, sticky='NSEW')        self.output_textbox = tk1.Text(self.checkdata_dataselect_frm, wrap=tk1.NONE, height=30,width=200)    self.output_textbox.grid(row=0,column=0, sticky='NSEW')    self.output_textbox.configure(state='disabled')    self.outputtextbox_yscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.VERTICAL,cursor="arrow")    self.outputtextbox_yscrollbar.config(command=self.output_textbox.yview)    self.output_textbox['yscrollcommand'] = self.outputtextbox_yscrollbar.set    self.outputtextbox_yscrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=136)    self.outputtextbox_xscrollbar = tk1.Scrollbar(self.output_textbox,orient=tk1.HORIZONTAL,cursor="arrow")    self.outputtextbox_xscrollbar.config(command=self.output_textbox.xview)    self.output_textbox['xscrollcommand'] = self.outputtextbox_xscrollbar.set    self.outputtextbox_xscrollbar.pack(fill=tk1.X,side=tk1.BOTTOM,ipadx=200)    self.output_textbox.bind("<Enter>", lambda x: self.enteroutputtextbox())    self.output_textbox.bind("<Leave>", lambda x: self.leaveoutputtextbox())    root.bind_all("<Control-Shift-MouseWheel>", self.doublemousewheel)    self.output_textbox.bind("<Control-Key-a>", lambda x: select_all(self.output_textbox))    self.output_textbox.bind("<Control-Key-A>", lambda x: select_all(self.output_textbox))    self.spacerX_label = tk1.Label(self.checkdata_dataselect_frm, text="  ")    self.spacerX_label.grid(row=0,column=1, sticky='NSEW')    makepointlist_frm(self)    self.spacer3_label = tk1.Label(self.canvas, text="  ")    self.spacer3_label.grid(row=6,column=0, sticky='NSEW')        self.calc_butt = tk1.Button(self.canvas, text="Calculate from Text Box", width=2, height=3,command=lambda: calculate_foldtest(self,"Widget","All"))    self.calc_butt.grid(row=7,column=0, sticky='NSEW',padx=3,pady=4)    root.bind_all("<Control-Return>", lambda x: calculate_foldtest(self,"Widget","All"))    self.enterdata_textbox.bind("<Control-Return>", lambda x: control_return_textbox(self,calculate_foldtest))    CreateToolTip(self.calc_butt, 30, -20, 200, self, \    'Calculate from Text Box (Ctrl-Enter).\n\nWill erase and reload the List Box at the far right using items in the Text Box.')    returndef calculator(self):    unbindeverything(self)    self.interior.destroy()    self.maincanvas.xview_moveto(0)    self.maincanvas.yview_moveto(0)    self.interior = tk1.Frame(self.maincanvas)    self.interior_id = self.maincanvas.create_window(0, 0, window=self.interior,anchor=tk1.NW)    self.zerorowcolspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))    self.zerorowcolspacer.grid(row=0, column=0, sticky='NSEW')    self.colspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))    self.colspacer.grid(row=0, column=4, sticky='NSEW')    self.canvas=tk1.Canvas(self.interior, bd=0)    self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)    self.calcsplash_frm = tk1.Frame(self.interior)    self.calcsplash_frm.grid(row=1,column=0,columnspan=5,rowspan=11, sticky='NSEW')    self.introname = tk1.Label(self.calcsplash_frm, text="Paleomagnetic Calculator",font=("Helvetica 25 bold"))    self.introname.pack(fill=tk1.X)    self.calcspacer2 = tk1.Label(self.calcsplash_frm, text="  ",font=("Helvetica",10))    self.calcspacer2.pack(fill=tk1.X)    self.welcomename = tk1.Label(self.calcsplash_frm, text="What would you like to calculate?",font=("Helvetica 18 bold"))    self.welcomename.pack(fill=tk1.X)    self.calcspacer3 = tk1.Label(self.calcsplash_frm, text="  ",font=("Helvetica",10))    self.calcspacer3.pack(fill=tk1.X)        self.fullsitestats_butt = tk1.Button(self.calcsplash_frm, text="1. Full Site Statistics:\n(Set of Site Lat/Lon Coordinates, Dec/Inc Directions (+ %s95s) %s\nGrand Mean VGP (+ A95, K or dp, dm), Mean Dec/Inc (%s95, k)\nMean Site Location, Paleolatitude + Individual Site VGPs (+ dp, dm))" % (alpha_symbol,right_arrow,alpha_symbol), font=("Helvetica 12 bold"), width=5, height=4,command=lambda: fullsitestats_enter(self))    self.fullsitestats_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.fullsitestats_butt, 15, -95, 450, self, \    'Calculate Full Site Stats.\n\nUsing input of lat/lon coordinates and dec/inc directions (+ %s95s) from a set of sites, this function calculates individual site VGPs (+ dp, dm), as well as the Grand Mean VGP (+ A95, K or dp, dm), mean site location, and paleolatitude (+ upper and lower limits).' % (alpha_symbol))    self.decinctovgp_butt = tk1.Button(self.calcsplash_frm, text="2. Site Virtual Geomagnetic Pole (VGP) (+ dp, dm)\n(Site Lat/Lon, Site Dec/Inc (+ %s95) %s Site VGP (+ dp, dm))" % (alpha_symbol,right_arrow), font=("Helvetica 12 bold"), width=5, height=2,command=lambda: decinctovgp_enter(self))    self.decinctovgp_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.decinctovgp_butt, 15, -65, 450, self, \    'Calculate Site Virtual Geomagnetic Poles (VGPs).\n\nUsing input of lat/lon coordinates and dec/inc directions (+ %s95s) from a set of sites, this function calculates individual site VGPs (+ dp, dm).' % (alpha_symbol))    self.vgptodecinc_butt = tk1.Button(self.calcsplash_frm, text="3. Site Declination & Inclination\n(Site Lat/Lon, Site VGP Coordinates %s Site Dec/Inc)" % right_arrow, font=("Helvetica 12 bold"), width=5, height=2,command=lambda: vgptodecinc_enter(self))    self.vgptodecinc_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.vgptodecinc_butt, 15, -65, 450, self, \    'Calculate Site Declination/Inclination Directions.\n\nUsing input of lat/lon coordinates and virtual geomagnetic poles (VGPs) from a set of sites, this function calculates individual site declination and inclination directions.')    self.meandecinc_butt = tk1.Button(self.calcsplash_frm, text="4. Mean Declination & Inclination (+ %s95, k)\n(Set of Site Mean Dec/Inc Directions %s Mean Dec/Inc + %s95, k)" % (alpha_symbol,right_arrow,alpha_symbol), font=("Helvetica 12 bold"), width=5, height=2,command=lambda: meandecinc_enter(self))    self.meandecinc_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.meandecinc_butt, 15, -65, 450, self, \    'Calculate Mean Declination/Inclination Directions.\n\nUsing input of dec/inc directions from a set of sites, this function calculates the mean declination and inclination directions.')    self.meanvgp_butt = tk1.Button(self.calcsplash_frm, text="5. Mean Virtual Geomagnetic Pole (VGP) (+ A95, K)\n(Set of Site VGPs %s Mean VGP, + A95, K)" % (right_arrow), font=("Helvetica 12 bold"), width=5, height=2,command=lambda: meanvgp_enter(self))    self.meanvgp_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.meanvgp_butt, 15, -65, 450, self, \    'Calculate Mean Virtual Geomagnetic Pole (VGP).\n\nUsing input of VGPs from a set of sites, this function calculates the mean VGP location (+ A95, K).')    self.inctopaleolat_butt = tk1.Button(self.calcsplash_frm, text="6. Paleolatitude\n(Inclination %s Paleolatitude)" % right_arrow, font=("Helvetica 12 bold"), width=5, height=2,command=lambda: inctopaleolat_enter(self))    self.inctopaleolat_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.inctopaleolat_butt, 15, -65, 450, self, \    'Calculate Paleolatitude.\n\nUsing input of inclination (+ %s95), this function calculates the paleolatitude (+ upper and lower limits).' % (alpha_symbol))    self.paleolattoinc_butt = tk1.Button(self.calcsplash_frm, text="7. Inclination\n(Latitude %s Inclination)" % right_arrow, font=("Helvetica 12 bold"), width=5, height=2,command=lambda: lattoinc_enter(self))    self.paleolattoinc_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.paleolattoinc_butt, 15, -65, 450, self, \    'Calculate Paleoinclination.\n\nUsing input of paleolatitude (+ %s95), this function calculates the paleoinclination (+ upper and lower limits).' % (alpha_symbol))    self.angdistcomp_butt = tk1.Button(self.calcsplash_frm, text="8. Angular Distance (%s)\n(Between Two Lat/Lon Coordinates or Dec/Inc Components)" % (degree_sign), font=("Helvetica 12 bold"), width=5, height=2,command=lambda: angdist_enter(self))    self.angdistcomp_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.angdistcomp_butt, 15, -80, 450, self, \    'Calculate Angular Distance.\n\nUsing input of two latitude/longitude coordinates or declination/inclination components, this function calculates the angular distance between those two points/directions.')    self.realdistcomp_butt = tk1.Button(self.calcsplash_frm, text="9. Real Distance (km)\n(Between Two Lat/Lon Coordinates)", font=("Helvetica 12 bold"), width=5, height=2,command=lambda: realdist_enter(self))    self.realdistcomp_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.realdistcomp_butt, 15, -65, 450, self, \    'Calculate Real Distance.\n\nUsing input of two latitude/longitude coordinates, this function calculates the real distance on the surface of the Earth between those two points.')    self.meanlatlon_butt = tk1.Button(self.calcsplash_frm, text="10. Mean Latitude & Longitude\n(Set of Lat/Lon Coordinates %s Mean Lat/Lon)" % right_arrow, font=("Helvetica 12 bold"), width=5, height=2,command=lambda: meanlatlon_enter(self))    self.meanlatlon_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.meanlatlon_butt, 15, -65, 450, self, \    'Calculate Mean Latitude/Longitude.\n\nUsing input of a set of latitude/longitude coordinates, this function calculates the mean latitude/longitude location.')    self.rotatecoords_butt = tk1.Button(self.calcsplash_frm, text="11. Rotated Coordinates\n(Core Coordinates %s Geographic Coordinates %s Tilt-Corrected)" % (right_arrow,right_arrow), font=("Helvetica 12 bold"), width=5, height=2,command=lambda: rotatecoords_enter(self))    self.rotatecoords_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.rotatecoords_butt, 15, -80, 450, self, \    'Calculate Rotated Coordinates.\n\nUsing input of a Core coordinates (dec/inc) and core plate strike/dip, or Geographic coordinates (dec/inc) and site strike/dip, this function calculates the rotated coordinates.')    self.convertcoords_butt = tk1.Button(self.calcsplash_frm, text="12. Converted Coordinates\n(Decimal Degrees %s Deg. Decimal Min. %s Deg. Min. Sec.)" % (double_arrow, double_arrow), font=("Helvetica 12 bold"), width=5, height=2,command=lambda: convertcoords_enter(self))    self.convertcoords_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.convertcoords_butt, 15, -80, 450, self, \    'Convert Coordinate Format.\n\nThis function converts coordinates of a given format (decimal degrees, degrees + decimal minutes, or degrees + minutes + seconds) to another format (decimal degrees, degrees + decimal minutes, or degrees + minutes + seconds).')    self.foldtest_butt = tk1.Button(self.calcsplash_frm, text="13. Fold Test (McElhinny, 1964)", font=("Helvetica 12 bold"), width=5, height=1,command=lambda: foldtest_enter(self))    self.foldtest_butt.pack(fill=tk1.X, padx=25, pady=5)    CreateToolTip(self.foldtest_butt, 15, -65, 450, self, \    'Fold Test.\n\nThis function allows the user to input and select from a list of geographic and tilt coordinates to perform a fold test using the method of McElhinny (1964).')    self.lastrow_frm = tk1.Frame(self.interior)    self.lastrow_frm.grid(row=12,column=1,columnspan=2)    self.reset_butt = tk1.Button(self.lastrow_frm, text="RESET", width=7, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.startover())    self.reset_butt.pack(side=tk1.LEFT,padx=10,pady=2)    CreateToolTip(self.reset_butt, 15, -80, 180, self, \    'Reset Multiplot (Ctrl-Shift-R).\n\nReturn to splash page and open and view sample or step demagnetization data from a site.')        self.plotsitemeans_butt = tk1.Button(self.lastrow_frm, text="PLOT SITE MEANS", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: plotsitemeans(self,False))    self.plotsitemeans_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.plotsitemeans_butt, 20, -80, 180, self, \    'Plot Site Means (Ctrl-Shift-M).\n\nOpen an .lsq file and plot components, and calculate and plot new means for a site.')    self.calculator_butt = tk1.Button(self.lastrow_frm, text="CALCULATOR", width=11, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: calculator(self))    self.calculator_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.calculator_butt, 18, -125, 250, self, \    'Paleomagnetic Calculator (Ctrl-Shift-C).\n\nCalculate various paleomagnetic statistics including:, Grand Mean VGP, Site VGPs, Site Directions, Mean Directions, Mean Site Location, Paleolatitude, Paleoinclination, Angular Distance, Real distance, Rotated Coordinates, and Convert Coordinate Format.')    self.about_butt = tk1.Button(self.lastrow_frm, text="ABOUT", width=6, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.aboutmultiplot())    self.about_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.about_butt, 10, -110, 180, self, \    'About Multiplot (Ctrl-Shift-A).\n\nDeveloper info and support contact, technical requirements, citation information, and software license and legal/copyright information.')        self.shortcut_butt = tk1.Button(self.lastrow_frm, text="SHORTCUTS", width=10, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.shortcuts())    self.shortcut_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.shortcut_butt, 15, -65, 180, self, \    'Multiplot Shortcuts (Ctrl-Shift-S).\n\nSee a list of keyboard and mouse shortcuts.')    self.quit_butt = tk1.Button(self.lastrow_frm, text="QUIT", width=5, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.quitprogram())    self.quit_butt.pack(side=tk1.LEFT,padx=7,pady=2)    CreateToolTip(self.quit_butt, 10, -20, 180, self, \    'Quit Multiplot (Ctrl-Shift-Q).')    return################ Listbox Functions ################def selectall_printsteplistbox(boxname):    exec("%s.selection_set(0, tk1.END)" % boxname)################ Main Application Functions ################def doubleclicksamplebox(self):    if self.plottype == "samples":        selectedsample = self.samplelist[self.samplelistbox.curselection()[0]]        if selectedsample != self.currentsample:            self.domultiplot(False,False,False,False)        else:            self.plotnewsample()    elif self.plottype == "steps":        selectedstep = self.steplist_clean[self.samplelistbox.curselection()[0]]        if selectedstep != self.currentstep:            self.domultiplot(False,False,False,False)        else:            self.plotnewstep(False)    returndef unbindeverything(self):    root.unbind("<Control-a>")    root.unbind("<Control-A>")    root.unbind("<Control-l>")    root.unbind("<Control-L>")        root.unbind("<Control-m>")    root.unbind("<Control-M>")        root.unbind("<Control-n>")    root.unbind("<Control-N>")    root.unbind("<Control-o>")    root.unbind("<Control-O>")    root.unbind("<Control-p>")    root.unbind("<Control-P>")    root.unbind("<Control-s>")    root.unbind("<Control-S>")    root.unbind("<Control-t>")    root.unbind("<Control-T>")    root.unbind("<Control-u>")    root.unbind("<Control-U>")    root.unbind_all("<Control-Return>")    root.unbind_all("<Control-Shift-MouseWheel>")    returnclass Application(tk1.Frame):    def __init__(self, master=None):        tk1.Frame.__init__(self,master)        self.filepath = ""        self.currentfile = ""        self.startprogram()            def startprogram(self):        global fig        self.reset_mouselocation()        self.master.lift()        self.master.focus_set()        self.master.title("Multiplot by VGP, written in Python 2.7.14")        self.vertical_scrollbar = tk1.Scrollbar(master=root,orient=tk1.VERTICAL)        self.vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        self.horizontal_scrollbar = tk1.Scrollbar(master=root,orient=tk1.HORIZONTAL)        self.horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.maincanvas = tk1.Canvas(master=root, bd=0, highlightthickness=0,yscrollcommand=self.vertical_scrollbar.set,xscrollcommand=self.horizontal_scrollbar.set,width=maincanvaswidth,height=maincanvasheight,scrollregion=(0,0,maincanvaswidth,maincanvasheight))        self.maincanvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        self.vertical_scrollbar.config(command=self.maincanvas.yview)        self.horizontal_scrollbar.config(command=self.maincanvas.xview)        root.bind_all("<MouseWheel>", self._on_mousewheel_y)        root.bind_all("<Control-MouseWheel>", self._on_mousewheel_x)        root.bind_all("<Control-Up>", lambda x: self.bigmovewin)        root.bind_all("<Control-Down>", lambda x: self.bigmovewin)        root.bind_all("<Control-Left>", lambda x: self.bigmovewin)        root.bind_all("<Control-Right>", lambda x: self.bigmovewin)        root.bind_all("<Prior>", lambda x: self.bigmovewin)        root.bind_all("<Next>", lambda x: self.bigmovewin)        root.bind_all("<Control-Home>", lambda x: self.bigmovewin)        root.bind_all("<Control-End>", lambda x: self.bigmovewin)        root.bind_all("<Up>", self.arrowmovewin)        root.bind_all("<Down>", self.arrowmovewin)        root.bind_all("<Left>", self.arrowmovewin)        root.bind_all("<Right>", self.arrowmovewin)        self.maincanvas.xview_moveto(0)        self.maincanvas.yview_moveto(0)        self.interior = tk1.Frame(self.maincanvas)        self.interior_id = self.maincanvas.create_window(0, 0, window=self.interior,anchor=tk1.NW)        self.scrollcanvas = tk1.Canvas(self.interior)# this is necessary to scroll in the mean list box later if needed.        self.scrollcanvas.destroy()        fig = Figure(figsize=(mainfigurewidth,mainfigureheight),facecolor='white')        # Keep these two lines off or weird runtime errors arise:        #plt.rcParams["font.family"] = "consolas"         #plt.axis('off')        #self.zerorowcolspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))        #self.zerorowcolspacer.grid(row=0, column=0, sticky='NSEW')        self.colspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))        self.colspacer.grid(row=0, column=4, sticky='NSEW')        self.canvas=FigureCanvasTkAgg(fig,self.interior)        self.canvas.get_tk_widget().grid(row=0,column=6,rowspan=12,columnspan=2)        self.canvas.show()        self.splashframe = tk1.Frame(self.interior)        self.splashframe.grid(row=0,column=1,sticky='NSEW')        self.welcomename = tk1.Label(self.splashframe, text="\n\n\n\n    WELCOME TO MULTIPLOT!   ",font=("Helvetica",25))        self.welcomename.grid(row=0, column=0, columnspan=2, sticky='NSEW')        self.byvgp = tk1.Label(self.splashframe, text="by VGP\n",font=("Helvetica",15))        self.byvgp.grid(row=1, column=0, columnspan=2, sticky='NSEW')        self.spacertext2 = tk1.Label(self.splashframe, text=" ")        self.spacertext2.grid(row=2, column=0, sticky='S')        self.spacertext3 = tk1.Label(self.splashframe, text=" ")        self.spacertext3.grid(row=3, column=0, sticky='S')        self.spacertext4 = tk1.Label(self.splashframe, text=" ")        self.spacertext4.grid(row=4, column=0, sticky='S')                self.plotnewsite_butt = tk1.Button(self.splashframe, text="Plot Paleomagnetic Data", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.plotnewsite())        self.plotnewsite_butt.grid(row=5, column=0, columnspan=2, sticky='NSEW',padx=10,pady=2)        CreateToolTip(self.plotnewsite_butt, 100, -50, 300, self, \        'Open .sam data file created by Rapid SQUID "CIT" magnetometer system or .jr6 data file created by JR6 Spinner magnetometer system.')        self.spacertext6 = tk1.Label(self.splashframe, text=" ")        self.spacertext6.grid(row=6, column=0, sticky='S')        self.startrotatesquid_butt = tk1.Button(self.splashframe, text="Rotate Paleomagnetic Data", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.startrotate())        self.startrotatesquid_butt.grid(row=7, column=0, columnspan=2, sticky='NSEW',padx=10,pady=2)        CreateToolTip(self.startrotatesquid_butt, 100, -50, 300, self, \        'Rotate data in .sam data file created by Rapid SQUID "CIT" magnetometer system or .jr6 data file created by JR6 Spinner magnetometer system.')        self.spacertext8 = tk1.Label(self.splashframe, text=" ")        self.spacertext8.grid(row=8, column=0, sticky='S')##        vgpimagename = "VGP_logo_small2.gif"##        if os.path.isfile(vgpimagename):##            vgpimg = Image.open(vgpimagename)##            vgpphoto = ImageTk.PhotoImage(vgpimg)##            self.vgpimgpanel=tk1.Label(self.splashframe,image=vgpphoto)##            self.vgpimgpanel.image = vgpphoto##            self.vgpimgpanel.grid(row=11,column=1,sticky='S')##        else:##            vgp_image_url = "http://www.caseyluskin.com/images/%s" % vgpimagename##            try:##                vgp_image_byt = urlopen(vgp_image_url).read()##                vgp_image_b64 = base64.encodestring(vgp_image_byt)##                vgpphoto = tk1.PhotoImage(data=vgp_image_b64)##                self.vgpimgpanel=tk1.Label(self.splashframe,image=vgpphoto)##                self.vgpimgpanel.image = vgpphoto##                self.vgpimgpanel.grid(row=11,column=1,sticky='S')##            except:##                self.vgpimgpanel=tk1.Label(self.splashframe,text=" ")##                self.vgpimgpanel.grid(row=11,column=1,sticky='S')        self.lastrow_frm = tk1.Frame(self.interior)        self.lastrow_frm.grid(row=12,column=1,columnspan=2)        self.reset_butt = tk1.Button(self.lastrow_frm, text="RESET", width=7, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.startover())        self.reset_butt.pack(side=tk1.LEFT,padx=10,pady=2)        CreateToolTip(self.reset_butt, 15, -80, 180, self, \        'Reset Multiplot (Ctrl-Shift-R).\n\nReturn to splash page and open and view sample or step demagnetization data from a site.')                self.plotsitemeans_butt = tk1.Button(self.lastrow_frm, text="PLOT SITE MEANS", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: plotsitemeans(self,False))        self.plotsitemeans_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.plotsitemeans_butt, 20, -80, 180, self, \        'Plot Site Means (Ctrl-Shift-M).\n\nOpen an .lsq file and plot components, and calculate and plot new means for a site.')        self.calculator_butt = tk1.Button(self.lastrow_frm, text="CALCULATOR", width=11, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: calculator(self))        self.calculator_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.calculator_butt, 18, -125, 250, self, \        'Paleomagnetic Calculator (Ctrl-Shift-C).\n\nCalculate various paleomagnetic statistics including:, Grand Mean VGP, Site VGPs, Site Directions, Mean Directions, Mean Site Location, Paleolatitude, Paleoinclination, Angular Distance, Real distance, Rotated Coordinates, and Convert Coordinate Format.')        self.about_butt = tk1.Button(self.lastrow_frm, text="ABOUT", width=6, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.aboutmultiplot())        self.about_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.about_butt, 10, -110, 180, self, \        'About Multiplot (Ctrl-Shift-A).\n\nDeveloper info and support contact, technical requirements, citation information, and software license and legal/copyright information.')                self.shortcut_butt = tk1.Button(self.lastrow_frm, text="SHORTCUTS", width=10, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.shortcuts())        self.shortcut_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.shortcut_butt, 15, -65, 180, self, \        'Multiplot Shortcuts (Ctrl-Shift-S).\n\nSee a list of keyboard and mouse shortcuts.')        self.quit_butt = tk1.Button(self.lastrow_frm, text="QUIT", width=5, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.quitprogram())        self.quit_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.quit_butt, 10, -20, 180, self, \        'Quit Multiplot (Ctrl-Shift-Q).')        root.bind("<Control-Shift-r>", lambda x: self.startover())        root.bind("<Control-Shift-R>", lambda x: self.startover())        root.bind("<Control-Shift-m>", lambda x: plotsitemeans(self,False))        root.bind("<Control-Shift-M>", lambda x: plotsitemeans(self,False))        root.bind("<Control-Shift-c>", lambda x: calculator(self))        root.bind("<Control-Shift-C>", lambda x: calculator(self))                root.bind("<Control-Shift-a>", lambda x: self.aboutmultiplot())        root.bind("<Control-Shift-A>", lambda x: self.aboutmultiplot())        root.bind("<Control-Shift-s>", lambda x: self.shortcuts())        root.bind("<Control-Shift-S>", lambda x: self.shortcuts())        root.bind("<Control-Shift-q>", lambda x: self.quitprogram())        root.bind("<Control-Shift-Q>", lambda x: self.quitprogram())        self.enterdata_textbox = tk1.Text(self.interior)        self.offset_entrybox = tk1.Entry(self.interior)        self.output_textbox = tk1.Text(self.interior)        self.finaloutput_textbox = tk1.Text(self.interior)        return        def plotnewsite(self):        global zijcont, cont3D, eqcont, jjocont                self.plottype = "samples"        self.filepathandname = openfile(self,"Open Data File to Plot: Select .sam (Rapid SQUID), .jr6 (JR6 Spinner), or .dat (2G Long Core)","*.sam, *.jr6, *.dat",                                        (("Rapid SQUID .sam files, JR6 Spinner .jr6 files, Long Core .dat files","*.sam"),("Rapid SQUID .sam files, JR6 Spinner .jr6 files, Long Core .dat files","*.jr6"),("Rapid SQUID .sam files, JR6 Spinner .jr6 files, Long Core .dat files","*.dat"),("Rapid SQUID .sam files","*.sam"),("JR6 Spinner .jr6 files","*.jr6"),("2G Long Core .dat files","*.dat"),("all files","*.*")))        if self.filepathandname == "":            return                self.samplelist = getsamplenames(self)        self.totsampcount = len(self.samplelist)        self.sampleindex = 0        self.currentsample = self.samplelist[self.sampleindex]                if self.datatype == "Rapid":            self.datafile = self.currentsample        elif self.datatype == "JR6":            self.datafile = self.sitename + ".txt"        elif self.datatype == "DAT":            self.datafile = self.sitename + "*.dat"        self.coordtype = "Tilt"        self.sample = Createnewsample(self,self.currentsample)        self.show_zij = self.show_3D = self.show_eq = self.show_jjo =True        zijcont = zij_setdefaults() # set Zijderveld Defaults        cont3D = setdefaults3D()  # set 3D defaults        eqcont = eq_setdefaults() # set Equal Area defaults        jjocont = jjo_setdefaults(self.plottype) # set J/Jo defaults                self.domultiplot(True,True,False,False)        return    def plotnewsample(self):        global zijcont, cont3D, eqcont, jjocont                if self.datatype == "Rapid":            self.datafile = self.currentsample        self.coordtype = "Tilt"        self.coordtype_var.set(self.coordtype)        self.sample = Createnewsample(self,self.currentsample)        self.show_zij = self.show_3D = self.show_eq = self.show_jjo =True        zijcont = zij_setdefaults() # set Zijderveld Defaults        cont3D = setdefaults3D()  # set 3D defaults        eqcont = eq_setdefaults() # set Equal Area defaults        jjocont = jjo_setdefaults(self.plottype) # set J/Jo defaults        self.domultiplot(True,False,False,False)        return    def plotsamples(self):        global zijcont, cont3D, eqcont, jjocont                self.plottype = "samples"        self.sampleindex = 0        self.currentsample = self.samplelist[self.sampleindex]        if self.datatype == "Rapid":            self.datafile = self.currentsample        self.sample = Createnewsample(self,self.currentsample)        self.show_zij = True        self.show_3D = True        self.show_eq = True        self.show_jjo = True        zijcont = zij_setdefaults() # set Zijderveld Defaults        cont3D = setdefaults3D()  # set 3D defaults        eqcont = eq_setdefaults() # set Equal Area defaults        jjocont = jjo_setdefaults(self.plottype) # set J/Jo defaults                self.domultiplot(True,False,True,False)        return    def plotsteps(self):        global zijcont2, cont3D2, eqcont2, jjocont2        self.plottype = "steps"        self.sitedata = []        self.steplist = []        newsteplist = []        for samplename in self.samplelist:            if self.datatype == "Rapid":                samplepresent = os.path.isfile(os.path.join(self.filepath, samplename))            elif self.datatype in ["JR6","DAT"]:                samplepresent = samplename in self.samplelist            if samplepresent:                newsample = Createnewsample(self,samplename)                self.sitedata.append(newsample)                for step in newsample.data:                    if not step.dmagstep_clean in newsteplist:                        newstep = Stepinsite(step.dmagstep,step.dmagstep_mod,step.dmagstep_numsonly,step.dmagstep_type,step.dmagstep_clean)                        self.steplist.append(newstep)                        newsteplist.append(step.dmagstep_clean)        self.steplist = sorted(self.steplist, key=attrgetter('dmagstep_numsonly')) # sort by dmagstep number        self.steplist = sorted(self.steplist, key=attrgetter('sortpriority')) # sort by dmagstep type sort priority, with NRM, AF, and TT in that order.        self.steplist_clean = []        for sitestep in self.steplist:            self.steplist_clean.append(sitestep.dmagstep_clean)        self.totstepcount = len(self.steplist_clean)                self.stepindex = 0        self.currentstep = self.steplist_clean[self.stepindex]        self.sitesteptext = getsitesteptext(self,True)        self.coordtype_var.set(self.coordtype)        self.show_zij = False        self.show_3D = False        self.show_jjo = False        self.show_eq = True        zijcont2 = zij_setdefaults() # set Zijderveld Defaults        cont3D2 = setdefaults3D()  # set 3D defaults        eqcont2 = eq_setdefaults() # set Equal Area defaults        jjocont2 = jjo_setdefaults(self.plottype) # set J/Jo defaults                self.domultiplot(True,False,True,False)        return    def plotnewstep(self,reset):        global zijcont2, cont3D2, eqcont2, jjocont2        if reset:            self.samplelist = getsamplenames(self)            self.sitedata = []            self.steplist = []            newsteplist = []            for samplename in self.samplelist:                if self.datatype == "Rapid":                    samplepresent = os.path.isfile(os.path.join(self.filepath, samplename))                elif self.datatype in ["JR6", "DAT"]:                    samplepresent = samplename in self.samplelist                if samplepresent:                    newsample = Createnewsample(self,samplename)                    self.sitedata.append(newsample)                    for step in newsample.data:                        if not step.dmagstep_clean in newsteplist:                            newstep = Stepinsite(step.dmagstep,step.dmagstep_mod,step.dmagstep_numsonly,step.dmagstep_type,step.dmagstep_clean)                            self.steplist.append(newstep)                            newsteplist.append(step.dmagstep_clean)            self.steplist = sorted(self.steplist, key=attrgetter('dmagstep_numsonly')) # sort by dmagstep number            self.steplist = sorted(self.steplist, key=attrgetter('sortpriority')) # sort by dmagstep type sort priority, with NRM, AF, and TT in that order.            self.steplist_clean = []            for sitestep in self.steplist:                self.steplist_clean.append(sitestep.dmagstep_clean)            self.totstepcount = len(self.steplist_clean)                self.currentstep = self.steplist_clean[self.stepindex]        self.sitesteptext = getsitesteptext(self,True)        self.coordtype_var.set(self.coordtype)                self.show_zij = False        self.show_3D = False        self.show_jjo = False        self.show_eq = True        zijcont2 = zij_setdefaults() # set Zijderveld Defaults        cont3D2 = setdefaults3D()  # set 3D defaults        eqcont2 = eq_setdefaults() # set Equal Area defaults        jjocont2 = jjo_setdefaults(self.plottype) # set J/Jo defaults        self.domultiplot(True,False,False,False)        return    def plotmultiplesamples(self):        global zijcont3, cont3D3, eqcont3, jjocont3        self.plottype = "multiple"        self.sitedata = []        self.steplist = []        newsteplist = []        for samplename in self.samplelist:            if self.datatype == "Rapid":                samplepresent = os.path.isfile(os.path.join(self.filepath, samplename))            elif self.datatype in ["JR6","DAT"]:                samplepresent = samplename in self.samplelist            if samplepresent:                newsample = Createnewsample(self,samplename)                self.sitedata.append(newsample)                for step in newsample.data:                    if not step.dmagstep_clean in newsteplist:                        newstep = Stepinsite(step.dmagstep,step.dmagstep_mod,step.dmagstep_numsonly,step.dmagstep_type,step.dmagstep_clean)                        self.steplist.append(newstep)                        newsteplist.append(step.dmagstep_clean)        self.steplist = sorted(self.steplist, key=attrgetter('dmagstep_numsonly')) # sort by dmagstep number        self.steplist = sorted(self.steplist, key=attrgetter('sortpriority')) # sort by dmagstep type sort priority, with NRM, AF, and TT in that order.        self.steplist_clean = []        for sitestep in self.steplist:            self.steplist_clean.append(sitestep.dmagstep_clean)        self.totstepcount = len(self.steplist_clean)        self.totsampcount = len(self.sitedata)                self.coordtype_var.set(self.coordtype)        self.show_zij = False        self.show_3D = False        self.show_eq = False        self.show_jjo = True        zijcont3 = zij_setdefaults() # set Zijderveld Defaults        cont3D3 = setdefaults3D()  # set 3D defaults        eqcont3 = eq_setdefaults() # set Equal Area defaults        jjocont3 = jjo_setdefaults(self.plottype) # set J/Jo defaults        self.domultiplot(True,False,True,False)        return     def clearentrybox(self, boxname):        exec("%s.delete(0, 'end')" % boxname)        exec("%s.config(background=\"white\", foreground=\"black\")" % boxname)        return    def clearpopupentrybox(self):        if self.popup_entrybox.get() == "Enter Window Name":            self.popup_entrybox.delete(0, 'end')            self.popup_entrybox.config(background="white", foreground="black")        return    def popupentryboxfocusout(self):        if self.popup_entrybox.get() == "":            self.popup_entrybox.config(background="white", foreground="dark grey")            self.popup_entrybox.insert(tk1.END, "Enter Window Name")        return      def shortcuts(self):        aboutmessagetitle = ("Keyboard Shortcts in Multiplot")        aboutmessage1 = "MAIN NAVIGATION SHORTCUTS:"        aboutmessage2 = "\n%s Control-Shift-A: About Multiplot" % bullet_symbol        aboutmessage3 = "\n%s Control-Shift-C: Calculator" % bullet_symbol        aboutmessage4 = "\n%s Control-Shift-M: Plot Site Means" % bullet_symbol        aboutmessage5 = "\n%s Control-Shift-Q: Quit Program" % bullet_symbol        aboutmessage6 = "\n%s Control-Shift-R: Reset Program" % bullet_symbol        aboutmessage7 = "\n%s Control-Shift-S: Show List of Multiplot Shortcuts" % bullet_symbol        aboutmessage8 = "\n\nSCROLLING SHORTCUTS:"        aboutmessage9 = "\n%s Up-Arrow: Scroll Canvas Up" % bullet_symbol        aboutmessage10 = "\n%s Down-Arrow: Scroll Canvas Down" % bullet_symbol        aboutmessage11 = "\n%s Left-Arrow: Scroll Canvas Left" % bullet_symbol        aboutmessage12 = "\n%s Right-Arrow: Scroll Canvas Right" % bullet_symbol        aboutmessage13 = "\n%s Page-Up: Scroll Page Up" % bullet_symbol        aboutmessage14 = "\n%s Page-Down: Scroll Page Down" % bullet_symbol        aboutmessage15 = "\n%s Control-Up-Arrow: Jump to Top of Canvas" % bullet_symbol        aboutmessage16 = "\n%s Control-Down-Arrow: Jump to Bottom of Canvas" % bullet_symbol        aboutmessage17 = "\n%s Control-Left-Arrow: Jump to Left Side of Canvas" % bullet_symbol        aboutmessage18 = "\n%s Control-Right-Arrow: Jump to Right Side of Canvas" % bullet_symbol        aboutmessage19 = "\n%s Control-Home: Jump to Top-Left of Canvas" % bullet_symbol        aboutmessage20 = "\n%s Control-End: Jump to Bottom-Right of Canvas" % bullet_symbol        aboutmessage21 = "\n%s Multiplot also supports the use of a mouse scroll-wheel for scrolling the canvas or within text boxes:" % bullet_symbol        aboutmessage22 = "\n   %s Rolling the scroll-wheel will move the canvas up or down" % white_bullet_symbol        aboutmessage23 = "\n   %s Holding down Control while rolling the scroll-wheel will move the canvas left or right" % white_bullet_symbol        aboutmessage24 = "\n\nMULTIPLOT FUNCTION SHORTCUTS:"        aboutmessage25 = "\n%s Control-N: Next Sample" % bullet_symbol        aboutmessage26 = "\n%s Control-P: Previous Sample" % bullet_symbol        aboutmessage27 = "\n%s Control-R: Reset Sample" % bullet_symbol        aboutmessage28 = "\n%s Control-S: Toggle Plotting Samples or Steps" % bullet_symbol        aboutmessage29 = "\n%s Control-U: Update Sample" % bullet_symbol        aboutmessage30 = "\n\nPLOT SITE MEAN SHORTCUTS:"        aboutmessage31 = "\n%s Control-O: Open .lsq file" % bullet_symbol        aboutmessage32 = "\n%s Control-S: Save .lsq file" % bullet_symbol        aboutmessage33 = "\n%s Control-U: Update mean plot" % bullet_symbol        aboutmessage34 = "\n\nCALCULATOR FUNCTION SHORTCUTS:"        aboutmessage35 = "\n%s Control-A: Selects all material in the active text box" % bullet_symbol        aboutmessage36 = "\n%s Control-O: Open data file" % bullet_symbol        aboutmessage37 = "\n%s Control-S: Save Output" % bullet_symbol        aboutmessage38 = "\n%s Control-Enter: Equivalent to hitting the ""Calculate"" Button" % bullet_symbol        aboutmessage39 = "\n%s Control-Shift-Scroll-Wheel: Scroll input and output textboxes together to keep corresponding input/output lines vertically aligned" % bullet_symbol        aboutmessage = aboutmessage1 + aboutmessage2 + aboutmessage3 + aboutmessage4 + aboutmessage5 + aboutmessage6 + aboutmessage7 + aboutmessage8 + aboutmessage9 + aboutmessage10 + aboutmessage11 + aboutmessage12 + aboutmessage13 + aboutmessage14 + aboutmessage15 + aboutmessage16 + aboutmessage17 + aboutmessage18 + aboutmessage19 + aboutmessage20 + aboutmessage21 + aboutmessage22 + aboutmessage23 + aboutmessage24 + aboutmessage25 + aboutmessage26 + aboutmessage27 + aboutmessage28 + aboutmessage29 + aboutmessage30 + aboutmessage31 + aboutmessage32 + aboutmessage33 + aboutmessage34 + aboutmessage35 + aboutmessage36 + aboutmessage37 + aboutmessage38 + aboutmessage39        tkMessageBox.showinfo(title=aboutmessagetitle,message=aboutmessage,master=root)        return    def aboutmultiplot(self):        aboutmessagetitle = ("About Multiplot")        aboutmessage1 = "Welcome to Multiplot, a free, open source paleomagnetic data analysis program written in Python 2.7.14 by Casey Luskin. Some small portions of code were written by Prof Michiel de Kock. Support provided by the team at the Paleomagnetics Lab at the University of Johannesburg."        aboutmessage2 = "\n\nTECHNICAL REQUIREMENTS:"        aboutmessage3 = "\n\nMultiplot can run on any platform that supports Python 2. To install the latest version of Python 2, visit: https://www.python.org/downloads/"        aboutmessage4 = "\n\nMultiplot requires the following Python libraries/modules which may not be pre-installed with Python 2: numpy, matplotlib, and xlrd."        aboutmessage5 = "\n\nSUPPORT:"        aboutmessage6 = "\n\nFor support, contact Casey Luskin at caseyl@uj.ac.za or casey.luskin@gmail.com. To download the latest version of Multiplot visit www.multiplot.org."         aboutmessage7 = "\n\nCITATION INFORMATION:"        aboutmessage8 = "\n\nIf use Multiplot for a publication, we appreciate citations. Here is a suggested citation:"        aboutmessage9 = "\n\nC. Luskin, M. O. de Kock, C. Djeutchou, H. Wabo, 2018. \"Multiplot: A Program for Visualizing and Diagramming Paleomagnetic Data.\" GeoCongress, University of Johannesburg. Presentation #94."        aboutmessage10 = "\n\nSOFTWARE LICENSE:"        aboutmessage11 = "\n\nMultiplot is copyrighted under The MIT License (https://opensource.org/licenses/MIT) according to the following license:"        aboutmessage12 = "\n\nCopyright %s 2017-2018 Casey Luskin." % copyright_symbol        aboutmessage13 = "\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:"        aboutmessage14 = "\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."        aboutmessage15 = "\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."        aboutmessage = aboutmessage1 + aboutmessage2 + aboutmessage3 + aboutmessage4 + aboutmessage5 + aboutmessage6 + aboutmessage7 + aboutmessage8 + aboutmessage9 + aboutmessage10 + aboutmessage11 + aboutmessage12 + aboutmessage13 + aboutmessage14 + aboutmessage15        tkMessageBox.showinfo(title=aboutmessagetitle,message=aboutmessage,master=root)        return    def domultiplot(self,newsample,firsttime,switch,switchfromrotate):        global ax0, ax1, ax2, ax3        if firsttime:            self.lastrow_frm.destroy()            self.lastrow_frm = tk1.Frame(self.interior)            self.lastrow_frm.grid(row=12,column=1,columnspan=2)            self.reset_butt = tk1.Button(self.lastrow_frm, text="RESET", width=7, height=1,borderwidth=4,command=lambda: self.startover())            self.reset_butt.pack(side=tk1.LEFT,padx=10,pady=2)            CreateToolTip(self.reset_butt, 15, -80, 180, self, \            'Reset Multiplot (Ctrl-Shift-R).\n\nReturn to splash page and open and view sample or step demagnetization data from a site.')                        self.plotsitemeans_butt = tk1.Button(self.lastrow_frm, text="PLOT SITE MEANS", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: plotsitemeans(self,False))            self.plotsitemeans_butt.pack(side=tk1.LEFT,padx=7,pady=2)            CreateToolTip(self.plotsitemeans_butt, 20, -80, 180, self, \            'Plot Site Means (Ctrl-Shift-M).\n\nOpen an .lsq file and plot components, and calculate and plot new means for a site.')            self.calculator_butt = tk1.Button(self.lastrow_frm, text="CALCULATOR", width=11, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: calculator(self))            self.calculator_butt.pack(side=tk1.LEFT,padx=7,pady=2)            CreateToolTip(self.calculator_butt, 18, -125, 250, self, \            'Paleomagnetic Calculator (Ctrl-Shift-C).\n\nCalculate various paleomagnetic statistics including:, Grand Mean VGP, Site VGPs, Site Directions, Mean Directions, Mean Site Location, Paleolatitude, Paleoinclination, Angular Distance, Real distance, Rotated Coordinates, and Convert Coordinate Format.')            self.about_butt = tk1.Button(self.lastrow_frm, text="ABOUT", width=6, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.aboutmultiplot())            self.about_butt.pack(side=tk1.LEFT,padx=7,pady=2)            CreateToolTip(self.about_butt, 10, -110, 180, self, \            'About Multiplot (Ctrl-Shift-A).\n\nDeveloper info and support contact, technical requirements, citation information, and software license and legal/copyright information.')                        self.shortcut_butt = tk1.Button(self.lastrow_frm, text="SHORTCUTS", width=10, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.shortcuts())            self.shortcut_butt.pack(side=tk1.LEFT,padx=7,pady=2)            CreateToolTip(self.shortcut_butt, 15, -65, 180, self, \            'Multiplot Shortcuts (Ctrl-Shift-S).\n\nSee a list of keyboard and mouse shortcuts.')            self.quit_butt = tk1.Button(self.lastrow_frm, text="QUIT", width=5, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.quitprogram())            self.quit_butt.pack(side=tk1.LEFT,padx=7,pady=2)            CreateToolTip(self.quit_butt, 10, -20, 180, self, \            'Quit Multiplot (Ctrl-Shift-Q).')        if (not firsttime) or switch or (switchfromrotate == "Replot"):            if (not firsttime) or switch:                self.plotting_label.destroy()            ax0.clear()            ax0.axis('off')            ax1.clear()            ax1.axis('off')            ax2.clear()            ax2.axis('off')            ax3.clear()            ax3.axis('off')                    self.plotting_label = tk1.Label(self.interior, text="Plotting...Please wait just a few seconds.",font=("Helvetica",15))        self.plotting_label.grid(row=12,column=7,sticky='E')        if newsample or firsttime:            self.maincanvas.xview_moveto(0)            self.maincanvas.yview_moveto(0)            self.incplot_azimuth = 90 #Default is 90.        newcoords = False        if (not firsttime) and (not switch):             if self.plottype == "samples":                                  selectedsample = self.samplelist[self.samplelistbox.curselection()[0]]                if not(newsample) and selectedsample != self.currentsample:                    if self.datatype == "Rapid":                        samplepresent = os.path.isfile(os.path.join(self.filepath, selectedsample))                    elif self.datatype in ["JR6","DAT"]:                        samplepresent = selectedsample in self.samplelist                    if not samplepresent:                        warningmessagetitle = ("Sample File Not Present!")                        warningmessagetext = ("Sample File %s Not Present. Select another sample." % selectedsample)                        tkMessageBox.showwarning(warningmessagetitle,warningmessagetext)                        return                    else:                        self.currentsample = selectedsample                        self.sampleindex = self.samplelistbox.curselection()[0]                        self.plotnewsample()                        return                if self.coordtype != self.coordtype_var.get():                    self.coordtype = self.coordtype_var.get()                    self.sample = Createnewsample(self,self.currentsample)                    newcoords = True            elif self.plottype == "steps":                                    selectedstep = self.steplist_clean[self.samplelistbox.curselection()[0]]                if not(newsample) and selectedstep != self.currentstep:                    self.currentstep = selectedstep                    self.stepindex = self.samplelistbox.curselection()[0]                    self.plotnewstep(False)                    return                if self.coordtype != self.coordtype_var.get():                    self.coordtype = self.coordtype_var.get()                    self.sitedata = []                    for samplename in self.samplelist:                        if self.datatype == "Rapid":                            samplepresent = os.path.isfile(os.path.join(self.filepath, samplename))                        elif self.datatype in ["JR6","DAT"]:                            samplepresent = samplename in self.samplelist                        if samplepresent:                            newsampleforstep = Createnewsample(self,samplename)                            self.sitedata.append(newsampleforstep)                    newcoords = True                    self.sitesteptext = getsitesteptext(self,False)            elif self.plottype == "multiple":                if self.coordtype != self.coordtype_var.get():                    self.coordtype = self.coordtype_var.get()                    self.sitedata = []                    for samplename in self.samplelist:                        if self.datatype == "Rapid":                            samplepresent = os.path.isfile(os.path.join(self.filepath, samplename))                        elif self.datatype in ["JR6","DAT"]:                            samplepresent = samplename in self.samplelist                        if samplepresent:                            newsampleformult = Createnewsample(self,samplename)                            self.sitedata.append(newsampleformult)                    newcoords = True                if not switchfromrotate:            self.canvas.get_tk_widget().destroy()            self.canvas.get_tk_widget().forget()                        if newsample:            self.splashframe.destroy()        else:            self.show_zij = self.show_zij_var.get()            self.show_3D = self.show_3D_var.get()            self.show_eq = self.show_eq_var.get()            self.show_jjo = self.show_jjo_var.get()            self.updateshow()        self.canvas=FigureCanvasTkAgg(fig,self.interior)        self.canvas.get_tk_widget().grid(row=0,column=6,rowspan=12,columnspan=2)        self.canvas.show()        if firsttime or newsample or newcoords:            self.steplistbox_frm = tk1.Frame(self.interior,relief=tk1.GROOVE,width=100,height=800,bd=1)            self.steplistbox_frm.grid(row=1,column=1,columnspan=2,sticky='NSEW')            self.steplistbox_label_frm = tk1.Frame(self.steplistbox_frm,relief=tk1.GROOVE,width=100,height=800,bd=1)            self.steplistbox_label_frm.grid(row=1,column=0,sticky="NSEW")            if self.plottype == "samples" or self.plottype == "multiple":                self.steplistbox_label = tk1.Label(self.steplistbox_label_frm, text="Select Steps Which\nShould NOT be Plotted:")            elif self.plottype == "steps":                self.steplistbox_label = tk1.Label(self.steplistbox_label_frm, text="Select Samples Which\nShould NOT be Plotted:")            self.steplistbox_label.pack(side=tk1.LEFT)            self.deselectallsteps_butt = tk1.Button(self.steplistbox_label_frm, text="Deselect (Show) All", width=17, height=1, command= lambda: self.selectall_steplistbox())            self.deselectallsteps_butt.pack(side=tk1.LEFT,padx=5,pady=2)            CreateToolTip(self.deselectallsteps_butt, 15, -95, 200, self, \            'Deselect/Show All Steps.\n\nDeselected steps (black text, white background), will be shown in the plots. This button deselects all steps so they are all shown.')            self.selectallsteps_butt = tk1.Button(self.steplistbox_label_frm, text="Select (Hide) All", width=17, height=1, command= lambda: self.steplistbox.selection_set(0, tk1.END))            self.selectallsteps_butt.pack(side=tk1.LEFT,padx=5,pady=2)            CreateToolTip(self.selectallsteps_butt, 15, -95, 180, self, \            'Select/Hide All Steps.\n\nSelected steps (grey text, black background), will be shown in the plots. This button selects all steps so they are all hidden.')            self.hidedups_frm = tk1.Frame(self.steplistbox_label_frm,bd=2,relief=tk1.GROOVE)            self.hidedups_frm.pack(side=tk1.LEFT,padx=3)            self.hidedups_var = tk1.BooleanVar(value=True)            if self.plottype == "multiple":                hidedupslabel = "Hide High-\nError Duplicate Steps?"            else:                hidedupslabel = "Select (Hide) High-\nError Duplicate Steps?"            self.hidedups_chbutt = tk1.Checkbutton(self.hidedups_frm, text=hidedupslabel, variable=self.hidedups_var, command= lambda: self.hidedupsteps())            self.hidedups_chbutt.pack(fill=tk1.X)            self.steplistbox = tk1.Listbox(self.steplistbox_frm,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)            if self.plottype == "samples":                for item in self.sample.sampletext:                    self.steplistbox.insert(tk1.END,item)                    self.steplistbox.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            elif self.plottype == "steps":                for item in self.sitesteptext:                    self.steplistbox.insert(tk1.END,item.text)                    self.steplistbox.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")            elif self.plottype == "multiple":                for item in self.steplist_clean:                    self.steplistbox.insert(tk1.END,item)                    self.steplistbox.itemconfig(tk1.END,bg="WHITE",fg="BLACK", selectbackground="BLACK", selectforeground="#56595e")                            self.makedupsteplist()            self.hidedupsteps()            self.steplistbox.bind("<Control-Key-a>", lambda x: self.steplistbox.selection_set(0, tk1.END))            self.steplistbox.bind("<Control-Key-A>", lambda x: self.steplistbox.selection_set(0, tk1.END))            self.steplistbox.bind("<<ListboxSelect>>", lambda x: self.onsteplistboxselect())                        self.steplistbox.grid(row=0,column=0,sticky='NSEW')            self.steplistbox_frm.columnconfigure(0,weight=1)            self.step_scrollbar = tk1.Scrollbar(self.steplistbox,orient="vertical")            self.step_scrollbar.config(command=self.steplistbox.yview)            self.steplistbox.config(yscrollcommand=self.step_scrollbar.set)            self.step_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=150)            self.steplistbox_frm.columnconfigure(0,weight=1)            self.steplistbox.bind("<Enter>", self.entersteplistbox)            self.steplistbox.bind("<Leave>", self.leavesteplistbox)            if firsttime or switch:                self.samplelist_frm = tk1.Frame(self.interior,relief=tk1.GROOVE,width=100,height=800,bd=1)                self.samplelist_frm.grid(row=2,column=1,rowspan=4,sticky='NSEW')                if self.plottype == "samples":                    self.samplelistbox = tk1.Listbox(self.samplelist_frm,height=self.sample.totalsteps,font=("Consolas",10),selectmode=tk1.SINGLE,exportselection=0)                    self.samplelistbox_label = tk1.Label(self.samplelist_frm, text="Site %s: %s Total Samples.\nSelect Sample to Plot:" % (self.sitename,self.totsampcount))                    for item in self.samplelist:                        self.samplelistbox.insert(tk1.END,item)                        self.samplelistbox.itemconfig(tk1.END,bg="white",fg="BLACK", selectbackground="BLACK", selectforeground="white")                    self.samplelistbox.select_set(self.samplelist.index(self.sample.name))                    self.samplelistbox.see(self.sampleindex)                    self.samplelistbox.bind("<Double-Button-1>", lambda x: doubleclicksamplebox(self))                elif self.plottype == "steps":                    self.samplelistbox = tk1.Listbox(self.samplelist_frm,height=self.totstepcount,font=("Consolas",10),selectmode=tk1.SINGLE,exportselection=0)                    self.samplelistbox_label = tk1.Label(self.samplelist_frm, text="Site %s: %s Total Steps.\nSelect Step to Plot:" % (self.sitename,self.totstepcount))                    for item in self.steplist_clean:                        self.samplelistbox.insert(tk1.END,item)                        self.samplelistbox.itemconfig(tk1.END,bg="white",fg="BLACK", selectbackground="BLACK", selectforeground="white")                    self.samplelistbox.select_set(self.steplist_clean.index(self.currentstep))                    self.samplelistbox.see(self.stepindex)                    self.samplelistbox.bind("<Double-Button-1>", lambda x: doubleclicksamplebox(self))                elif self.plottype == "multiple":                    self.samplelistbox = tk1.Listbox(self.samplelist_frm,height=self.totsampcount,font=("Consolas",10),selectmode=tk1.MULTIPLE,exportselection=0)                    self.samplelistbox_label = tk1.Label(self.samplelist_frm, text="Site %s: %s Total Samples.\nSelect Samples to Plot:" % (self.sitename,self.totsampcount))                    for item in self.samplelist:                        self.samplelistbox.insert(tk1.END,item)                        self.samplelistbox.itemconfig(tk1.END,bg="white",fg="BLACK", selectbackground="BLACK", selectforeground="white")                    self.samplelistbox.selection_set(0, tk1.END)                                    self.samplelistbox_label.grid(row=0,column=0,sticky="NSEW")                self.samplelistbox.grid(row=1,column=0,sticky="NSEW")                self.samplelist_frm.rowconfigure(1, weight=1)                self.samplelist_frm.columnconfigure(0, weight=1)                self.sample_scrollbar = tk1.Scrollbar(self.samplelistbox,orient="vertical")                self.sample_scrollbar.config(command=self.samplelistbox.yview)                self.samplelistbox.config(yscrollcommand=self.sample_scrollbar.set)                self.sample_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=102)                self.samplelistbox.bind("<Enter>", self.entersamplebox)                self.samplelistbox.bind("<Leave>", self.leavesamplebox)            elif newsample:                self.samplelistbox.selection_clear(0, tk1.END)                if self.plottype == "samples":                    self.samplelistbox.select_set(self.samplelist.index(self.sample.name))                    self.samplelistbox.see(self.sampleindex)                elif self.plottype == "steps":                    self.samplelistbox.select_set(self.steplist_clean.index(self.currentstep))                    self.samplelistbox.see(self.stepindex)        if newsample and not firsttime:            self.displayplot_frm.destroy()            self.zijprojcontrols_frm.destroy()            if self.plottype == "samples":                self.rotatesample_butt.destroy()                self.rotatesite_butt.destroy()                self.rotatesample_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Sample", width=15, command= lambda: self.switchtorotate("sample-current"))                self.rotatesample_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesample_butt, 15, -80, 250, self, \                'Rotate Sample.\n\nSwitches to Rotate to rotate sample data.')                self.rotatesite_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Site", width=15, command= lambda: self.switchtorotate("site"))                self.rotatesite_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesite_butt, 15, -80, 250, self, \                'Rotate Site.\n\nSwitches to Rotate to rotate site data.')                    if newsample:            if self.plottype == "samples":                textheader = ("Site: %s, Sample %s Step Data (%s)" % (self.sitename, self.sample.name, self.datatype))            elif self.plottype == "steps":                textheader = ("Site: %s, Step: %s (%s)" % (self.sitename, self.currentstep, self.datatype))            elif self.plottype == "multiple":                textheader = ("Site: %s, Multiple Samples, Multiple Steps" % (self.sitename))            self.showname = tk1.Label(self.interior, text=textheader,font=("Helvetica",15))            self.showname.grid(row=0, column=1, sticky='NSEW',columnspan=2)            self.displayplot_frm = tk1.Frame(self.interior)            self.displayplot_frm.grid(row=4,column=2,sticky='NSEW')            self.displayplot_frm.columnconfigure(0, weight=1)            self.displayplot_frm.columnconfigure(3, weight=1)                        self.selectplots_label = tk1.Label(self.displayplot_frm, text="Select which plots to display:")            self.selectplots_label.grid(row=0,column=0,columnspan=4,sticky='NSEW')            self.show_zij_var = tk1.BooleanVar(value=self.show_zij)            self.show_zij_chbutt = tk1.Checkbutton(self.displayplot_frm, text="Show Zijderveld", variable=self.show_zij_var)            self.show_zij_chbutt.grid(row=1,column=1,sticky='NW')            CreateToolTip(self.show_zij_chbutt, 15, -60, 250, self, \            'Show Zijderveld Plot.\n\nCheck to show the Zijderveld plot. (Changes will not be made until Update is clicked.)')                        self.show_3D_var = tk1.BooleanVar(value=self.show_3D)            self.show_3D_chbutt = tk1.Checkbutton(self.displayplot_frm, text="Show 3D Plot", variable=self.show_3D_var)            self.show_3D_chbutt.grid(row=1,column=2,sticky='NW')            CreateToolTip(self.show_3D_chbutt, 15, -60, 250, self, \            'Show 3D Plot.\n\nCheck to show the 3D plot. (Changes will not be made until Update is clicked.)')            self.show_eq_var = tk1.BooleanVar(value=self.show_eq)            self.show_eq_chbutt = tk1.Checkbutton(self.displayplot_frm, text="Show Equal Area", variable=self.show_eq_var)            self.show_eq_chbutt.grid(row=2,column=1,sticky='NW')            CreateToolTip(self.show_eq_chbutt, 15, -60, 250, self, \            'Show Equal Area Plot.\n\nCheck to show the Equal Area plot. (Changes will not be made until Update is clicked.)')                        self.show_jjo_var = tk1.BooleanVar(value=self.show_jjo)            self.show_jjo_chbutt = tk1.Checkbutton(self.displayplot_frm, text="Show J/Jo", variable=self.show_jjo_var)            self.show_jjo_chbutt.grid(row=2,column=2,sticky='NW')            CreateToolTip(self.show_jjo_chbutt, 15, -60, 250, self, \            'Show J/Jo Plot.\n\nCheck to show the J/Jo plot. (Changes will not be made until Update is clicked.)')            self.coordtype_popup_frm = tk1.Frame(self.interior,bd=2,relief=tk1.GROOVE)            self.coordtype_popup_frm.grid(row=7,column=1,rowspan=2,sticky='NSEW')            self.coordtype_frm = tk1.Frame(self.coordtype_popup_frm,bd=2,relief=tk1.GROOVE)            self.coordtype_frm.pack(fill=tk1.X)            self.coordtype_label = tk1.Label(self.coordtype_frm, text="Select Input Coordinate Type:")            self.coordtype_label.pack(fill=tk1.X)            self.coordtype_var = tk1.StringVar()            self.coordtype_var.set(self.coordtype)            self.core_radio = tk1.Radiobutton(self.coordtype_frm, text="Core Coordinates",variable=self.coordtype_var,value="Core")            self.core_radio.pack(fill=tk1.X)            CreateToolTip(self.core_radio, 15, -20, 250, self, \            'Display plot data in core coordinates.')                            self.geographic_radio = tk1.Radiobutton(self.coordtype_frm, text="Geographic Coordinates",variable=self.coordtype_var,value="Geographic")            self.geographic_radio.pack(fill=tk1.X)            self.tilt_radio = tk1.Radiobutton(self.coordtype_frm, text="Tilt Coordinates",variable=self.coordtype_var,value="Tilt")            self.tilt_radio.pack(fill=tk1.X)            if self.plottype == "samples":                if not(self.sample.geogpresent):                    self.geographic_radio.configure(state='disabled')                else:                    CreateToolTip(self.geographic_radio, 15, -20, 250, self, \                    'Display plot data in geographic coordinates.')                if not(self.sample.tiltpresent):                    self.tilt_radio.configure(state='disabled')                else:                    CreateToolTip(self.tilt_radio, 15, -20, 250, self, \                    'Display plot data in tilt coordinates.')            elif self.plottype == "steps":                if not(self.geogpresent):                    self.geographic_radio.configure(state='disabled')                else:                    CreateToolTip(self.geographic_radio, 15, -20, 250, self, \                    'Display plot data in geographic coordinates.')                if not(self.tiltpresent):                    self.tilt_radio.configure(state='disabled')                else:                    CreateToolTip(self.tilt_radio, 15, -20, 250, self, \                    'Display plot data in tilt coordinates.')            self.popup_frm = tk1.Frame(self.coordtype_popup_frm,bd=2,relief=tk1.GROOVE)            self.popup_frm.pack(fill=tk1.X)            self.popup_label = tk1.Label(self.popup_frm, text="Open Current Figure\nin Standalone Window:")            self.popup_label.pack(fill=tk1.X)            self.popup_label = tk1.Label(self.popup_frm, text=" ",font="Helvetica 1")            self.popup_label.pack(fill=tk1.X)            self.popup_entrybox = tk1.Entry(self.popup_frm,width=25)            self.popup_entrybox.pack(fill=tk1.X)            self.popup_entrybox.config(background="white", foreground="dark grey")            self.popup_entrybox.insert(tk1.END, "Enter Window Name")            self.popup_entrybox.bind("<FocusIn>", lambda x: self.clearpopupentrybox())            self.popup_entrybox.bind("<Return>", lambda x: self.show_popup())            self.popup_entrybox.bind("<FocusOut>", lambda x: self.popupentryboxfocusout())            self.popup_butt = tk1.Button(self.popup_frm, text="Open Figure", command= lambda: self.show_popup())            self.popup_butt.pack(fill=tk1.X,padx=5,pady=5)            CreateToolTip(self.popup_butt, 15, -110, 250, self, \            'Open Current Figure in New Standalone Window.\n\nOpens the plots in the main Multiplot canvas at right in a new standalone window. Useful for comparing currently displayed data to some new dataset.')            self.zijprojcontrols_frm = tk1.Frame(self.interior,bd=2,relief=tk1.GROOVE)            self.zijprojcontrols_frm.grid(row=7,column=2,sticky='NSEW')            self.zijproj_label = tk1.Label(self.zijprojcontrols_frm, text="Zijderveld Projection Settings:")            self.zijproj_label.grid(row=0, column=0, columnspan=4, sticky='NSEW',padx=10)            avgdec = getaveragedec(self)            self.zijprojcontrol_var = tk1.StringVar()            self.zijprojcontrol_var.set("East-West")            self.zijprojcontrols_row1_frm = tk1.Frame(self.zijprojcontrols_frm)            self.zijprojcontrols_row1_frm.grid(row=1,column=0,columnspan=2,sticky='NSEW')            self.ewzijproj_radio = tk1.Radiobutton(self.zijprojcontrols_row1_frm, text="East-West",variable=self.zijprojcontrol_var,value="East-West")            self.ewzijproj_radio.pack(side=tk1.LEFT)            CreateToolTip(self.ewzijproj_radio, 15, -80, 250, self, \            'Zijderveld Plot Control: Project inclination against East-West axis.\n\n(Changes will not be made until Update is clicked.)')            self.nszijproj_radio = tk1.Radiobutton(self.zijprojcontrols_row1_frm, text="North-South",variable=self.zijprojcontrol_var,value="North-South")            self.nszijproj_radio.pack(side=tk1.LEFT)            CreateToolTip(self.nszijproj_radio, 15, -80, 250, self, \            'Zijderveld Plot Control: Project inclination against North-South axis.\n\n(Changes will not be made until Update is clicked.)')            self.hyperboliczijproj_radio = tk1.Radiobutton(self.zijprojcontrols_row1_frm, text="Hyperbolic",variable=self.zijprojcontrol_var,value="Hyperbolic")            self.hyperboliczijproj_radio.pack(side=tk1.LEFT)            CreateToolTip(self.hyperboliczijproj_radio, 15, -110, 250, self, \            'Zijderveld Plot Control: View data in Hyperbolic mode.\n\nInclination not projected against a fixed axis, but each step is displayed at its maximum (true) length. (Changes will not be made until Update is clicked.)')            self.avgdeczijproj_radio = tk1.Radiobutton(self.zijprojcontrols_row1_frm, text="Average\nDeclination\n(%.1f%s)" % (avgdec, degree_sign),variable=self.zijprojcontrol_var,value="Average Declination")            self.avgdeczijproj_radio.pack(side=tk1.LEFT)            CreateToolTip(self.avgdeczijproj_radio, 15, -120, 250, self, \            'Zijderveld Plot Control: Project inclination along average declination.\n\nAverage declination will be calculated, the horizontal axis is aligned with average declination, and then inclination will be projected along this axis. (Changes will not be made until Update is clicked.)')            self.speczijproj_radio = tk1.Radiobutton(self.zijprojcontrols_frm, text="Specified\nDirection (%s)\n(Use Slider)" % degree_sign,variable=self.zijprojcontrol_var,value="Specified Direction")            self.speczijproj_radio.grid(row=2,column=0,sticky='E')            CreateToolTip(self.speczijproj_radio, 15, -120, 250, self, \            'Zijderveld Plot Control: Project inclination along user-specified axis.\n\nUse the slider at right to specify a direction, and then it will be aligned with the horizontal axis, and inclination will be projected along this axis. (Changes will not be made until Update is clicked.)')            self.firstmove = True            self.az_slider = Scale(self.zijprojcontrols_frm, from_=0, to=179,orient=tk1.HORIZONTAL,resolution=1,length=250,width=15,command=lambda x: self.setspeczijradio())            self.az_slider.set(90)            self.az_slider.grid(row=2,column=1, sticky='W')            CreateToolTip(self.az_slider, 15, -120, 250, self, \            'Zijderveld Plot Control: Project inclination along user-specified axis.\n\nUse the slider to specify a direction, and then it will be aligned with the horizontal axis, and inclination will be projected along this axis. (Changes will not be made until Update is clicked.)')        if firsttime:            self.updateplot_butt = tk1.Button(self.interior, text="Update Plots", command= lambda: self.domultiplot(False,False,False,False))            self.updateplot_butt.grid(row=2,column=2, sticky='NSEW',padx=10,pady=4)            CreateToolTip(self.updateplot_butt, 100, -65, 250, self, \            'Update Plot (Ctrl-U).\n\nUpdates plots to settings specified by user; does not reload sample data.')                    self.resetplot_butt = tk1.Button(self.interior, text="Reset Sample", command= lambda: self.plotnewsample())            self.resetplot_butt.grid(row=3,column=2,sticky='NSEW',padx=10,pady=4)            CreateToolTip(self.resetplot_butt, 100, -65, 250, self, \            'Reset Sample (Ctrl-T).\n\nReloads sample data, restores defaults settings, and resets plots to default state.')                        self.plotcontrol_frm = tk1.Frame(self.interior,bd=2,relief=tk1.GROOVE)            self.plotcontrol_frm.grid(row=5,column=2,sticky='NSEW')            self.plotcontrol_frm.columnconfigure(0, weight=1)            self.plotcontrol_frm.columnconfigure(3, weight=1)            self.settings_label = tk1.Label(self.plotcontrol_frm, text="Change Settings for Individual Plots:")            self.settings_label.grid(row=0,column=0,columnspan=4,sticky='NSEW')            self.zijcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Zijderveld Plot Settings", width=20, command= lambda: zijcontrols_sample(self))            self.controlbutt3D = tk1.Button(self.plotcontrol_frm, text="3D Plot Settings", width=20, command= lambda: controls3D_sample(self))            self.eqcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Equal Area Plot Settings", width=20, command= lambda: eqcontrols_sample(self))            self.jjocontrol_butt = tk1.Button(self.plotcontrol_frm, text="J/Jo Plot Settings", width=20, command= lambda: jjocontrols_sample(self))            self.zijcontrol_butt.grid(row=1,column=1, sticky='NSEW',padx=5,pady=4)            self.controlbutt3D.grid(row=1,column=2, sticky='NSEW',padx=5,pady=4)            self.eqcontrol_butt.grid(row=2,column=1, sticky='NSEW',padx=5,pady=4)            self.jjocontrol_butt.grid(row=2,column=2, sticky='NSEW',padx=5,pady=4)            CreateToolTip(self.zijcontrol_butt, 15, -80, 250, self, \            'Zijderveld Plot Settings.\n\nClick to show Zijderveld Plot settings. (Any changes will not be seen unless Zijderveld Plot is displayed.)')            CreateToolTip(self.controlbutt3D, 15, -65, 250, self, \            '3D Plot Settings.\n\nClick to show 3D Plot settings. (Any changes will not be seen unless 3D Plot is displayed.)')            CreateToolTip(self.eqcontrol_butt, 15, -80, 250, self, \            'Equal Area Plot Settings.\n\nClick to show Equal Area Plot settings. (Any changes will not be seen unless Equal Area Plot is displayed.)')            CreateToolTip(self.jjocontrol_butt, 15, -65, 250, self, \            'J/Jo Plot Settings.\n\nClick to show J/Jo Plot settings. (Any changes will not be seen unless J/Jo Plot is displayed.)')            self.toolbar_frm = tk1.Frame(self.interior)            self.toolbar_frm.grid(row=12,column=6,sticky='W')            self.toolbar = NavigationToolbar2TkAgg(self.canvas, self.toolbar_frm)            self.toolbar.update()            self.arrowlinerotate_frm = tk1.Frame(self.interior)            self.arrowlinerotate_frm.grid(row=8,column=2,sticky='NSEW')            self.arrrowlinecontrol_frm = tk1.Frame(self.arrowlinerotate_frm,bd=2,relief=tk1.GROOVE)            self.arrrowlinecontrol_frm.pack(side=tk1.LEFT)            self.arrrowlinecontrol_frm.columnconfigure(0, weight=1)            self.arrrowlinecontrol_frm.columnconfigure(3, weight=1)                        self.addarrow_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Add Arrow", width=15, command= lambda: add_arrow(self))            self.addarrow_butt.grid(row=0,column=1, sticky='NSEW',padx=7,pady=4)            CreateToolTip(self.addarrow_butt, 15, -80, 250, self, \            'Add Arrow.\n\nOpens a dialogue box to add an arrow between two steps. Arrow will appear on Zijderveld plot and 3D plot.')            self.cleararrows_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Clear Arrows", width=15, command= lambda: cleararrows(self))            self.cleararrows_butt.grid(row=0,column=2, sticky='NSEW',padx=7,pady=4)            CreateToolTip(self.cleararrows_butt, 15, -50, 250, self, \            'Clear Arrows.\n\nClears all arrows from plots.')            self.addbfline_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Add Best Fit Line", width=15, command= lambda: addbfline(self))            self.addbfline_butt.grid(row=1,column=1, sticky='NSEW',padx=7,pady=4)            CreateToolTip(self.addbfline_butt, 15, -110, 250, self, \            'Add Best Fit Line.\n\nOpens a dialogue box to add a line fit to a series of selected steps. Line will appear on Zijderveld plot and 3D plot, and the line''s direction will appear as a star on the Equal Area plot.')            self.clearbflines_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Clear Best Fit Lines", width=15, command= lambda: clearbflines(self))            self.clearbflines_butt.grid(row=1,column=2, sticky='NSEW',padx=7,pady=4)            CreateToolTip(self.clearbflines_butt, 15, -50, 250, self, \            'Clear Best Fit Lines.\n\nClears all best fit lines from plots.')            self.rotatecontrol_frm = tk1.Frame(self.arrowlinerotate_frm,bd=2,relief=tk1.GROOVE)            self.rotatecontrol_frm.pack(side=tk1.LEFT)            self.rotatesample_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Sample", width=15, command= lambda: self.switchtorotate("sample-current"))            self.rotatesample_butt.pack(fill=tk1.X,padx=7,pady=4)            CreateToolTip(self.rotatesample_butt, 15, -80, 250, self, \            'Rotate Sample.\n\nSwitches to Rotate to rotate sample data.')            self.rotatesite_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Site", width=15, command= lambda: self.switchtorotate("site"))            self.rotatesite_butt.pack(fill=tk1.X,padx=7,pady=4)            CreateToolTip(self.rotatesite_butt, 15, -80, 250, self, \            'Rotate Site.\n\nSwitches to Rotate to rotate site data.')            self.fullsite_frm = tk1.Frame(self.interior,bd=2)            self.fullsite_frm.grid(row=10,column=1,sticky='NSEW',columnspan=2)                                    self.prevsample_butt = tk1.Button(self.fullsite_frm, text="%s Previous Sample" % lefttriangle_sign, command= lambda: self.prev_sample())            self.prevsample_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)            CreateToolTip(self.prevsample_butt, 15, -50, 250, self, \            'Show Previous Sample (Ctrl-P).\n\nDisplay data from previous sample in site.')            self.switch_butt = tk1.Button(self.fullsite_frm, text="Plot Site Steps", command= lambda: self.plotsteps())            self.switch_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)            CreateToolTip(self.switch_butt, 15, -65, 250, self, \            'Plot Steps (Ctrl-E).\n\nSwitch to show data from all samples in a given step in site.')            self.switchall_butt = tk1.Button(self.fullsite_frm, text="Plot Multiple Samples/Steps", command= lambda: self.plotmultiplesamples())            self.switchall_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)            CreateToolTip(self.switchall_butt, 15, -65, 250, self, \            'Plot Multiple Samples/Steps (Ctrl-M).\n\nSwitch to show data from multiple samples and/or multiple steps on single plots.')            self.nextample_butt = tk1.Button(self.fullsite_frm, text="Next Sample %s" % righttriangle_sign, command= lambda: self.next_sample())            self.nextample_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)            CreateToolTip(self.nextample_butt, 15, -50, 250, self, \            'Show Next Step (Ctrl-N).\n\nDisplay data from next sample in site.')            root.bind("<Control-u>", lambda x: self.domultiplot(False,False,False,False))            root.bind("<Control-U>", lambda x: self.domultiplot(False,False,False,False))            root.bind("<Control-t>", lambda x: self.plotnewsample())            root.bind("<Control-T>", lambda x: self.plotnewsample())            root.bind("<Control-n>", lambda x: self.next_sample())            root.bind("<Control-N>", lambda x: self.next_sample())            root.bind("<Control-e>", lambda x: self.plotsteps())            root.bind("<Control-E>", lambda x: self.plotsteps())            root.bind("<Control-m>", lambda x: self.plotmultiplesamples())            root.bind("<Control-M>", lambda x: self.plotmultiplesamples())            root.bind("<Control-p>", lambda x: self.prev_sample())            root.bind("<Control-P>", lambda x: self.prev_sample())        if switch:            self.fullsite_frm.destroy()            self.fullsite_frm = tk1.Frame(self.interior,bd=2)            self.fullsite_frm.grid(row=10,column=1,sticky='NSEW',columnspan=2)            self.plotcontrol_frm.destroy()            self.plotcontrol_frm = tk1.Frame(self.interior,bd=2,relief=tk1.GROOVE)            self.plotcontrol_frm.grid(row=5,column=2,sticky='NSEW')            self.plotcontrol_frm.columnconfigure(0, weight=1)            self.plotcontrol_frm.columnconfigure(3, weight=1)            self.settings_label = tk1.Label(self.plotcontrol_frm, text="Change Settings for Individual Plots:")            self.settings_label.grid(row=0,column=0,columnspan=4,sticky='NSEW')            if self.plottype == "samples":                self.resetplot_butt = tk1.Button(self.interior, text="Reset Sample", command= lambda: self.plotnewsample())                self.resetplot_butt.grid(row=3,column=2,sticky='NSEW',padx=10,pady=4)                CreateToolTip(self.resetplot_butt, 100, -65, 250, self, \                'Reset Sample (Ctrl-T).\n\nReloads sample data, restores defaults settings, and resets plots to default state.')                self.zijcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Zijderveld Plot Settings", width=20, command= lambda: zijcontrols_sample(self))                self.controlbutt3D = tk1.Button(self.plotcontrol_frm, text="3D Plot Settings", width=20, command= lambda: controls3D_sample(self))                self.eqcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Equal Area Plot Settings", width=20, command= lambda: eqcontrols_sample(self))                self.jjocontrol_butt = tk1.Button(self.plotcontrol_frm, text="J/Jo Plot Settings", width=20, command= lambda: jjocontrols_sample(self))                self.zijcontrol_butt.grid(row=1,column=1, sticky='NSEW',padx=5,pady=4)                self.controlbutt3D.grid(row=1,column=2, sticky='NSEW',padx=5,pady=4)                self.eqcontrol_butt.grid(row=2,column=1, sticky='NSEW',padx=5,pady=4)                self.jjocontrol_butt.grid(row=2,column=2, sticky='NSEW',padx=5,pady=4)                CreateToolTip(self.zijcontrol_butt, 15, -80, 250, self, \                'Zijderveld Plot Settings.\n\nClick to show Zijderveld Plot settings. (Any changes will not be seen unless Zijderveld Plot is displayed.)')                CreateToolTip(self.controlbutt3D, 15, -65, 250, self, \                '3D Plot Settings.\n\nClick to show 3D Plot settings. (Any changes will not be seen unless 3D Plot is displayed.)')                CreateToolTip(self.eqcontrol_butt, 15, -80, 250, self, \                'Equal Area Plot Settings.\n\nClick to show Equal Area Plot settings. (Any changes will not be seen unless Equal Area Plot is displayed.)')                CreateToolTip(self.jjocontrol_butt, 15, -65, 250, self, \                'J/Jo Plot Settings.\n\nClick to show J/Jo Plot settings. (Any changes will not be seen unless J/Jo Plot is displayed.)')                self.arrowlinerotate_frm = tk1.Frame(self.interior)                self.arrowlinerotate_frm.grid(row=8,column=2,sticky='NSEW')                self.arrrowlinecontrol_frm = tk1.Frame(self.arrowlinerotate_frm,bd=2,relief=tk1.GROOVE)                self.arrrowlinecontrol_frm.pack(side=tk1.LEFT)                self.arrrowlinecontrol_frm.columnconfigure(0, weight=1)                self.arrrowlinecontrol_frm.columnconfigure(3, weight=1)                                self.addarrow_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Add Arrow", width=15, command= lambda: add_arrow(self))                self.addarrow_butt.grid(row=0,column=1, sticky='NSEW',padx=7,pady=4)                CreateToolTip(self.addarrow_butt, 15, -80, 250, self, \                'Add Arrow.\n\nOpens a dialogue box to add an arrow between two steps. Arrow will appear on Zijderveld plot and 3D plot.')                self.cleararrows_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Clear Arrows", width=15, command= lambda: cleararrows(self))                self.cleararrows_butt.grid(row=0,column=2, sticky='NSEW',padx=7,pady=4)                CreateToolTip(self.cleararrows_butt, 15, -50, 250, self, \                'Clear Arrows.\n\nClears all arrows from plots.')                self.addbfline_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Add Best Fit Line", width=15, command= lambda: addbfline(self))                self.addbfline_butt.grid(row=1,column=1, sticky='NSEW',padx=7,pady=4)                CreateToolTip(self.addbfline_butt, 15, -110, 250, self, \                'Add Best Fit Line.\n\nOpens a dialogue box to add a line fit to a series of selected steps. Line will appear on Zijderveld plot and 3D plot, and the line''s direction will appear as a star on the Equal Area plot.')                self.clearbflines_butt = tk1.Button(self.arrrowlinecontrol_frm, text="Clear Best Fit Lines", width=15, command= lambda: clearbflines(self))                self.clearbflines_butt.grid(row=1,column=2, sticky='NSEW',padx=7,pady=4)                CreateToolTip(self.clearbflines_butt, 15, -50, 250, self, \                'Clear Best Fit Lines.\n\nClears all best fit lines from plots.')                self.rotatecontrol_frm = tk1.Frame(self.arrowlinerotate_frm,bd=2,relief=tk1.GROOVE)                self.rotatecontrol_frm.pack(side=tk1.LEFT)                self.rotatesample_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Sample", width=15, command= lambda: self.switchtorotate("sample-current"))                self.rotatesample_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesample_butt, 15, -80, 250, self, \                'Rotate Sample.\n\nSwitches to Rotate to rotate sample data.')                self.rotatesite_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Site", width=15, command= lambda: self.switchtorotate("site"))                self.rotatesite_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesite_butt, 15, -80, 250, self, \                'Rotate Site.\n\nSwitches to Rotate to rotate site data.')                self.prevsample_butt = tk1.Button(self.fullsite_frm, text="%s Previous Sample" % lefttriangle_sign, command= lambda: self.prev_sample())                self.prevsample_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.prevsample_butt, 15, -50, 250, self, \                'Show Previous Sample (Ctrl-P).\n\nDisplay data from previous sample in site.')                self.switchsite_butt = tk1.Button(self.fullsite_frm, text="Plot Site Steps", command= lambda: self.plotsteps())                self.switchsite_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.switchsite_butt, 15, -65, 250, self, \                'Plot Steps (Ctrl-E).\n\nSwitch to show data from all samples in a given step in site.')                self.switchall_butt = tk1.Button(self.fullsite_frm, text="Plot Multiple Samples/Steps", command= lambda: self.plotmultiplesamples())                self.switchall_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.switchall_butt, 15, -65, 250, self, \                'Plot Multiple Samples/Steps (Ctrl-M).\n\nSwitch to show data from multiple samples and/or multiple steps on single plots.')                self.nextample_butt = tk1.Button(self.fullsite_frm, text="Next Sample %s" % righttriangle_sign, command= lambda: self.next_sample())                self.nextample_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.nextample_butt, 15, -50, 250, self, \                'Show Next Step (Ctrl-N).\n\nDisplay data from next sample in site.')                root.bind("<Control-t>", lambda x: self.plotnewsample())                root.bind("<Control-T>", lambda x: self.plotnewsample())                root.bind("<Control-n>", lambda x: self.next_sample())                root.bind("<Control-N>", lambda x: self.next_sample())                root.bind("<Control-e>", lambda x: self.plotsteps())                root.bind("<Control-E>", lambda x: self.plotsteps())                root.bind("<Control-m>", lambda x: self.plotmultiplesamples())                root.bind("<Control-M>", lambda x: self.plotmultiplesamples())                root.bind("<Control-p>", lambda x: self.prev_sample())                root.bind("<Control-P>", lambda x: self.prev_sample())            elif self.plottype == "steps":                self.addarrow_butt.destroy()                self.cleararrows_butt.destroy()                self.addbfline_butt.destroy()                self.clearbflines_butt.destroy()                                self.resetplot_butt = tk1.Button(self.interior, text="Reset Step", command= lambda: self.plotnewstep(True))                self.resetplot_butt.grid(row=3,column=2,sticky='NSEW',padx=10,pady=4)                CreateToolTip(self.resetplot_butt, 100, -65, 250, self, \                'Reset Step (Ctrl-T).\n\nReloads step data, restores defaults settings, and resets plots to default state.')                self.zijcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Zijderveld Plot Settings", width=20, command= lambda: zijcontrols_step(self))                self.controlbutt3D = tk1.Button(self.plotcontrol_frm, text="3D Plot Settings", width=20, command= lambda: controls3D_step(self))                self.eqcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Equal Area Plot Settings", width=20, command= lambda: eqcontrols_step(self))                self.jjocontrol_butt = tk1.Button(self.plotcontrol_frm, text="J/Jo Plot Settings", width=20, command= lambda: jjocontrols_step(self))                self.zijcontrol_butt.grid(row=1,column=1, sticky='NSEW',padx=5,pady=4)                self.controlbutt3D.grid(row=1,column=2, sticky='NSEW',padx=5,pady=4)                self.eqcontrol_butt.grid(row=2,column=1, sticky='NSEW',padx=5,pady=4)                self.jjocontrol_butt.grid(row=2,column=2, sticky='NSEW',padx=5,pady=4)                self.rotatesample_butt.destroy()                self.rotatesite_butt.destroy()                self.rotatesample_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Sample", width=15, command= lambda: self.switchtorotate("sample-first"))                self.rotatesample_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesample_butt, 15, -80, 250, self, \                'Rotate Sample.\n\nSwitches to Rotate to rotate sample data.')                self.rotatesite_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Site", width=15, command= lambda: self.switchtorotate("site"))                self.rotatesite_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesite_butt, 15, -80, 250, self, \                'Rotate Site.\n\nSwitches to Rotate to rotate site data.')                                CreateToolTip(self.zijcontrol_butt, 15, -80, 250, self, \                'Zijderveld Plot Settings.\n\nClick to show Zijderveld Plot settings. (Any changes will not be seen unless Zijderveld Plot is displayed.)')                CreateToolTip(self.controlbutt3D, 15, -65, 250, self, \                '3D Plot Settings.\n\nClick to show 3D Plot settings. (Any changes will not be seen unless 3D Plot is displayed.)')                CreateToolTip(self.eqcontrol_butt, 15, -80, 250, self, \                'Equal Area Plot Settings.\n\nClick to show Equal Area Plot settings. (Any changes will not be seen unless Equal Area Plot is displayed.)')                CreateToolTip(self.jjocontrol_butt, 15, -65, 250, self, \                'J/Jo Plot Settings.\n\nClick to show J/Jo Plot settings. (Any changes will not be seen unless J/Jo Plot is displayed.)')                self.prevsample_butt = tk1.Button(self.fullsite_frm, text="%s Previous Step" % lefttriangle_sign, command= lambda: self.prev_step())                self.prevsample_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.prevsample_butt, 15, -50, 250, self, \                'Show Previous Step (Ctrl-P).\n\nDisplay data from previous step in site.')                self.switchsamples_butt = tk1.Button(self.fullsite_frm, text="Plot Samples", command= lambda: self.plotsamples())                self.switchsamples_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.switchsamples_butt, 15, -65, 250, self, \                'Plot Samples (Ctrl-S).\n\nSwitch to show data from individual samples in site.')                self.switchall_butt = tk1.Button(self.fullsite_frm, text="Plot Multiple Samples/Steps", command= lambda: self.plotmultiplesamples())                self.switchall_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.switchall_butt, 15, -65, 250, self, \                'Plot Multiple Samples/Steps (Ctrl-M).\n\nSwitch to show data from multiple samples and/or multiple steps on single plots.')                self.nextample_butt = tk1.Button(self.fullsite_frm, text="Next Step %s" % righttriangle_sign, command= lambda: self.next_step())                self.nextample_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.nextample_butt, 15, -50, 250, self, \                'Show Next Step (Ctrl-N).\n\nDisplay data from next step in site.')                root.bind("<Control-t>", lambda x: self.plotnewstep(True))                root.bind("<Control-T>", lambda x: self.plotnewstep(True))                root.bind("<Control-n>", lambda x: self.next_step())                root.bind("<Control-N>", lambda x: self.next_step())                root.bind("<Control-s>", lambda x: self.plotsamples())                root.bind("<Control-S>", lambda x: self.plotsamples())                root.bind("<Control-m>", lambda x: self.plotmultiplesamples())                root.bind("<Control-M>", lambda x: self.plotmultiplesamples())                root.bind("<Control-p>", lambda x: self.prev_step())                root.bind("<Control-P>", lambda x: self.prev_step())            elif self.plottype == "multiple":                self.addarrow_butt.destroy()                self.cleararrows_butt.destroy()                self.addbfline_butt.destroy()                self.clearbflines_butt.destroy()                                self.resetplot_butt = tk1.Button(self.interior, text="Reset Site", command= lambda: self.plotmultiplesamples())                self.resetplot_butt.grid(row=3,column=2,sticky='NSEW',padx=10,pady=4)                CreateToolTip(self.resetplot_butt, 100, -65, 250, self, \                'Reset Site (Ctrl-T).\n\nReloads site data, restores defaults settings, and resets plots to default state.')                self.zijcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Zijderveld Plot Settings", width=20, command= lambda: zijcontrols_multiple(self))                self.controlbutt3D = tk1.Button(self.plotcontrol_frm, text="3D Plot Settings", width=20, command= lambda: controls3D_multiple(self))                self.eqcontrol_butt = tk1.Button(self.plotcontrol_frm, text="Equal Area Plot Settings", width=20, command= lambda: eqcontrols_multiple(self))                self.jjocontrol_butt = tk1.Button(self.plotcontrol_frm, text="J/Jo Plot Settings", width=20, command= lambda: jjocontrols_multiple(self))                self.zijcontrol_butt.grid(row=1,column=1, sticky='NSEW',padx=5,pady=4)                self.controlbutt3D.grid(row=1,column=2, sticky='NSEW',padx=5,pady=4)                self.eqcontrol_butt.grid(row=2,column=1, sticky='NSEW',padx=5,pady=4)                self.jjocontrol_butt.grid(row=2,column=2, sticky='NSEW',padx=5,pady=4)                self.rotatesample_butt.destroy()                self.rotatesite_butt.destroy()                self.rotatesample_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Sample", width=15, command= lambda: self.switchtorotate("sample-first"))                self.rotatesample_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesample_butt, 15, -80, 250, self, \                'Rotate Sample.\n\nSwitches to Rotate to rotate sample data.')                self.rotatesite_butt = tk1.Button(self.rotatecontrol_frm, text="Rotate Site", width=15, command= lambda: self.switchtorotate("site"))                self.rotatesite_butt.pack(fill=tk1.X,padx=7,pady=4)                CreateToolTip(self.rotatesite_butt, 15, -80, 250, self, \                'Rotate Site.\n\nSwitches to Rotate to rotate site data.')                CreateToolTip(self.zijcontrol_butt, 15, -80, 250, self, \                'Zijderveld Plot Settings.\n\nClick to show Zijderveld Plot settings. (Any changes will not be seen unless Zijderveld Plot is displayed.)')                CreateToolTip(self.controlbutt3D, 15, -65, 250, self, \                '3D Plot Settings.\n\nClick to show 3D Plot settings. (Any changes will not be seen unless 3D Plot is displayed.)')                CreateToolTip(self.eqcontrol_butt, 15, -80, 250, self, \                'Equal Area Plot Settings.\n\nClick to show Equal Area Plot settings. (Any changes will not be seen unless Equal Area Plot is displayed.)')                CreateToolTip(self.jjocontrol_butt, 15, -65, 250, self, \                'J/Jo Plot Settings.\n\nClick to show J/Jo Plot settings. (Any changes will not be seen unless J/Jo Plot is displayed.)')                self.switchsamples_butt = tk1.Button(self.fullsite_frm, text="Plot Individual Samples", command= lambda: self.plotsamples())                self.switchsamples_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.switchsamples_butt, 15, -65, 250, self, \                'Plot Samples (Ctrl-S).\n\nSwitch to show data from individual samples in site.')                self.switchsite_butt = tk1.Button(self.fullsite_frm, text="Plot Individual Site Steps", command= lambda: self.plotsteps())                self.switchsite_butt.pack(side=tk1.LEFT,fill=tk1.BOTH,expand=tk1.YES,padx=10,pady=4)                CreateToolTip(self.switchsite_butt, 15, -65, 250, self, \                'Plot Steps (Ctrl-E).\n\nSwitch to show data from all samples in a given step in site.')                root.bind("<Control-t>", lambda x: self.plotmultiplesamples())                root.bind("<Control-T>", lambda x: self.plotmultiplesamples())                root.bind("<Control-s>", lambda x: self.plotsamples())                root.bind("<Control-S>", lambda x: self.plotsamples())                root.bind("<Control-e>", lambda x: self.plotsteps())                root.bind("<Control-E>", lambda x: self.plotsteps())                root.unbind("<Control-n>")                root.unbind("<Control-N>")                root.unbind("<Control-p>")                root.unbind("<Control-P>")        az_slidervalue = self.az_slider.get()        zij_incplot_azimuth_choices = {'East-West': 90, 'North-South': 0, 'Hyperbolic': 90, 'Average Declination': getaveragedec(self),'Specified Direction': az_slidervalue}        self.hyperbolic = (self.zijprojcontrol_var.get() == "Hyperbolic")        self.incplot_azimuth = zij_incplot_azimuth_choices[self.zijprojcontrol_var.get()]        showlist = [self.show_zij,self.show_3D,self.show_eq,self.show_jjo]        self.totalplots = (sum(showlist))        if firsttime or newsample:            self.canvas.draw()                    if self.totalplots >=3:            self.gs = gridspec.GridSpec(2, 3, width_ratios=[20, 20,1],height_ratios=[1,1])            grid_zij = 0,0            grid_3D = 0,1            grid_eq = 1,0            grid_JJo = 1,1        elif self.totalplots == 2:            self.gs = gridspec.GridSpec(3, 2, width_ratios=[1,1],height_ratios=[1,3,1])            if self.show_zij:                grid_zij = 1,0                grid_3D = 1,1                grid_eq = 1,1                grid_JJo = 1,1            elif self.show_eq:                grid_eq = 1,0                grid_3D = 1,1                grid_JJo = 1,1            else:                grid_3D = 1,0                grid_JJo = 1,1        elif self.totalplots == 1:            self.gs = gridspec.GridSpec(1, 2, width_ratios=[40,1])            grid_zij = 0,0            grid_3D = 0,0            grid_eq = 0,0            grid_JJo = 0,0        elif self.totalplots == 0:            self.gs = gridspec.GridSpec(1, 1)            ax0 = fig.add_subplot(self.gs[0])            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)            ax0.text(600, 500, "No Plots Displayed for %s" % self.sample.name, color='BLACK',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)            ax0.axis('off')        if self.plottype == "samples":            if self.show_zij:                ax0 = fig.add_subplot(self.gs[grid_zij])                ax0.clear()                ax0.axis('off')                plotzij_sample(self,zijcont,ax0,fig)            if self.show_3D:                ax1 = fig.add_subplot(self.gs[grid_3D],projection='3d')                ax1.clear()                plot3D_sample(self,cont3D,ax1)            if self.show_eq:                ax2 = fig.add_subplot(self.gs[grid_eq])                ax2.clear()                ax2.axis('off')                ploteq_sample(self,eqcont,ax2)            if self.show_jjo:                ax3 = fig.add_subplot(self.gs[grid_JJo])                ax3.clear()                plotjjo_sample(self,jjocont,ax3)        elif self.plottype == "steps":            if self.show_zij:                ax0 = fig.add_subplot(self.gs[grid_zij])                ax0.clear()                ax0.axis('off')                plotzij_step(self,zijcont2,ax0,fig)            if self.show_3D:                ax1 = fig.add_subplot(self.gs[grid_3D],projection='3d')                ax1.clear()                plot3D_step(self,cont3D2,ax1)            if self.show_eq:                ax2 = fig.add_subplot(self.gs[grid_eq])                ax2.clear()                ax2.axis('off')                ploteq_step(self,eqcont2,ax2)            if self.show_jjo:                ax3 = fig.add_subplot(self.gs[grid_JJo])                ax3.clear()                plotjjo_step(self,jjocont2,ax3)        elif self.plottype == "multiple":            if self.show_zij:                ax0 = fig.add_subplot(self.gs[grid_zij])                ax0.clear()                ax0.axis('off')                plotzij_multiple(self,zijcont3,ax0,fig)            if self.show_3D:                ax1 = fig.add_subplot(self.gs[grid_3D],projection='3d')                ax1.clear()                plot3D_multiple(self,cont3D3,ax1)            if self.show_eq:                ax2 = fig.add_subplot(self.gs[grid_eq])                ax2.clear()                ax2.axis('off')                ploteq_multiple(self,eqcont3,ax2)            if self.show_jjo:                ax3 = fig.add_subplot(self.gs[grid_JJo])                ax3.clear()                plotjjo_multiple(self,jjocont3,ax3)        if firsttime and switchfromrotate != "Replot":            fig.tight_layout() # This command is necessary the first time you make this plot. But if done on an update or a reset or subsequent new samples, it will cause problems.         self.canvas.draw()        if not firsttime:            self.canvas.show()        self.plotting_label.destroy()        self.plotting_label = tk1.Label(self.interior, text="Plot Complete.",font=("Helvetica",15))        self.plotting_label.grid(row=12,column=7,sticky='E')        return    def show_popup(self):        global popup_master        popup_master = tk1.Toplevel(root)        popup_master.focus_set()        windowtitle = self.popup_entrybox.get()        if windowtitle == "Enter Window Name" or windowtitle == "":            windowtitle = "Multiplot Popup Plot"        popup_master.title(windowtitle)        popup_master.geometry("+10+10")                self.popup_vertical_scrollbar = tk1.Scrollbar(popup_master,orient=tk1.VERTICAL)        self.popup_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        self.popup_horizontal_scrollbar = tk1.Scrollbar(popup_master,orient=tk1.HORIZONTAL)        self.popup_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.popup_maincanvas = tk1.Canvas(popup_master, bd=0, highlightthickness=0,yscrollcommand=self.popup_vertical_scrollbar.set,xscrollcommand=self.popup_horizontal_scrollbar.set,width=1350,height=1020,scrollregion=(0,0,1350,1020))        self.popup_maincanvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        self.popup_vertical_scrollbar.config(command=self.popup_maincanvas.yview)        self.popup_horizontal_scrollbar.config(command=self.popup_maincanvas.xview)        self.popup_maincanvas.xview_moveto(0)        self.popup_maincanvas.yview_moveto(0)        self.popup_interior = tk1.Frame(self.popup_maincanvas)        self.popup_interior_id = self.popup_maincanvas.create_window(0, 0, window=self.popup_interior,anchor=tk1.NW)        self.popup_scrollcanvas = tk1.Canvas(self.popup_interior)# this is necessary to scroll in the mean list box later if needed.        self.popup_scrollcanvas.destroy()        fig_popup = Figure(figsize=(mainfigurewidth,mainfigureheight),facecolor='white')        # Keep these two lines off or weird runtime errors arise:        #plt.rcParams["font.family"] = "consolas"         #plt.axis('off')        self.popup_canvas=FigureCanvasTkAgg(fig_popup,self.popup_interior)        self.popup_canvas.get_tk_widget().grid(row=0,column=0)        self.popup_canvas.show()        self.popup_toolbar_frm = tk1.Frame(self.popup_interior)        self.popup_toolbar_frm.grid(row=1,column=0,sticky='W')        self.popup_toolbar = NavigationToolbar2TkAgg(self.popup_canvas, self.popup_toolbar_frm)        self.popup_toolbar.update()        showlist = [self.show_zij,self.show_3D,self.show_eq,self.show_jjo]        self.totalplots = (sum(showlist))                self.popup_canvas.draw()         if self.totalplots >=3:            self.gs_popup = gridspec.GridSpec(2, 3, width_ratios=[20, 20, 1],height_ratios=[1,1])            grid_zij = 0,0            grid_3D = 0,1            grid_eq = 1,0            grid_JJo = 1,1        elif self.totalplots == 2:            self.gs_popup = gridspec.GridSpec(3, 2, width_ratios=[1,1],height_ratios=[1,3,1])            if self.show_zij:                grid_zij = 1,0                grid_3D = 1,1                grid_eq = 1,1                grid_JJo = 1,1            elif self.show_eq:                grid_eq = 1,0                grid_3D = 1,1                grid_JJo = 1,1            else:                grid_3D = 1,0                grid_JJo = 1,1        elif self.totalplots == 1:            self.gs_popup = gridspec.GridSpec(1, 2, width_ratios=[40,1])            grid_zij = 0,0            grid_3D = 0,0            grid_eq = 0,0            grid_JJo = 0,0        elif self.totalplots == 0:            self.gs_popup = gridspec.GridSpec(1, 1)            ax0_popup = fig_popup.add_subplot(self.gs_popup[0])            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)            ax0_popup.text(600, 500, "No Plots Displayed for %s" % self.sample.name, color='BLACK',zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)            ax0_popup.axis('off')        if self.plottype == "samples":                        if self.show_zij:                ax0_popup = fig_popup.add_subplot(self.gs_popup[grid_zij])                ax0_popup.clear()                ax0_popup.axis('off')                plotzij_sample(self,zijcont,ax0_popup,fig_popup)            if self.show_3D:                ax1_popup = fig_popup.add_subplot(self.gs_popup[grid_3D],projection='3d')                ax1_popup.clear()                plot3D_sample(self,cont3D,ax1_popup)            if self.show_eq:                ax2_popup = fig_popup.add_subplot(self.gs_popup[grid_eq])                ax2_popup.clear()                ax2_popup.axis('off')                ploteq_sample(self,eqcont,ax2_popup)            if self.show_jjo:                ax3_popup = fig_popup.add_subplot(self.gs_popup[grid_JJo])                ax3_popup.clear()                plotjjo_sample(self,jjocont,ax3_popup)        elif self.plottype == "steps":            if self.show_zij:                ax0_popup = fig_popup.add_subplot(self.gs_popup[grid_zij])                ax0_popup.clear()                ax0_popup.axis('off')                plotzij_step(self,zijcont2,ax0_popup,fig_popup)            if self.show_3D:                ax1_popup = fig_popup.add_subplot(self.gs_popup[grid_3D],projection='3d')                ax1_popup.clear()                plot3D_step(self,cont3D2,ax1_popup)            if self.show_eq:                ax2_popup = fig_popup.add_subplot(self.gs_popup[grid_eq])                ax2_popup.clear()                ax2_popup.axis('off')                ploteq_step(self,eqcont2,ax2_popup)            if self.show_jjo:                ax3_popup = fig_popup.add_subplot(self.gs_popup[grid_JJo])                ax3_popup.clear()                plotjjo_step(self,jjocont2,ax3_popup)        elif self.plottype == "multiple":            if self.show_zij:                ax0_popup = fig_popup.add_subplot(self.gs[grid_zij])                ax0_popup.clear()                ax0_popup.axis('off')                plotzij_multiple(self,zijcont3,ax0_popup,fig_popup)            if self.show_3D:                ax1_popup = fig_popup.add_subplot(self.gs[grid_3D],projection='3d')                ax1_popup.clear()                plot3D_multiple(self,cont3D3,ax1_popup)            if self.show_eq:                ax2_popup = fig_popup.add_subplot(self.gs[grid_eq])                ax2_popup.clear()                ax2_popup.axis('off')                ploteq_multiple(self,eqcont3,ax2_popup)            if self.show_jjo:                ax3_popup = fig_popup.add_subplot(self.gs[grid_JJo])                ax3_popup.clear()                plotjjo_multiple(self,jjocont3,ax3_popup)        fig_popup.tight_layout() # This command is necessary the first time you make this plot. But if done on an update or a reset or subsequent new samples, it will cause problems.         self.popup_canvas.draw()        self.popup_canvas.show()        self.popup_entrybox.delete(0, 'end')        self.popup_entrybox.config(background="white", foreground="dark grey")        self.popup_entrybox.insert(tk1.END, "Enter Window Name")        self.popup_butt.focus_set()        return    def show_popup_plotmeans(self,pmcont):        global popup_master        popup_master = tk1.Toplevel(root)        popup_master.focus_set()        windowtitle = self.popup_entrybox.get()        if windowtitle == "Enter Window Name" or windowtitle == "":            windowtitle = "Multiplot Popup Plot"        popup_master.title(windowtitle)        popup_master.geometry("+10+10")                self.popup_vertical_scrollbar = tk1.Scrollbar(popup_master,orient=tk1.VERTICAL)        self.popup_vertical_scrollbar.pack(fill=tk1.Y, side=tk1.RIGHT, expand=tk1.FALSE)        self.popup_horizontal_scrollbar = tk1.Scrollbar(popup_master,orient=tk1.HORIZONTAL)        self.popup_horizontal_scrollbar.pack(fill=tk1.X, side=tk1.BOTTOM, expand=tk1.FALSE)                self.popup_maincanvas = tk1.Canvas(popup_master, bd=0, highlightthickness=0,yscrollcommand=self.popup_vertical_scrollbar.set,xscrollcommand=self.popup_horizontal_scrollbar.set,width=1350,height=1020,scrollregion=(0,0,1350,1020))        self.popup_maincanvas.pack(side=tk1.LEFT, fill=tk1.BOTH, expand=tk1.TRUE)        self.popup_vertical_scrollbar.config(command=self.popup_maincanvas.yview)        self.popup_horizontal_scrollbar.config(command=self.popup_maincanvas.xview)        self.popup_maincanvas.xview_moveto(0)        self.popup_maincanvas.yview_moveto(0)        self.popup_interior = tk1.Frame(self.popup_maincanvas)        self.popup_interior_id = self.popup_maincanvas.create_window(0, 0, window=self.popup_interior,anchor=tk1.NW)        self.popup_scrollcanvas = tk1.Canvas(self.popup_interior)# this is necessary to scroll in the mean list box later if needed.        self.popup_scrollcanvas.destroy()        fig_popup = Figure(figsize=(mainfigurewidth,mainfigureheight),facecolor='white')        # Keep these two lines off or weird runtime errors arise:        #plt.rcParams["font.family"] = "consolas"         #plt.axis('off')        self.popup_canvas=FigureCanvasTkAgg(fig_popup,self.popup_interior)        self.popup_canvas.get_tk_widget().grid(row=0,column=0)        self.popup_canvas.show()        self.popup_toolbar_frm = tk1.Frame(self.popup_interior)        self.popup_toolbar_frm.grid(row=1,column=0,sticky='W')        self.popup_toolbar = NavigationToolbar2TkAgg(self.popup_canvas, self.popup_toolbar_frm)        self.popup_toolbar.update()                self.popup_canvas.draw()                    self.gs_popup = gridspec.GridSpec(1, 1)        ax4_popup = fig_popup.add_subplot(self.gs_popup[0])        ax4_popup.clear()        plt.subplots_adjust(left=0.05, right=1.15, top=1.15, bottom=0.05)        fig.tight_layout()        ax4_popup.axis('equal')        ax4_popup.axis('off')        ax4_popup.axis([-pmcont.axeslength, pmcont.axeslength, -pmcont.axeslength, pmcont.axeslength])        self.plotting_label = tk1.Label(self.interior, text="Plotting...Please wait just a few seconds.",font=("Helvetica",15))        self.plotting_label.grid(row=12,column=7,sticky='E')        ax4_popup.clear()        ax4_popup.axis('off')        self.canvas.draw()        ax4_popup.axis('equal')        ax4_popup.axis([-pmcont.axeslength, pmcont.axeslength, -pmcont.axeslength, pmcont.axeslength])                horiz_offset = 100        maincircle = plt.Circle((0+horiz_offset, 0), pmcont.eqarearadius, color=pmcont.circle_color, fill=False, lw=pmcont.circle_thickness)        ax4_popup.add_artist(maincircle)                if pmcont.show_cross:                            ax4_popup.plot([0+horiz_offset,0+horiz_offset],[-6,6],pmcont.axestick_color,lw=pmcont.axestick_width)            ax4_popup.plot([-6+horiz_offset,6+horiz_offset],[0,0],pmcont.axestick_color,lw=pmcont.axestick_width)        if pmcont.show_circleticks: # plot circle ticks            tickdegrees = 360/pmcont.numcircleticks             tickmarker = 0            while tickmarker < 360:                 tick_length = eqcircletick_length_dict[pmcont.circletick_length_mod][tickmarker]                tickmarker_rad = math.radians(tickmarker)                x1 = math.sin(tickmarker_rad)*(pmcont.eqarearadius-tick_length)                x2 = math.sin(tickmarker_rad)*pmcont.eqarearadius                y1 = math.cos(tickmarker_rad)*(pmcont.eqarearadius-tick_length)                y2 = math.cos(tickmarker_rad)*pmcont.eqarearadius                ax4_popup.plot([x1+horiz_offset,x2+horiz_offset],[y1,y2],pmcont.circletick_color,lw=pmcont.circletick_width)                tickmarker = tickmarker + tickdegrees        if pmcont.show_axesticks: # plot axes ticks            tickdegrees = 90/pmcont.numaxesticks             tickmarker = tickdegrees            while tickmarker < 90:                tick_length = eqaxestick_length_dict[pmcont.axestick_length_mod][tickmarker]                tickdist = math.sqrt(1-(math.sin(math.radians(math.fabs(tickmarker)))))*pmcont.eqarearadius                if pmcont.show_posxaxis_ticks:                    ax4_popup.plot([tickdist+horiz_offset,tickdist+horiz_offset],[-tick_length,tick_length],pmcont.axestick_color,lw=pmcont.axestick_width)                if pmcont.show_posyaxis_ticks:                    ax4_popup.plot([-tick_length+horiz_offset,tick_length+horiz_offset],[tickdist,tickdist],pmcont.axestick_color,lw=pmcont.axestick_width)                if pmcont.show_negxaxis_ticks:                    ax4_popup.plot([-tickdist+horiz_offset,-tickdist+horiz_offset],[-tick_length,tick_length],pmcont.axestick_color,lw=pmcont.axestick_width)                if pmcont.show_negyaxis_ticks:                    ax4_popup.plot([-tick_length+horiz_offset,tick_length+horiz_offset],[-tickdist,-tickdist],pmcont.axestick_color,lw=pmcont.axestick_width)                            tickmarker = tickmarker + tickdegrees        if pmcont.show_labels:            label_fontsize = fontsizes_dict[pmcont.label_fontsize_mod][1][0] * 1.5            if pmcont.numsordirs == "Dirs":                if pmcont.show_north:                    ax4_popup.text(0+horiz_offset, pmcont.eqarearadius + 7, "N", color=pmcont.label_color, ha="center", fontsize=label_fontsize)                    if pmcont.show_east:                    ax4_popup.text(pmcont.eqarearadius + 7+horiz_offset, 0, "E", color=pmcont.label_color, va="center", fontsize=label_fontsize)                if pmcont.show_south:                    ax4_popup.text(0+horiz_offset, -(pmcont.eqarearadius + 7), "S", color=pmcont.label_color, ha="center", va="top", fontsize=label_fontsize)                if pmcont.show_west:                    ax4_popup.text(-(pmcont.eqarearadius + 7)+horiz_offset, 0, "W", color=pmcont.label_color, va="center", ha="right", fontsize=label_fontsize)            elif pmcont.numsordirs == "Nums":                if pmcont.show_0:                    ax4_popup.text(0+horiz_offset, pmcont.eqarearadius + 7, "0%s" % degree_sign, color=pmcont.label_color, ha="center", fontsize=label_fontsize)                if pmcont.show_90:                    ax4_popup.text(pmcont.eqarearadius + 7+horiz_offset, 0, "90%s" % degree_sign, color=pmcont.label_color, va="center", fontsize=label_fontsize)                if pmcont.show_180:                    ax4_popup.text(0+horiz_offset, -(pmcont.eqarearadius + 7), "180%s" % degree_sign, color=pmcont.label_color, ha="center", va="top", fontsize=label_fontsize)                if pmcont.show_270:                    ax4_popup.text(-(pmcont.eqarearadius + 7)+horiz_offset, 0, "270%s" % degree_sign, color=pmcont.label_color, va="center", ha="right", fontsize=label_fontsize)                     legendicons_list = legend_label_list = []        anyselected = False        showpointnum = 0        for point in self.mean_pointlist:            if point.show:                anyselected = True                showpointnum = showpointnum + 1                if pmcont.truenums:                    pointnum = point.linenum                else:                    pointnum = showpointnum                rad_dec = math.radians(point.dec)                rad_inc = math.radians(point.inc)                                forward = math.sqrt(1-(math.sin(math.radians(math.fabs(point.inc)))))*pmcont.eqarearadius                point_x = math.sin(rad_dec) * forward                point_y = math.cos(rad_dec) * forward                                if point.inc < 0:                    up = True                    drawcolor = "white"                    point_edgecolor = point.color                else:                    up = False                    drawcolor = point.color                    point_edgecolor = None                if (not point.mean) and (point.line != "C"): # plot a component                    newpoint = ax4_popup.scatter(point_x+horiz_offset, point_y, color=drawcolor, s=pmcont.point_symbol_size, marker=point.symbol, edgecolor=point_edgecolor,linewidth=pmcont.point_edge_width,zorder=2)                    pm_annot_pointlist.append([newpoint,"%s. Component Name: %s\nComponent: %s\nDec: %s%s\nInc: %s%s" % (pointnum, point.samplename,point.component,point.dec,degree_sign,point.inc,degree_sign),point.color])                    newlegendpoint, = ax4_popup.plot(-100000,color=drawcolor,marker=point.symbol,markersize=10,markeredgecolor=point_edgecolor,lw=3,zorder=0,linestyle="none")                    if pmcont.show_pointnumbers:                        newlegend_label = "%s. Component %s %s" % (pointnum, point.samplename,point.component)                    else:                        newlegend_label = "Component %s %s" % (point.samplename,point.component)                else:  # Plot a mean or a circle                    if point.line == "C": # Plot a Circle                        newpoint = ax4_popup.scatter(point_x+horiz_offset, point_y, color=drawcolor, s=pmcont.arc_symbol_size, marker=point.symbol, edgecolor=point_edgecolor,linewidth=pmcont.arc_edge_width,zorder=3)                        if point.plotarc:                            showtexttype = "Arc"                        else:                            showtexttype = "Great Circle"                        pm_annot_pointlist.append([newpoint,"%s. Pole of %s of: %s\nComponent: %s\nPole Dec: %s%s\nPole Inc: %s%s" % (pointnum, showtexttype, point.samplename,point.component,point.dec,degree_sign,point.inc,degree_sign),point.color])                        if pmcont.show_pointnumbers:                                newlegend_label = "%s. Arc %s" % (pointnum, point.samplename)                        else:                            newlegend_label = "Arc %s" % (point.samplename)                    else: # Plot a Mean                        newpoint = ax4_popup.scatter(point_x+horiz_offset, point_y, color=drawcolor, s=pmcont.mean_symbol_size, marker=point.symbol, edgecolor=point_edgecolor,linewidth=pmcont.mean_edge_width,zorder=3)                        pm_annot_pointlist.append([newpoint,"%s. Mean Name: %s\nComponent: %s\nDec: %s\nInc: %s\n%s95: %s%s" % (pointnum, point.samplename,point.component,point.dec,point.inc,alpha_symbol,point.a95,degree_sign),point.color])                        if pmcont.show_pointnumbers:                            newlegend_label = "%s. Mean %s" % (pointnum, point.samplename)                        else:                            newlegend_label = "Mean %s" % (point.samplename)                    newlegendpoint, = ax4_popup.plot(-100000,color=drawcolor,marker=point.symbol,markersize=10,markeredgecolor=point_edgecolor,lw=3,zorder=0,linestyle="none")                    if point.a95 == "ERR":                        legendicons_list.append(newlegendpoint)                        legend_label_list.append(newlegend_label)                        continue                                        elif point.line == "C":                        ell_a95 = 90.0001 # This is necessary to avoid float errors at many decimal places                        edf = pmcont.ellipse_densityfactor / 5                        if point.plotarc:                            degreediff = math.fabs( (point.arcstart) - (point.arcend) )                            if degreediff <= 180:                                arcstart_degrees = min(point.arcstart,point.arcend)                                arcend_degrees = max(point.arcstart,point.arcend)                            elif degreediff > 180:                                arcstart_degrees = min(point.arcstart % 360, point.arcend % 360)                                arcend_degrees = max(point.arcstart % 360, point.arcend % 360)                        else:                            arcstart_degrees = 0.0                            arcend_degrees = 360.0                    else:                        arcstart_degrees = 0.0                        arcend_degrees = 360.0                        ell_a95 = point.a95                        edf = pmcont.ellipse_densityfactor                        if ell_a95 == 90:                            ell_a95 = 90.0001 # This is necessary to avoid float errors at many decimal places                                        dec = point.dec                    inc = point.inc                                        if ell_a95 > 90: # Note: Much of the math in this section is borrowed from pmagpy. Thank you!                        bigellipse = True                        ell_a95 = 180 - ell_a95                        dec = dec - 180                        inc = -inc                    else:                        bigellipse = False                                        rad_ell_a95 = math.radians(ell_a95)                    rad_dec = math.radians(dec)                    rad_inc = math.radians(inc)                                       trans_matrix = [[0,0,0],[0,0,0],[0,0,0]]                                        north = math.cos(rad_dec) * math.cos(rad_inc)                    east = math.sin(rad_dec) * math.cos(rad_inc)                    down = math.sin(rad_inc)                    if down < 0:                        north = -north                        east = -east                        down = -down                    trans_matrix[0][2] = north                    trans_matrix[1][2] = east                    trans_matrix[2][2] = down                    binc = inc - ( (abs(inc)/inc) * 90 )                    rad_binc = math.radians(binc)                                        north = math.cos(rad_dec) * math.cos(rad_binc)                    east = math.sin(rad_dec) * math.cos(rad_binc)                    down = math.sin(rad_binc)                    if down < 0:                        north = -north                        east = -east                        down = -down                    trans_matrix[0][0] = north                    trans_matrix[1][0] = east                    trans_matrix[2][0] = down                    gdec = dec + 90                    rad_gdec = math.radians(gdec)                    ginc = 0                                        north = math.cos(rad_gdec) * math.cos(ginc)                    east = math.sin(rad_gdec) * math.cos(ginc)                    down = math.sin(ginc)                    if down < 0:                        north = -north                        east = -east                        down = -down                    trans_matrix[0][1] = north                    trans_matrix[1][1] = east                    trans_matrix[2][1] = down                    totdrawpoints = int(ell_a95 * edf)                    totdegrees = math.fabs(arcstart_degrees - arcend_degrees)                    pointsperdegree = float(float(totdrawpoints) / totdegrees)                    startdegrees = int(round(arcstart_degrees*pointsperdegree,0))                    enddegrees = int(round(arcend_degrees*pointsperdegree,0))                    if point.line == "C" and point.plotarc:                        if point.inc >= 0:                            offset = 90                        else:                            offset = -90                            startdegrees, enddegrees = -enddegrees, -startdegrees                    else:                        offset = 0                                        for pointnum in range(startdegrees,enddegrees):                        degrees_pointnum  = (float(pointnum)/pointsperdegree)                        degrees_offset = (degrees_pointnum+offset)%360                        rad_pointnum = math.radians(degrees_offset)                        vector_matrix = [0,0,0]                        vector_matrix[0] = math.sin(rad_ell_a95) * math.cos(rad_pointnum)                        vector_matrix[1] = math.sin(rad_ell_a95) * math.sin(rad_pointnum)                        vector_matrix[2] = math.sqrt(1.0 - vector_matrix[0]**2 - vector_matrix[1]**2)                        ellipse = [0,0,0]                               for j in range(0,3):                            for k in range(0,3):                                ellipse[j] = ellipse[j] + (trans_matrix[j][k]*vector_matrix[k])                        R = math.sqrt(1.0 - abs(ellipse[2])) / math.sqrt (ellipse[0]**2 + ellipse[1]**2)                        R_deg = math.degrees(R) / 90 * pmcont.eqarearadius * pmcont.cosmologicalconstant                        ell_x = (ellipse[1] * R_deg)                        ell_y = (ellipse[0] * R_deg)                        if up or bigellipse:                            ell_x = -ell_x                            ell_y = -ell_y    ##                    if inc * ellipse[2] >= 0:                        # Use this code when plotting the ellipse in different colors for upper vs. lower hemisphere    ##                        drawcolor = pmcont.lowerhem_color    ##                    else:    ##                        if pmcont.upperhem == "white":    ##                            drawcolor = pmcont.lowerhem_color    ##                        else:    ##                            drawcolor = pmcont.upperhem_color                        newpoint = ax4_popup.scatter(ell_x+horiz_offset, ell_y, color=point.color, s=pmcont.ellipse_width, marker=pmcont.ellipse_symbol,zorder=1)                        if point.line == "C":                            if point.plotarc:                                showtexttype = "Arc"                            else:                                showtexttype = "Great Circle"                            pm_annot_pointlist.append([newpoint,"%s. %s of: %s\nComponent: %s\nPole Dec: %s%s\nPole Inc: %s%s" % (pointnum, showtexttype, point.samplename,point.component,point.dec,degree_sign,point.inc,degree_sign),point.color])                        else:                            pm_annot_pointlist.append([newpoint,"%s. %s95 ellipse of: %s\nComponent: %s\n%s95: %s%s\nDec: %s%s\nInc: %s%s" % (pointnum,alpha_symbol,point.samplename,point.component,alpha_symbol,point.a95,degree_sign,point.dec,degree_sign,point.inc,degree_sign),point.color])    # this is an attempt to plot arcs the same way I plot arcs between points in the Multiplot Equal Area Plot...doesn't work yet.    ##            elif point.line == "C":    ##                p0_lat = 0 # this is always the case becuase the Node (p0) is always along the equator    ##                p0_lon = (point.dec - 90) % 360    ##                if point.plotarc:    ##                    degreediff = math.fabs( (point.arcstart) - (point.arcend) )    ##                    if degreediff <= 180:    ##                        angdist_01 = math.radians(min(point.arcstart,point.arcend))    ##                        angdist_02 = math.radians(max(point.arcstart,point.arcend))    ##                    elif degreediff > 180:    ##                        angdist_01 = math.radians(min(point.arcstart % 360, point.arcend % 360))    ##                        angdist_02 = math.radians(max(point.arcstart % 360, point.arcend % 360))    ##                else:    ##                    angdist_01 = math.radians(0.0)    ##                    angdist_02 = math.radians(360.0)    ##    ##                if point.inc >= 0:    ##                    heading_01 = math.radians(90 - point.inc)    ##                else:    ##                    heading_01 = math.radians(-(90 + point.inc))    ##    ####                if inc < 0 and prev_inc < 0:    ####                    angdist_02 = -angdist_02    ####                    if angdist_01 > angdist_02:    ####                        angdist_01, angdist_02 = angdist_02, angdist_01    ####                elif (np.sign(p1_lat) != np.sign(p2_lat)) and (math.fabs(angdist_02 - angdist_01) > math.pi):    ####                    angdist_02 = math.fabs(angdist_02) - (2 * math.pi)    ####                    angdist_01, angdist_02 = angdist_02, angdist_01    ##    ##                start_angdist_point = int(round(angdist_01 * 100, 0))    ##                end_angdist_point = int(round(angdist_02 * 100, 0))    ##                for angdist_0p in range(start_angdist_point,end_angdist_point):    ##                    p_lat = math.asin( math.cos(heading_01)*math.sin(angdist_0p/100) )    ##                    p_lon = math.atan2(math.sin(heading_01)*math.sin(angdist_0p/100),math.cos(angdist_0p/100)) + p0_lon    ##                    forward = math.sqrt(1-(math.sin(math.fabs(p_lat))))*pmcont.eqarearadius    ##                    arc_x = math.sin(p_lon) * forward    ##                    arc_y = math.cos(p_lon) * forward    ##                    ax4_popup.scatter(arc_x+horiz_offset, arc_y+horiz_offset, color=point.color, s=pmcont.ellipse_width, marker=pmcont.ellipse_symbol,zorder=4)                                                        legendicons_list.append(newlegendpoint)                legend_label_list.append(newlegend_label)        if not anyselected:            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)            ax4_popup.text(100, 0, "No Points Selected to Plot", color=pmcont.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props)        self.toolbar_frm = tk1.Frame(self.interior)        self.toolbar_frm.grid(row=12,column=6,sticky='W')        self.toolbar = NavigationToolbar2TkAgg(self.canvas, self.toolbar_frm)        self.toolbar.update()        if pmcont.show_gadfield:            sitelat = int(pmcont.sitelat)              sitelat_rad = math.radians(pmcont.sitelat)            siteinc = math.atan(2 * math.tan(sitelat_rad))  # GAD equation: tan (I) = 2tan (lat)            forward = math.sqrt(1-(math.sin(math.fabs(siteinc))))*pmcont.eqarearadius            point_x = 0            point_y = forward                        if sitelat <= 0:                if not(pmcont.field_symbol in ["+","x"]):                    gadfield_drawcolor = "white"                    gadfield_edgecolor = pmcont.field_color                else:                    gadfield_drawcolor = pmcont.field_color                    gadfield_edgecolor = pmcont.field_edge_color            else:                gadfield_drawcolor = pmcont.field_color                gadfield_edgecolor = pmcont.field_edge_color                            if pmcont.show_gadfield_edge:                newpoint = ax4_popup.scatter(point_x+horiz_offset, point_y, color=gadfield_drawcolor, s=pmcont.field_size, marker=pmcont.field_symbol, edgecolor=gadfield_edgecolor)            else:                newpoint = ax4_popup.scatter(point_x+horiz_offset, point_y, color=gadfield_drawcolor, s=pmcont.field_size, marker=pmcont.field_symbol)            siteinc_deg = round(math.degrees(siteinc),1)            gadfield_label_str = "GAD Field\nSite Lat: %s%s\nSite Inc: %s%s" % (sitelat, degree_sign, siteinc_deg, degree_sign)            pm_annot_pointlist.append([newpoint,gadfield_label_str,gadfield_drawcolor])                        if pmcont.show_gadfield_label:                step_x = 4                step_y = 8                ax4_popup.text(point_x+step_x+horiz_offset, point_y+step_y, gadfield_label_str,color=pmcont.field_color,fontsize=15,zorder=5)            if pmcont.show_legend:                black_x, = ax4_popup.plot(-1000000, pmcont.field_symbol, color=gadfield_drawcolor, markersize=8,markeredgecolor=gadfield_edgecolor, linestyle="none")                legendicons_list.append(black_x)                legend_label_list.append(gadfield_label_str)        if pmcont.show_popupannotations:            fig.canvas.mpl_connect('motion_notify_event', plotmean_on_plot_hover)            pm_annot = ax4_popup.annotate("", xy=(0,0), xytext=(20,-20),textcoords="offset points",bbox=dict(boxstyle="round", fc="w"),arrowprops=dict(arrowstyle="->"),zorder=20)            pm_annot.set_visible(False)        if pmcont.show_legend:            divider_icon, = ax4_popup.plot(-100000,color='white',marker=".",markersize=0,zorder=0,linestyle="none")            legendicons_list.append(divider_icon)            legend_label_list.append("--------------------")            upperhem_opencircle, = ax4_popup.plot(-100000,color='white',marker=pmcont.point_symbol,markersize=10,markeredgecolor="BLACK",lw=3,zorder=0,linestyle="none")            legendicons_list.append(upperhem_opencircle)            legend_label_list.append("Open Symbols:\nUpper Hemisphere\n(Neg. Inclination)")            lowerhem_closedcircle, = ax4_popup.plot(-100000,color='black',marker=pmcont.point_symbol,markersize=10,markeredgecolor="BLACK",lw=3,zorder=0,linestyle="none")            legendicons_list.append(lowerhem_closedcircle)            legend_label_list.append("Closed Symbols:\nLower Hemisphere\n(Pos. Inclination)")            a95ellipse, = ax4_popup.plot(-100000,color='BLACK',marker=".",markersize=0,markeredgecolor="BLACK",lw=3,zorder=0)            legendicons_list.append(a95ellipse)            legend_label_list.append("%s95 ellipse boundary" % alpha_symbol)                        pm_legend = ax4_popup.legend(legendicons_list,legend_label_list,numpoints=1,fontsize=10,loc=2,fancybox=True, shadow=True)            for text in pm_legend.get_texts():                text.set_color(pmcont.legend_color)        if pmcont.show_title:            bbox_props = dict(boxstyle='round', facecolor='#f3f2f1', alpha=0.9)            ax4_popup.text(1150, 870, "Equal Area Plot of\nComponents and Means of\n%s" % self.datafile, color=pmcont.title_color,zorder=4,va='bottom',ha='center',fontsize=15,fontweight='bold',bbox=bbox_props,transform=None)        fig_popup.tight_layout() # This command is necessary the first time you make this plot. But if done on an update or a reset or subsequent new samples, it will cause problems.         self.popup_canvas.draw()        self.popup_canvas.show()        self.popup_entrybox.delete(0, 'end')        self.popup_entrybox.config(background="white", foreground="dark grey")        self.popup_entrybox.insert(tk1.END, "Enter Window Name")        self.popup_butt.focus_set()        return################################################################### Rotate Sample Functions ######################################################################        def startrotate(self):        self.filepathandname = openfile(self,"Open Data File to Rotate: Select .sam (Rapid SQUID) or .jr6 (JR6 Spinner) or .lsq (Least Squares File)","*.sam, *.jr6, *.lsq",(("Rapid SQUID .sam files, JR6 Spinner .jr6 files, Least Squares .lsq files","*.sam"),("Rapid SQUID .sam files, JR6 Spinner .jr6 files, Least Squares .lsq files","*.jr6"),("Rapid SQUID .sam files, JR6 Spinner .jr6 files, Least Squares .lsq files","*.lsq"),("all files","*.*")))        if self.filepathandname == "":            return                    self.samplelist = getsamplenames(self)        self.totsampcount = len(self.samplelist)        self.plottype = "samples"                if self.datatype == "Rapid":            self.datafile = self.samplelist[0]        elif self.datatype == "JR6":            self.datafile = self.sitename + ".txt"        elif self.datatype == "LSQ":            self.datafile = self.currentfile        self.coordtype = "Tilt"        self.dorotate("new")        return    def dorotate(self,rotationtype):        unbindeverything(self)        self.interior.destroy()        self.maincanvas.xview_moveto(0)        self.maincanvas.yview_moveto(0)        self.interior = tk1.Frame(self.maincanvas)        self.interior_id = self.maincanvas.create_window(0, 0, window=self.interior,anchor=tk1.NW)        self.zerorowcolspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))        self.zerorowcolspacer.grid(row=0, column=0, sticky='NSEW')        self.colspacer = tk1.Label(self.interior, text=" ",font=("Helvetica",1))        self.colspacer.grid(row=0, column=4, sticky='NSEW')        self.canvas=tk1.Canvas(self.interior, bd=0)        self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.rotatesplash_frm = tk1.Frame(self.interior)        self.rotatesplash_frm.grid(row=1,column=0,columnspan=5,rowspan=11, sticky='NSEW')        self.rotatespacer1 = tk1.Label(self.rotatesplash_frm, text="  ",font=("Helvetica",10))        self.rotatespacer1.pack(fill=tk1.X)        self.welcomesitename = tk1.Label(self.rotatesplash_frm, text="Site: %s" % (self.sitename),font=("Helvetica 18 bold"))        self.welcomesitename.pack(fill=tk1.X)        self.welcomename = tk1.Label(self.rotatesplash_frm, text="\nWhat would you like to rotate?",font=("Helvetica 18 bold"))        self.welcomename.pack(fill=tk1.X)        self.rotatespacer2 = tk1.Label(self.rotatesplash_frm, text="  ",font=("Helvetica",10))        self.rotatespacer2.pack(fill=tk1.X)        self.rotateselectedsamp_butt = tk1.Button(self.rotatesplash_frm, text="Rotate Selected Sample\n(Geographic and/or Tilt)", font=("Helvetica 12 bold"), width=5, height=4,command=lambda: self.rotatesample(rotationtype))        self.rotateselectedsamp_butt.pack(fill=tk1.X, padx=25, pady=7)        CreateToolTip(self.rotateselectedsamp_butt, 15, -20, 250, self, \        'Rotate selected sample (geographic and/or tilt).')        self.rotatesite_butt = tk1.Button(self.rotatesplash_frm, text="Rotate Site\n(Tilt Only)", font=("Helvetica 12 bold"), width=5, height=4,command=lambda: self.rotatesite(rotationtype))        self.rotatesite_butt.pack(fill=tk1.X, padx=25, pady=7)        CreateToolTip(self.rotatesite_butt, 15, -20, 250, self, \        'Rotate site (tilt only).')                self.rotatespacer2 = tk1.Label(self.rotatesplash_frm, text="  \n  \n  \n  \n  \n  \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   ",font=("Helvetica",10))        self.rotatespacer2.pack(fill=tk1.X)        self.rotatespacer3 = tk1.Label(self.rotatesplash_frm, text="  \n  \n  \n  \n  \n  \n   \n   ",font=("Helvetica",10))        self.rotatespacer3.pack(fill=tk1.X)        self.lastrow_frm = tk1.Frame(self.interior)        self.lastrow_frm.grid(row=12,column=1,columnspan=2)        self.reset_butt = tk1.Button(self.lastrow_frm, text="RESET", width=7, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.startover())        self.reset_butt.pack(side=tk1.LEFT,padx=10,pady=2)        CreateToolTip(self.reset_butt, 15, -80, 180, self, \        'Reset Multiplot (Ctrl-Shift-R).\n\nReturn to splash page and open and view sample or step demagnetization data from a site.')                self.plotsitemeans_butt = tk1.Button(self.lastrow_frm, text="PLOT SITE MEANS", width=15, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: plotsitemeans(self,False))        self.plotsitemeans_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.plotsitemeans_butt, 20, -80, 180, self, \        'Plot Site Means (Ctrl-Shift-M).\n\nOpen an .lsq file and plot components, and calculate and plot new means for a site.')        self.calculator_butt = tk1.Button(self.lastrow_frm, text="CALCULATOR", width=11, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: calculator(self))        self.calculator_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.calculator_butt, 18, -125, 250, self, \        'Paleomagnetic Calculator (Ctrl-Shift-C).\n\nCalculate various paleomagnetic statistics including:, Grand Mean VGP, Site VGPs, Site Directions, Mean Directions, Mean Site Location, Paleolatitude, Paleoinclination, Angular Distance, Real distance, Rotated Coordinates, and Convert Coordinate Format.')        self.about_butt = tk1.Button(self.lastrow_frm, text="ABOUT", width=6, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.aboutmultiplot())        self.about_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.about_butt, 10, -110, 180, self, \        'About Multiplot (Ctrl-Shift-A).\n\nDeveloper info and support contact, technical requirements, citation information, and software license and legal/copyright information.')                self.shortcut_butt = tk1.Button(self.lastrow_frm, text="SHORTCUTS", width=10, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.shortcuts())        self.shortcut_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.shortcut_butt, 15, -65, 180, self, \        'Multiplot Shortcuts (Ctrl-Shift-S).\n\nSee a list of keyboard and mouse shortcuts.')        self.quit_butt = tk1.Button(self.lastrow_frm, text="QUIT", width=5, height=1,relief=tk1.RAISED,borderwidth=4,command=lambda: self.quitprogram())        self.quit_butt.pack(side=tk1.LEFT,padx=7,pady=2)        CreateToolTip(self.quit_butt, 10, -20, 180, self, \        'Quit Multiplot (Ctrl-Shift-Q).')        if rotationtype == "site":            self.rotatesite(rotationtype)        elif rotationtype == "sample-first":            self.currentsample = self.samplelist[0]            self.sample = Createnewsample(self,self.currentsample)            self.rotatesample(rotationtype)        elif rotationtype == "sample-current":            self.currentsample = self.sample.name            self.rotatesample(rotationtype)        elif rotationtype == "new":            self.currentsample = self.samplelist[0]            self.sample = Createnewsample(self,self.currentsample)        return    def rotatesample(self,rotationtype):        self.canvas.destroy()        self.canvas=tk1.Canvas(self.interior, bd=0)        self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)        self.maincanvas.yview_moveto(0)        if rotationtype == "new":            rotationtype = "new-sample"                    self.introname = tk1.Label(self.canvas, text="Rotate Individual Sample",font=("Helvetica",25))        self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')        self.enterdata_label = tk1.Label(self.canvas, text="Select Sample to Rotate",font=("Helvetica 12 bold"))        self.enterdata_label.grid(row=1,column=0, sticky='NSEW')        self.samplelist_frm = tk1.Frame(self.canvas,relief=tk1.GROOVE,bd=1)        self.samplelist_frm.grid(row=2,column=0, sticky='NSEW')            self.samplelistbox = tk1.Listbox(self.samplelist_frm,height=self.totsampcount,font=("Consolas",10),selectmode=tk1.SINGLE,exportselection=0)        self.samplelistbox_label = tk1.Label(self.samplelist_frm, text="Site %s: %s Total Samples:" % (self.sitename,self.totsampcount))        for item in self.samplelist:            self.samplelistbox.insert(tk1.END,item)            self.samplelistbox.itemconfig(tk1.END,bg="white",fg="BLACK", selectbackground="BLACK", selectforeground="white")        self.samplelistbox.select_set(self.samplelist.index(self.currentsample))        self.samplelistbox.bind("<<ListboxSelect>>", lambda x: self.updatesamplestats()) # single-click sample to select        self.samplelistbox_label.grid(row=0,column=0,sticky="NSEW")        self.samplelistbox.grid(row=1,column=0,sticky="NSEW")        self.samplelist_frm.rowconfigure(1, weight=1)        self.samplelist_frm.columnconfigure(0, weight=1)        self.sample_scrollbar = tk1.Scrollbar(self.samplelistbox,orient="vertical")        self.sample_scrollbar.config(command=self.samplelistbox.yview)        self.samplelistbox.config(yscrollcommand=self.sample_scrollbar.set)        self.sample_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=102)        self.samplelistbox.bind("<Enter>", self.entersamplebox)        self.samplelistbox.bind("<Leave>", self.leavesamplebox)        self.updatesamplestats()        self.calcrotate_frm = tk1.Frame(self.canvas)        self.calcrotate_frm.grid(row=2,column=3,sticky='SW')                self.calcrotatesave_butt = tk1.Button(self.calcrotate_frm, text="Rotate Sample and Save Data File", width=30, height=3,command=lambda: self.calcrotatesave_sample(rotationtype))        self.calcrotatesave_butt.pack(side=tk1.LEFT,padx=3,pady=4)        root.bind_all("<Control-Return>", lambda x: self.calcrotatesave_sample())        CreateToolTip(self.calcrotatesave_butt, 30, -20, 200, self, \        'Rotate sample and save data file. (Ctrl-Enter)')        self.plotsample_butt = tk1.Button(self.canvas, text="Plot Sample\n(Unrotated Data)", width=30, height=3,command=lambda: self.switchtoplot(rotationtype))        self.plotsample_butt.grid(row=2,column=4,sticky='SEW',padx=3,pady=4)        CreateToolTip(self.plotsample_butt, 30, -20, 200, self, \        'Plot Sample (Unrotated Data)')        return    def rotatesite(self,rotationtype):        self.canvas.destroy()            self.canvas=tk1.Canvas(self.interior, bd=0)        self.canvas.grid(row=0,column=6,rowspan=12,columnspan=2)        self.maincanvas.xview_moveto(0)        self.maincanvas.yview_moveto(0)        if rotationtype == "new":            rotationtype = "new-site"        self.introname = tk1.Label(self.canvas, text="Rotate Site (Tilt Only)",font=("Helvetica",25))        self.introname.grid(row=0,column=0, columnspan=3, sticky='NSEW')        self.enterdata_label = tk1.Label(self.canvas, text="Samples In Site:",font=("Helvetica 12 bold"))        self.enterdata_label.grid(row=1,column=0, sticky='NSEW')        self.samplelist_frm = tk1.Frame(self.canvas,relief=tk1.GROOVE,bd=1)        self.samplelist_frm.grid(row=2,column=0, sticky='NSEW')            self.samplelistbox = tk1.Listbox(self.samplelist_frm,height=self.totsampcount,font=("Consolas",10),selectmode=tk1.SINGLE,exportselection=0)        self.samplelistbox_label = tk1.Label(self.samplelist_frm, text="Site %s: %s Total Samples:" % (self.sitename,self.totsampcount))        for item in self.samplelist:            self.samplelistbox.insert(tk1.END,item)            self.samplelistbox.itemconfig(tk1.END,bg="white",fg="BLACK", selectbackground="BLACK", selectforeground="white")        self.samplelistbox.select_set(0)        self.samplelistbox_label.grid(row=0,column=0,sticky="NSEW")        self.samplelistbox.grid(row=1,column=0,sticky="NSEW")        self.samplelist_frm.rowconfigure(1, weight=1)        self.samplelist_frm.columnconfigure(0, weight=1)        self.sample_scrollbar = tk1.Scrollbar(self.samplelistbox,orient="vertical")        self.sample_scrollbar.config(command=self.samplelistbox.yview)        self.samplelistbox.config(yscrollcommand=self.sample_scrollbar.set)        self.sample_scrollbar.pack(side=tk1.RIGHT, fill=tk1.Y,ipady=102)        self.samplelistbox.configure(state='disabled')        self.samplelistbox.bind("<Enter>", self.entersamplebox)        self.samplelistbox.bind("<Leave>", self.leavesamplebox)        if self.datatype == "Rapid": # Rapid Squid Data            sam_f = open(self.filepathandname,'r') #Opens the .sam file for reading to get sample names.            first_line = sam_f.readline()            first_line_list = first_line.split()            if first_line_list[0] == 'CIT':   # some .sam files have a "CIT" at the first line and the first sample isn't until the 4th line; others have the first sample on the third line. This does a check for which kind.                sitedecline = 1            else:                sitedecline = 0            for linenum, line in enumerate(sam_f):                if linenum == sitedecline:                    linelist = line.split()                    if len(linelist) > 3:                        beddingstrike = float(linelist[3])                        beddingdip = float(linelist[4])                        beddingstrike_str = ("%.1f" % beddingstrike)                        beddingdip_str = ("%.1f" % beddingdip)                    else:                        beddingstrike_str = ("N/A")                        beddingdip_str = ("N/A")                    break            sam_f.close()        elif self.datatype == "JR6": # Assumes every sample in the site has the same dip and strike.            jr6_f = open(self.filepathandname,'r')            first_line = jr6_f.readline()            first_line_list = first_line.split()            beddingstrike = float(first_line_list[8])            beddingdip = float(first_line_list[9])            beddingstrike_str = ("%.0f" % beddingstrike)            beddingdip_str = ("%.0f" % beddingdip)            jr6_f.close()        elif self.datatype == "LSQ":            beddingstrike = 0            beddingdip = 0            beddingstrike_str = ("%.0f" % beddingstrike)            beddingdip_str = ("%.0f" % beddingdip)                    self.samplestats_calcrot_frm = tk1.Frame(self.canvas)        self.samplestats_calcrot_frm.grid(row=2,column=2,sticky='NSEW')        self.samplestats_frm = tk1.Frame(self.samplestats_calcrot_frm,relief=tk1.GROOVE,bd=1)        self.samplestats_frm.pack(fill=tk1.X)        self.samplename_label = self.offset_label = tk1.Label(self.samplestats_frm, text="Parameters for Site %s:\n" % self.sitename)        self.samplename_label.grid(row=0,column=0,columnspan=2,sticky='NSEW')        self.samplebedding_label = tk1.Label(self.samplestats_frm, text="Bedding Parameters:")        self.samplebedding_label.grid(row=1,column=0,columnspan=2,sticky='NSEW')        if self.datatype != "LSQ":            self.beddingstrike_label = tk1.Label(self.samplestats_frm, text="Current Bedding Strike: ")            self.beddingstrike_label.grid(row=2,column=0,sticky='E')            self.beddingstrikenum_label = tk1.Label(self.samplestats_frm, text="%s" % beddingstrike_str)            self.beddingstrikenum_label.grid(row=2,column=1,sticky='W')            self.beddingdip_label = tk1.Label(self.samplestats_frm, text="Current Bedding Dip: ")            self.beddingdip_label.grid(row=3,column=0,sticky='E')            self.beddingdipnum_label = tk1.Label(self.samplestats_frm, text="%s" % beddingdip_str)            self.beddingdipnum_label.grid(row=3,column=1,sticky='W')        else:            self.beddingstrike_label = tk1.Label(self.samplestats_frm, text="Current Bedding Strike: ")            self.beddingstrike_label.grid(row=2,column=0,sticky='E')            self.beddingstrikenum_label = tk1.Label(self.samplestats_frm, text="Cannot Tell")            self.beddingstrikenum_label.grid(row=2,column=1,sticky='W')            self.beddingdip_label = tk1.Label(self.samplestats_frm, text="Current Bedding Dip: ")            self.beddingdip_label.grid(row=3,column=0,sticky='E')            self.beddingdipnum_label = tk1.Label(self.samplestats_frm, text="Cannot Tell")            self.beddingdipnum_label.grid(row=3,column=1,sticky='W')        self.samplestatspacer9_label = tk1.Label(self.samplestats_frm, text="  ")        self.samplestatspacer9_label.grid(row=4,column=0,sticky='NSEW')        self.inputstrike_frm = tk1.Frame(self.samplestats_frm)        self.inputstrike_frm.grid(row=5,column=0,sticky='E')        self.newbeddingstrike_label = tk1.Label(self.inputstrike_frm, text="Select Type of New Rotation Axis:")        self.newbeddingstrike_label.pack(fill=tk1.X)                self.rotationaxis_var = tk1.StringVar()        self.rotationaxis_var.set("Right Strike")        self.rightstrike_radio = tk1.Radiobutton(self.inputstrike_frm, text="Right-Handed Strike\t",variable=self.rotationaxis_var,value="Right Strike")        self.rightstrike_radio.pack(fill=tk1.X)        CreateToolTip(self.rightstrike_radio, 30, -50, 250, self, \        'Right-Handed strike means thumb of the right hand points in the strike direction and fingers point in dip direction. BOTH Rapid Squid and JR6 Spinner use right-handed strike for bedding.')        self.leftstrike_radio = tk1.Radiobutton(self.inputstrike_frm, text="Left-Handed Strike\t",variable=self.rotationaxis_var,value="Left Strike")        self.leftstrike_radio.pack(fill=tk1.X)        CreateToolTip(self.leftstrike_radio, 30, -50, 250, self, \        'Left-Handed strike means thumb of the left hand points in the strike direction and fingers point in dip direction.')        self.dipdir_radio = tk1.Radiobutton(self.inputstrike_frm, text="Dip Direction\t",variable=self.rotationaxis_var,value="Dip Direction")        self.dipdir_radio.pack(fill=tk1.X)        self.newrotationaxis_label = tk1.Label(self.inputstrike_frm, text="New Rotation Axis Value:")        self.newrotationaxis_label.pack(side=tk1.RIGHT)        self.newbeddingstrike_entrybox = tk1.Entry(self.samplestats_frm,width=10)        self.newbeddingstrike_entrybox.grid(row=5,column=1,sticky='SW')        self.newbeddingstrike_entrybox.insert(tk1.END, beddingstrike_str)        self.newbeddingdip_label = tk1.Label(self.samplestats_frm, text="New Bedding Dip: ")        self.newbeddingdip_label.grid(row=6,column=0,sticky='E')        self.newbeddingdip_entrybox = tk1.Entry(self.samplestats_frm,width=10)        self.newbeddingdip_entrybox.grid(row=6,column=1,sticky='W')        self.newbeddingdip_entrybox.insert(tk1.END, beddingdip_str)        self.samplestats_frm = tk1.Frame(self.samplestats_calcrot_frm)        self.samplestats_frm.pack(fill=tk1.X)                self.calcrotatesave_butt = tk1.Button(self.samplestats_frm, text="Rotate All Samples in Site\nand Save Data File", width=30, height=3,command=lambda: self.calcrotatesave_site(rotationtype))        self.calcrotatesave_butt.pack(fill=tk1.X,padx=8,pady=10)        root.bind_all("<Control-Return>", lambda x: self.calcrotatesave_site())        CreateToolTip(self.calcrotatesave_butt, 30, -20, 200, self, \        'Rotate all samples in site and save data file. (Ctrl-Enter)')        self.plotsite_butt = tk1.Button(self.canvas, text="Plot Site\n(Unrotated Data)", width=30, height=3,command=lambda: self.switchtoplot(rotationtype))        self.plotsite_butt.grid(row=2,column=3,sticky='SEW',padx=8,pady=10)        CreateToolTip(self.plotsite_butt, 30, -20, 200, self, \        'Plot Site (Unrotated Data)')        return    def updatesamplestats(self):        self.samplestats_frm = tk1.Frame(self.canvas,relief=tk1.GROOVE,bd=1)        self.samplestats_frm.grid(row=2,column=2,sticky='W')        self.currentsample = self.samplelist[self.samplelistbox.curselection()[0]]        if self.datatype == "Rapid":            self.datafile = self.currentsample        self.sample = Createnewsample(self,self.currentsample)        self.samplename_label = self.offset_label = tk1.Label(self.samplestats_frm, text="Parameters for Sample %s:\n\nCore Orientation Parameters:" % self.currentsample)        self.samplename_label.grid(row=0,column=0,columnspan=2,sticky='NSEW')        if self.datatype != "LSQ":            self.coreplatestrike_label = tk1.Label(self.samplestats_frm, text="Current Core Plate Strike: ")            self.coreplatestrike_label.grid(row=1,column=0,sticky='E')            self.coreplatestrikenum_label = tk1.Label(self.samplestats_frm, text="%s" % self.sample.coreplatestrike)            self.coreplatestrikenum_label.grid(row=1,column=1,sticky='W')            self.coreplatedip_label = tk1.Label(self.samplestats_frm, text="Current Core Plate Dip: ")            self.coreplatedip_label.grid(row=2,column=0,sticky='E')            self.coreplatedipnum_label = tk1.Label(self.samplestats_frm, text="%s" % self.sample.coreplatedip)            self.coreplatedipnum_label.grid(row=2,column=1,sticky='W')            self.samplestatspacer3_label = tk1.Label(self.samplestats_frm, text="  ")            self.samplestatspacer3_label.grid(row=3,column=0,sticky='NSEW')            self.samplestatspacer33_label = tk1.Label(self.samplestats_frm, text="  ")            self.samplestatspacer33_label.grid(row=3,column=3,sticky='NSEW')            self.newcoreplatestrike_label = tk1.Label(self.samplestats_frm, text="New Core Plate Strike: ")            self.newcoreplatestrike_label.grid(row=4,column=0,sticky='E')            self.newcoreplatestrike_entrybox = tk1.Entry(self.samplestats_frm,width=10)            self.newcoreplatestrike_entrybox.grid(row=4,column=1,sticky='W')            self.newcoreplatestrike_entrybox.insert(tk1.END, self.sample.coreplatestrike)            self.newcoreplatedip_label = tk1.Label(self.samplestats_frm, text="New Core Plate Dip: ")            self.newcoreplatedip_label.grid(row=5,column=0,sticky='E')            self.newcoreplatedip_entrybox = tk1.Entry(self.samplestats_frm,width=10)            self.newcoreplatedip_entrybox.grid(row=5,column=1,sticky='W')            self.newcoreplatedip_entrybox.insert(tk1.END, self.sample.coreplatedip)            self.samplebedding_label = tk1.Label(self.samplestats_frm, text="\nBedding Parameters:")            self.samplebedding_label.grid(row=6,column=0,columnspan=2,sticky='NSEW')            self.beddingstrike_label = tk1.Label(self.samplestats_frm, text="Current Bedding Strike: ")            self.beddingstrike_label.grid(row=7,column=0,sticky='E')            self.beddingstrikenum_label = tk1.Label(self.samplestats_frm, text="%s" % self.sample.beddingstrike)            self.beddingstrikenum_label.grid(row=7,column=1,sticky='W')            self.beddingdip_label = tk1.Label(self.samplestats_frm, text="Current Bedding Dip: ")            self.beddingdip_label.grid(row=8,column=0,sticky='E')            self.beddingdipnum_label = tk1.Label(self.samplestats_frm, text="%s" % self.sample.beddingdip)            self.beddingdipnum_label.grid(row=8,column=1,sticky='W')            rowadd = 6        else:            self.samplebedding_label = tk1.Label(self.samplestats_frm, text="\nBedding Parameters:")            self.samplebedding_label.grid(row=1,column=0,columnspan=2,sticky='NSEW')            self.beddingstrike_label = tk1.Label(self.samplestats_frm, text="Current Bedding StrikeP: ")            self.beddingstrike_label.grid(row=2,column=0,sticky='E')            self.beddingstrikenum_label = tk1.Label(self.samplestats_frm, text="Cannot Tell")            self.beddingstrikenum_label.grid(row=2,column=1,sticky='W')            self.beddingdip_label = tk1.Label(self.samplestats_frm, text="Current Bedding DipE: ")            self.beddingdip_label.grid(row=3,column=0,sticky='E')            self.beddingdipnum_label = tk1.Label(self.samplestats_frm, text="Cannot Tell")            self.beddingdipnum_label.grid(row=3,column=1,sticky='W')            rowadd = 1                    self.samplestatspacer9_label = tk1.Label(self.samplestats_frm, text="  ")        self.samplestatspacer9_label.grid(row=3+rowadd,column=0,sticky='NSEW')        self.inputstrike_frm = tk1.Frame(self.samplestats_frm)        self.inputstrike_frm.grid(row=4+rowadd,column=0,sticky='E')        self.newbeddingstrike_label = tk1.Label(self.inputstrike_frm, text="Select Type of New Rotation Axis:")        self.newbeddingstrike_label.pack(fill=tk1.X)                self.rotationaxis_var = tk1.StringVar()        self.rotationaxis_var.set("Right Strike")        self.rightstrike_radio = tk1.Radiobutton(self.inputstrike_frm, text="Right-Handed Strike\t",variable=self.rotationaxis_var,value="Right Strike")        self.rightstrike_radio.pack(fill=tk1.X)        CreateToolTip(self.rightstrike_radio, 30, -50, 250, self, \        'Right-Handed strike means thumb of the right hand points in the strike direction and fingers point in dip direction. Note: BOTH Rapid Squid and JR6 Spinner use right-handed strike for bedding.')        self.leftstrike_radio = tk1.Radiobutton(self.inputstrike_frm, text="Left-Handed Strike\t",variable=self.rotationaxis_var,value="Left Strike")        self.leftstrike_radio.pack(fill=tk1.X)        CreateToolTip(self.leftstrike_radio, 30, -50, 250, self, \        'Left-Handed strike means thumb of the left hand points in the strike direction and fingers point in dip direction.')        self.dipdir_radio = tk1.Radiobutton(self.inputstrike_frm, text="Dip Direction\t",variable=self.rotationaxis_var,value="Dip Direction")        self.dipdir_radio.pack(fill=tk1.X)        self.newrotationaxis_label = tk1.Label(self.inputstrike_frm, text="New Rotation Axis Value:")        self.newrotationaxis_label.pack(side=tk1.RIGHT)        self.newbeddingstrike_entrybox = tk1.Entry(self.samplestats_frm,width=10)        self.newbeddingstrike_entrybox.grid(row=4+rowadd,column=1,sticky='SW')        self.newbeddingstrike_entrybox.insert(tk1.END, self.sample.beddingstrike)        self.newbeddingdip_label = tk1.Label(self.samplestats_frm, text="New Bedding Dip: ")        self.newbeddingdip_label.grid(row=5+rowadd,column=0,sticky='E')        self.newbeddingdip_entrybox = tk1.Entry(self.samplestats_frm,width=10)        self.newbeddingdip_entrybox.grid(row=5+rowadd,column=1,sticky='W')        self.newbeddingdip_entrybox.insert(tk1.END, self.sample.beddingdip)        return    def calcrotatesave_sample(self,rotationtype):        gooddata = True        errormessage = "Bad input data."        if self.datatype != "LSQ":            try:                newcoreplatestrike = float(self.newcoreplatestrike_entrybox.get())                if (newcoreplatestrike < -360) or (newcoreplatestrike > 360):                    errormessage = errormessage + " Core Plate Strike must be between -360 and 360."                    gooddata = False            except:                errormessage = errormessage + " Core Plate Strike not a number."                gooddata = False            try:                newcoreplatedip = float(self.newcoreplatedip_entrybox.get())                if (newcoreplatedip < 0) or (newcoreplatedip > 180):                    errormessage = errormessage + " Core Plate Dip must be between 0 and 180."                    gooddata = False            except:                errormessage = errormessage + " Core Plate Dip not a number."                gooddata = False        try:            newbeddingstrike = float(self.newbeddingstrike_entrybox.get())            if (newbeddingstrike < -360) or (newbeddingstrike > 360):                errormessage = errormessage + " Bedding Strike must be between -360 and 360."                gooddata = False        except:            errormessage = errormessage + " Bedding strike not a number."            gooddata = False        try:            newbeddingdip = float(self.newbeddingdip_entrybox.get())            if (newbeddingdip < 0) or (newbeddingdip > 90):                errormessage = errormessage + " Bedding Dip must be between 0 and 90."                gooddata = False        except:            errormessage = errormessage + " Bedding dip not a number."            gooddata = False                    if not gooddata:            tkMessageBox.showwarning("Bad Input Data",errormessage)            return                backupdirnum = 0        for root, dirs, files in os.walk(self.filepath, topdown=False):            for name in dirs:                if "Backup" in name:                    newbackupnum_str = re.sub('[^0-9]', "", name)                    if (newbackupnum_str != ''):                        newbackupnum = int(newbackupnum_str)                        if newbackupnum > backupdirnum:                            backupdirnum = newbackupnum        backupdirnum = backupdirnum + 1        backupdirnum_str = str(backupdirnum)        backupdirname = "Backup" + backupdirnum_str        backupdirpath = self.filepath + "\\" + backupdirname        os.makedirs(backupdirpath)        sampledata = []        filesaved = True        if self.datatype == "Rapid": # Rapid Squid Data            sam_f = open(self.filepathandname,'r') # Opens the .sam file for reading to get sample names.            first_line = sam_f.readline()            first_line_List = first_line.split()            if first_line_List[0] == 'CIT':   # some .sam files have a "CIT" at the first line and the first sample isn't until the 4th line; others have the first sample on the third line. This does a check for which kind.                sitedecline = 1            else:                sitedecline = 0            for linenum, line in enumerate(sam_f):                if linenum == sitedecline:                    linelist = line.split()                    sitedec = float(linelist[2])                    break            sam_f.close()                        newcoreplatestrike = round(float(self.newcoreplatestrike_entrybox.get()),1)            newcoreplatedip = round(float(self.newcoreplatedip_entrybox.get()),1)            newbeddingstrike = round(float(self.newbeddingstrike_entrybox.get()),1)            newbeddingdip = round(float(self.newbeddingdip_entrybox.get()),1)            newcoreplatestrike_str = str("%.1f" % newcoreplatestrike)            newcoreplatedip_str = str("%.1f" % newcoreplatedip)            newbeddingstrike_str = str("%.1f" % newbeddingstrike)            newbeddingdip_str = str("%.1f" % newbeddingdip)            newcoreplatestrike = newcoreplatestrike + sitedec            #newbeddingstrike = newbeddingstrike + sitedec                        shutilcopy(self.filepath + "\\" + self.datafile, backupdirpath) # Save samples in backup folder            olddatafile = open(os.path.join(backupdirpath, self.datafile),'r') #Opens the sample file for reading.            savedatafile = open(os.path.join(self.filepath, self.datafile), 'w')            for linenum, line in enumerate(olddatafile):                if linenum == 0:                    savedatafile.write("%s" % line)                elif linenum == 1:                    firstpart = line[:7]                    newcpsspace = ( 6 - len(newcoreplatestrike_str) ) * " "                    newcpdspace = ( 6 - len(newcoreplatedip_str) ) * " "                    newbsspace = ( 6 - len(newbeddingstrike_str) ) * " "                    newbdspace = ( 6 - len(newbeddingdip_str) ) * " "                    lastpart = line[31:]                    savedatafile.write("%s%s%s%s%s%s%s%s%s%s" % (firstpart,newcpsspace,newcoreplatestrike_str,newcpdspace,newcoreplatedip_str,newbsspace,newbeddingstrike_str,newbdspace,newbeddingdip_str,lastpart) )                else:                    firstpart = line[:7]                    core_dec = float(line[46:51].replace(" ", ""))                    core_inc = float(line[52:57].replace(" ", ""))                                        strike_rotation_angle = (90 - newcoreplatestrike) % 360                                        newgeogset_strike = get_rotatedcoords("Left Strike",strike_rotation_angle,0,90,core_dec,core_inc)                    dip_rotation_angle = -1 * newcoreplatedip                    newgeogset = get_rotatedcoords("Left Strike",dip_rotation_angle,newcoreplatestrike,0,newgeogset_strike[0],newgeogset_strike[1])                    newgeogdec = round(newgeogset[0], 1)                    newgeoginc = round(newgeogset[1], 1)                    newgeogdec_str = str("%.1f" % newgeogdec)                    newgeoginc_str = str("%.1f" % newgeoginc)                                        dip_rotation_angle = -1 * newbeddingdip                    #dip_rotation_angle = 1 * newbeddingdip                    newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle,newbeddingstrike,0,newgeogdec,newgeoginc)                    newtiltdec = round(newtiltset[0], 1)                    newtiltinc = round(newtiltset[1], 1)                    newtiltdec_str = str("%.1f" % newtiltdec)                    newtiltinc_str = str("%.1f" % newtiltinc)                                        geogdecspace = ( 5 - len(newgeogdec_str) ) * " "                    geogincspace = ( 6 - len(newgeoginc_str) ) * " "                    tiltdecspace = ( 6 - len(newtiltdec_str) ) * " "                    tiltincspace = ( 6 - len(newtiltinc_str) ) * " "                    lastpart = line[30:]                    savedatafile.write("%s%s%s%s%s%s%s%s%s%s" % (firstpart,geogdecspace,newgeogdec_str,geogincspace,newgeoginc_str,tiltdecspace,newtiltdec_str,tiltincspace,newtiltinc_str,lastpart) )            olddatafile.close()            savedatafile.close()        elif self.datatype == "JR6":            try:                newcoreplatestrike = round(float(self.newcoreplatestrike_entrybox.get()),0)                newcoreplatedip = round(float(self.newcoreplatedip_entrybox.get()),0)                newbeddingstrike = round(float(self.newbeddingstrike_entrybox.get()),0)                newbeddingdip = round(float(self.newbeddingdip_entrybox.get()),0)                newcoreplatestrike_str = str("%.0f" % newcoreplatestrike)                newcoreplatedip_str = str("%.0f" % newcoreplatedip)                newbeddingstrike_str = str("%.0f" % newbeddingstrike)                newbeddingdip_str = str("%.0f" % newbeddingdip)                linenum = 0                shutilcopy(self.filepath + "\\" + self.currentfile, backupdirpath)                shutilcopy(self.filepath + "\\" + self.datafile, backupdirpath)                with open(os.path.join(backupdirpath, self.datafile)) as oldtxtfile:                    for totalines, line1 in enumerate(oldtxtfile):                        line2 = oldtxtfile.next()                        line3 = oldtxtfile.next()                        line4 = oldtxtfile.next()                        line5 = oldtxtfile.next()                        line6 = oldtxtfile.next()                        line7 = oldtxtfile.next()                        line8 = oldtxtfile.next()                        line9 = oldtxtfile.next()                        line10 = oldtxtfile.next()                        line11 = oldtxtfile.next()                        line12 = oldtxtfile.next()                        line13 = oldtxtfile.next()                        line14 = oldtxtfile.next()                        line15 = oldtxtfile.next()                        line16 = oldtxtfile.next()                        line17 = oldtxtfile.next()                        line18 = oldtxtfile.next()                        line19 = oldtxtfile.next()                        line20 = oldtxtfile.next()                        line21 = oldtxtfile.next()                        words_line2 = line2.split()                        if self.sitename == words_line2[0]:  # Automatically Determine if spaces are within samples names                            specnamespace = words_line2[0],words_line2[1]                            specimen = ''.join(specnamespace)                        elif words_line2[0] in self.samplelist:                            specimen = (words_line2[0])                        geogwords = line19.split() # Determine if there is geographic coordinates for a given sample                        try:                            if geogwords[0] == 'GEOGR.S.':                                line22 = oldtxtfile.next()   # process to line22 if geographic coordinates present.                            else:                                if specimen == self.sample.name: # Check if proper specimen is found                                    self.sample.geogpresent = False                        except:                            readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Geographic Coordinates at file line number %s in record %s of sample %s." % (totalines,linenum+1,self.sample.name), self)                        try:                            if geogwords[0] == 'TILT':                                tiltwords = geogwords                                line22 = oldtxtfile.next()   # process to line22 if tilt coordinates present but geographic coordinates not present.                            else:                                tiltwords = line20.split() # Determine if there is a tilt correction and use line 23 if there is a tilt correction                        except:                            readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,linenum+1,self.sample.name), self)                        try:                            if tiltwords and tiltwords[0] == 'TILT' and geogwords[0] != 'TILT':                                line23 = oldtxtfile.next()   # process to line23 if tilt coordinates present after geographic coordinates                            else:                                if specimen == self.sample.name and geogwords[0] != 'TILT': # Check if proper specimen is found                                    self.sample.tiltpresent = False                        except:                            readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,linenum+1,self.sample.name), self)                        linenum = linenum + 1                oldtxtfile.close()                                savetxtfile = open(os.path.join(self.filepath, self.datafile), 'w')                linenum = 0                with open(os.path.join(backupdirpath, self.datafile)) as oldtxtfile:                    for totlines, line1 in enumerate(oldtxtfile):                        line2 = oldtxtfile.next()                        line3 = oldtxtfile.next()                        line4 = oldtxtfile.next()                        line5 = oldtxtfile.next()                        line6 = oldtxtfile.next()                        line7 = oldtxtfile.next()                        line8 = oldtxtfile.next()                        line9 = oldtxtfile.next()                        line10 = oldtxtfile.next()                        line11 = oldtxtfile.next()                        line12 = oldtxtfile.next()                        line13 = oldtxtfile.next()                        line14 = oldtxtfile.next()                        line15 = oldtxtfile.next()                        line16 = oldtxtfile.next()                        line17 = oldtxtfile.next()                        line18 = oldtxtfile.next()                        line19 = oldtxtfile.next()                        line20 = oldtxtfile.next()                        line21 = oldtxtfile.next()                        line22 = "missing"                        line23 = "missing"                        words_line2 = line2.split()                               if self.sitename == words_line2[0]:  # Automatically Determine if spaces are within samples names                            specnamespace = words_line2[0],words_line2[1]                            specimen = ''.join(specnamespace)                        elif words_line2[0] in self.samplelist:                            specimen = (words_line2[0])                                                geogwords = line19.split() # Determine if there is geographic coordinates for a given sample                        try:                            if geogwords[0] == 'GEOGR.S.':                                line22 = oldtxtfile.next()   # process to line22 if geographic coordinates present.                        except:                            readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Geographic Coordinates at file line number %s in record %s of sample %s." % (totalines,linenum+1,self.sample.name), self)                        try:                            if geogwords[0] == 'TILT':                                tiltwords = geogwords                                line22 = oldtxtfile.next()   # process to line22 if tilt coordinates present but geographic coordinates not present.                            else:                                tiltwords = line20.split() # Determine if there is a tilt correction and use line 23 if there is a tilt correction                        except:                            readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,linenum+1,self.sample.name), self)                        try:                            if tiltwords and tiltwords[0] == 'TILT' and geogwords[0] != 'TILT':                                line23 = oldtxtfile.next()   # process to line23 if tilt coordinates present after geographic coordinates                        except:                            readerror("File Format Error in %s" % self.datafile,"File Format Error Trying to read Tilt Coordinates at file line number %s in record %s of sample %s." % (totalines,linenum+1,self.sample.name), self)                        if specimen == self.currentsample: # Check if proper specimen is found                            savetxtfile.write("%s%s%s" % (line1,line2,line3) )                            corewords = line18.split()                            core_dec = float(corewords[2])                            core_inc = float(corewords[3])                            strike_rotation_angle = (90 - newcoreplatestrike) % 360                            newgeogset_strike = get_rotatedcoords("Left Strike",strike_rotation_angle,0,90,core_dec,core_inc)                            dip_rotation_angle = -1 * newcoreplatedip                            newgeogset = get_rotatedcoords("Left Strike",dip_rotation_angle,newcoreplatestrike,0,newgeogset_strike[0],newgeogset_strike[1])                            newgeogdec = round(newgeogset[0], 0)                            newgeoginc = round(newgeogset[1], 0)                            newgeogdec_str = str("%.0f" % newgeogdec)                            newgeoginc_str = str("%.0f" % newgeoginc)                            dip_rotation_angle = -1 * newbeddingdip # This is the old version -- does it work? Is it because of left vs right handed strike?                            #dip_rotation_angle = 1 * newbeddingdip                            newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle,newbeddingstrike,0,newgeogdec,newgeoginc)                            newtiltdec = round(newtiltset[0], 0)                            newtiltinc = round(newtiltset[1], 0)                            newtiltdec_str = str("%.0f" % newtiltdec)                            newtiltinc_str = str("%.0f" % newtiltinc)                                                        newcpsspace = ( 3 - len(newcoreplatestrike_str) ) * " "                            newcpdspace = ( 2 - len(newcoreplatedip_str) ) * " "                            savetxtfile.write("SPEC.ANGLES                       %s%s    %s%s\n" % (newcpsspace,newcoreplatestrike_str,newcpdspace,newcoreplatedip_str) )                            restofline5 = line5[31:]                            newbsspace = ( 3 - len(newbeddingstrike_str) ) * " "                            newbdspace = ( 2 - len(newbeddingdip_str) ) * " "                            savetxtfile.write("TECT.ANGLES           %s%s    %s%s%s" % (newbsspace,newbeddingstrike_str,newbdspace,newbeddingdip_str,restofline5) )                            savetxtfile.write("%s%s%s%s%s%s%s%s%s%s%s%s%s" % (line6,line7,line8,line9,line10,line11,line12,line13,line14,line15,line16,line17,line18) )                            geogdecspace = ( 3 - len(newgeogdec_str) ) * " "                            geogincspace = ( 3 - len(newgeoginc_str) ) * " "                            savetxtfile.write("GEOGR.S.              %s%s         %s%s\n" % (geogdecspace,newgeogdec_str,geogincspace,newgeoginc_str) )                            tiltdecspace = ( 3 - len(newtiltdec_str) ) * " "                            tiltincspace = ( 3 - len(newtiltinc_str) ) * " "                            savetxtfile.write("TILT Corr.            %s%s         %s%s\n" % (tiltdecspace,newtiltdec_str,tiltincspace,newtiltinc_str) )                            if line23 != "missing":                                savetxtfile.write("%s%s%s" % (line21,line22,line23) )                            elif line22 != "missing":                                savetxtfile.write("%s%s%s" % (line20,line21,line22) )                            else:                                savetxtfile.write("%s%s%s" % (line19,line20,line21) )                                                    else:                            savetxtfile.write("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s" % (line1,line2,line3,line4,line5,line6,line7,line8,line9,line10,line11,line12,line13,line14,line15,line16,line17,line18,line19,line20,line21) )                            if line22 != "missing":                                savetxtfile.write("%s" % line22)                            if line23 != "missing":                                savetxtfile.write("%s" % line23)                            oldtxtfile.close()                savetxtfile.close()                                savejr6file = open(os.path.join(self.filepath, self.currentfile), 'w')                with open(os.path.join(backupdirpath, self.currentfile)) as oldjr6file:                    for line in oldjr6file:                        linelist = line.split()                        if self.sitename == linelist[0]:  # Automatically Determine if spaces are within samples names                            specnamespace = linelist[0],linelist[1]                            specimen = ''.join(specnamespace)                        elif linelist[0] in self.samplelist:                            specimen = (linelist[0])                                              if specimen == self.currentsample:                            firstpart = line[:41]                            newcpsspace = ( 3 - len(newcoreplatestrike_str) ) * " "                            newcpdspace = ( 4 - len(newcoreplatedip_str) ) * " "                            newbsspace = ( 4 - len(newbeddingstrike_str) ) * " "                            newbdspace = ( 4 - len(newbeddingdip_str) ) * " "                            lastpart = line[56:]                            savejr6file.write("%s%s%s%s%s%s%s%s%s%s" % (firstpart,newcpsspace,newcoreplatestrike_str,newcpdspace,newcoreplatedip_str,newbsspace,newbeddingstrike_str,newbdspace,newbeddingdip_str,lastpart) )                        else:                            savejr6file.write("%s" % line)                oldjr6file.close()                savejr6file.close()                            except StopIteration:                filesaved = False                pass        elif self.datatype == "LSQ":            newbeddingstrike = float(self.newbeddingstrike_entrybox.get())            newbeddingdip = float(self.newbeddingdip_entrybox.get())            shutilcopy(self.filepath + "\\" + self.datafile, backupdirpath) # Save samples in backup folder            olddatafile = open(os.path.join(backupdirpath, self.datafile),'r') #Opens the sample file for reading.            savelsqfile = open(os.path.join(self.filepath, self.datafile), 'w')            for line in olddatafile:                specimen = line[:14].rstrip()                if specimen == self.currentsample:                    firstpart = line[:33]                    geogdec = float(line[21:26].rstrip())                    geoginc = float(line[27:32].rstrip())                    lastpart = line[44:]                    dip_rotation_angle = -1 * newbeddingdip                    #dip_rotation_angle = 1 * newbeddingdip                    newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle,newbeddingstrike,0,geogdec,geoginc)                    newtiltdec = round(newtiltset[0], 1)                    newtiltinc = round(newtiltset[1], 1)                    newtiltdec_str = str("%.1f" % newtiltdec)                    newtiltinc_str = str("%.1f" % newtiltinc)                                        newtiltdecspace = ( 5 - len(newtiltdec_str) ) * " "                    newtiltincspace = ( 6 - len(newtiltinc_str) ) * " "                    savelsqfile.write("%s%s%s%s%s%s" % (firstpart,newtiltdecspace,newtiltdec_str,newtiltincspace,newtiltinc_str,lastpart) )                else:                    savelsqfile.write("%s" % (line) )                                olddatafile.close()            savelsqfile.close()        if filesaved:            self.plotsample_butt.destroy()            self.plotsample_butt = tk1.Button(self.canvas, text="Plot Sample\n(Rotated Data)", width=30, height=3,command=lambda: self.switchtoplot(rotationtype))            self.plotsample_butt.grid(row=2,column=4,sticky='SEW',padx=3,pady=4)            CreateToolTip(self.plotsample_butt, 30, -20, 200, self, \            'Plot Sample (Rotated Data)')            tkMessageBox.showinfo("File Saved","Data has been Rotated and Data Files Saved.\nBackups of prior data files are in the folder %s" % backupdirname)        return    def calcrotatesave_site(self,rotationtype):        gooddata = True        errormessage = "Bad input data."        try:            newbeddingstrike = float(self.newbeddingstrike_entrybox.get())            if (newbeddingstrike < -360) or (newbeddingstrike > 360):                errormessage = errormessage + " Bedding Strike must be between -360 and 360."                gooddata = False        except:            errormessage = errormessage + " Bedding strike not a number."            gooddata = False        try:            newbeddingdip = float(self.newbeddingdip_entrybox.get())            if (newbeddingdip < 0) or (newbeddingdip > 90):                errormessage = errormessage + " Bedding Dip must be between 0 and 90."                gooddata = False        except:            errormessage = errormessage + " Bedding dip not a number."            gooddata = False                    if not gooddata:            tkMessageBox.showwarning("Bad Input Data",errormessage)            return        backupdirnum = 0        for root, dirs, files in os.walk(self.filepath, topdown=False):            for name in dirs:                if "Backup" in name:                    newbackupnum_str = re.sub('[^0-9]', "", name)                    if (newbackupnum_str != ''):                        newbackupnum = int(newbackupnum_str)                        if newbackupnum > backupdirnum:                            backupdirnum = newbackupnum        backupdirnum = backupdirnum + 1        backupdirnum_str = str(backupdirnum)        backupdirname = "Backup" + backupdirnum_str        backupdirpath = self.filepath + "\\" + backupdirname        os.makedirs(backupdirpath)        sampledata = []        filesaved = True        if self.datatype == "Rapid": # Rapid Squid Data            sam_f = open(self.filepathandname,'r') #Opens the .sam file for reading to get sample names.            first_line = sam_f.readline()            first_line_List = first_line.split()            if first_line_List[0] == 'CIT':   # some .sam files have a "CIT" at the first line and the first sample isn't until the 4th line; others have the first sample on the third line. This does a check for which kind.                sitedecline = 1            else:                sitedecline = 0            for linenum, line in enumerate(sam_f):                if linenum == sitedecline:                    linelist = line.split()                    sitedec = float(linelist[2])                    break            sam_f.close()                        newbeddingstrike = round(float(self.newbeddingstrike_entrybox.get()),1)            newbeddingdip = round(float(self.newbeddingdip_entrybox.get()),1)            newbeddingstrike_str = str("%.1f" % newbeddingstrike)            newbeddingdip_str = str("%.1f" % newbeddingdip)            #newbeddingstrike = newbeddingstrike + sitedec            for samplefile in self.samplelist:                shutilcopy(self.filepath + "\\" + samplefile, backupdirpath) # Save samples in backup folder                            olddatafile = open(os.path.join(backupdirpath, samplefile),'r') #Opens the sample file for reading.                savedatafile = open(os.path.join(self.filepath, samplefile), 'w')                for linenum, line in enumerate(olddatafile):                    if linenum == 0:                        savedatafile.write("%s" % line)                    elif linenum == 1:                        firstpart = line[:19]                        newbsspace = ( 6 - len(newbeddingstrike_str) ) * " "                        newbdspace = ( 6 - len(newbeddingdip_str) ) * " "                        lastpart = line[31:]                        savedatafile.write("%s%s%s%s%s%s" % (firstpart,newbsspace,newbeddingstrike_str,newbdspace,newbeddingdip_str,lastpart) )                    else:                        firstpart = line[:19]                        geog_dec = float(line[7:12].replace(" ", ""))                        geog_inc = float(line[13:18].replace(" ", ""))                                                                        dip_rotation_angle = -1 * newbeddingdip                        #dip_rotation_angle = 1 * newbeddingdip                        newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle,newbeddingstrike,0,geog_dec,geog_inc)                        newtiltdec = round(newtiltset[0], 1)                        newtiltinc = round(newtiltset[1], 1)                        newtiltdec_str = str("%.1f" % newtiltdec)                        newtiltinc_str = str("%.1f" % newtiltinc)                                                tiltdecspace = ( 5 - len(newtiltdec_str) ) * " "                        tiltincspace = ( 6 - len(newtiltinc_str) ) * " "                        lastpart = line[30:]                        savedatafile.write("%s%s%s%s%s%s" % (firstpart,tiltdecspace,newtiltdec_str,tiltincspace,newtiltinc_str,lastpart) )                olddatafile.close()                savedatafile.close()        elif self.datatype == "JR6":            try:                newbeddingstrike = round(float(self.newbeddingstrike_entrybox.get()),0)                newbeddingdip = round(float(self.newbeddingdip_entrybox.get()),0)                newbeddingstrike_str = str("%.0f" % newbeddingstrike)                newbeddingdip_str = str("%.0f" % newbeddingdip)                shutilcopy(self.filepath + "\\" + self.currentfile, backupdirpath)                shutilcopy(self.filepath + "\\" + self.datafile, backupdirpath)                savetxtfile = open(os.path.join(self.filepath, self.datafile), 'w')                with open(os.path.join(backupdirpath, self.datafile)) as oldtxtfile:                    for line1 in oldtxtfile:                        line2 = oldtxtfile.next()                        line3 = oldtxtfile.next()                        line4 = oldtxtfile.next()                        line5 = oldtxtfile.next()                        line6 = oldtxtfile.next()                        line7 = oldtxtfile.next()                        line8 = oldtxtfile.next()                        line9 = oldtxtfile.next()                        line10 = oldtxtfile.next()                        line11 = oldtxtfile.next()                        line12 = oldtxtfile.next()                        line13 = oldtxtfile.next()                        line14 = oldtxtfile.next()                        line15 = oldtxtfile.next()                        line16 = oldtxtfile.next()                        line17 = oldtxtfile.next()                        line18 = oldtxtfile.next()                        line19 = oldtxtfile.next()                        line20 = oldtxtfile.next()                        line21 = oldtxtfile.next()                        line22 = "missing"                        line23 = "missing"                                                savetxtfile.write("%s%s%s%s" % (line1,line2,line3,line4) )                        firstpart = line5[:22]                        newbsspace = ( 3 - len(newbeddingstrike_str) ) * " "                        newbdspace = ( 6 - len(newbeddingdip_str) ) * " "                        lastpart = line5[31:]                        savetxtfile.write("%s%s%s%s%s%s" % (firstpart,newbsspace,newbeddingstrike_str,newbdspace,newbeddingdip_str,lastpart) )                        savetxtfile.write("%s%s%s%s%s%s%s%s%s%s%s%s%s" % (line6,line7,line8,line9,line10,line11,line12,line13,line14,line15,line16,line17,line18) )                        geogwords = line19.split()                         if geogwords[0] == 'GEOGR.S.':                            geogdec = float(geogwords[1])                            geoginc = float(geogwords[2])                            savetxtfile.write("%s" % line19)                            line22 = oldtxtfile.next()                        else:                            corewords = line18.split()                            geogdec = float(corewords[2])                            geoginc = float(corewords[3])                            geogdec_str = str("%.0f" % geogdec)                            geoginc_str = str("%.0f" % geoginc)                            geogdecspace = ( 3 - len(geogdec_str) ) * " "                            geogincspace = ( 12 - len(geoginc_str) ) * " "                            savetxtfile.write("GEOGR.S.              %s%s%s%s\n" % (geogdecspace,geogdec_str,geogincspace,geoginc_str) )                        dip_rotation_angle = -1 * newbeddingdip # This is the old version. Does it work? Is it because of left vs right handed strike?                        #dip_rotation_angle = 1 * newbeddingdip                        newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle,newbeddingstrike,0,geogdec,geoginc)                        newtiltdec = round(newtiltset[0], 0)                        newtiltinc = round(newtiltset[1], 0)                        newtiltdec_str = str("%.0f" % newtiltdec)                        newtiltinc_str = str("%.0f" % newtiltinc)                        tiltdecspace = ( 3 - len(newtiltdec_str) ) * " "                        tiltincspace = ( 3 - len(newtiltinc_str) ) * " "                        savetxtfile.write("TILT Corr.            %s%s         %s%s\n" % (tiltdecspace,newtiltdec_str,tiltincspace,newtiltinc_str) )                        tiltwords = line20.split()                        if tiltwords and tiltwords[0] == 'TILT':                            line23 = oldtxtfile.next()                                                    savetxtfile.write("-------------------------------------------\n\n\n")                                            oldtxtfile.close()                savetxtfile.close()                                savejr6file = open(os.path.join(self.filepath, self.currentfile), 'w')                with open(os.path.join(backupdirpath, self.currentfile)) as oldjr6file:                    for line in oldjr6file:                        firstpart = line[:49]                        newbsspace = ( 3 - len(newbeddingstrike_str) ) * " "                        newbdspace = ( 4 - len(newbeddingdip_str) ) * " "                        lastpart = line[56:]                        savejr6file.write("%s%s%s%s%s%s" % (firstpart,newbsspace,newbeddingstrike_str,newbdspace,newbeddingdip_str,lastpart) )                oldjr6file.close()                savejr6file.close()                            except StopIteration:                filesaved = False                pass        elif self.datatype == "LSQ":            newbeddingstrike = float(self.newbeddingstrike_entrybox.get())            newbeddingdip = float(self.newbeddingdip_entrybox.get())            shutilcopy(self.filepath + "\\" + self.datafile, backupdirpath) # Save samples in backup folder            olddatafile = open(os.path.join(backupdirpath, self.datafile),'r') #Opens the sample file for reading.            savelsqfile = open(os.path.join(self.filepath, self.datafile), 'w')            for line in olddatafile:                firstpart = line[:33]                geogdec = float(line[21:26].rstrip())                geoginc = float(line[27:32].rstrip())                lastpart = line[44:]                dip_rotation_angle = -1 * newbeddingdip                #dip_rotation_angle = 1 * newbeddingdip                newtiltset = get_rotatedcoords(self.rotationaxis_var.get(),dip_rotation_angle,newbeddingstrike,0,geogdec,geoginc)                newtiltdec = round(newtiltset[0], 1)                newtiltinc = round(newtiltset[1], 1)                newtiltdec_str = str("%.1f" % newtiltdec)                newtiltinc_str = str("%.1f" % newtiltinc)                                newtiltdecspace = ( 5 - len(newtiltdec_str) ) * " "                newtiltincspace = ( 6 - len(newtiltinc_str) ) * " "                savelsqfile.write("%s%s%s%s%s%s" % (firstpart,newtiltdecspace,newtiltdec_str,newtiltincspace,newtiltinc_str,lastpart) )                                olddatafile.close()            savelsqfile.close()        if filesaved:            self.plotsite_butt.destroy()            self.plotsite_butt = tk1.Button(self.canvas, text="Plot Site\n(Rotated Data)", width=30, height=3,command=lambda: self.switchtoplot(rotationtype))            self.plotsite_butt.grid(row=2,column=3,sticky='SEW',padx=8,pady=10)            CreateToolTip(self.plotsite_butt, 30, -20, 200, self, \            'Plot Site (Rotated Data)')            tkMessageBox.showinfo("File Saved","Data has been Rotated and Data Files Saved.\nBackups of prior data files are in the folder %s" % backupdirname)        return    def switchtoplot(self,rotationtype):        if self.datatype != "LSQ":            global zijcont, cont3D, eqcont, jjocont            self.plottype = "samples"            self.totsampcount = len(self.samplelist)            self.coordtype = "Tilt"            self.show_zij = True            self.show_3D = True            self.show_eq = True            self.show_jjo = True            zijcont = zij_setdefaults() # set Zijderveld Defaults            cont3D = setdefaults3D()  # set 3D defaults            eqcont = eq_setdefaults() # set Equal Area defaults            jjocont = jjo_setdefaults(self.plottype) # set J/Jo defaults                        if rotationtype in ["site","new-site"]:                self.sampleindex = 0            elif rotationtype in ["sample-first", "sample-current","new-sample"]:                self.sampleindex = self.samplelist.index(self.sample.name)            self.currentsample = self.samplelist[self.sampleindex]                    self.sample = Createnewsample(self,self.currentsample)            if self.datatype == "Rapid":                self.datafile = self.currentsample            elif self.datatype == "JR6":                self.datafile = self.sitename + ".txt"                            if rotationtype in ["new-site","new-sample"]:                self.domultiplot(True,True,False,"New")            else:                self.domultiplot(True,True,False,"Replot")        else:            global pmcont, fig            pmcont = plotmeans_setdefaults()            fig = Figure(figsize=(mainfigurewidth,mainfigureheight),facecolor='white')            plt.rcParams["font.family"] = "consolas"            plt.axis('off')            self.gs = gridspec.GridSpec(1, 1)            ax4 = fig.add_subplot(self.gs[0])                        ax4.clear()                        plt.subplots_adjust(left=0.05, right=1.15, top=1.15, bottom=0.05)            fig.tight_layout()            ax4.axis('equal')            ax4.axis('off')            ax4.axis([-pmcont.axeslength, pmcont.axeslength, -pmcont.axeslength, pmcont.axeslength])            plotfilemeans(self,pmcont,"newsite",ax4,True)        return    def switchtorotate(self,rotationtype):        if self.datatype == "LSQ":            self.datafile = self.currentfile            self.sitename = self.currentfile.replace(".lsq","")            self.samplelist = getsamplenames(self)            self.totsampcount = len(self.samplelist)            self.currentsample = self.samplelist[0]        elif self.datatype == "Rapid":            if rotationtype != "sample-current":                self.datafile = self.samplelist[0]                self.plottype = "samples"        self.coordtype = "Tilt"        self.dorotate(rotationtype)        return    def quitprogram(self):        root.destroy()        root.quit()        sys.exit()        return    def startover(self):##        global root##        global app##        ##        root.destroy()##        root.quit()##        root=tk1.Tk()##        root.title('root')##        if os.name == 'nt':##            root.wm_state('zoomed')##        else:##            w, h = root.winfo_screenwidth(), root.winfo_screenheight()##            root.geometry("%dx%d+0+0" % (w, h))##        root.update()##        root.deiconify()##        root.lift()##        root.attributes('-topmost',True)##        root.after_idle(root.attributes,'-topmost',False)##        app=Application(master=root)#        app.mainloop()        unbindeverything(self)        self.vertical_scrollbar.destroy()        self.horizontal_scrollbar.destroy()        self.maincanvas.destroy()        self.startprogram()        return    def next_sample(self):        if self.sampleindex == self.totsampcount-1:            headertext = ("No Next Sample.")            messagetext = ("Already displaying last sample in site. There is no next sample.")            tkMessageBox.showwarning(headertext,messagetext)        else:            self.sampleindex = self.sampleindex + 1            self.currentsample = self.samplelist[self.sampleindex]            if self.datatype == "Rapid":                samplepresent = os.path.isfile(os.path.join(self.filepath, self.currentsample))            else:                samplepresent = self.currentsample in self.samplelist            if not (samplepresent): # Check if sample file present.                headertext = ("Sample File %s Not Found." % self.currentsample)                messagetext = ("Sample File %s Not Found. Sample %s will therefore be skipped." % (self.currentsample, self.currentsample))                tkMessageBox.showwarning(headertext,messagetext)                self.next_sample()            else:                self.plotnewsample()        return    def prev_sample(self):        if self.sampleindex == 0:            headertext = ("No Previous Sample")            messagetext = ("Already displaying first sample in site. There is no previous sample.")            tkMessageBox.showwarning(headertext,messagetext)        else:            self.sampleindex = self.sampleindex - 1            self.currentsample = self.samplelist[self.sampleindex]            if self.datatype == "Rapid":                samplepresent = os.path.isfile(os.path.join(self.filepath, self.currentsample))            else:                samplepresent = self.currentsample in self.samplelist            if not (samplepresent): # Check if sample file present.                headertext = ("Sample File %s Not Found." % self.currentsample)                messagetext = ("Sample %s will therefore be skipped." % self.currentsample)                tkMessageBox.showwarning(headertext,messagetext)                self.prev_sample()            else:                self.plotnewsample()        return    def next_step(self):        if self.stepindex == self.totstepcount-1:            headertext = ("No Next Step.")            messagetext = ("Already displaying last step in site. There is no next step.")            tkMessageBox.showwarning(headertext,messagetext)        else:            self.stepindex = self.stepindex + 1            self.currentstep = self.steplist_clean[self.stepindex]            self.plotnewstep(False)        return    def prev_step(self):        if self.stepindex == 0:            headertext = ("No Previous step")            messagetext = ("Already displaying first step in site. There is no previous step.")            tkMessageBox.showwarning(headertext,messagetext)        else:            self.stepindex = self.stepindex - 1            self.currentstep = self.steplist_clean[self.stepindex]            self.plotnewstep(False)        return    def selectall_steplistbox(self):        self.steplistbox.selection_clear(0, tk1.END)        if self.plottype != "multiple" and self.anydups:            self.hidedups_var.set(False)        return        def updateshow(self):        if self.plottype == "samples":            currentstepselection = self.steplistbox.curselection()            for showstepindex, step in enumerate(self.sample.data):                if showstepindex in currentstepselection:                    step.show = False                else:                    step.show = True        elif self.plottype == "steps":            currentsampleselection = self.steplistbox.curselection()            for showsampleindex, showsample in enumerate(self.sitesteptext):                if showsampleindex in currentsampleselection:                    showsample.show = False                else:                    showsample.show = True        elif self.plottype == "multiple":            currentsampleselection = self.samplelistbox.curselection()            currentstepselection = self.steplistbox.curselection()            for showsampleindex, sample in enumerate(self.sitedata):                if showsampleindex in currentsampleselection:                    sample.show = True                else:                    sample.show = False                for showstepindex, stepname in enumerate(self.steplist_clean):                    showstep = not(showstepindex in currentstepselection)                    for stepindex, step in enumerate(sample.data):                        if step.dmagstep_clean == stepname:                            step.show = showstep                        if step.show and stepindex in sample.duplist:                            if self.hidedups_var.get():                                sample.data[stepindex].show = False                            else:                                sample.data[stepindex].show = True        return            def makedupsteplist(self):        self.anydups = False        if self.plottype == "samples":            dmagsteplist = []            for step in self.sample.data:                dmagsteplist.append(step.dmagstep_clean)            dupeset = Counter(dmagsteplist)            for dmagstep in dupeset:                if dupeset[dmagstep] >= 2:                    self.anydups = True                    errorlist = []                    stepindexlist = []                    for showindex, step in enumerate(self.sample.data):                        if step.dmagstep_clean == dmagstep:                            errorlist.append(step.error)                            stepindexlist.append(showindex)                    minerrorindex = errorlist.index(min(errorlist))                    for errorindex, showindex in enumerate(stepindexlist):                        if errorindex != minerrorindex:                            self.sample.duplist.append(showindex)        elif self.plottype == "steps":            self.duplist = []            samplenamelist = []            for showsample in self.sitesteptext:                samplenamelist.append(showsample.samplename)            dupeset = Counter(samplenamelist)            for samplename in dupeset:                if dupeset[samplename] >= 2:                    self.anydups = True                    errorlist = []                    showsampleindexlist = []                    for showindex, showsample in enumerate(self.sitesteptext):                        if showsample.samplename == samplename:                            errorlist.append(showsample.error)                            showsampleindexlist.append(showindex)                    minerrorindex = errorlist.index(min(errorlist))                    for errorindex, showindex in enumerate(showsampleindexlist):                        if errorindex != minerrorindex:                            self.duplist.append(showindex)        elif self.plottype == "multiple":            for sample in self.sitedata:                if sample.show:                    dmagsteplist = []                    for step in sample.data:                        dmagsteplist.append(step.dmagstep_clean)                    dupeset = Counter(dmagsteplist)                    for dmagstep in dupeset:                        if dupeset[dmagstep] >= 2:                            self.anydups = True                            errorlist = []                            stepindexlist = []                            for showindex, step in enumerate(sample.data):                                if step.dmagstep_clean == dmagstep:                                    errorlist.append(step.error)                                    stepindexlist.append(showindex)                            minerrorindex = errorlist.index(min(errorlist))                            for errorindex, showindex in enumerate(stepindexlist):                                if errorindex != minerrorindex:                                    sample.duplist.append(showindex)            if not self.anydups:            self.hidedups_var.set(False)            self.hidedups_chbutt.configure(state='disabled')        else:            CreateToolTip(self.hidedups_chbutt, 15, -80, 250, self, \            'Select (Hide) High-Error Duplicate Steps.\n\nWhen checked, steps with multiple measurements will only display the mesaurement with the lowest error.')        return        def onsteplistboxselect(self):        if self.plottype != "multiple":            currentselection = self.steplistbox.curselection()            if self.plottype == "steps":                duplist = self.duplist            elif self.plottype == "samples":                duplist = self.sample.duplist            for item in duplist: # Tried using "if not(all(items in currentselection for items in self.duplist)):" but python was being very buggy about it!                if not(item in currentselection):                    if duplist:                        self.hidedups_var.set(False)        return    def hidedupsteps(self):        if self.anydups:            if self.plottype == "samples":                for showindex in self.sample.duplist:                    if self.hidedups_var.get():                        self.sample.data[showindex].show = False                        self.steplistbox.select_set(showindex)                    else:                        self.sample.data[showindex].show = True                        self.steplistbox.select_clear(showindex)            elif self.plottype == "steps":                for showindex in self.duplist:                    if self.hidedups_var.get():                        self.sitesteptext[showindex].show = False                        self.steplistbox.select_set(showindex)                    else:                        self.sitesteptext[showindex].show = False                        self.steplistbox.select_clear(showindex)            elif self.plottype == "multiple":                for sample in self.sitedata:                    for step in sample.data:                        for showindex in sample.duplist:                            if self.hidedups_var.get():                                sample.data[showindex].show = False                            else:                                sample.data[showindex].show = True        return    def setspeczijradio(self):        if self.firstmove:            self.zijprojcontrol_var.set("East-West")            self.firstmove = False        else:            self.zijprojcontrol_var.set("Specified Direction")        return       def pm_scrollfunction(self,event):        self.scrollcanvas.configure(scrollregion=self.scrollcanvas.bbox("all"),width=200,height=200)    def ft_scrollfunction(self,event):        self.scrollcanvas.configure(scrollregion=self.scrollcanvas.bbox("all"),width=400,height=400)    def reset_mouselocation(self):        self.inscrollcanvas = False        self.insteplistbox = False        self.insamplebox = False        self.indatatextbox = False        self.inoutputtextbox = False        self.inzij_printdecsteplistbox = False        self.inzij_printincsteplistbox = False        self.inzij2_printdecsteplistbox = False        self.inzij2_printincsteplistbox = False        self.inzij3_printdecsamplabelbox = False        self.inzij3_printincsamplabelbox = False        self.inzij3_printsamplistbox = False        self.inzij3_printdecsteplistbox = False        self.inzij3_printincsteplistbox = False        self.ineq_printsteplistbox = False        self.ineq2_printsteplistbox = False        self.ineq3_printsamplabelbox = False        self.ineq3_printsamplistbox = False        self.ineq3_printsteplistbox = False        self.injjo_printsteplistbox = False        self.injjo2_printsteplistbox = False        self.injjo3_printsamplabelbox = False        self.injjo3_printsamplistbox = False        self.injjo3_printsteplistbox = False        return        def enterscrollcanvas(self,event):        self.inscrollcanvas = True        return    def leavescrollcanvas(self,event):        self.inscrollcanvas = False        self.focustopwin()        return    def ft_enterscrollcanvas(self,event):        self.inscrollcanvas = True        return    def ft_leavescrollcanvas(self,event):        self.inscrollcanvas = False        self.focustopwin()        return    def entersteplistbox(self,event):        self.insteplistbox = True        return    def leavesteplistbox(self,event):        self.insteplistbox = False        self.focustopwin()        return        def entersamplebox(self,event):        self.insamplebox = True        return    def leavesamplebox(self,event):        self.insamplebox = False        self.focustopwin()        return    def enterdatatextbox(self):        self.indatatextbox = True        return    def leavedatatextbox(self):        self.indatatextbox = False        self.focustopwin()        return    def enteroutputtextbox(self):        self.inoutputtextbox = True        return    def leaveoutputtextbox(self):        self.inoutputtextbox = False        self.focustopwin()        return    def focustopwin(self):        stackingorder = root.tk.eval('wm stackorder '+str(root))        stackingorder_list = stackingorder.split()        if not(tooltipshowing):            topwindow = stackingorder_list[-1]        else:            topwindow = stackingorder_list[-2]        if topwindow == str(root):            root.focus()        elif topwindow == str(zij_master):            zij_master.focus_set()        elif topwindow == str(zij2_master):            zij2_master.focus_set()        elif topwindow == str(zij3_master):            zij3_master.focus_set()        elif topwindow == str(master_3D):            master_3D.focus_set()        elif topwindow == str(master_3D2):            master_3D2.focus_set()        elif topwindow == str(master_3D3):            master_3D3.focus_set()        elif topwindow == str(eq_master):            eq_master.focus_set()        elif topwindow == str(eq2_master):            eq2_master.focus_set()        elif topwindow == str(eq3_master):            eq3_master.focus_set()        elif topwindow == str(jjo_master):            jjo_master.focus_set()        elif topwindow == str(jjo2_master):            jjo2_master.focus_set()        elif topwindow == str(jjo3_master):            jjo3_master.focus_set()        return        def doublemousewheel(self,event):        stackingorder = root.tk.eval('wm stackorder '+ str(root))        stackingorder_list = stackingorder.split()        if not(tooltipshowing):            topwindow = stackingorder_list[-1]        else:            topwindow = stackingorder_list[-2]        if topwindow == str(root):            self.enterdata_textbox.yview_scroll(int(-1*(event.delta/120)), "units")            self.output_textbox.yview_scroll(int(-1*(event.delta/120)), "units")        return    def _on_mousewheel_y(self, event):        global zijcont, zijcont2        #global zijcont3, eqcont, eqcont2, eqcont3, jjocont, jjocont2, jjocont3        stackingorder = root.tk.eval('wm stackorder '+str(root))        stackingorder_list = stackingorder.split()        if not(tooltipshowing):            topwindow = stackingorder_list[-1]        else:            topwindow = stackingorder_list[-2]        if topwindow == str(root):            if self.inscrollcanvas and ( (event.delta > 0 and self.pointlist_scrollbar.get()[0] > 0.0) or (event.delta < 0 and self.pointlist_scrollbar.get()[1] < 1.0) ):                self.scrollcanvas.yview_scroll(int(-1*(event.delta/120)), "units")            elif self.insteplistbox and ( (event.delta > 0 and self.step_scrollbar.get()[0] > 0.0) or (event.delta < 0 and self.step_scrollbar.get()[1] < 1.0) ):                self.steplistbox.yview_scroll(int(-1*(event.delta/120)), "units")            elif self.insamplebox and ( (event.delta > 0 and self.sample_scrollbar.get()[0] > 0.0) or (event.delta < 0 and self.sample_scrollbar.get()[1] < 1.0) ):                self.samplelistbox.yview_scroll(int(-1*(event.delta/120)), "units")            elif self.indatatextbox  and ( (event.delta > 0 and self.enterdata_yscrollbar.get()[0] > 0.0) or (event.delta < 0 and self.enterdata_yscrollbar.get()[1] < 1.0) ):                self.enterdata_textbox.yview_scroll(int(-1*(event.delta/120)), "units")            elif self.inoutputtextbox  and ( (event.delta > 0 and self.outputtextbox_yscrollbar.get()[0] > 0.0) or (event.delta < 0 and self.outputtextbox_yscrollbar.get()[1] < 1.0) ):                self.output_textbox.yview_scroll(int(-1*(event.delta/120)), "units")            else:                self.maincanvas.yview_scroll(int(-1*(event.delta/120)), "units")                    try:            if topwindow == str(zij_master):                if self.inzij_printdecsteplistbox and ( (event.delta > 0 and zijcont.printdec_scrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont.printdec_scrollbar.get()[1] < 1.0) ):                    zijcont.printdecsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.inzij_printincsteplistbox and ( (event.delta > 0 and zijcont.printinc_scrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont.printinc_scrollbar.get()[1] < 1.0) ):                    zijcont.printincsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.zij_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(zij2_master):                if self.inzij2_printdecsteplistbox and ( (event.delta > 0 and zijcont2.printdec_scrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont2.printdec_scrollbar.get()[1] < 1.0) ):                    zijcont2.printdecsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.inzij2_printincsteplistbox and ( (event.delta > 0 and zijcont2.printinc_scrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont2.printinc_scrollbar.get()[1] < 1.0) ):                    zijcont2.printincsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                                else:                    self.zij2_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        if 1 == 1:            if topwindow == str(zij3_master):                if self.inzij3_printdecsamplabelbox and ( (event.delta > 0 and zijcont3.printdecsamplabel_scrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont3.printdecsamplabel_scrollbar.get()[1] < 1.0) ):                    zijcont3.printdecsamplabel_box.yview_scroll(int(-1*(event.delta/120)), "units")                                    elif self.inzij3_printincsamplabelbox and ( (event.delta > 0 and zijcont3.printincsamplabel_scrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont3.printincsamplabel_scrollbar.get()[1] < 1.0) ):                    zijcont3.printincsamplabel_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.inzij3_printsamplistbox and ( (event.delta > 0 and zijcont3.printsamplist_scrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont3.printsamplist_scrollbar.get()[1] < 1.0) ):                    zijcont3.printsamplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.inzij3_printdecsteplistbox and ( (event.delta > 0 and zijcont3.print_decstepscrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont3.print_decstepscrollbar.get()[1] < 1.0) ):                    zijcont3.printdecsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.inzij3_printincsteplistbox and ( (event.delta > 0 and zijcont3.print_incstepscrollbar.get()[0] > 0.0) or (event.delta < 0 and zijcont3.print_incstepscrollbar.get()[1] < 1.0) ):                    zijcont3.printincsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.zij3_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        else:            pass        try:            if topwindow == str(master_3D):                self.plot3D_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(master_3D2):                self.plot3D2_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(master_3D3):                self.plot3D3_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass                        try:            if topwindow == str(eq_master):                if self.ineq_printsteplistbox and ( (event.delta > 0 and eqcont.print_scrollbar.get()[0] > 0.0) or (event.delta < 0 and eqcont.print_scrollbar.get()[1] < 1.0) ):                    eqcont.printsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.eq_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(eq2_master):                if self.ineq2_printsteplistbox and ( (event.delta > 0 and eqcont2.print_scrollbar.get()[0] > 0.0) or (event.delta < 0 and eqcont2.print_scrollbar.get()[1] < 1.0) ):                    eqcont2.printsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.eq2_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(eq3_master):                if self.ineq3_printsamplabelbox and ( (event.delta > 0 and eqcont3.printsamplabel_scrollbar.get()[0] > 0.0) or (event.delta < 0 and eqcont3.printsamplabel_scrollbar.get()[1] < 1.0) ):                    eqcont3.printsamplabel_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.ineq3_printsamplistbox and ( (event.delta > 0 and eqcont3.printsamplist_scrollbar.get()[0] > 0.0) or (event.delta < 0 and eqcont3.printsamplist_scrollbar.get()[1] < 1.0) ):                    eqcont3.printsamplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.ineq3_printsteplistbox and ( (event.delta > 0 and eqcont3.printsteplist_scrollbar.get()[0] > 0.0) or (event.delta < 0 and eqcont3.printsteplist_scrollbar.get()[1] < 1.0) ):                    eqcont3.printsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.eq3_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(jjo_master):                if self.injjo_printsteplistbox and ( (event.delta > 0 and jjocont.print_scrollbar.get()[0] > 0.0) or (event.delta < 0 and jjocont.print_scrollbar.get()[1] < 1.0) ):                    jjocont.printsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.jjo_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(jjo2_master):                if self.injjo2_printsteplistbox and ( (event.delta > 0 and jjocont2.print_scrollbar.get()[0] > 0.0) or (event.delta < 0 and jjocont2.print_scrollbar.get()[1] < 1.0) ):                    jjocont2.printsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.jjo2_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(jjo3_master):                if self.injjo3_printsamplabelbox and ( (event.delta > 0 and jjocont3.printsamplabel_scrollbar.get()[0] > 0.0) or (event.delta < 0 and jjocont3.printsamplabel_scrollbar.get()[1] < 1.0) ):                    jjocont3.printsamplabel_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.injjo3_printsamplistbox and ( (event.delta > 0 and jjocont3.printsamplist_scrollbar.get()[0] > 0.0) or (event.delta < 0 and jjocont3.printsamplist_scrollbar.get()[1] < 1.0) ):                    jjocont3.printsamplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                elif self.injjo3_printsteplistbox and ( (event.delta > 0 and jjocont3.printsteplist_scrollbar.get()[0] > 0.0) or (event.delta < 0 and jjocont3.printsteplist_scrollbar.get()[1] < 1.0) ):                    jjocont3.printsteplist_box.yview_scroll(int(-1*(event.delta/120)), "units")                else:                    self.jjo3_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(pmmaster):                self.pm_canvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(popup_master):                self.popup_maincanvas.yview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        return    def _on_mousewheel_x(self, event):        stackingorder = root.tk.eval('wm stackorder '+str(root))        stackingorder_list = stackingorder.split()        if not(tooltipshowing):            topwindow = stackingorder_list[-1]        else:            topwindow = stackingorder_list[-2]        if topwindow == str(root):            self.maincanvas.xview_scroll(int(-1*(event.delta/120)), "units")        try:            if topwindow == str(zij_master):                self.zij_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(zij2_master):                self.zij2_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(master_3D):                self.plot3D_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(master_3D2):                self.plot3D2_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass                        try:            if topwindow == str(eq_master):                self.eq_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(eq2_master):                self.eq2_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(jjo_master):                self.jjo_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(jjo2_master):                self.jjo2_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(pmmaster):                self.pm_canvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        try:            if topwindow == str(popup_master):                self.popup_maincanvas.xview_scroll(int(-1*(event.delta/120)), "units")        except:            pass        return    def bigmovewin(self,event):        stackingorder = root.tk.eval('wm stackorder '+str(root))        stackingorder_list = stackingorder.split()        if not(tooltipshowing):            topwindow = stackingorder_list[-1]        else:            topwindow = stackingorder_list[-2]        nowinmoveset = [self.enterdata_textbox, self.offset_entrybox, self.output_textbox, self.finaloutput_textbox]        if topwindow == str(root):            if not (root.focus_get() in nowinmoveset):                if event.keysym in ['Up','Prior']:                    self.maincanvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.maincanvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.maincanvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.maincanvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.maincanvas.yview_moveto(0.0)                    self.maincanvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.maincanvas.yview_moveto(1.0)                    self.maincanvas.xview_moveto(1.0)        try:            if topwindow == str(zij_master):                if event.keysym in ['Up','Prior']:                    self.zij_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.zij_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.zij_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.zij_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.zij_canvas.yview_moveto(0.0)                    self.zij_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.zij_canvas.yview_moveto(1.0)                    self.zij_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(zij2_master):                if event.keysym in ['Up','Prior']:                    self.zij2_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.zij2_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.zij2_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.zij2_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.zij2_canvas.yview_moveto(0.0)                    self.zij2_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.zij2_canvas.yview_moveto(1.0)                    self.zij2_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(master_3D):                if event.keysym in ['Up','Prior']:                    self.plot3D_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.plot3D_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.plot3D_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.plot3D_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.plot3D_canvas.yview_moveto(0.0)                    self.plot3D_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.plot3D_canvas.yview_moveto(1.0)                    self.plot3D_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(master_3D2):                if event.keysym in ['Up','Prior']:                    self.plot3D2_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.plot3D2_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.plot3D2_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.plot3D2_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.plot3D2_canvas.yview_moveto(0.0)                    self.plot3D2_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.plot3D2_canvas.yview_moveto(1.0)                    self.plot3D2_canvas.xview_moveto(1.0)        except:            pass                        try:            if topwindow == str(eq_master):                if event.keysym in ['Up','Prior']:                    self.eq_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.eq_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.eq_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.eq_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.eq_canvas.yview_moveto(0.0)                    self.eq_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.eq_canvas.yview_moveto(1.0)                    self.eq_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(eq2_master):                if event.keysym in ['Up','Prior']:                    self.eq2_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.eq2_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.eq2_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.eq2_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.eq2_canvas.yview_moveto(0.0)                    self.eq2_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.eq2_canvas.yview_moveto(1.0)                    self.eq2_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(jjo_master):                if event.keysym in ['Up','Prior']:                    self.jjo_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.jjo_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.jjo_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.jjo_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.jjo_canvas.yview_moveto(0.0)                    self.jjo_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.jjo_canvas.yview_moveto(1.0)                    self.jjo_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(jjo2_master):                if event.keysym in ['Up','Prior']:                    self.jjo2_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.jjo2_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.jjo2_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.jjo2_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.jjo2_canvas.yview_moveto(0.0)                    self.jjo2_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.jjo2_canvas.yview_moveto(1.0)                    self.jjo2_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(pmmaster):                if event.keysym in ['Up','Prior']:                    self.pm_canvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.pm_canvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.pm_canvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.pm_canvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.pm_canvas.yview_moveto(0.0)                    self.pm_canvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.pm_canvas.yview_moveto(1.0)                    self.pm_canvas.xview_moveto(1.0)        except:            pass        try:            if topwindow == str(popup_master):                if event.keysym in ['Up','Prior']:                    self.popup_maincanvas.yview_moveto(0.0)                elif event.keysym in ['Down','Next']:                    self.popup_maincanvas.yview_moveto(1.0)                elif event.keysym == 'Left':                    self.popup_maincanvas.xview_moveto(0.0)                elif event.keysym == 'Right':                    self.popup_maincanvas.xview_moveto(1.0)                elif event.keysym == 'Home':                    self.popup_maincanvas.yview_moveto(0.0)                    self.popup_maincanvas.xview_moveto(0.0)                elif event.keysym == 'End':                    self.popup_maincanvas.yview_moveto(1.0)                    self.popup_maincanvas.xview_moveto(1.0)        except:            pass        return    def arrowmovewin(self,event):        stackingorder = root.tk.eval('wm stackorder '+str(root))        stackingorder_list = stackingorder.split()        if not(tooltipshowing):            topwindow = stackingorder_list[-1]        else:            topwindow = stackingorder_list[-2]        noarrowmoveset = [self.enterdata_textbox, self.offset_entrybox, self.output_textbox, self.finaloutput_textbox]                if topwindow == str(root):            if not (root.focus_get() in noarrowmoveset):                if event.keysym == 'Up':                    self.maincanvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.maincanvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.maincanvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.maincanvas.xview_scroll(1, "units")        try:            if topwindow == str(zij_master):                if event.keysym == 'Up':                    self.zij_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.zij_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.zij_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.zij_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(zij2_master):                if event.keysym == 'Up':                    self.zij2_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.zij2_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.zij2_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.zij2_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(master_3D):                if event.keysym == 'Up':                    self.plot3D_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.plot3D_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.plot3D_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.plot3D_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(master_3D2):                if event.keysym == 'Up':                    self.plot3D2_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.plot3D2_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.plot3D2_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.plot3D2_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(eq_master):                if event.keysym == 'Up':                    self.eq_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.eq_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.eq_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.eq_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(eq2_master):                if event.keysym == 'Up':                    self.eq2_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.eq2_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.eq2_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.eq2_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(jjo_master):                if event.keysym == 'Up':                    self.jjo_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.jjo_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.jjo_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.jjo_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(jjo2_master):                if event.keysym == 'Up':                    self.jjo2_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.jjo2_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.jjo2_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.jjo2_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(pmmaster):                if event.keysym == 'Up':                    self.pm_canvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.pm_canvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.pm_canvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.pm_canvas.xview_scroll(1, "units")        except:            pass        try:            if topwindow == str(popup_master):                if event.keysym == 'Up':                    self.popup_maincanvas.yview_scroll(-1, "units")                elif event.keysym == 'Down':                    self.popup_maincanvas.yview_scroll(1, "units")                elif event.keysym == 'Left':                    self.popup_maincanvas.xview_scroll(-1, "units")                elif event.keysym == 'Right':                    self.popup_maincanvas.xview_scroll(1, "units")        except:            pass        return################ Main Program ################ostype = platform.system()root=tk1.Tk()root.title('root')if os.name == 'nt':    root.wm_state('zoomed')else:    w, h = root.winfo_screenwidth(), root.winfo_screenheight()    root.geometry("%dx%d+0+0" % (w, h))root.update()root.deiconify()root.lift()root.attributes('-topmost',True)root.after_idle(root.attributes,'-topmost',False)zij_master = Nonemaster_3D = Noneeq_master = Nonejjo_master = Nonezij2_master = Nonemaster_3D2 = Noneeq2_master = Nonejjo2_master = Nonezij3_master = Nonemaster_3D3 = Noneeq3_master = Nonejjo3_master = Nonepmmaster = Nonepopup_master = Nonetooltipshowing = Falseapp=Application(master=root)app.mainloop()sys.exit()